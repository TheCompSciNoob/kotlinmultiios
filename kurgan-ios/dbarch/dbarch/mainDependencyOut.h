//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: mainDependencyOut
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_MainDependencyOut")
#ifdef RESTRICT_MainDependencyOut
#define INCLUDE_ALL_MainDependencyOut 0
#else
#define INCLUDE_ALL_MainDependencyOut 1
#endif
#undef RESTRICT_MainDependencyOut
#ifdef INCLUDE_JavaxAnnotationRegEx_Checker
#define INCLUDE_JavaxAnnotationMetaTypeQualifierValidator 1
#endif
#ifdef INCLUDE_JavaxAnnotationNonnull_Checker
#define INCLUDE_JavaxAnnotationMetaTypeQualifierValidator 1
#endif
#ifdef INCLUDE_JavaxAnnotationNonnegative_Checker
#define INCLUDE_JavaxAnnotationMetaTypeQualifierValidator 1
#endif
#ifdef INCLUDE_JavaxAnnotationMatchesPattern_Checker
#define INCLUDE_JavaxAnnotationMetaTypeQualifierValidator 1
#endif
#ifdef INCLUDE_AndroidOsRemoteException
#define INCLUDE_AndroidUtilAndroidException 1
#endif
#ifdef INCLUDE_AndroidOsParcelFileDescriptor
#define INCLUDE_AndroidOsParcelable 1
#endif
#ifdef INCLUDE_AndroidOsLooper
#define INCLUDE_AndroidOsThreadNudger 1
#endif
#ifdef INCLUDE_AndroidOsBundle
#define INCLUDE_AndroidOsParcelable 1
#endif
#ifdef INCLUDE_AndroidOsBadParcelableException
#define INCLUDE_AndroidUtilAndroidRuntimeException 1
#endif
#ifdef INCLUDE_AndroidNetUri_PathPart
#define INCLUDE_AndroidNetUri_AbstractPart 1
#endif
#ifdef INCLUDE_AndroidNetUri_Part
#define INCLUDE_AndroidNetUri_AbstractPart 1
#endif
#ifdef INCLUDE_AndroidNetUri
#define INCLUDE_AndroidOsParcelable 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteTableLockedException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteStatement
#define INCLUDE_AndroidDatabaseSqliteSQLiteProgram 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteQuery
#define INCLUDE_AndroidDatabaseSqliteSQLiteProgram 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteProgram
#define INCLUDE_AndroidDatabaseSqliteSQLiteClosable 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteOutOfMemoryException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteMisuseException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteFullException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDoneException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDiskIOException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDirectCursorDriver
#define INCLUDE_AndroidDatabaseSqliteSQLiteCursorDriver 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDatatypeMismatchException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseLockedException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseCorruptException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteDatabase
#define INCLUDE_AndroidDatabaseSqliteSQLiteClosable 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteCursor
#define INCLUDE_AndroidDatabaseAbstractWindowedCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteConstraintException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteConnection
#define INCLUDE_AndroidOsCancellationSignal_OnCancelListener 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteBlobTooBigException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteAccessPermException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteAbortException
#define INCLUDE_AndroidDatabaseSqliteSQLiteException 1
#endif
#ifdef INCLUDE_AndroidDatabaseSqliteSQLiteException
#define INCLUDE_AndroidDatabaseSQLException 1
#endif
#ifdef INCLUDE_AndroidDatabaseMergeCursor
#define INCLUDE_AndroidDatabaseAbstractCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseMatrixCursor
#define INCLUDE_AndroidDatabaseAbstractCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseDefaultDatabaseErrorHandler
#define INCLUDE_AndroidDatabaseDatabaseErrorHandler 1
#endif
#ifdef INCLUDE_AndroidDatabaseDataSetObservable
#define INCLUDE_AndroidDatabaseObservable 1
#endif
#ifdef INCLUDE_AndroidDatabaseCursorWindow
#define INCLUDE_AndroidDatabaseSqliteSQLiteClosable 1
#endif
#ifdef INCLUDE_AndroidDatabaseCrossProcessCursorWrapper
#define INCLUDE_AndroidDatabaseCursorWrapper 1
#define INCLUDE_AndroidDatabaseCrossProcessCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseCursorWrapper
#define INCLUDE_AndroidDatabaseCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseContentObservable
#define INCLUDE_AndroidDatabaseObservable 1
#endif
#ifdef INCLUDE_AndroidDatabaseAbstractWindowedCursor
#define INCLUDE_AndroidDatabaseAbstractCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseAbstractCursor_SelfContentObserver
#define INCLUDE_AndroidDatabaseContentObserver 1
#endif
#ifdef INCLUDE_AndroidDatabaseAbstractCursor
#define INCLUDE_AndroidDatabaseCrossProcessCursor 1
#endif
#ifdef INCLUDE_AndroidDatabaseCrossProcessCursor
#define INCLUDE_AndroidDatabaseCursor 1
#endif
#ifdef INCLUDE_AndroidContentIOSContext
#define INCLUDE_AndroidAppApplication 1
#endif
#ifdef INCLUDE_AndroidArchPersistenceDbSupportSQLiteStatement
#define INCLUDE_AndroidArchPersistenceDbSupportSQLiteProgram 1
#endif
#ifdef INCLUDE_AndroidArchPersistenceDbSimpleSQLiteQuery
#define INCLUDE_AndroidArchPersistenceDbSupportSQLiteQuery 1
#endif
#ifdef INCLUDE_AndroidAppSharedPreferencesImpl_EditorImpl
#define INCLUDE_AndroidContentSharedPreferences_Editor 1
#endif
#ifdef INCLUDE_AndroidAppSharedPreferencesImpl
#define INCLUDE_AndroidContentSharedPreferences 1
#endif
#ifdef INCLUDE_AndroidAppApplication
#define INCLUDE_AndroidContentContext 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (DopplRuntime_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_DopplRuntime))
#define DopplRuntime_

@interface DopplRuntime : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)start;

@end

J2OBJC_EMPTY_STATIC_INIT(DopplRuntime)

FOUNDATION_EXPORT void DopplRuntime_init(DopplRuntime *self);

FOUNDATION_EXPORT DopplRuntime *new_DopplRuntime_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT DopplRuntime *create_DopplRuntime_init(void);

FOUNDATION_EXPORT void DopplRuntime_start(void);

J2OBJC_TYPE_LITERAL_HEADER(DopplRuntime)

#endif

#if !defined (AndroidAnnotationNonNull_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAnnotationNonNull))
#define AndroidAnnotationNonNull_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidAnnotationNonNull < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAnnotationNonNull)

J2OBJC_TYPE_LITERAL_HEADER(AndroidAnnotationNonNull)

#endif

#if !defined (AndroidAnnotationNullable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAnnotationNullable))
#define AndroidAnnotationNullable_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidAnnotationNullable < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAnnotationNullable)

J2OBJC_TYPE_LITERAL_HEADER(AndroidAnnotationNullable)

#endif

#if !defined (AndroidAnnotationSuppressLint_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAnnotationSuppressLint))
#define AndroidAnnotationSuppressLint_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidAnnotationSuppressLint < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAnnotationSuppressLint)

J2OBJC_TYPE_LITERAL_HEADER(AndroidAnnotationSuppressLint)

#endif

#if !defined (AndroidAnnotationTargetApi_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAnnotationTargetApi))
#define AndroidAnnotationTargetApi_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidAnnotationTargetApi < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAnnotationTargetApi)

J2OBJC_TYPE_LITERAL_HEADER(AndroidAnnotationTargetApi)

#endif

#if !defined (AndroidContentContext_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidContentContext))
#define AndroidContentContext_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsLooper;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoFileInputStream;
@class JavaIoFileOutputStream;
@protocol AndroidContentSharedPreferences;
@protocol AndroidDatabaseDatabaseErrorHandler;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;

@interface AndroidContentContext : NSObject

+ (jint)MODE_PRIVATE;

+ (jint)MODE_WORLD_READABLE;

+ (jint)MODE_WORLD_WRITEABLE;

+ (jint)MODE_APPEND;

+ (jint)MODE_ENABLE_WRITE_AHEAD_LOGGING;

#pragma mark Public

- (instancetype __nonnull)init;

- (IOSObjectArray *)databaseList;

- (jboolean)deleteDatabaseWithNSString:(NSString *)name;

- (jboolean)deleteFileWithNSString:(NSString *)name;

- (IOSObjectArray *)fileList;

- (AndroidContentContext *)getApplicationContext;

- (JavaIoFile *)getCacheDir;

- (JavaIoFile *)getDatabasePathWithNSString:(NSString *)name;

- (JavaIoFile *)getDirWithNSString:(NSString *)name
                           withInt:(jint)mode;

- (JavaIoFile * __nullable)getExternalFilesDirWithNSString:(NSString * __nullable)type;

- (IOSObjectArray *)getExternalFilesDirsWithNSString:(NSString *)type;

- (JavaIoFile *)getFilesDir;

- (JavaIoFile *)getFileStreamPathWithNSString:(NSString *)name;

- (AndroidOsLooper *)getMainLooper;

- (id<AndroidContentSharedPreferences>)getSharedPreferencesWithNSString:(NSString *)name
                                                                withInt:(jint)mode;

- (JavaIoFile *)getSharedPrefsFileWithNSString:(NSString *)name;

- (JavaIoFileInputStream *)openFileInputWithNSString:(NSString *)name;

- (JavaIoFileOutputStream *)openFileOutputWithNSString:(NSString *)name
                                               withInt:(jint)mode;

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler> __nullable)errorHandler;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentContext)

inline jint AndroidContentContext_get_MODE_PRIVATE(void);
#define AndroidContentContext_MODE_PRIVATE 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_PRIVATE, jint)

inline jint AndroidContentContext_get_MODE_WORLD_READABLE(void);
#define AndroidContentContext_MODE_WORLD_READABLE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_WORLD_READABLE, jint)

inline jint AndroidContentContext_get_MODE_WORLD_WRITEABLE(void);
#define AndroidContentContext_MODE_WORLD_WRITEABLE 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_WORLD_WRITEABLE, jint)

inline jint AndroidContentContext_get_MODE_APPEND(void);
#define AndroidContentContext_MODE_APPEND 32768
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_APPEND, jint)

inline jint AndroidContentContext_get_MODE_ENABLE_WRITE_AHEAD_LOGGING(void);
#define AndroidContentContext_MODE_ENABLE_WRITE_AHEAD_LOGGING 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidContentContext, MODE_ENABLE_WRITE_AHEAD_LOGGING, jint)

FOUNDATION_EXPORT void AndroidContentContext_init(AndroidContentContext *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentContext)

#endif

#if !defined (AndroidAppApplication_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAppApplication))
#define AndroidAppApplication_

@interface AndroidAppApplication : AndroidContentContext

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppApplication)

FOUNDATION_EXPORT void AndroidAppApplication_init(AndroidAppApplication *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidAppApplication)

#endif

#if !defined (AndroidAppQueuedWork_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAppQueuedWork))
#define AndroidAppQueuedWork_

@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutorService;

@interface AndroidAppQueuedWork : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)addWithJavaLangRunnable:(id<JavaLangRunnable>)finisher;

+ (void)removeWithJavaLangRunnable:(id<JavaLangRunnable>)finisher;

+ (id<JavaUtilConcurrentExecutorService>)singleThreadExecutor;

+ (void)waitToFinish;

@end

J2OBJC_STATIC_INIT(AndroidAppQueuedWork)

FOUNDATION_EXPORT void AndroidAppQueuedWork_init(AndroidAppQueuedWork *self);

FOUNDATION_EXPORT AndroidAppQueuedWork *new_AndroidAppQueuedWork_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidAppQueuedWork *create_AndroidAppQueuedWork_init(void);

FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_singleThreadExecutor(void);

FOUNDATION_EXPORT void AndroidAppQueuedWork_addWithJavaLangRunnable_(id<JavaLangRunnable> finisher);

FOUNDATION_EXPORT void AndroidAppQueuedWork_removeWithJavaLangRunnable_(id<JavaLangRunnable> finisher);

FOUNDATION_EXPORT void AndroidAppQueuedWork_waitToFinish(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidAppQueuedWork)

#endif

#if !defined (AndroidContentSharedPreferences_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidContentSharedPreferences))
#define AndroidContentSharedPreferences_

@protocol AndroidContentSharedPreferences_Editor;
@protocol AndroidContentSharedPreferences_OnSharedPreferenceChangeListener;
@protocol JavaUtilMap;

@protocol AndroidContentSharedPreferences < JavaObject >

- (id<JavaUtilMap>)getAll;

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defValue;

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defValue;

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defValue;

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defValue;

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defValue;

- (jboolean)containsWithNSString:(NSString *)key;

- (id<AndroidContentSharedPreferences_Editor>)edit;

- (void)registerOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:(id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener>)listener;

- (void)unregisterOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:(id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener>)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentSharedPreferences)

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentSharedPreferences)

#endif

#if !defined (AndroidAppSharedPreferencesImpl_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAppSharedPreferencesImpl))
#define AndroidAppSharedPreferencesImpl_

@class AndroidOsFileUtils_FileStatus;
@class AndroidOsHandler;
@class JavaIoFile;
@protocol AndroidContentSharedPreferences_Editor;
@protocol AndroidContentSharedPreferences_OnSharedPreferenceChangeListener;
@protocol JavaUtilMap;

@interface AndroidAppSharedPreferencesImpl : NSObject < AndroidContentSharedPreferences >

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                     withInt:(jint)mode
                             withJavaUtilMap:(id<JavaUtilMap>)initialContents
                        withAndroidOsHandler:(AndroidOsHandler *)mainHandler;

- (jboolean)containsWithNSString:(NSString *)key;

- (id<AndroidContentSharedPreferences_Editor>)edit;

- (id<JavaUtilMap>)getAll;

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defValue;

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defValue;

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defValue;

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defValue;

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defValue;

- (jboolean)hasFileChangedUnexpectedly;

- (jboolean)isLoaded;

- (void)registerOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:(id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener>)listener;

- (void)replaceWithJavaUtilMap:(id<JavaUtilMap>)newContents
withAndroidOsFileUtils_FileStatus:(AndroidOsFileUtils_FileStatus *)stat;

- (void)unregisterOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:(id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener>)listener;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidAppSharedPreferencesImpl)

FOUNDATION_EXPORT void AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(AndroidAppSharedPreferencesImpl *self, JavaIoFile *file, jint mode, id<JavaUtilMap> initialContents, AndroidOsHandler *mainHandler);

FOUNDATION_EXPORT AndroidAppSharedPreferencesImpl *new_AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(JavaIoFile *file, jint mode, id<JavaUtilMap> initialContents, AndroidOsHandler *mainHandler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidAppSharedPreferencesImpl *create_AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(JavaIoFile *file, jint mode, id<JavaUtilMap> initialContents, AndroidOsHandler *mainHandler);

J2OBJC_TYPE_LITERAL_HEADER(AndroidAppSharedPreferencesImpl)

#endif

#if !defined (AndroidContentSharedPreferences_Editor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidContentSharedPreferences_Editor))
#define AndroidContentSharedPreferences_Editor_

@protocol AndroidContentSharedPreferences_Editor < JavaObject >

- (id<AndroidContentSharedPreferences_Editor>)putStringWithNSString:(NSString *)key
                                                       withNSString:(NSString *)value;

- (id<AndroidContentSharedPreferences_Editor>)putIntWithNSString:(NSString *)key
                                                         withInt:(jint)value;

- (id<AndroidContentSharedPreferences_Editor>)putLongWithNSString:(NSString *)key
                                                         withLong:(jlong)value;

- (id<AndroidContentSharedPreferences_Editor>)putFloatWithNSString:(NSString *)key
                                                         withFloat:(jfloat)value;

- (id<AndroidContentSharedPreferences_Editor>)putBooleanWithNSString:(NSString *)key
                                                         withBoolean:(jboolean)value;

- (id<AndroidContentSharedPreferences_Editor>)removeWithNSString:(NSString *)key;

- (id<AndroidContentSharedPreferences_Editor>)clear;

- (jboolean)commit;

- (void)apply;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentSharedPreferences_Editor)

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentSharedPreferences_Editor)

#endif

#if !defined (AndroidAppSharedPreferencesImpl_EditorImpl_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidAppSharedPreferencesImpl_EditorImpl))
#define AndroidAppSharedPreferencesImpl_EditorImpl_

@class AndroidAppSharedPreferencesImpl;
@protocol AndroidContentSharedPreferences_Editor;

@interface AndroidAppSharedPreferencesImpl_EditorImpl : NSObject < AndroidContentSharedPreferences_Editor >

#pragma mark Public

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl:(AndroidAppSharedPreferencesImpl *)outer$;

- (void)apply;

- (id<AndroidContentSharedPreferences_Editor>)clear;

- (jboolean)commit;

- (id<AndroidContentSharedPreferences_Editor>)putBooleanWithNSString:(NSString *)key
                                                         withBoolean:(jboolean)value;

- (id<AndroidContentSharedPreferences_Editor>)putFloatWithNSString:(NSString *)key
                                                         withFloat:(jfloat)value;

- (id<AndroidContentSharedPreferences_Editor>)putIntWithNSString:(NSString *)key
                                                         withInt:(jint)value;

- (id<AndroidContentSharedPreferences_Editor>)putLongWithNSString:(NSString *)key
                                                         withLong:(jlong)value;

- (id<AndroidContentSharedPreferences_Editor>)putStringWithNSString:(NSString *)key
                                                       withNSString:(NSString *)value;

- (id<AndroidContentSharedPreferences_Editor>)removeWithNSString:(NSString *)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppSharedPreferencesImpl_EditorImpl)

FOUNDATION_EXPORT void AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(AndroidAppSharedPreferencesImpl_EditorImpl *self, AndroidAppSharedPreferencesImpl *outer$);

FOUNDATION_EXPORT AndroidAppSharedPreferencesImpl_EditorImpl *new_AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(AndroidAppSharedPreferencesImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidAppSharedPreferencesImpl_EditorImpl *create_AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(AndroidAppSharedPreferencesImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AndroidAppSharedPreferencesImpl_EditorImpl)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteQuery_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteQuery))
#define AndroidArchPersistenceDbSupportSQLiteQuery_

@protocol AndroidArchPersistenceDbSupportSQLiteProgram;

@protocol AndroidArchPersistenceDbSupportSQLiteQuery < JavaObject >

- (NSString * __nonnull)getSql;

- (void)bindTo:(id<AndroidArchPersistenceDbSupportSQLiteProgram> __nonnull)statement;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteQuery)

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteQuery)

#endif

#if !defined (AndroidArchPersistenceDbSimpleSQLiteQuery_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSimpleSQLiteQuery))
#define AndroidArchPersistenceDbSimpleSQLiteQuery_

@class IOSObjectArray;
@protocol AndroidArchPersistenceDbSupportSQLiteProgram;

@interface AndroidArchPersistenceDbSimpleSQLiteQuery : NSObject < AndroidArchPersistenceDbSupportSQLiteQuery >

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)query;

- (instancetype __nonnull)initWithNSString:(NSString *)query
                         withNSObjectArray:(IOSObjectArray *)bindArgs;

+ (void)bindWithAndroidArchPersistenceDbSupportSQLiteProgram:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)statement
                                           withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)bindTo:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)statement;

- (NSString *)getSql;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSimpleSQLiteQuery)

FOUNDATION_EXPORT void AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(AndroidArchPersistenceDbSimpleSQLiteQuery *self, NSString *query, IOSObjectArray *bindArgs);

FOUNDATION_EXPORT AndroidArchPersistenceDbSimpleSQLiteQuery *new_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(NSString *query, IOSObjectArray *bindArgs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchPersistenceDbSimpleSQLiteQuery *create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(NSString *query, IOSObjectArray *bindArgs);

FOUNDATION_EXPORT void AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(AndroidArchPersistenceDbSimpleSQLiteQuery *self, NSString *query);

FOUNDATION_EXPORT AndroidArchPersistenceDbSimpleSQLiteQuery *new_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(NSString *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchPersistenceDbSimpleSQLiteQuery *create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(NSString *query);

FOUNDATION_EXPORT void AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withNSObjectArray_(id<AndroidArchPersistenceDbSupportSQLiteProgram> statement, IOSObjectArray *bindArgs);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSimpleSQLiteQuery)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteDatabase_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteDatabase))
#define AndroidArchPersistenceDbSupportSQLiteDatabase_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class AndroidContentContentValues;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;
@class JavaUtilLocale;
@protocol AndroidArchPersistenceDbSupportSQLiteQuery;
@protocol AndroidArchPersistenceDbSupportSQLiteStatement;
@protocol AndroidDatabaseCursor;
@protocol AndroidDatabaseSqliteSQLiteTransactionListener;
@protocol JavaUtilList;

@protocol AndroidArchPersistenceDbSupportSQLiteDatabase < JavaIoCloseable, JavaObject >

- (id<AndroidArchPersistenceDbSupportSQLiteStatement>)compileStatementWithNSString:(NSString *)sql;

- (void)beginTransaction;

- (void)beginTransactionNonExclusive;

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener;

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener;

- (void)endTransaction;

- (void)setTransactionSuccessful;

- (jboolean)inTransaction;

- (jboolean)isDbLockedByCurrentThread;

- (jboolean)yieldIfContendedSafely;

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay;

- (jint)getVersion;

- (void)setVersionWithInt:(jint)version_;

- (jlong)getMaximumSize;

- (jlong)setMaximumSizeWithLong:(jlong)numBytes;

- (jlong)getPageSize;

- (void)setPageSizeWithLong:(jlong)numBytes;

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)query;

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)query
                             withNSObjectArray:(IOSObjectArray *)bindArgs;

- (id<AndroidDatabaseCursor>)queryWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)query;

- (id<AndroidDatabaseCursor>)queryWithAndroidArchPersistenceDbSupportSQLiteQuery:(id<AndroidArchPersistenceDbSupportSQLiteQuery>)query
                                                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jlong)insertWithNSString:(NSString *)table
                    withInt:(jint)conflictAlgorithm
withAndroidContentContentValues:(AndroidContentContentValues *)values;

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSObjectArray:(IOSObjectArray *)whereArgs;

- (jint)updateWithNSString:(NSString *)table
                   withInt:(jint)conflictAlgorithm
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSObjectArray:(IOSObjectArray *)whereArgs;

- (void)execSQLWithNSString:(NSString *)sql;

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs;

- (jboolean)isReadOnly;

- (jboolean)isOpen;

- (jboolean)needUpgradeWithInt:(jint)newVersion;

- (NSString *)getPath;

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize;

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable;

- (jboolean)enableWriteAheadLogging;

- (void)disableWriteAheadLogging;

- (jboolean)isWriteAheadLoggingEnabled;

- (id<JavaUtilList>)getAttachedDbs;

- (jboolean)isDatabaseIntegrityOk;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteDatabase)

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteDatabase)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteOpenHelper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteOpenHelper))
#define AndroidArchPersistenceDbSupportSQLiteOpenHelper_

@protocol AndroidArchPersistenceDbSupportSQLiteDatabase;

@protocol AndroidArchPersistenceDbSupportSQLiteOpenHelper < JavaObject >

- (NSString *)getDatabaseName;

- (void)setWriteAheadLoggingEnabledWithBoolean:(jboolean)enabled;

- (id<AndroidArchPersistenceDbSupportSQLiteDatabase>)getWritableDatabase;

- (id<AndroidArchPersistenceDbSupportSQLiteDatabase>)getReadableDatabase;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteOpenHelper)

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteOpenHelper)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback))
#define AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_

@protocol AndroidArchPersistenceDbSupportSQLiteDatabase;

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback : NSObject {
 @public
  jint version__;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)version_;

- (void)onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

- (void)onCorruptionWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

- (void)onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

- (void)onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                             withInt:(jint)oldVersion
                                                             withInt:(jint)newVersion;

- (void)onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db;

- (void)onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                           withInt:(jint)oldVersion
                                                           withInt:(jint)newVersion;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback)

FOUNDATION_EXPORT void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_initWithInt_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *self, jint version_);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration))
#define AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_

@class AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;
@class AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;
@class AndroidContentContext;

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration : NSObject {
 @public
  AndroidContentContext *context_;
  NSString *name_;
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback_;
}

#pragma mark Public

+ (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)builderWithAndroidContentContext:(AndroidContentContext *)context;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext * __nonnull)context
                                           withNSString:(NSString * __nullable)name
withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback * __nonnull)callback;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration)

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, context_, AndroidContentContext *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, name_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, callback_, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)

FOUNDATION_EXPORT void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *self, AndroidContentContext *context, NSString *name, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback);

FOUNDATION_EXPORT AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *new_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback);

FOUNDATION_EXPORT AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_builderWithAndroidContentContext_(AndroidContentContext *context);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder))
#define AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_

@class AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;
@class AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;
@class AndroidContentContext;

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder : NSObject {
 @public
  AndroidContentContext *mContext_;
  NSString *mName_;
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *mCallback_;
}

#pragma mark Public

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *)build;

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)callbackWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback * __nonnull)callback;

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)nameWithNSString:(NSString * __nullable)name;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext * __nonnull)context;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder)

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, mContext_, AndroidContentContext *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, mName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, mCallback_, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *)

FOUNDATION_EXPORT void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *self, AndroidContentContext *context);

FOUNDATION_EXPORT AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *new_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidContentContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidContentContext *context);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory))
#define AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory_

@class AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;
@protocol AndroidArchPersistenceDbSupportSQLiteOpenHelper;

@protocol AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory < JavaObject >

- (id<AndroidArchPersistenceDbSupportSQLiteOpenHelper>)createWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *)configuration;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory)

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteProgram_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteProgram))
#define AndroidArchPersistenceDbSupportSQLiteProgram_

#define RESTRICT_JavaLangAutoCloseable 1
#define INCLUDE_JavaLangAutoCloseable 1
#include "java/lang/AutoCloseable.h"

@class IOSByteArray;

@protocol AndroidArchPersistenceDbSupportSQLiteProgram < JavaLangAutoCloseable, JavaObject >

- (void)bindNull:(jint)index;

- (void)bindLong:(jint)index
           value:(jlong)value;

- (void)bindDouble:(jint)index
             value:(jdouble)value;

- (void)bindString:(jint)index
             value:(NSString *)value;

- (void)bindBlob:(jint)index
           value:(IOSByteArray *)value;

- (void)clearBindings;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteProgram)

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteProgram)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteQueryBuilder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteQueryBuilder))
#define AndroidArchPersistenceDbSupportSQLiteQueryBuilder_

@class IOSObjectArray;
@protocol AndroidArchPersistenceDbSupportSQLiteQuery;

@interface AndroidArchPersistenceDbSupportSQLiteQueryBuilder : NSObject

#pragma mark Public

+ (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)builderWithNSString:(NSString *)tableName;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)columnsWithNSStringArray:(IOSObjectArray *)columns;

- (id<AndroidArchPersistenceDbSupportSQLiteQuery>)create;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)distinct;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)groupByWithNSString:(NSString *)groupBy;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)havingWithNSString:(NSString *)having;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)limitWithNSString:(NSString *)limit;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)orderByWithNSString:(NSString *)orderBy;

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)selectionWithNSString:(NSString *)selection
                                                           withNSObjectArray:(IOSObjectArray *)bindArgs;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)

FOUNDATION_EXPORT AndroidArchPersistenceDbSupportSQLiteQueryBuilder *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_builderWithNSString_(NSString *tableName);

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)

#endif

#if !defined (AndroidArchPersistenceDbSupportSQLiteStatement_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidArchPersistenceDbSupportSQLiteStatement))
#define AndroidArchPersistenceDbSupportSQLiteStatement_

@protocol AndroidArchPersistenceDbSupportSQLiteStatement < AndroidArchPersistenceDbSupportSQLiteProgram, JavaObject >

- (void)execute;

- (jint)executeUpdateDelete;

- (jlong)executeInsert;

- (jlong)simpleQueryForLong;

- (NSString *)simpleQueryForString;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidArchPersistenceDbSupportSQLiteStatement)

J2OBJC_TYPE_LITERAL_HEADER(AndroidArchPersistenceDbSupportSQLiteStatement)

#endif

#if !defined (AndroidContentContentValues_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidContentContentValues))
#define AndroidContentContentValues_

@class IOSByteArray;
@class JavaLangBoolean;
@class JavaLangByte;
@class JavaLangDouble;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangShort;
@class JavaUtilArrayList;
@protocol JavaUtilSet;

@interface AndroidContentContentValues : NSObject

+ (NSString *)TAG;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithAndroidContentContentValues:(AndroidContentContentValues *)from;

- (instancetype __nonnull)initWithInt:(jint)size;

- (void)clear;

- (jboolean)containsKeyWithNSString:(NSString *)key;

- (jboolean)isEqual:(id)object;

- (id)getWithNSString:(NSString *)key;

- (JavaLangBoolean *)getAsBooleanWithNSString:(NSString *)key;

- (JavaLangByte *)getAsByteWithNSString:(NSString *)key;

- (IOSByteArray *)getAsByteArrayWithNSString:(NSString *)key;

- (JavaLangDouble *)getAsDoubleWithNSString:(NSString *)key;

- (JavaLangFloat *)getAsFloatWithNSString:(NSString *)key;

- (JavaLangInteger *)getAsIntegerWithNSString:(NSString *)key;

- (JavaLangLong *)getAsLongWithNSString:(NSString *)key;

- (JavaLangShort *)getAsShortWithNSString:(NSString *)key;

- (NSString *)getAsStringWithNSString:(NSString *)key;

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key;

- (NSUInteger)hash;

- (id<JavaUtilSet>)keySet;

- (void)putWithNSString:(NSString *)key
    withJavaLangBoolean:(JavaLangBoolean *)value;

- (void)putWithNSString:(NSString *)key
       withJavaLangByte:(JavaLangByte *)value;

- (void)putWithNSString:(NSString *)key
          withByteArray:(IOSByteArray *)value;

- (void)putWithNSString:(NSString *)key
     withJavaLangDouble:(JavaLangDouble *)value;

- (void)putWithNSString:(NSString *)key
      withJavaLangFloat:(JavaLangFloat *)value;

- (void)putWithNSString:(NSString *)key
    withJavaLangInteger:(JavaLangInteger *)value;

- (void)putWithNSString:(NSString *)key
       withJavaLangLong:(JavaLangLong *)value;

- (void)putWithNSString:(NSString *)key
      withJavaLangShort:(JavaLangShort *)value;

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value;

- (void)putAllWithAndroidContentContentValues:(AndroidContentContentValues *)other;

- (void)putNullWithNSString:(NSString *)key;

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value;

- (void)removeWithNSString:(NSString *)key;

- (jint)size;

- (NSString *)description;

- (id<JavaUtilSet>)valueSet;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentContentValues)

inline NSString *AndroidContentContentValues_get_TAG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidContentContentValues_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidContentContentValues, TAG, NSString *)

FOUNDATION_EXPORT void AndroidContentContentValues_init(AndroidContentContentValues *self);

FOUNDATION_EXPORT AndroidContentContentValues *new_AndroidContentContentValues_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentContentValues *create_AndroidContentContentValues_init(void);

FOUNDATION_EXPORT void AndroidContentContentValues_initWithInt_(AndroidContentContentValues *self, jint size);

FOUNDATION_EXPORT AndroidContentContentValues *new_AndroidContentContentValues_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentContentValues *create_AndroidContentContentValues_initWithInt_(jint size);

FOUNDATION_EXPORT void AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *self, AndroidContentContentValues *from);

FOUNDATION_EXPORT AndroidContentContentValues *new_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentContentValues *create_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from);

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentContentValues)

#endif

#if !defined (AndroidContentIOSContext_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidContentIOSContext))
#define AndroidContentIOSContext_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsLooper;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoFileInputStream;
@class JavaIoFileOutputStream;
@protocol AndroidContentSharedPreferences;
@protocol AndroidDatabaseDatabaseErrorHandler;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;

@interface AndroidContentIOSContext : AndroidAppApplication

+ (NSString *)DATABASES;

+ (NSString *)TAG;

#pragma mark Public

- (instancetype __nonnull)init;

- (IOSObjectArray *)databaseList;

- (jboolean)deleteDatabaseWithNSString:(NSString *)name;

- (jboolean)deleteFileWithNSString:(NSString *)name;

- (IOSObjectArray *)fileList;

- (JavaIoFile *)getCacheDir;

- (JavaIoFile *)getDatabasePathWithNSString:(NSString *)name;

- (JavaIoFile *)getDirWithNSString:(NSString *)name
                           withInt:(jint)mode;

- (JavaIoFile *)getExternalFilesDirWithNSString:(NSString * __nullable)type;

- (IOSObjectArray *)getExternalFilesDirsWithNSString:(NSString *)type;

- (JavaIoFile *)getFilesDir;

- (JavaIoFile *)getFileStreamPathWithNSString:(NSString *)name;

- (AndroidOsLooper *)getMainLooper;

- (id<AndroidContentSharedPreferences>)getSharedPreferencesWithNSString:(NSString *)name
                                                                withInt:(jint)mode;

- (JavaIoFile *)getSharedPrefsFileWithNSString:(NSString *)name;

- (JavaIoFileInputStream *)openFileInputWithNSString:(NSString *)name;

- (JavaIoFileOutputStream *)openFileOutputWithNSString:(NSString *)name
                                               withInt:(jint)mode;

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler> __nullable)errorHandler;

#pragma mark Protected

- (JavaIoFile *)getRootDir;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentIOSContext)

inline NSString *AndroidContentIOSContext_get_DATABASES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidContentIOSContext_DATABASES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidContentIOSContext, DATABASES, NSString *)

inline NSString *AndroidContentIOSContext_get_TAG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidContentIOSContext_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidContentIOSContext, TAG, NSString *)

FOUNDATION_EXPORT void AndroidContentIOSContext_init(AndroidContentIOSContext *self);

FOUNDATION_EXPORT AndroidContentIOSContext *new_AndroidContentIOSContext_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidContentIOSContext *create_AndroidContentIOSContext_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentIOSContext)

#endif

#if !defined (AndroidContentSharedPreferences_OnSharedPreferenceChangeListener_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidContentSharedPreferences_OnSharedPreferenceChangeListener))
#define AndroidContentSharedPreferences_OnSharedPreferenceChangeListener_

@protocol AndroidContentSharedPreferences;

@protocol AndroidContentSharedPreferences_OnSharedPreferenceChangeListener < JavaObject >

- (void)onSharedPreferenceChangedWithAndroidContentSharedPreferences:(id<AndroidContentSharedPreferences>)sharedPreferences
                                                        withNSString:(NSString *)key;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidContentSharedPreferences_OnSharedPreferenceChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(AndroidContentSharedPreferences_OnSharedPreferenceChangeListener)

#endif

#if !defined (AndroidDatabaseCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursor))
#define AndroidDatabaseCursor_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class AndroidDatabaseCharArrayBuffer;
@class AndroidDatabaseContentObserver;
@class AndroidDatabaseDataSetObserver;
@class AndroidOsBundle;
@class IOSByteArray;
@class IOSObjectArray;

@protocol AndroidDatabaseCursor < JavaIoCloseable, JavaObject >

- (jint)getCount;

- (jint)getPosition;

- (jboolean)moveWithInt:(jint)offset;

- (jboolean)moveToPositionWithInt:(jint)position;

- (jboolean)moveToFirst;

- (jboolean)moveToLast;

- (jboolean)moveToNext;

- (jboolean)moveToPrevious;

- (jboolean)isFirst;

- (jboolean)isLast;

- (jboolean)isBeforeFirst;

- (jboolean)isAfterLast;

- (jint)getColumnIndexWithNSString:(NSString *)columnName;

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName;

- (NSString *)getColumnNameWithInt:(jint)columnIndex;

- (IOSObjectArray *)getColumnNames;

- (jint)getColumnCount;

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex;

- (NSString *)getStringWithInt:(jint)columnIndex;

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer OBJC_METHOD_FAMILY_NONE;

- (jshort)getShortWithInt:(jint)columnIndex;

- (jint)getIntWithInt:(jint)columnIndex;

- (jlong)getLongWithInt:(jint)columnIndex;

- (jfloat)getFloatWithInt:(jint)columnIndex;

- (jdouble)getDoubleWithInt:(jint)columnIndex;

- (jint)getTypeWithInt:(jint)columnIndex;

- (jboolean)isNullWithInt:(jint)columnIndex;

- (void)deactivate;

- (jboolean)requery;

- (void)close;

- (jboolean)isClosed;

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

- (jboolean)getWantsAllOnMoveCalls;

- (AndroidOsBundle *)getExtras;

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras;

@end

@interface AndroidDatabaseCursor : NSObject

+ (jint)FIELD_TYPE_NULL;

+ (jint)FIELD_TYPE_INTEGER;

+ (jint)FIELD_TYPE_FLOAT;

+ (jint)FIELD_TYPE_STRING;

+ (jint)FIELD_TYPE_BLOB;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCursor)

inline jint AndroidDatabaseCursor_get_FIELD_TYPE_NULL(void);
#define AndroidDatabaseCursor_FIELD_TYPE_NULL 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseCursor, FIELD_TYPE_NULL, jint)

inline jint AndroidDatabaseCursor_get_FIELD_TYPE_INTEGER(void);
#define AndroidDatabaseCursor_FIELD_TYPE_INTEGER 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseCursor, FIELD_TYPE_INTEGER, jint)

inline jint AndroidDatabaseCursor_get_FIELD_TYPE_FLOAT(void);
#define AndroidDatabaseCursor_FIELD_TYPE_FLOAT 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseCursor, FIELD_TYPE_FLOAT, jint)

inline jint AndroidDatabaseCursor_get_FIELD_TYPE_STRING(void);
#define AndroidDatabaseCursor_FIELD_TYPE_STRING 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseCursor, FIELD_TYPE_STRING, jint)

inline jint AndroidDatabaseCursor_get_FIELD_TYPE_BLOB(void);
#define AndroidDatabaseCursor_FIELD_TYPE_BLOB 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseCursor, FIELD_TYPE_BLOB, jint)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursor)

#endif

#if !defined (AndroidDatabaseCrossProcessCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCrossProcessCursor))
#define AndroidDatabaseCrossProcessCursor_

@class AndroidDatabaseCursorWindow;

@protocol AndroidDatabaseCrossProcessCursor < AndroidDatabaseCursor, JavaObject >

- (AndroidDatabaseCursorWindow *)getWindow;

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCrossProcessCursor)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCrossProcessCursor)

#endif

#if !defined (AndroidDatabaseAbstractCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseAbstractCursor))
#define AndroidDatabaseAbstractCursor_

@class AndroidDatabaseCharArrayBuffer;
@class AndroidDatabaseContentObserver;
@class AndroidDatabaseCursorWindow;
@class AndroidDatabaseDataSetObserver;
@class AndroidNetUri;
@class AndroidOsBundle;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaLangLong;
@class JavaUtilHashMap;

@interface AndroidDatabaseAbstractCursor : NSObject < AndroidDatabaseCrossProcessCursor > {
 @public
  JavaUtilHashMap *mUpdatedRows_;
  jint mPos_;
  jint mRowIdColumnIndex_;
  JavaLangLong *mCurrentRowID_;
  jboolean mClosed_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (void)close;

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer OBJC_METHOD_FAMILY_NONE;

- (void)deactivate;

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

- (IOSByteArray *)getBlobWithInt:(jint)column;

- (jint)getColumnCount;

- (jint)getColumnIndexWithNSString:(NSString *)columnName;

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName;

- (NSString *)getColumnNameWithInt:(jint)columnIndex;

- (IOSObjectArray *)getColumnNames;

- (jint)getCount;

- (jdouble)getDoubleWithInt:(jint)column;

- (AndroidOsBundle *)getExtras;

- (jfloat)getFloatWithInt:(jint)column;

- (jint)getIntWithInt:(jint)column;

- (jlong)getLongWithInt:(jint)column;

- (AndroidNetUri *)getNotificationUri;

- (jint)getPosition;

- (jshort)getShortWithInt:(jint)column;

- (NSString *)getStringWithInt:(jint)column;

- (jint)getTypeWithInt:(jint)column;

- (jboolean)getWantsAllOnMoveCalls;

- (AndroidDatabaseCursorWindow *)getWindow;

- (jboolean)isAfterLast;

- (jboolean)isBeforeFirst;

- (jboolean)isClosed;

- (jboolean)isFirst;

- (jboolean)isLast;

- (jboolean)isNullWithInt:(jint)column;

- (jboolean)moveWithInt:(jint)offset;

- (jboolean)moveToFirst;

- (jboolean)moveToLast;

- (jboolean)moveToNext;

- (jboolean)moveToPositionWithInt:(jint)position;

- (jboolean)moveToPrevious;

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition;

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

- (jboolean)requery;

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras;

- (void)setExtrasWithAndroidOsBundle:(AndroidOsBundle *)extras;

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

#pragma mark Protected

- (void)checkPosition;

- (void)java_finalize;

- (id)getUpdatedFieldWithInt:(jint)columnIndex;

- (jboolean)isFieldUpdatedWithInt:(jint)columnIndex;

- (void)onChangeWithBoolean:(jboolean)selfChange;

- (void)onDeactivateOrClose;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseAbstractCursor)

J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mUpdatedRows_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mCurrentRowID_, JavaLangLong *)

FOUNDATION_EXPORT void AndroidDatabaseAbstractCursor_init(AndroidDatabaseAbstractCursor *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseAbstractCursor)

#endif

#if !defined (AndroidDatabaseContentObserver_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseContentObserver))
#define AndroidDatabaseContentObserver_

@class AndroidNetUri;
@class AndroidOsHandler;

@interface AndroidDatabaseContentObserver : NSObject {
 @public
  AndroidOsHandler *mHandler_;
}

#pragma mark Public

- (instancetype __nonnull)initWithAndroidOsHandler:(AndroidOsHandler *)handler;

- (jboolean)deliverSelfNotifications;

- (void)dispatchChangeWithBoolean:(jboolean)selfChange;

- (void)dispatchChangeWithBoolean:(jboolean)selfChange
                withAndroidNetUri:(AndroidNetUri *)uri;

- (void)onChangeWithBoolean:(jboolean)selfChange;

- (void)onChangeWithBoolean:(jboolean)selfChange
          withAndroidNetUri:(AndroidNetUri *)uri;

- (void)onChangeWithBoolean:(jboolean)selfChange
          withAndroidNetUri:(AndroidNetUri *)uri
                    withInt:(jint)userId;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseContentObserver)

J2OBJC_FIELD_SETTER(AndroidDatabaseContentObserver, mHandler_, AndroidOsHandler *)

FOUNDATION_EXPORT void AndroidDatabaseContentObserver_initWithAndroidOsHandler_(AndroidDatabaseContentObserver *self, AndroidOsHandler *handler);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseContentObserver)

#endif

#if !defined (AndroidDatabaseAbstractCursor_SelfContentObserver_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseAbstractCursor_SelfContentObserver))
#define AndroidDatabaseAbstractCursor_SelfContentObserver_

@class AndroidDatabaseAbstractCursor;
@class AndroidOsHandler;
@class JavaLangRefWeakReference;

@interface AndroidDatabaseAbstractCursor_SelfContentObserver : AndroidDatabaseContentObserver {
 @public
  JavaLangRefWeakReference *mCursor_;
}

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseAbstractCursor:(AndroidDatabaseAbstractCursor *)cursor;

- (jboolean)deliverSelfNotifications;

- (void)onChangeWithBoolean:(jboolean)selfChange;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithAndroidOsHandler:(AndroidOsHandler *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseAbstractCursor_SelfContentObserver)

J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor_SelfContentObserver, mCursor_, JavaLangRefWeakReference *)

FOUNDATION_EXPORT void AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(AndroidDatabaseAbstractCursor_SelfContentObserver *self, AndroidDatabaseAbstractCursor *cursor);

FOUNDATION_EXPORT AndroidDatabaseAbstractCursor_SelfContentObserver *new_AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(AndroidDatabaseAbstractCursor *cursor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseAbstractCursor_SelfContentObserver *create_AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(AndroidDatabaseAbstractCursor *cursor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseAbstractCursor_SelfContentObserver)

#endif

#if !defined (AndroidDatabaseAbstractWindowedCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseAbstractWindowedCursor))
#define AndroidDatabaseAbstractWindowedCursor_

@class AndroidDatabaseCharArrayBuffer;
@class AndroidDatabaseCursorWindow;
@class IOSByteArray;

@interface AndroidDatabaseAbstractWindowedCursor : AndroidDatabaseAbstractCursor {
 @public
  AndroidDatabaseCursorWindow *mWindow_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex;

- (jdouble)getDoubleWithInt:(jint)columnIndex;

- (jfloat)getFloatWithInt:(jint)columnIndex;

- (jint)getIntWithInt:(jint)columnIndex;

- (jlong)getLongWithInt:(jint)columnIndex;

- (jshort)getShortWithInt:(jint)columnIndex;

- (NSString *)getStringWithInt:(jint)columnIndex;

- (jint)getTypeWithInt:(jint)columnIndex;

- (AndroidDatabaseCursorWindow *)getWindow;

- (jboolean)hasWindow;

- (jboolean)isBlobWithInt:(jint)columnIndex;

- (jboolean)isFloatWithInt:(jint)columnIndex;

- (jboolean)isLongWithInt:(jint)columnIndex;

- (jboolean)isNullWithInt:(jint)columnIndex;

- (jboolean)isStringWithInt:(jint)columnIndex;

- (void)setWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

#pragma mark Protected

- (void)checkPosition;

- (void)clearOrCreateWindowWithNSString:(NSString *)name;

- (void)closeWindow;

- (void)onDeactivateOrClose;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseAbstractWindowedCursor)

J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractWindowedCursor, mWindow_, AndroidDatabaseCursorWindow *)

FOUNDATION_EXPORT void AndroidDatabaseAbstractWindowedCursor_init(AndroidDatabaseAbstractWindowedCursor *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseAbstractWindowedCursor)

#endif

#if !defined (AndroidDatabaseCharArrayBuffer_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCharArrayBuffer))
#define AndroidDatabaseCharArrayBuffer_

@class IOSCharArray;

@interface AndroidDatabaseCharArrayBuffer : NSObject {
 @public
  IOSCharArray *data_;
  jint sizeCopied_;
}

#pragma mark Public

- (instancetype __nonnull)initWithCharArray:(IOSCharArray *)buf;

- (instancetype __nonnull)initWithInt:(jint)size;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCharArrayBuffer)

J2OBJC_FIELD_SETTER(AndroidDatabaseCharArrayBuffer, data_, IOSCharArray *)

FOUNDATION_EXPORT void AndroidDatabaseCharArrayBuffer_initWithInt_(AndroidDatabaseCharArrayBuffer *self, jint size);

FOUNDATION_EXPORT AndroidDatabaseCharArrayBuffer *new_AndroidDatabaseCharArrayBuffer_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCharArrayBuffer *create_AndroidDatabaseCharArrayBuffer_initWithInt_(jint size);

FOUNDATION_EXPORT void AndroidDatabaseCharArrayBuffer_initWithCharArray_(AndroidDatabaseCharArrayBuffer *self, IOSCharArray *buf);

FOUNDATION_EXPORT AndroidDatabaseCharArrayBuffer *new_AndroidDatabaseCharArrayBuffer_initWithCharArray_(IOSCharArray *buf) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCharArrayBuffer *create_AndroidDatabaseCharArrayBuffer_initWithCharArray_(IOSCharArray *buf);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCharArrayBuffer)

#endif

#if !defined (AndroidDatabaseObservable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseObservable))
#define AndroidDatabaseObservable_

@class JavaUtilArrayList;

@interface AndroidDatabaseObservable : NSObject {
 @public
  JavaUtilArrayList *mObservers_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (void)registerObserverWithId:(id)observer;

- (void)unregisterAll;

- (void)unregisterObserverWithId:(id)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseObservable)

J2OBJC_FIELD_SETTER(AndroidDatabaseObservable, mObservers_, JavaUtilArrayList *)

FOUNDATION_EXPORT void AndroidDatabaseObservable_init(AndroidDatabaseObservable *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseObservable)

#endif

#if !defined (AndroidDatabaseContentObservable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseContentObservable))
#define AndroidDatabaseContentObservable_

@class AndroidDatabaseContentObserver;
@class AndroidNetUri;

@interface AndroidDatabaseContentObservable : AndroidDatabaseObservable

#pragma mark Public

- (instancetype __nonnull)init;

- (void)dispatchChangeWithBoolean:(jboolean)selfChange;

- (void)dispatchChangeWithBoolean:(jboolean)selfChange
                withAndroidNetUri:(AndroidNetUri *)uri;

- (void)notifyChangeWithBoolean:(jboolean)selfChange;

- (void)registerObserverWithId:(AndroidDatabaseContentObserver *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseContentObservable)

FOUNDATION_EXPORT void AndroidDatabaseContentObservable_init(AndroidDatabaseContentObservable *self);

FOUNDATION_EXPORT AndroidDatabaseContentObservable *new_AndroidDatabaseContentObservable_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseContentObservable *create_AndroidDatabaseContentObservable_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseContentObservable)

#endif

#if !defined (AndroidDatabaseCursorWrapper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursorWrapper))
#define AndroidDatabaseCursorWrapper_

@class AndroidDatabaseCharArrayBuffer;
@class AndroidDatabaseContentObserver;
@class AndroidDatabaseDataSetObserver;
@class AndroidOsBundle;
@class IOSByteArray;
@class IOSObjectArray;
@protocol AndroidDatabaseCursor;

@interface AndroidDatabaseCursorWrapper : NSObject < AndroidDatabaseCursor > {
 @public
  id<AndroidDatabaseCursor> mCursor_;
}

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

- (void)close;

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer OBJC_METHOD_FAMILY_NONE;

- (void)deactivate;

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex;

- (jint)getColumnCount;

- (jint)getColumnIndexWithNSString:(NSString *)columnName;

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName;

- (NSString *)getColumnNameWithInt:(jint)columnIndex;

- (IOSObjectArray *)getColumnNames;

- (jint)getCount;

- (jdouble)getDoubleWithInt:(jint)columnIndex;

- (AndroidOsBundle *)getExtras;

- (jfloat)getFloatWithInt:(jint)columnIndex;

- (jint)getIntWithInt:(jint)columnIndex;

- (jlong)getLongWithInt:(jint)columnIndex;

- (jint)getPosition;

- (jshort)getShortWithInt:(jint)columnIndex;

- (NSString *)getStringWithInt:(jint)columnIndex;

- (jint)getTypeWithInt:(jint)columnIndex;

- (jboolean)getWantsAllOnMoveCalls;

- (id<AndroidDatabaseCursor>)getWrappedCursor;

- (jboolean)isAfterLast;

- (jboolean)isBeforeFirst;

- (jboolean)isClosed;

- (jboolean)isFirst;

- (jboolean)isLast;

- (jboolean)isNullWithInt:(jint)columnIndex;

- (jboolean)moveWithInt:(jint)offset;

- (jboolean)moveToFirst;

- (jboolean)moveToLast;

- (jboolean)moveToNext;

- (jboolean)moveToPositionWithInt:(jint)position;

- (jboolean)moveToPrevious;

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

- (jboolean)requery;

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras;

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCursorWrapper)

J2OBJC_FIELD_SETTER(AndroidDatabaseCursorWrapper, mCursor_, id<AndroidDatabaseCursor>)

FOUNDATION_EXPORT void AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(AndroidDatabaseCursorWrapper *self, id<AndroidDatabaseCursor> cursor);

FOUNDATION_EXPORT AndroidDatabaseCursorWrapper *new_AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorWrapper *create_AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursorWrapper)

#endif

#if !defined (AndroidDatabaseCrossProcessCursorWrapper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCrossProcessCursorWrapper))
#define AndroidDatabaseCrossProcessCursorWrapper_

@class AndroidDatabaseCursorWindow;
@protocol AndroidDatabaseCursor;

@interface AndroidDatabaseCrossProcessCursorWrapper : AndroidDatabaseCursorWrapper < AndroidDatabaseCrossProcessCursor >

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

- (AndroidDatabaseCursorWindow *)getWindow;

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCrossProcessCursorWrapper)

FOUNDATION_EXPORT void AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(AndroidDatabaseCrossProcessCursorWrapper *self, id<AndroidDatabaseCursor> cursor);

FOUNDATION_EXPORT AndroidDatabaseCrossProcessCursorWrapper *new_AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCrossProcessCursorWrapper *create_AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCrossProcessCursorWrapper)

#endif

#if !defined (AndroidDatabaseCursorIndexOutOfBoundsException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursorIndexOutOfBoundsException))
#define AndroidDatabaseCursorIndexOutOfBoundsException_

#define RESTRICT_JavaLangIndexOutOfBoundsException 1
#define INCLUDE_JavaLangIndexOutOfBoundsException 1
#include "java/lang/IndexOutOfBoundsException.h"

@interface AndroidDatabaseCursorIndexOutOfBoundsException : JavaLangIndexOutOfBoundsException

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)index
                              withInt:(jint)size;

- (instancetype __nonnull)initWithNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCursorIndexOutOfBoundsException)

FOUNDATION_EXPORT void AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(AndroidDatabaseCursorIndexOutOfBoundsException *self, jint index, jint size);

FOUNDATION_EXPORT AndroidDatabaseCursorIndexOutOfBoundsException *new_AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(jint index, jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorIndexOutOfBoundsException *create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(jint index, jint size);

FOUNDATION_EXPORT void AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(AndroidDatabaseCursorIndexOutOfBoundsException *self, NSString *message);

FOUNDATION_EXPORT AndroidDatabaseCursorIndexOutOfBoundsException *new_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorIndexOutOfBoundsException *create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursorIndexOutOfBoundsException)

#endif

#if !defined (AndroidDatabaseCursorJoiner_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursorJoiner))
#define AndroidDatabaseCursorJoiner_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@class AndroidDatabaseCursorJoiner_Result;
@class IOSObjectArray;
@protocol AndroidDatabaseCursor;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilSpliterator;

@interface AndroidDatabaseCursorJoiner : NSObject < JavaUtilIterator, JavaLangIterable >

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursorLeft
                                      withNSStringArray:(IOSObjectArray *)columnNamesLeft
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursorRight
                                      withNSStringArray:(IOSObjectArray *)columnNamesRight;

- (jboolean)hasNext;

- (id<JavaUtilIterator>)iterator;

- (AndroidDatabaseCursorJoiner_Result *)next;

- (void)remove;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCursorJoiner)

FOUNDATION_EXPORT void AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(AndroidDatabaseCursorJoiner *self, id<AndroidDatabaseCursor> cursorLeft, IOSObjectArray *columnNamesLeft, id<AndroidDatabaseCursor> cursorRight, IOSObjectArray *columnNamesRight);

FOUNDATION_EXPORT AndroidDatabaseCursorJoiner *new_AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(id<AndroidDatabaseCursor> cursorLeft, IOSObjectArray *columnNamesLeft, id<AndroidDatabaseCursor> cursorRight, IOSObjectArray *columnNamesRight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorJoiner *create_AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(id<AndroidDatabaseCursor> cursorLeft, IOSObjectArray *columnNamesLeft, id<AndroidDatabaseCursor> cursorRight, IOSObjectArray *columnNamesRight);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursorJoiner)

#endif

#if !defined (AndroidDatabaseCursorJoiner_Result_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursorJoiner_Result))
#define AndroidDatabaseCursorJoiner_Result_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidDatabaseCursorJoiner_Result_Enum) {
  AndroidDatabaseCursorJoiner_Result_Enum_RIGHT = 0,
  AndroidDatabaseCursorJoiner_Result_Enum_LEFT = 1,
  AndroidDatabaseCursorJoiner_Result_Enum_BOTH = 2,
};

@interface AndroidDatabaseCursorJoiner_Result : JavaLangEnum

+ (AndroidDatabaseCursorJoiner_Result * __nonnull)RIGHT;

+ (AndroidDatabaseCursorJoiner_Result * __nonnull)LEFT;

+ (AndroidDatabaseCursorJoiner_Result * __nonnull)BOTH;

#pragma mark Public

+ (AndroidDatabaseCursorJoiner_Result *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidDatabaseCursorJoiner_Result_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseCursorJoiner_Result)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_values_[];

inline AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_get_RIGHT(void);
J2OBJC_ENUM_CONSTANT(AndroidDatabaseCursorJoiner_Result, RIGHT)

inline AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_get_LEFT(void);
J2OBJC_ENUM_CONSTANT(AndroidDatabaseCursorJoiner_Result, LEFT)

inline AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_get_BOTH(void);
J2OBJC_ENUM_CONSTANT(AndroidDatabaseCursorJoiner_Result, BOTH)

FOUNDATION_EXPORT IOSObjectArray *AndroidDatabaseCursorJoiner_Result_values(void);

FOUNDATION_EXPORT AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursorJoiner_Result)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteClosable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteClosable))
#define AndroidDatabaseSqliteSQLiteClosable_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@interface AndroidDatabaseSqliteSQLiteClosable : NSObject < JavaIoCloseable >

#pragma mark Public

- (instancetype __nonnull)init;

- (void)acquireReference;

- (void)close;

- (void)releaseReference;

- (void)releaseReferenceFromContainer;

#pragma mark Protected

- (void)onAllReferencesReleased;

- (void)onAllReferencesReleasedFromContainer;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteClosable)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteClosable_init(AndroidDatabaseSqliteSQLiteClosable *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteClosable)

#endif

#if !defined (AndroidDatabaseCursorWindow_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursorWindow))
#define AndroidDatabaseCursorWindow_

@class AndroidDatabaseCharArrayBuffer;
@class IOSByteArray;

@interface AndroidDatabaseCursorWindow : AndroidDatabaseSqliteSQLiteClosable {
 @public
  jlong mWindowPtr_;
}

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)localWindow;

- (instancetype __nonnull)initWithNSString:(NSString *)name;

- (jboolean)allocRow OBJC_METHOD_FAMILY_NONE;

- (void)clear;

- (void)copyStringToBufferWithInt:(jint)row
                          withInt:(jint)column
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer OBJC_METHOD_FAMILY_NONE;

- (jint)describeContents;

- (void)freeLastRow;

- (IOSByteArray *)getBlobWithInt:(jint)row
                         withInt:(jint)column;

- (jdouble)getDoubleWithInt:(jint)row
                    withInt:(jint)column;

- (jfloat)getFloatWithInt:(jint)row
                  withInt:(jint)column;

- (jint)getIntWithInt:(jint)row
              withInt:(jint)column;

- (jlong)getLongWithInt:(jint)row
                withInt:(jint)column;

- (NSString *)getName;

- (jint)getNumRows;

- (jshort)getShortWithInt:(jint)row
                  withInt:(jint)column;

- (jint)getStartPosition;

- (NSString *)getStringWithInt:(jint)row
                       withInt:(jint)column;

- (jint)getTypeWithInt:(jint)row
               withInt:(jint)column;

- (jboolean)isBlobWithInt:(jint)row
                  withInt:(jint)column;

- (jboolean)isFloatWithInt:(jint)row
                   withInt:(jint)column;

- (jboolean)isLongWithInt:(jint)row
                  withInt:(jint)column;

- (jboolean)isNullWithInt:(jint)row
                  withInt:(jint)column;

- (jboolean)isStringWithInt:(jint)row
                    withInt:(jint)column;

- (jboolean)putBlobWithByteArray:(IOSByteArray *)value
                         withInt:(jint)row
                         withInt:(jint)column;

- (jboolean)putDoubleWithDouble:(jdouble)value
                        withInt:(jint)row
                        withInt:(jint)column;

- (jboolean)putLongWithLong:(jlong)value
                    withInt:(jint)row
                    withInt:(jint)column;

- (jboolean)putNullWithInt:(jint)row
                   withInt:(jint)column;

- (jboolean)putStringWithNSString:(NSString *)value
                          withInt:(jint)row
                          withInt:(jint)column;

- (jboolean)setNumColumnsWithInt:(jint)columnNum;

- (void)setStartPositionWithInt:(jint)pos;

- (NSString *)description;

#pragma mark Protected

- (void)java_finalize;

- (void)onAllReferencesReleased;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCursorWindow)

FOUNDATION_EXPORT void AndroidDatabaseCursorWindow_initWithNSString_(AndroidDatabaseCursorWindow *self, NSString *name);

FOUNDATION_EXPORT AndroidDatabaseCursorWindow *new_AndroidDatabaseCursorWindow_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorWindow *create_AndroidDatabaseCursorWindow_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void AndroidDatabaseCursorWindow_initWithBoolean_(AndroidDatabaseCursorWindow *self, jboolean localWindow);

FOUNDATION_EXPORT AndroidDatabaseCursorWindow *new_AndroidDatabaseCursorWindow_initWithBoolean_(jboolean localWindow) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorWindow *create_AndroidDatabaseCursorWindow_initWithBoolean_(jboolean localWindow);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursorWindow)

#endif

#if !defined (AndroidDatabaseCursorWindowAllocationException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseCursorWindowAllocationException))
#define AndroidDatabaseCursorWindowAllocationException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseCursorWindowAllocationException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)description_;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseCursorWindowAllocationException)

FOUNDATION_EXPORT void AndroidDatabaseCursorWindowAllocationException_initWithNSString_(AndroidDatabaseCursorWindowAllocationException *self, NSString *description_);

FOUNDATION_EXPORT AndroidDatabaseCursorWindowAllocationException *new_AndroidDatabaseCursorWindowAllocationException_initWithNSString_(NSString *description_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseCursorWindowAllocationException *create_AndroidDatabaseCursorWindowAllocationException_initWithNSString_(NSString *description_);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseCursorWindowAllocationException)

#endif

#if !defined (AndroidDatabaseDataSetObservable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseDataSetObservable))
#define AndroidDatabaseDataSetObservable_

@interface AndroidDatabaseDataSetObservable : AndroidDatabaseObservable

#pragma mark Public

- (instancetype __nonnull)init;

- (void)notifyChanged;

- (void)notifyInvalidated;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseDataSetObservable)

FOUNDATION_EXPORT void AndroidDatabaseDataSetObservable_init(AndroidDatabaseDataSetObservable *self);

FOUNDATION_EXPORT AndroidDatabaseDataSetObservable *new_AndroidDatabaseDataSetObservable_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseDataSetObservable *create_AndroidDatabaseDataSetObservable_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseDataSetObservable)

#endif

#if !defined (AndroidDatabaseDataSetObserver_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseDataSetObserver))
#define AndroidDatabaseDataSetObserver_

@interface AndroidDatabaseDataSetObserver : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (void)onChanged;

- (void)onInvalidated;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseDataSetObserver)

FOUNDATION_EXPORT void AndroidDatabaseDataSetObserver_init(AndroidDatabaseDataSetObserver *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseDataSetObserver)

#endif

#if !defined (AndroidDatabaseDatabaseErrorHandler_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseDatabaseErrorHandler))
#define AndroidDatabaseDatabaseErrorHandler_

@class AndroidDatabaseSqliteSQLiteDatabase;

@protocol AndroidDatabaseDatabaseErrorHandler < JavaObject >

- (void)onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)dbObj;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseDatabaseErrorHandler)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseDatabaseErrorHandler)

#endif

#if !defined (AndroidDatabaseDatabaseUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseDatabaseUtils))
#define AndroidDatabaseDatabaseUtils_

@class AndroidContentContentValues;
@class AndroidContentContext;
@class AndroidDatabaseCursorWindow;
@class AndroidDatabaseDatabaseUtils_InsertHelper;
@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidDatabaseSqliteSQLiteProgram;
@class AndroidDatabaseSqliteSQLiteStatement;
@class IOSObjectArray;
@class JavaIoPrintStream;
@class JavaLangStringBuilder;
@protocol AndroidDatabaseCursor;

@interface AndroidDatabaseDatabaseUtils : NSObject

+ (jint)STATEMENT_SELECT;

+ (jint)STATEMENT_UPDATE;

+ (jint)STATEMENT_ATTACH;

+ (jint)STATEMENT_BEGIN;

+ (jint)STATEMENT_COMMIT;

+ (jint)STATEMENT_ABORT;

+ (jint)STATEMENT_PRAGMA;

+ (jint)STATEMENT_DDL;

+ (jint)STATEMENT_UNPREPARED;

+ (jint)STATEMENT_OTHER;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)appendEscapedSQLStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withNSString:(NSString *)sqlString;

+ (IOSObjectArray *)appendSelectionArgsWithNSStringArray:(IOSObjectArray *)originalValues
                                       withNSStringArray:(IOSObjectArray *)newValues;

+ (void)appendValueToSqlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                                           withId:(id)value;

+ (void)bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram:(AndroidDatabaseSqliteSQLiteProgram *)prog
                                                          withInt:(jint)index
                                                           withId:(id)value;

+ (NSString *)concatenateWhereWithNSString:(NSString *)a
                              withNSString:(NSString *)b;

+ (void)createDbFromSqlStatementsWithAndroidContentContext:(AndroidContentContext *)context
                                              withNSString:(NSString *)dbName
                                                   withInt:(jint)dbVersion
                                              withNSString:(NSString *)sqlStatements;

+ (void)cursorDoubleToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                withNSString:(NSString *)key;

+ (void)cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                      withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                         withNSString:(NSString *)column;

+ (void)cursorDoubleToCursorValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                               withNSString:(NSString *)field
                            withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorFillWindowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                          withInt:(jint)position
                  withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

+ (void)cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                        withNSString:(NSString *)column;

+ (void)cursorIntToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorIntToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key;

+ (void)cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column;

+ (void)cursorLongToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                              withNSString:(NSString *)field
                           withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorLongToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                              withNSString:(NSString *)field
                           withAndroidContentContentValues:(AndroidContentContentValues *)values
                                              withNSString:(NSString *)key;

+ (void)cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                    withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                       withNSString:(NSString *)column;

+ (jint)cursorPickFillWindowStartPositionWithInt:(jint)cursorPosition
                                         withInt:(jint)cursorWindowCapacity;

+ (void)cursorRowToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                          withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                        withNSString:(NSString *)column;

+ (void)cursorStringToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values;

+ (void)cursorStringToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                withNSString:(NSString *)key;

+ (void)cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                      withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                         withNSString:(NSString *)column;

+ (void)cursorStringToInsertHelperWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                               withNSString:(NSString *)field
              withAndroidDatabaseDatabaseUtils_InsertHelper:(AndroidDatabaseDatabaseUtils_InsertHelper *)inserter
                                                    withInt:(jint)index;

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                          withJavaIoPrintStream:(JavaIoPrintStream *)stream;

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (NSString *)dumpCurrentRowToStringWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                      withJavaIoPrintStream:(JavaIoPrintStream *)stream;

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                  withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (NSString *)dumpCursorToStringWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

+ (jint)findRowIdColumnIndexWithNSStringArray:(IOSObjectArray *)columnNames;

+ (NSString *)getCollationKeyWithNSString:(NSString *)name;

+ (jint)getSqlStatementTypeWithNSString:(NSString *)sql;

+ (jint)getTypeOfObjectWithId:(id)obj;

+ (jlong)longForQueryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                withNSString:(NSString *)query
                                           withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (jlong)longForQueryWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)prog
                                            withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (jboolean)queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table;

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table;

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table
                                                   withNSString:(NSString *)selection;

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table
                                                   withNSString:(NSString *)selection
                                              withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (NSString *)sqlEscapeStringWithNSString:(NSString *)value;

+ (NSString *)stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                       withNSString:(NSString *)query
                                                  withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (NSString *)stringForQueryWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)prog
                                                   withNSStringArray:(IOSObjectArray *)selectionArgs;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseDatabaseUtils)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_SELECT(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_SELECT 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_SELECT, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_UPDATE(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_UPDATE, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_ATTACH(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_ATTACH, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_BEGIN(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_BEGIN, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_COMMIT(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_COMMIT, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_ABORT(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_ABORT 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_ABORT, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_PRAGMA(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_PRAGMA, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_DDL(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_DDL 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_DDL, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_UNPREPARED(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED 9
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_UNPREPARED, jint)

inline jint AndroidDatabaseDatabaseUtils_get_STATEMENT_OTHER(void);
#define AndroidDatabaseDatabaseUtils_STATEMENT_OTHER 99
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, STATEMENT_OTHER, jint)

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_init(AndroidDatabaseDatabaseUtils *self);

FOUNDATION_EXPORT AndroidDatabaseDatabaseUtils *new_AndroidDatabaseDatabaseUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseDatabaseUtils *create_AndroidDatabaseDatabaseUtils_init(void);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(AndroidDatabaseSqliteSQLiteProgram *prog, jint index, id value);

FOUNDATION_EXPORT jint AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(id obj);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(id<AndroidDatabaseCursor> cursor, jint position, AndroidDatabaseCursorWindow *window);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *sqlString);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_sqlEscapeStringWithNSString_(NSString *value);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sql, id value);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_concatenateWhereWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_getCollationKeyWithNSString_(NSString *name);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(id<AndroidDatabaseCursor> cursor, JavaIoPrintStream *stream);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(id<AndroidDatabaseCursor> cursor, JavaLangStringBuilder *sb);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_dumpCursorToStringWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(id<AndroidDatabaseCursor> cursor, JavaIoPrintStream *stream);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(id<AndroidDatabaseCursor> cursor, JavaLangStringBuilder *sb);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_dumpCurrentRowToStringWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorStringToInsertHelperWithAndroidDatabaseCursor_withNSString_withAndroidDatabaseDatabaseUtils_InsertHelper_withInt_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidDatabaseDatabaseUtils_InsertHelper *inserter, jint index);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorDoubleToCursorValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorRowToContentValuesWithAndroidDatabaseCursor_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values);

FOUNDATION_EXPORT jint AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(jint cursorPosition, jint cursorWindowCapacity);

FOUNDATION_EXPORT jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table);

FOUNDATION_EXPORT jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table, NSString *selection);

FOUNDATION_EXPORT jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table, NSString *selection, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT jboolean AndroidDatabaseDatabaseUtils_queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table);

FOUNDATION_EXPORT jlong AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT jlong AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(AndroidDatabaseSqliteSQLiteStatement *prog, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT NSString *AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(AndroidDatabaseSqliteSQLiteStatement *prog, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column);

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_createDbFromSqlStatementsWithAndroidContentContext_withNSString_withInt_withNSString_(AndroidContentContext *context, NSString *dbName, jint dbVersion, NSString *sqlStatements);

FOUNDATION_EXPORT jint AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(NSString *sql);

FOUNDATION_EXPORT IOSObjectArray *AndroidDatabaseDatabaseUtils_appendSelectionArgsWithNSStringArray_withNSStringArray_(IOSObjectArray *originalValues, IOSObjectArray *newValues);

FOUNDATION_EXPORT jint AndroidDatabaseDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(IOSObjectArray *columnNames);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseDatabaseUtils)

#endif

#if !defined (AndroidDatabaseDatabaseUtils_InsertHelper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseDatabaseUtils_InsertHelper))
#define AndroidDatabaseDatabaseUtils_InsertHelper_

@class AndroidContentContentValues;
@class AndroidDatabaseSqliteSQLiteDatabase;
@class IOSByteArray;

@interface AndroidDatabaseDatabaseUtils_InsertHelper : NSObject

+ (jint)TABLE_INFO_PRAGMA_COLUMNNAME_INDEX;

+ (jint)TABLE_INFO_PRAGMA_DEFAULT_INDEX;

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)tableName;

- (void)bindWithInt:(jint)index
        withBoolean:(jboolean)value;

- (void)bindWithInt:(jint)index
      withByteArray:(IOSByteArray *)value;

- (void)bindWithInt:(jint)index
         withDouble:(jdouble)value;

- (void)bindWithInt:(jint)index
          withFloat:(jfloat)value;

- (void)bindWithInt:(jint)index
            withInt:(jint)value;

- (void)bindWithInt:(jint)index
           withLong:(jlong)value;

- (void)bindWithInt:(jint)index
       withNSString:(NSString *)value;

- (void)bindNullWithInt:(jint)index;

- (void)close;

- (jlong)execute;

- (jint)getColumnIndexWithNSString:(NSString *)key;

- (jlong)insertWithAndroidContentContentValues:(AndroidContentContentValues *)values;

- (void)prepareForInsert;

- (void)prepareForReplace;

- (jlong)replaceWithAndroidContentContentValues:(AndroidContentContentValues *)values;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseDatabaseUtils_InsertHelper)

inline jint AndroidDatabaseDatabaseUtils_InsertHelper_get_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX(void);
#define AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils_InsertHelper, TABLE_INFO_PRAGMA_COLUMNNAME_INDEX, jint)

inline jint AndroidDatabaseDatabaseUtils_InsertHelper_get_TABLE_INFO_PRAGMA_DEFAULT_INDEX(void);
#define AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils_InsertHelper, TABLE_INFO_PRAGMA_DEFAULT_INDEX, jint)

FOUNDATION_EXPORT void AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName);

FOUNDATION_EXPORT AndroidDatabaseDatabaseUtils_InsertHelper *new_AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseDatabaseUtils_InsertHelper *create_AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseDatabaseUtils_InsertHelper)

#endif

#if !defined (AndroidDatabaseDefaultDatabaseErrorHandler_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseDefaultDatabaseErrorHandler))
#define AndroidDatabaseDefaultDatabaseErrorHandler_

@class AndroidDatabaseSqliteSQLiteDatabase;

@interface AndroidDatabaseDefaultDatabaseErrorHandler : NSObject < AndroidDatabaseDatabaseErrorHandler >

#pragma mark Public

- (instancetype __nonnull)init;

- (void)onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)dbObj;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseDefaultDatabaseErrorHandler)

FOUNDATION_EXPORT void AndroidDatabaseDefaultDatabaseErrorHandler_init(AndroidDatabaseDefaultDatabaseErrorHandler *self);

FOUNDATION_EXPORT AndroidDatabaseDefaultDatabaseErrorHandler *new_AndroidDatabaseDefaultDatabaseErrorHandler_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseDefaultDatabaseErrorHandler *create_AndroidDatabaseDefaultDatabaseErrorHandler_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseDefaultDatabaseErrorHandler)

#endif

#if !defined (AndroidDatabaseMatrixCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseMatrixCursor))
#define AndroidDatabaseMatrixCursor_

@class AndroidDatabaseMatrixCursor_RowBuilder;
@class IOSByteArray;
@class IOSObjectArray;
@protocol JavaLangIterable;

@interface AndroidDatabaseMatrixCursor : AndroidDatabaseAbstractCursor

#pragma mark Public

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)columnNames;

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)columnNames
                                        withInt:(jint)initialCapacity;

- (void)addRowWithJavaLangIterable:(id<JavaLangIterable>)columnValues;

- (void)addRowWithNSObjectArray:(IOSObjectArray *)columnValues;

- (IOSByteArray *)getBlobWithInt:(jint)column;

- (IOSObjectArray *)getColumnNames;

- (jint)getCount;

- (jdouble)getDoubleWithInt:(jint)column;

- (jfloat)getFloatWithInt:(jint)column;

- (jint)getIntWithInt:(jint)column;

- (jlong)getLongWithInt:(jint)column;

- (jshort)getShortWithInt:(jint)column;

- (NSString *)getStringWithInt:(jint)column;

- (jint)getTypeWithInt:(jint)column;

- (jboolean)isNullWithInt:(jint)column;

- (AndroidDatabaseMatrixCursor_RowBuilder *)newRow OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseMatrixCursor)

FOUNDATION_EXPORT void AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(AndroidDatabaseMatrixCursor *self, IOSObjectArray *columnNames, jint initialCapacity);

FOUNDATION_EXPORT AndroidDatabaseMatrixCursor *new_AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(IOSObjectArray *columnNames, jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseMatrixCursor *create_AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(IOSObjectArray *columnNames, jint initialCapacity);

FOUNDATION_EXPORT void AndroidDatabaseMatrixCursor_initWithNSStringArray_(AndroidDatabaseMatrixCursor *self, IOSObjectArray *columnNames);

FOUNDATION_EXPORT AndroidDatabaseMatrixCursor *new_AndroidDatabaseMatrixCursor_initWithNSStringArray_(IOSObjectArray *columnNames) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseMatrixCursor *create_AndroidDatabaseMatrixCursor_initWithNSStringArray_(IOSObjectArray *columnNames);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseMatrixCursor)

#endif

#if !defined (AndroidDatabaseMatrixCursor_RowBuilder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseMatrixCursor_RowBuilder))
#define AndroidDatabaseMatrixCursor_RowBuilder_

@class AndroidDatabaseMatrixCursor;

@interface AndroidDatabaseMatrixCursor_RowBuilder : NSObject

#pragma mark Public

- (AndroidDatabaseMatrixCursor_RowBuilder *)addWithId:(id)columnValue;

- (AndroidDatabaseMatrixCursor_RowBuilder *)addWithNSString:(NSString *)columnName
                                                     withId:(id)value;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidDatabaseMatrixCursor:(AndroidDatabaseMatrixCursor *)outer$
                                                      withInt:(jint)row;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseMatrixCursor_RowBuilder)

FOUNDATION_EXPORT void AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(AndroidDatabaseMatrixCursor_RowBuilder *self, AndroidDatabaseMatrixCursor *outer$, jint row);

FOUNDATION_EXPORT AndroidDatabaseMatrixCursor_RowBuilder *new_AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(AndroidDatabaseMatrixCursor *outer$, jint row) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseMatrixCursor_RowBuilder *create_AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(AndroidDatabaseMatrixCursor *outer$, jint row);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseMatrixCursor_RowBuilder)

#endif

#if !defined (AndroidDatabaseMergeCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseMergeCursor))
#define AndroidDatabaseMergeCursor_

@class AndroidDatabaseContentObserver;
@class AndroidDatabaseDataSetObserver;
@class IOSByteArray;
@class IOSObjectArray;

@interface AndroidDatabaseMergeCursor : AndroidDatabaseAbstractCursor

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseCursorArray:(IOSObjectArray *)cursors;

- (void)close;

- (void)deactivate;

- (IOSByteArray *)getBlobWithInt:(jint)column;

- (IOSObjectArray *)getColumnNames;

- (jint)getCount;

- (jdouble)getDoubleWithInt:(jint)column;

- (jfloat)getFloatWithInt:(jint)column;

- (jint)getIntWithInt:(jint)column;

- (jlong)getLongWithInt:(jint)column;

- (jshort)getShortWithInt:(jint)column;

- (NSString *)getStringWithInt:(jint)column;

- (jint)getTypeWithInt:(jint)column;

- (jboolean)isNullWithInt:(jint)column;

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition;

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

- (jboolean)requery;

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer;

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseMergeCursor)

FOUNDATION_EXPORT void AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(AndroidDatabaseMergeCursor *self, IOSObjectArray *cursors);

FOUNDATION_EXPORT AndroidDatabaseMergeCursor *new_AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(IOSObjectArray *cursors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseMergeCursor *create_AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(IOSObjectArray *cursors);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseMergeCursor)

#endif

#if !defined (AndroidDatabaseSQLException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSQLException))
#define AndroidDatabaseSQLException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseSQLException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

- (instancetype __nonnull)initWithNSString:(NSString *)error
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSQLException)

FOUNDATION_EXPORT void AndroidDatabaseSQLException_init(AndroidDatabaseSQLException *self);

FOUNDATION_EXPORT AndroidDatabaseSQLException *new_AndroidDatabaseSQLException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSQLException *create_AndroidDatabaseSQLException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSQLException_initWithNSString_(AndroidDatabaseSQLException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSQLException *new_AndroidDatabaseSQLException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSQLException *create_AndroidDatabaseSQLException_initWithNSString_(NSString *error);

FOUNDATION_EXPORT void AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(AndroidDatabaseSQLException *self, NSString *error, JavaLangThrowable *cause);

FOUNDATION_EXPORT AndroidDatabaseSQLException *new_AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSQLException *create_AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSQLException)

#endif

#if !defined (AndroidDatabaseStaleDataException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseStaleDataException))
#define AndroidDatabaseStaleDataException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseStaleDataException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)description_;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseStaleDataException)

FOUNDATION_EXPORT void AndroidDatabaseStaleDataException_init(AndroidDatabaseStaleDataException *self);

FOUNDATION_EXPORT AndroidDatabaseStaleDataException *new_AndroidDatabaseStaleDataException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseStaleDataException *create_AndroidDatabaseStaleDataException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseStaleDataException_initWithNSString_(AndroidDatabaseStaleDataException *self, NSString *description_);

FOUNDATION_EXPORT AndroidDatabaseStaleDataException *new_AndroidDatabaseStaleDataException_initWithNSString_(NSString *description_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseStaleDataException *create_AndroidDatabaseStaleDataException_initWithNSString_(NSString *description_);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseStaleDataException)

#endif

#if !defined (AndroidDatabaseSqliteDatabaseObjectNotClosedException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteDatabaseObjectNotClosedException))
#define AndroidDatabaseSqliteDatabaseObjectNotClosedException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteDatabaseObjectNotClosedException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteDatabaseObjectNotClosedException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteDatabaseObjectNotClosedException_init(AndroidDatabaseSqliteDatabaseObjectNotClosedException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteDatabaseObjectNotClosedException *new_AndroidDatabaseSqliteDatabaseObjectNotClosedException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteDatabaseObjectNotClosedException *create_AndroidDatabaseSqliteDatabaseObjectNotClosedException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteDatabaseObjectNotClosedException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteException))
#define AndroidDatabaseSqliteSQLiteException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteException : AndroidDatabaseSQLException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

- (instancetype __nonnull)initWithNSString:(NSString *)error
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteException_init(AndroidDatabaseSqliteSQLiteException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteException *new_AndroidDatabaseSqliteSQLiteException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteException *create_AndroidDatabaseSqliteSQLiteException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteException_initWithNSString_(AndroidDatabaseSqliteSQLiteException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteException *new_AndroidDatabaseSqliteSQLiteException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteException *create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(NSString *error);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteException *self, NSString *error, JavaLangThrowable *cause);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteException *new_AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteException *create_AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteAbortException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteAbortException))
#define AndroidDatabaseSqliteSQLiteAbortException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteAbortException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteAbortException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteAbortException_init(AndroidDatabaseSqliteSQLiteAbortException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAbortException *new_AndroidDatabaseSqliteSQLiteAbortException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAbortException *create_AndroidDatabaseSqliteSQLiteAbortException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(AndroidDatabaseSqliteSQLiteAbortException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAbortException *new_AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAbortException *create_AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteAbortException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteAccessPermException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteAccessPermException))
#define AndroidDatabaseSqliteSQLiteAccessPermException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteAccessPermException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteAccessPermException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteAccessPermException_init(AndroidDatabaseSqliteSQLiteAccessPermException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *new_AndroidDatabaseSqliteSQLiteAccessPermException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *create_AndroidDatabaseSqliteSQLiteAccessPermException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(AndroidDatabaseSqliteSQLiteAccessPermException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *new_AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteAccessPermException *create_AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteAccessPermException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException))
#define AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *new_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *create_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *new_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *create_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteBlobTooBigException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteBlobTooBigException))
#define AndroidDatabaseSqliteSQLiteBlobTooBigException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteBlobTooBigException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteBlobTooBigException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteBlobTooBigException_init(AndroidDatabaseSqliteSQLiteBlobTooBigException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBlobTooBigException *new_AndroidDatabaseSqliteSQLiteBlobTooBigException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBlobTooBigException *create_AndroidDatabaseSqliteSQLiteBlobTooBigException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(AndroidDatabaseSqliteSQLiteBlobTooBigException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBlobTooBigException *new_AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteBlobTooBigException *create_AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteBlobTooBigException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException))
#define AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteCantOpenDatabaseException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *new_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *create_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *new_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *create_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException)

#endif

#if !defined (AndroidOsCancellationSignal_OnCancelListener_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsCancellationSignal_OnCancelListener))
#define AndroidOsCancellationSignal_OnCancelListener_

@protocol AndroidOsCancellationSignal_OnCancelListener < JavaObject >

- (void)onCancel;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsCancellationSignal_OnCancelListener)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsCancellationSignal_OnCancelListener)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteConnection_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteConnection))
#define AndroidDatabaseSqliteSQLiteConnection_

@class AndroidDatabaseCursorWindow;
@class AndroidDatabaseSqliteSQLiteConnectionPool;
@class AndroidDatabaseSqliteSQLiteDatabaseConfiguration;
@class AndroidDatabaseSqliteSQLiteStatementInfo;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;
@class JavaUtilArrayList;
@protocol AndroidUtilPrinter;

@interface AndroidDatabaseSqliteSQLiteConnection : NSObject < AndroidOsCancellationSignal_OnCancelListener >

#pragma mark Public

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
    withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jint)getConnectionId;

- (jboolean)isPrimaryConnection;

- (void)onCancel;

- (void)prepareWithNSString:(NSString *)sql
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo;

- (NSString *)description;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

- (void)close;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

- (void)collectDbStatsUnsafeWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

- (NSString *)describeCurrentOperationUnsafe;

- (void)dumpUnsafeWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                             withBoolean:(jboolean)verbose;

- (jboolean)isPreparedStatementInCacheWithNSString:(NSString *)sql;

+ (AndroidDatabaseSqliteSQLiteConnection *)openWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
                                        withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                     withInt:(jint)connectionId
                                                                                 withBoolean:(jboolean)primaryConnection;

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)setOnlyAllowReadOnlyOperationsWithBoolean:(jboolean)readOnly;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection)

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteConnectionPool_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteConnectionPool))
#define AndroidDatabaseSqliteSQLiteConnectionPool_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class AndroidDatabaseSqliteSQLiteConnection;
@class AndroidDatabaseSqliteSQLiteDatabaseConfiguration;
@class AndroidOsCancellationSignal;
@class JavaUtilArrayList;
@protocol AndroidUtilPrinter;

@interface AndroidDatabaseSqliteSQLiteConnectionPool : NSObject < JavaIoCloseable >

+ (jint)CONNECTION_FLAG_READ_ONLY;

+ (jint)CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;

+ (jint)CONNECTION_FLAG_INTERACTIVE;

#pragma mark Public

- (AndroidDatabaseSqliteSQLiteConnection *)acquireConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags
                                         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)close;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

+ (AndroidDatabaseSqliteSQLiteConnectionPool *)openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)releaseConnectionWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection;

- (jboolean)shouldYieldConnectionWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
                                                                   withInt:(jint)connectionFlags;

- (NSString *)description;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

- (void)onConnectionLeaked;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnectionPool)

inline jint AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_FLAG_READ_ONLY(void);
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_FLAG_READ_ONLY, jint)

inline jint AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY(void);
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY, jint)

inline jint AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_FLAG_INTERACTIVE(void);
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_FLAG_INTERACTIVE, jint)

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool *AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnectionPool)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus))
#define AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum) {
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum_NORMAL = 0,
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum_RECONFIGURE = 1,
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum_DISCARD = 2,
};

@interface AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus : JavaLangEnum

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus * __nonnull)NORMAL;

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus * __nonnull)RECONFIGURE;

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus * __nonnull)DISCARD;

#pragma mark Public

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[];

inline AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_get_NORMAL(void);
J2OBJC_ENUM_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL)

inline AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_get_RECONFIGURE(void);
J2OBJC_ENUM_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE)

inline AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_get_DISCARD(void);
J2OBJC_ENUM_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD)

FOUNDATION_EXPORT IOSObjectArray *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values(void);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteConstraintException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteConstraintException))
#define AndroidDatabaseSqliteSQLiteConstraintException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteConstraintException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConstraintException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteConstraintException_init(AndroidDatabaseSqliteSQLiteConstraintException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConstraintException *new_AndroidDatabaseSqliteSQLiteConstraintException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConstraintException *create_AndroidDatabaseSqliteSQLiteConstraintException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(AndroidDatabaseSqliteSQLiteConstraintException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConstraintException *new_AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteConstraintException *create_AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConstraintException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteCursor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteCursor))
#define AndroidDatabaseSqliteSQLiteCursor_

@class AndroidDatabaseCursorWindow;
@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidDatabaseSqliteSQLiteQuery;
@class IOSObjectArray;
@protocol AndroidDatabaseSqliteSQLiteCursorDriver;

@interface AndroidDatabaseSqliteSQLiteCursor : AndroidDatabaseAbstractWindowedCursor

+ (NSString *)TAG;

+ (jint)NO_COUNT;

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)driver
                                                             withNSString:(NSString *)editTable
                                     withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query;

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                          withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)driver
                                                         withNSString:(NSString *)editTable
                                 withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query;

- (void)close;

- (void)deactivate;

- (jint)getColumnIndexWithNSString:(NSString *)columnName;

- (IOSObjectArray *)getColumnNames;

- (jint)getCount;

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabase;

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition;

- (jboolean)requery;

- (void)setSelectionArgumentsWithNSStringArray:(IOSObjectArray *)selectionArgs;

- (void)setWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window;

#pragma mark Protected

- (void)java_finalize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteCursor)

inline NSString *AndroidDatabaseSqliteSQLiteCursor_get_TAG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteCursor_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteCursor, TAG, NSString *)

inline jint AndroidDatabaseSqliteSQLiteCursor_get_NO_COUNT(void);
#define AndroidDatabaseSqliteSQLiteCursor_NO_COUNT -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteCursor, NO_COUNT, jint)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteCursor *self, AndroidDatabaseSqliteSQLiteDatabase *db, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCursor *new_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteDatabase *db, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCursor *create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteDatabase *db, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteCursor *self, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCursor *new_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCursor *create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteCursor)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteCursorDriver_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteCursorDriver))
#define AndroidDatabaseSqliteSQLiteCursorDriver_

@class IOSObjectArray;
@protocol AndroidDatabaseCursor;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;

@protocol AndroidDatabaseSqliteSQLiteCursorDriver < JavaObject >

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                      withNSStringArray:(IOSObjectArray *)bindArgs;

- (void)cursorDeactivated;

- (void)cursorRequeriedWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

- (void)cursorClosed;

- (void)setBindArgumentsWithNSStringArray:(IOSObjectArray *)bindArgs;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteCursorDriver)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteCursorDriver)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteCustomFunction_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteCustomFunction))
#define AndroidDatabaseSqliteSQLiteCustomFunction_

@protocol AndroidDatabaseSqliteSQLiteDatabase_CustomFunction;

@interface AndroidDatabaseSqliteSQLiteCustomFunction : NSObject {
 @public
  NSString *name_;
  jint numArgs_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)numArgs
withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:(id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)callback;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteCustomFunction)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCustomFunction, name_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCustomFunction, callback_, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(AndroidDatabaseSqliteSQLiteCustomFunction *self, NSString *name, jint numArgs, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCustomFunction *new_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(NSString *name, jint numArgs, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteCustomFunction *create_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(NSString *name, jint numArgs, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteCustomFunction)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatabase_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabase))
#define AndroidDatabaseSqliteSQLiteDatabase_

@class AndroidContentContentValues;
@class AndroidDatabaseSqliteSQLiteSession;
@class AndroidDatabaseSqliteSQLiteStatement;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaUtilArrayList;
@class JavaUtilLocale;
@protocol AndroidDatabaseCursor;
@protocol AndroidDatabaseDatabaseErrorHandler;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CustomFunction;
@protocol AndroidDatabaseSqliteSQLiteTransactionListener;
@protocol AndroidUtilPrinter;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface AndroidDatabaseSqliteSQLiteDatabase : AndroidDatabaseSqliteSQLiteClosable

+ (jint)CONFLICT_ROLLBACK;

+ (jint)CONFLICT_ABORT;

+ (jint)CONFLICT_FAIL;

+ (jint)CONFLICT_IGNORE;

+ (jint)CONFLICT_REPLACE;

+ (jint)CONFLICT_NONE;

+ (jint)SQLITE_MAX_LIKE_PATTERN_LENGTH;

+ (jint)OPEN_READWRITE;

+ (jint)OPEN_READONLY;

+ (jint)NO_LOCALIZED_COLLATORS;

+ (jint)CREATE_IF_NECESSARY;

+ (jint)ENABLE_WRITE_AHEAD_LOGGING;

+ (jint)MAX_SQL_CACHE_SIZE;

#pragma mark Public

- (void)addCustomFunctionWithNSString:(NSString *)name
                              withInt:(jint)numArgs
withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:(id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)function;

- (void)beginTransaction;

- (void)beginTransactionNonExclusive;

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener;

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener;

- (AndroidDatabaseSqliteSQLiteStatement *)compileStatementWithNSString:(NSString *)sql;

+ (AndroidDatabaseSqliteSQLiteDatabase *)createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs;

+ (jboolean)deleteDatabaseWithJavaIoFile:(JavaIoFile *)file;

- (void)disableWriteAheadLogging;

- (jboolean)enableWriteAheadLogging;

- (void)endTransaction;

- (void)execSQLWithNSString:(NSString *)sql;

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs;

+ (NSString *)findEditTableWithNSString:(NSString *)tables;

- (id<JavaUtilList>)getAttachedDbs;

- (jlong)getMaximumSize;

- (jlong)getPageSize;

- (NSString *)getPath;

- (id<JavaUtilMap>)getSyncedTables;

- (jint)getVersion;

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)values;

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values;

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
          withAndroidContentContentValues:(AndroidContentContentValues *)initialValues
                                  withInt:(jint)conflictAlgorithm;

- (jboolean)inTransaction;

- (jboolean)isDatabaseIntegrityOk;

- (jboolean)isDbLockedByCurrentThread;

- (jboolean)isDbLockedByOtherThreads;

- (jboolean)isInMemoryDatabase;

- (jboolean)isOpen;

- (jboolean)isReadOnly;

- (jboolean)isWriteAheadLoggingEnabled;

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)deletedTable;

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable;

- (jboolean)needUpgradeWithInt:(jint)newVersion;

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags;

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags
                          withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                      withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit;

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy;

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy
                                  withNSString:(NSString *)limit;

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit;

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit
                                                                   withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs;

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs
                  withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable;

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable
                                                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

+ (jint)releaseMemory;

- (void)reopenReadWrite;

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)initialValues;

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
    withAndroidContentContentValues:(AndroidContentContentValues *)initialValues;

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable;

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)setLockingEnabledWithBoolean:(jboolean)lockingEnabled;

- (jlong)setMaximumSizeWithLong:(jlong)numBytes;

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize;

- (void)setPageSizeWithLong:(jlong)numBytes;

- (void)setTransactionSuccessful;

- (void)setVersionWithInt:(jint)version_;

- (NSString *)description;

- (jint)updateWithNSString:(NSString *)table
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs;

- (jint)updateWithOnConflictWithNSString:(NSString *)table
         withAndroidContentContentValues:(AndroidContentContentValues *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm;

- (jboolean)yieldIfContended;

- (jboolean)yieldIfContendedSafely;

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay;

#pragma mark Protected

- (void)java_finalize;

- (void)onAllReferencesReleased;

#pragma mark Package-Private

- (AndroidDatabaseSqliteSQLiteSession *)createSession;

+ (void)dumpAllWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                          withBoolean:(jboolean)verbose;

+ (JavaUtilArrayList *)getDbStats;

- (NSString *)getLabel;

- (jint)getThreadDefaultConnectionFlagsWithBoolean:(jboolean)readOnly;

- (AndroidDatabaseSqliteSQLiteSession *)getThreadSession;

- (void)onCorruption;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_ROLLBACK(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ROLLBACK 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_ROLLBACK, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_ABORT(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ABORT 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_ABORT, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_FAIL(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_FAIL 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_FAIL, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_IGNORE(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_IGNORE 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_IGNORE, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_REPLACE(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_REPLACE, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_NONE(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_NONE, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_SQLITE_MAX_LIKE_PATTERN_LENGTH(void);
#define AndroidDatabaseSqliteSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH 50000
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, SQLITE_MAX_LIKE_PATTERN_LENGTH, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_OPEN_READWRITE(void);
#define AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, OPEN_READWRITE, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_OPEN_READONLY(void);
#define AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, OPEN_READONLY, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_NO_LOCALIZED_COLLATORS(void);
#define AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, NO_LOCALIZED_COLLATORS, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_CREATE_IF_NECESSARY(void);
#define AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY 268435456
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, CREATE_IF_NECESSARY, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_ENABLE_WRITE_AHEAD_LOGGING(void);
#define AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING 536870912
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, ENABLE_WRITE_AHEAD_LOGGING, jint)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_MAX_SQL_CACHE_SIZE(void);
#define AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE 100
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, MAX_SQL_CACHE_SIZE, jint)

FOUNDATION_EXPORT jint AndroidDatabaseSqliteSQLiteDatabase_releaseMemory(void);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(JavaIoFile *file, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

FOUNDATION_EXPORT jboolean AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory);

FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(NSString *tables);

FOUNDATION_EXPORT JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getDbStats(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(id<AndroidUtilPrinter> printer, jboolean verbose);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabase)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatabase_CursorFactory_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabase_CursorFactory))
#define AndroidDatabaseSqliteSQLiteDatabase_CursorFactory_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidDatabaseSqliteSQLiteQuery;
@protocol AndroidDatabaseCursor;
@protocol AndroidDatabaseSqliteSQLiteCursorDriver;

@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory < JavaObject >

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_CursorFactory)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabase_CursorFactory)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatabase_CustomFunction_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabase_CustomFunction))
#define AndroidDatabaseSqliteSQLiteDatabase_CustomFunction_

@class IOSObjectArray;

@protocol AndroidDatabaseSqliteSQLiteDatabase_CustomFunction < JavaObject >

- (void)callbackWithNSStringArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_CustomFunction)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabase_CustomFunction)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatabaseConfiguration_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseConfiguration))
#define AndroidDatabaseSqliteSQLiteDatabaseConfiguration_

@class JavaUtilArrayList;
@class JavaUtilLocale;

@interface AndroidDatabaseSqliteSQLiteDatabaseConfiguration : NSObject {
 @public
  NSString *path_;
  NSString *label_;
  jint openFlags_;
  jint maxSqlCacheSize_;
  JavaUtilLocale *locale_;
  jboolean foreignKeyConstraintsEnabled_;
  JavaUtilArrayList *customFunctions_;
}

+ (NSString *)MEMORY_DB_PATH;

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)other;

- (instancetype __nonnull)initWithNSString:(NSString *)path
                                   withInt:(jint)openFlags;

- (jboolean)isInMemoryDb;

- (void)updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)other;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, path_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, label_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, customFunctions_, JavaUtilArrayList *)

inline NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_get_MEMORY_DB_PATH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, MEMORY_DB_PATH, NSString *)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *self, NSString *path, jint openFlags);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *create_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseConfiguration *create_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatabaseCorruptException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseCorruptException))
#define AndroidDatabaseSqliteSQLiteDatabaseCorruptException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteDatabaseCorruptException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabaseCorruptException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init(AndroidDatabaseSqliteSQLiteDatabaseCorruptException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseCorruptException *new_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseCorruptException *create_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabaseCorruptException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseCorruptException *new_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseCorruptException *create_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabaseCorruptException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatabaseLockedException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatabaseLockedException))
#define AndroidDatabaseSqliteSQLiteDatabaseLockedException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteDatabaseLockedException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabaseLockedException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseLockedException_init(AndroidDatabaseSqliteSQLiteDatabaseLockedException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *new_AndroidDatabaseSqliteSQLiteDatabaseLockedException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *create_AndroidDatabaseSqliteSQLiteDatabaseLockedException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabaseLockedException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *new_AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatabaseLockedException *create_AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabaseLockedException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDatatypeMismatchException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDatatypeMismatchException))
#define AndroidDatabaseSqliteSQLiteDatatypeMismatchException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteDatatypeMismatchException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatatypeMismatchException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init(AndroidDatabaseSqliteSQLiteDatatypeMismatchException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatatypeMismatchException *new_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatatypeMismatchException *create_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatatypeMismatchException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatatypeMismatchException *new_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDatatypeMismatchException *create_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatatypeMismatchException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDebug_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDebug))
#define AndroidDatabaseSqliteSQLiteDebug_

@class IOSObjectArray;
@protocol AndroidUtilPrinter;

@interface AndroidDatabaseSqliteSQLiteDebug : NSObject

+ (jboolean)DEBUG_SQL_LOG;

+ (jboolean)DEBUG_SQL_STATEMENTS;

+ (jboolean)DEBUG_SQL_TIME;

+ (jboolean)DEBUG_LOG_SLOW_QUERIES;

#pragma mark Public

+ (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                 withNSStringArray:(IOSObjectArray *)args;

+ (jboolean)shouldLogSlowQueryWithLong:(jlong)elapsedTimeMillis;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteDebug)

inline jboolean AndroidDatabaseSqliteSQLiteDebug_get_DEBUG_SQL_LOG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_LOG, jboolean)

inline jboolean AndroidDatabaseSqliteSQLiteDebug_get_DEBUG_SQL_STATEMENTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_STATEMENTS, jboolean)

inline jboolean AndroidDatabaseSqliteSQLiteDebug_get_DEBUG_SQL_TIME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_TIME, jboolean)

inline jboolean AndroidDatabaseSqliteSQLiteDebug_get_DEBUG_LOG_SLOW_QUERIES(void);
#define AndroidDatabaseSqliteSQLiteDebug_DEBUG_LOG_SLOW_QUERIES false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDebug, DEBUG_LOG_SLOW_QUERIES, jboolean)

FOUNDATION_EXPORT jboolean AndroidDatabaseSqliteSQLiteDebug_shouldLogSlowQueryWithLong_(jlong elapsedTimeMillis);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDebug_dumpWithAndroidUtilPrinter_withNSStringArray_(id<AndroidUtilPrinter> printer, IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDebug)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDebug_DbStats_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDebug_DbStats))
#define AndroidDatabaseSqliteSQLiteDebug_DbStats_

@interface AndroidDatabaseSqliteSQLiteDebug_DbStats : NSObject {
 @public
  NSString *dbName_;
  jlong pageSize_;
  jlong dbSize_;
  jint lookaside_;
  NSString *cache_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)dbName
                                  withLong:(jlong)pageCount
                                  withLong:(jlong)pageSize
                                   withInt:(jint)lookaside
                                   withInt:(jint)hits
                                   withInt:(jint)misses
                                   withInt:(jint)cachesize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDebug_DbStats)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDebug_DbStats, dbName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDebug_DbStats, cache_, NSString *)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(AndroidDatabaseSqliteSQLiteDebug_DbStats *self, NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDebug_DbStats *new_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDebug_DbStats *create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDebug_DbStats)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDirectCursorDriver_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDirectCursorDriver))
#define AndroidDatabaseSqliteSQLiteDirectCursorDriver_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;
@protocol AndroidDatabaseCursor;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;

@interface AndroidDatabaseSqliteSQLiteDirectCursorDriver : NSObject < AndroidDatabaseSqliteSQLiteCursorDriver >

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)sql
                                                         withNSString:(NSString *)editTable
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)cursorClosed;

- (void)cursorDeactivated;

- (void)cursorRequeriedWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor;

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                      withNSStringArray:(IOSObjectArray *)selectionArgs;

- (void)setBindArgumentsWithNSStringArray:(IOSObjectArray *)bindArgs;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDirectCursorDriver)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDirectCursorDriver *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, NSString *editTable, AndroidOsCancellationSignal *cancellationSignal);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDirectCursorDriver *new_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, NSString *editTable, AndroidOsCancellationSignal *cancellationSignal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDirectCursorDriver *create_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, NSString *editTable, AndroidOsCancellationSignal *cancellationSignal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDirectCursorDriver)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDiskIOException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDiskIOException))
#define AndroidDatabaseSqliteSQLiteDiskIOException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteDiskIOException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDiskIOException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDiskIOException_init(AndroidDatabaseSqliteSQLiteDiskIOException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDiskIOException *new_AndroidDatabaseSqliteSQLiteDiskIOException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDiskIOException *create_AndroidDatabaseSqliteSQLiteDiskIOException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(AndroidDatabaseSqliteSQLiteDiskIOException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDiskIOException *new_AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDiskIOException *create_AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDiskIOException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteDoneException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteDoneException))
#define AndroidDatabaseSqliteSQLiteDoneException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteDoneException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDoneException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDoneException_init(AndroidDatabaseSqliteSQLiteDoneException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDoneException *new_AndroidDatabaseSqliteSQLiteDoneException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDoneException *create_AndroidDatabaseSqliteSQLiteDoneException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(AndroidDatabaseSqliteSQLiteDoneException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDoneException *new_AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteDoneException *create_AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDoneException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteFullException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteFullException))
#define AndroidDatabaseSqliteSQLiteFullException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteFullException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteFullException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteFullException_init(AndroidDatabaseSqliteSQLiteFullException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteFullException *new_AndroidDatabaseSqliteSQLiteFullException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteFullException *create_AndroidDatabaseSqliteSQLiteFullException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(AndroidDatabaseSqliteSQLiteFullException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteFullException *new_AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteFullException *create_AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteFullException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteGlobal_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteGlobal))
#define AndroidDatabaseSqliteSQLiteGlobal_

@interface AndroidDatabaseSqliteSQLiteGlobal : NSObject

#pragma mark Public

+ (NSString *)getDefaultJournalMode;

+ (jint)getDefaultPageSize;

+ (NSString *)getDefaultSyncMode;

+ (jint)getJournalSizeLimit;

+ (jint)getWALAutoCheckpoint;

+ (jint)getWALConnectionPoolSize;

+ (NSString *)getWALSyncMode;

+ (void)initStatics OBJC_METHOD_FAMILY_NONE;

+ (jint)releaseMemory;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteGlobal)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteGlobal_initStatics(void);

FOUNDATION_EXPORT jint AndroidDatabaseSqliteSQLiteGlobal_releaseMemory(void);

FOUNDATION_EXPORT jint AndroidDatabaseSqliteSQLiteGlobal_getDefaultPageSize(void);

FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteGlobal_getDefaultJournalMode(void);

FOUNDATION_EXPORT jint AndroidDatabaseSqliteSQLiteGlobal_getJournalSizeLimit(void);

FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteGlobal_getDefaultSyncMode(void);

FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteGlobal_getWALSyncMode(void);

FOUNDATION_EXPORT jint AndroidDatabaseSqliteSQLiteGlobal_getWALAutoCheckpoint(void);

FOUNDATION_EXPORT jint AndroidDatabaseSqliteSQLiteGlobal_getWALConnectionPoolSize(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteGlobal)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteMisuseException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteMisuseException))
#define AndroidDatabaseSqliteSQLiteMisuseException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteMisuseException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteMisuseException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteMisuseException_init(AndroidDatabaseSqliteSQLiteMisuseException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteMisuseException *new_AndroidDatabaseSqliteSQLiteMisuseException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteMisuseException *create_AndroidDatabaseSqliteSQLiteMisuseException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(AndroidDatabaseSqliteSQLiteMisuseException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteMisuseException *new_AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteMisuseException *create_AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteMisuseException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteOpenHelper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteOpenHelper))
#define AndroidDatabaseSqliteSQLiteOpenHelper_

@class AndroidContentContext;
@class AndroidDatabaseSqliteSQLiteDatabase;
@protocol AndroidDatabaseDatabaseErrorHandler;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;

@interface AndroidDatabaseSqliteSQLiteOpenHelper : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext *)context
                                           withNSString:(NSString *)name
  withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                withInt:(jint)version_;

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext *)context
                                           withNSString:(NSString *)name
  withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                withInt:(jint)version_
                withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

- (void)close;

- (NSString *)getDatabaseName;

- (AndroidDatabaseSqliteSQLiteDatabase *)getReadableDatabase;

- (AndroidDatabaseSqliteSQLiteDatabase *)getWritableDatabase;

- (void)onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db;

- (void)onCreateWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db;

- (void)onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withInt:(jint)oldVersion
                                                   withInt:(jint)newVersion;

- (void)onOpenWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db;

- (void)onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion;

- (void)setWriteAheadLoggingEnabledWithBoolean:(jboolean)enabled;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteOpenHelper)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(AndroidDatabaseSqliteSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteOpenHelper)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteOutOfMemoryException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteOutOfMemoryException))
#define AndroidDatabaseSqliteSQLiteOutOfMemoryException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteOutOfMemoryException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteOutOfMemoryException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteOutOfMemoryException_init(AndroidDatabaseSqliteSQLiteOutOfMemoryException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteOutOfMemoryException *new_AndroidDatabaseSqliteSQLiteOutOfMemoryException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteOutOfMemoryException *create_AndroidDatabaseSqliteSQLiteOutOfMemoryException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(AndroidDatabaseSqliteSQLiteOutOfMemoryException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteOutOfMemoryException *new_AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteOutOfMemoryException *create_AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteOutOfMemoryException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteProgram_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteProgram))
#define AndroidDatabaseSqliteSQLiteProgram_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidDatabaseSqliteSQLiteSession;
@class AndroidOsCancellationSignal;
@class IOSByteArray;
@class IOSObjectArray;

@interface AndroidDatabaseSqliteSQLiteProgram : AndroidDatabaseSqliteSQLiteClosable

#pragma mark Public

- (void)bindAllArgsAsStringsWithNSStringArray:(IOSObjectArray *)bindArgs;

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value;

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value;

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value;

- (void)bindNullWithInt:(jint)index;

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value;

- (void)clearBindings;

- (jint)getUniqueId;

#pragma mark Protected

- (jint)getConnectionFlags;

- (AndroidDatabaseSqliteSQLiteSession *)getSession;

- (void)onAllReferencesReleased;

- (void)onCorruption;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)sql
                                                    withNSObjectArray:(IOSObjectArray *)bindArgs
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignalForPrepare;

- (IOSObjectArray *)getBindArgs;

- (IOSObjectArray *)getColumnNames;

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabase;

- (NSString *)getSql;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteProgram)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteProgram *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs, AndroidOsCancellationSignal *cancellationSignalForPrepare);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteProgram)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteQuery_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteQuery))
#define AndroidDatabaseSqliteSQLiteQuery_

@class AndroidDatabaseCursorWindow;
@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;

@interface AndroidDatabaseSqliteSQLiteQuery : AndroidDatabaseSqliteSQLiteProgram

#pragma mark Public

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)query
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jint)fillWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                          withInt:(jint)startPos
                                          withInt:(jint)requiredPos
                                      withBoolean:(jboolean)countAllRows;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)arg0
                                                         withNSString:(NSString *)arg1
                                                    withNSObjectArray:(IOSObjectArray *)arg2
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteQuery)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteQuery *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, AndroidOsCancellationSignal *cancellationSignal);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteQuery *new_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, AndroidOsCancellationSignal *cancellationSignal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteQuery *create_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, AndroidOsCancellationSignal *cancellationSignal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteQuery)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteQueryBuilder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteQueryBuilder))
#define AndroidDatabaseSqliteSQLiteQueryBuilder_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@protocol AndroidDatabaseCursor;
@protocol AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;
@protocol JavaLangCharSequence;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface AndroidDatabaseSqliteSQLiteQueryBuilder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns;

- (void)appendWhereWithJavaLangCharSequence:(id<JavaLangCharSequence>)inWhere;

- (void)appendWhereEscapeStringWithNSString:(NSString *)inWhere;

- (NSString *)buildQueryWithNSStringArray:(IOSObjectArray *)projectionIn
                             withNSString:(NSString *)selection
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)sortOrder
                             withNSString:(NSString *)limit;

- (NSString *)buildQueryWithNSStringArray:(IOSObjectArray *)projectionIn
                             withNSString:(NSString *)selection
                        withNSStringArray:(IOSObjectArray *)selectionArgs
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)sortOrder
                             withNSString:(NSString *)limit;

+ (NSString *)buildQueryStringWithBoolean:(jboolean)distinct
                             withNSString:(NSString *)tables
                        withNSStringArray:(IOSObjectArray *)columns
                             withNSString:(NSString *)where
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)orderBy
                             withNSString:(NSString *)limit;

- (NSString *)buildUnionQueryWithNSStringArray:(IOSObjectArray *)subQueries
                                  withNSString:(NSString *)sortOrder
                                  withNSString:(NSString *)limit;

- (NSString *)buildUnionSubQueryWithNSString:(NSString *)typeDiscriminatorColumn
                           withNSStringArray:(IOSObjectArray *)unionColumns
                             withJavaUtilSet:(id<JavaUtilSet>)columnsPresentInTable
                                     withInt:(jint)computedColumnsOffset
                                withNSString:(NSString *)typeDiscriminatorValue
                                withNSString:(NSString *)selection
                                withNSString:(NSString *)groupBy
                                withNSString:(NSString *)having;

- (NSString *)buildUnionSubQueryWithNSString:(NSString *)typeDiscriminatorColumn
                           withNSStringArray:(IOSObjectArray *)unionColumns
                             withJavaUtilSet:(id<JavaUtilSet>)columnsPresentInTable
                                     withInt:(jint)computedColumnsOffset
                                withNSString:(NSString *)typeDiscriminatorValue
                                withNSString:(NSString *)selection
                           withNSStringArray:(IOSObjectArray *)selectionArgs
                                withNSString:(NSString *)groupBy
                                withNSString:(NSString *)having;

- (NSString *)getTables;

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder;

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder
                                                             withNSString:(NSString *)limit;

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder
                                                             withNSString:(NSString *)limit
                                          withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)setCursorFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory;

- (void)setDistinctWithBoolean:(jboolean)distinct;

- (void)setProjectionMapWithJavaUtilMap:(id<JavaUtilMap>)columnMap;

- (void)setStrictWithBoolean:(jboolean)flag;

- (void)setTablesWithNSString:(NSString *)inTables;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteQueryBuilder)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteQueryBuilder_init(AndroidDatabaseSqliteSQLiteQueryBuilder *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteQueryBuilder *new_AndroidDatabaseSqliteSQLiteQueryBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteQueryBuilder *create_AndroidDatabaseSqliteSQLiteQueryBuilder_init(void);

FOUNDATION_EXPORT NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(jboolean distinct, NSString *tables, IOSObjectArray *columns, NSString *where, NSString *groupBy, NSString *having, NSString *orderBy, NSString *limit);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteQueryBuilder)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException))
#define AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *new_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *create_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *new_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *create_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteSession_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteSession))
#define AndroidDatabaseSqliteSQLiteSession_

@class AndroidDatabaseCursorWindow;
@class AndroidDatabaseSqliteSQLiteConnectionPool;
@class AndroidDatabaseSqliteSQLiteStatementInfo;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;
@protocol AndroidDatabaseSqliteSQLiteTransactionListener;

@interface AndroidDatabaseSqliteSQLiteSession : NSObject

+ (jint)TRANSACTION_MODE_DEFERRED;

+ (jint)TRANSACTION_MODE_IMMEDIATE;

+ (jint)TRANSACTION_MODE_EXCLUSIVE;

#pragma mark Public

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)connectionPool;

- (void)beginTransactionWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                        withInt:(jint)connectionFlags
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)endTransactionWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
                    withInt:(jint)connectionFlags
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
                                      withInt:(jint)connectionFlags
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
                                   withInt:(jint)connectionFlags
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                                         withInt:(jint)connectionFlags
                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
                            withInt:(jint)connectionFlags
    withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
                                   withInt:(jint)connectionFlags
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jboolean)hasConnection;

- (jboolean)hasNestedTransaction;

- (jboolean)hasTransaction;

- (void)prepareWithNSString:(NSString *)sql
                    withInt:(jint)connectionFlags
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo;

- (void)setTransactionSuccessful;

- (jboolean)yieldTransactionWithLong:(jlong)sleepAfterYieldDelayMillis
                         withBoolean:(jboolean)throwIfUnsafe
     withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteSession)

inline jint AndroidDatabaseSqliteSQLiteSession_get_TRANSACTION_MODE_DEFERRED(void);
#define AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_DEFERRED 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteSession, TRANSACTION_MODE_DEFERRED, jint)

inline jint AndroidDatabaseSqliteSQLiteSession_get_TRANSACTION_MODE_IMMEDIATE(void);
#define AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteSession, TRANSACTION_MODE_IMMEDIATE, jint)

inline jint AndroidDatabaseSqliteSQLiteSession_get_TRANSACTION_MODE_EXCLUSIVE(void);
#define AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteSession, TRANSACTION_MODE_EXCLUSIVE, jint)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteSession *new_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteSession *create_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteSession)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteStatement_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteStatement))
#define AndroidDatabaseSqliteSQLiteStatement_

@class AndroidDatabaseSqliteSQLiteDatabase;
@class AndroidOsCancellationSignal;
@class IOSObjectArray;

@interface AndroidDatabaseSqliteSQLiteStatement : AndroidDatabaseSqliteSQLiteProgram

#pragma mark Public

- (void)execute;

- (jlong)executeInsert;

- (jint)executeUpdateDelete;

- (jlong)simpleQueryForLong;

- (NSString *)simpleQueryForString;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)sql
                                                    withNSObjectArray:(IOSObjectArray *)bindArgs;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)arg0
                                                         withNSString:(NSString *)arg1
                                                    withNSObjectArray:(IOSObjectArray *)arg2
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteStatement)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteStatement *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteStatement *new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteStatement *create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteStatement)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteStatementInfo_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteStatementInfo))
#define AndroidDatabaseSqliteSQLiteStatementInfo_

@class IOSObjectArray;

@interface AndroidDatabaseSqliteSQLiteStatementInfo : NSObject {
 @public
  jint numParameters_;
  IOSObjectArray *columnNames_;
  jboolean readOnly_;
}

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteStatementInfo)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteStatementInfo, columnNames_, IOSObjectArray *)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteStatementInfo_init(AndroidDatabaseSqliteSQLiteStatementInfo *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteStatementInfo *new_AndroidDatabaseSqliteSQLiteStatementInfo_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteStatementInfo *create_AndroidDatabaseSqliteSQLiteStatementInfo_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteStatementInfo)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteTableLockedException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteTableLockedException))
#define AndroidDatabaseSqliteSQLiteTableLockedException_

@class JavaLangThrowable;

@interface AndroidDatabaseSqliteSQLiteTableLockedException : AndroidDatabaseSqliteSQLiteException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)error;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteTableLockedException)

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteTableLockedException_init(AndroidDatabaseSqliteSQLiteTableLockedException *self);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteTableLockedException *new_AndroidDatabaseSqliteSQLiteTableLockedException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteTableLockedException *create_AndroidDatabaseSqliteSQLiteTableLockedException_init(void);

FOUNDATION_EXPORT void AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(AndroidDatabaseSqliteSQLiteTableLockedException *self, NSString *error);

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteTableLockedException *new_AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(NSString *error) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidDatabaseSqliteSQLiteTableLockedException *create_AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteTableLockedException)

#endif

#if !defined (AndroidDatabaseSqliteSQLiteTransactionListener_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidDatabaseSqliteSQLiteTransactionListener))
#define AndroidDatabaseSqliteSQLiteTransactionListener_

@protocol AndroidDatabaseSqliteSQLiteTransactionListener < JavaObject >

- (void)onBegin;

- (void)onCommit;

- (void)onRollback;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteTransactionListener)

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteTransactionListener)

#endif

#if !defined (AndroidInternalUtilFastXmlSerializer_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidInternalUtilFastXmlSerializer))
#define AndroidInternalUtilFastXmlSerializer_

#define RESTRICT_OrgXmlpullV1XmlSerializer 1
#define INCLUDE_OrgXmlpullV1XmlSerializer 1
#include "org/xmlpull/v1/XmlSerializer.h"

@class IOSCharArray;
@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaLangBoolean;

@interface AndroidInternalUtilFastXmlSerializer : NSObject < OrgXmlpullV1XmlSerializer >

#pragma mark Public

- (instancetype __nonnull)init;

- (id<OrgXmlpullV1XmlSerializer>)attributeWithNSString:(NSString *)namespace_
                                          withNSString:(NSString *)name
                                          withNSString:(NSString *)value;

- (void)cdsectWithNSString:(NSString *)text;

- (void)commentWithNSString:(NSString *)text;

- (void)docdeclWithNSString:(NSString *)text;

- (void)endDocument;

- (id<OrgXmlpullV1XmlSerializer>)endTagWithNSString:(NSString *)namespace_
                                       withNSString:(NSString *)name;

- (void)entityRefWithNSString:(NSString *)text;

- (void)flush;

- (jint)getDepth;

- (jboolean)getFeatureWithNSString:(NSString *)name;

- (NSString *)getName;

- (NSString *)getNamespace;

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                        withBoolean:(jboolean)generatePrefix;

- (id)getPropertyWithNSString:(NSString *)name;

- (void)ignorableWhitespaceWithNSString:(NSString *)text;

- (void)processingInstructionWithNSString:(NSString *)text;

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)state;

- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)os
                           withNSString:(NSString *)encoding;

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer;

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)namespace_;

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value;

- (void)startDocumentWithNSString:(NSString *)encoding
              withJavaLangBoolean:(JavaLangBoolean *)standalone;

- (id<OrgXmlpullV1XmlSerializer>)startTagWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name;

- (id<OrgXmlpullV1XmlSerializer>)textWithCharArray:(IOSCharArray *)buf
                                           withInt:(jint)start
                                           withInt:(jint)len;

- (id<OrgXmlpullV1XmlSerializer>)textWithNSString:(NSString *)text;

@end

J2OBJC_STATIC_INIT(AndroidInternalUtilFastXmlSerializer)

FOUNDATION_EXPORT void AndroidInternalUtilFastXmlSerializer_init(AndroidInternalUtilFastXmlSerializer *self);

FOUNDATION_EXPORT AndroidInternalUtilFastXmlSerializer *new_AndroidInternalUtilFastXmlSerializer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidInternalUtilFastXmlSerializer *create_AndroidInternalUtilFastXmlSerializer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidInternalUtilFastXmlSerializer)

#endif

#if !defined (AndroidInternalUtilXmlUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidInternalUtilXmlUtils))
#define AndroidInternalUtilXmlUtils_

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol OrgXmlpullV1XmlPullParser;
@protocol OrgXmlpullV1XmlSerializer;

@interface AndroidInternalUtilXmlUtils : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)beginDocumentWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                      withNSString:(NSString *)firstElementName;

+ (jboolean)convertValueToBooleanWithJavaLangCharSequence:(id<JavaLangCharSequence>)value
                                              withBoolean:(jboolean)defaultValue;

+ (jint)convertValueToIntWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSeq
                                          withInt:(jint)defaultValue;

+ (jint)convertValueToListWithJavaLangCharSequence:(id<JavaLangCharSequence>)value
                                 withNSStringArray:(IOSObjectArray *)options
                                           withInt:(jint)defaultValue;

+ (jint)convertValueToUnsignedIntWithNSString:(NSString *)value
                                      withInt:(jint)defaultValue;

+ (void)nextElementWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser;

+ (jint)parseUnsignedIntAttributeWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSeq;

+ (JavaUtilArrayList *)readListXmlWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (JavaUtilHashMap *)readMapXmlWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (IOSIntArray *)readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                                     withNSString:(NSString *)endTag
                                                withNSStringArray:(IOSObjectArray *)name;

+ (JavaUtilArrayList *)readThisListXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                                       withNSString:(NSString *)endTag
                                                  withNSStringArray:(IOSObjectArray *)name;

+ (JavaUtilHashMap *)readThisMapXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                                    withNSString:(NSString *)endTag
                                               withNSStringArray:(IOSObjectArray *)name;

+ (id)readValueXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                              withNSStringArray:(IOSObjectArray *)name;

+ (void)skipCurrentTagWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser;

+ (void)writeByteArrayXmlWithByteArray:(IOSByteArray *)val
                          withNSString:(NSString *)name
         withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg;

+ (void)writeIntArrayXmlWithIntArray:(IOSIntArray *)val
                        withNSString:(NSString *)name
       withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg;

+ (void)writeListXmlWithJavaUtilList:(id<JavaUtilList>)val
              withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)writeListXmlWithJavaUtilList:(id<JavaUtilList>)val
                        withNSString:(NSString *)name
       withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg;

+ (void)writeMapXmlWithJavaUtilMap:(id<JavaUtilMap>)val
            withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)writeMapXmlWithJavaUtilMap:(id<JavaUtilMap>)val
                      withNSString:(NSString *)name
     withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg;

+ (void)writeValueXmlWithId:(id)v
               withNSString:(NSString *)name
withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg;

@end

J2OBJC_STATIC_INIT(AndroidInternalUtilXmlUtils)

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_init(AndroidInternalUtilXmlUtils *self);

FOUNDATION_EXPORT AndroidInternalUtilXmlUtils *new_AndroidInternalUtilXmlUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidInternalUtilXmlUtils *create_AndroidInternalUtilXmlUtils_init(void);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_skipCurrentTagWithOrgXmlpullV1XmlPullParser_(id<OrgXmlpullV1XmlPullParser> parser);

FOUNDATION_EXPORT jint AndroidInternalUtilXmlUtils_convertValueToListWithJavaLangCharSequence_withNSStringArray_withInt_(id<JavaLangCharSequence> value, IOSObjectArray *options, jint defaultValue);

FOUNDATION_EXPORT jboolean AndroidInternalUtilXmlUtils_convertValueToBooleanWithJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> value, jboolean defaultValue);

FOUNDATION_EXPORT jint AndroidInternalUtilXmlUtils_convertValueToIntWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> charSeq, jint defaultValue);

FOUNDATION_EXPORT jint AndroidInternalUtilXmlUtils_convertValueToUnsignedIntWithNSString_withInt_(NSString *value, jint defaultValue);

FOUNDATION_EXPORT jint AndroidInternalUtilXmlUtils_parseUnsignedIntAttributeWithJavaLangCharSequence_(id<JavaLangCharSequence> charSeq);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withJavaIoOutputStream_(id<JavaUtilMap> val, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withJavaIoOutputStream_(id<JavaUtilList> val, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withNSString_withOrgXmlpullV1XmlSerializer_(id<JavaUtilMap> val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withNSString_withOrgXmlpullV1XmlSerializer_(id<JavaUtilList> val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeByteArrayXmlWithByteArray_withNSString_withOrgXmlpullV1XmlSerializer_(IOSByteArray *val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeIntArrayXmlWithIntArray_withNSString_withOrgXmlpullV1XmlSerializer_(IOSIntArray *val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_writeValueXmlWithId_withNSString_withOrgXmlpullV1XmlSerializer_(id v, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg);

FOUNDATION_EXPORT JavaUtilHashMap *AndroidInternalUtilXmlUtils_readMapXmlWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT JavaUtilArrayList *AndroidInternalUtilXmlUtils_readListXmlWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT JavaUtilHashMap *AndroidInternalUtilXmlUtils_readThisMapXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, NSString *endTag, IOSObjectArray *name);

FOUNDATION_EXPORT JavaUtilArrayList *AndroidInternalUtilXmlUtils_readThisListXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, NSString *endTag, IOSObjectArray *name);

FOUNDATION_EXPORT IOSIntArray *AndroidInternalUtilXmlUtils_readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, NSString *endTag, IOSObjectArray *name);

FOUNDATION_EXPORT id AndroidInternalUtilXmlUtils_readValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, IOSObjectArray *name);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_beginDocumentWithOrgXmlpullV1XmlPullParser_withNSString_(id<OrgXmlpullV1XmlPullParser> parser, NSString *firstElementName);

FOUNDATION_EXPORT void AndroidInternalUtilXmlUtils_nextElementWithOrgXmlpullV1XmlPullParser_(id<OrgXmlpullV1XmlPullParser> parser);

J2OBJC_TYPE_LITERAL_HEADER(AndroidInternalUtilXmlUtils)

#endif

#if !defined (AndroidOsParcelable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsParcelable))
#define AndroidOsParcelable_

@class AndroidOsParcel;

@protocol AndroidOsParcelable < JavaObject >

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)dest
                                 withInt:(jint)flags;

@end

@interface AndroidOsParcelable : NSObject

+ (jint)PARCELABLE_WRITE_RETURN_VALUE;

+ (jint)CONTENTS_FILE_DESCRIPTOR;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsParcelable)

inline jint AndroidOsParcelable_get_PARCELABLE_WRITE_RETURN_VALUE(void);
#define AndroidOsParcelable_PARCELABLE_WRITE_RETURN_VALUE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelable, PARCELABLE_WRITE_RETURN_VALUE, jint)

inline jint AndroidOsParcelable_get_CONTENTS_FILE_DESCRIPTOR(void);
#define AndroidOsParcelable_CONTENTS_FILE_DESCRIPTOR 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelable, CONTENTS_FILE_DESCRIPTOR, jint)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsParcelable)

#endif

#if !defined (AndroidNetUri_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri))
#define AndroidNetUri_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class AndroidNetUri_Builder;
@class AndroidOsParcel;
@class JavaIoFile;
@protocol AndroidOsParcelable_Creator;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface AndroidNetUri : NSObject < AndroidOsParcelable, JavaLangComparable >

+ (AndroidNetUri *)EMPTY;

+ (id<AndroidOsParcelable_Creator>)CREATOR;

#pragma mark Public

- (AndroidNetUri_Builder *)buildUpon;

- (void)checkFileUriExposedWithNSString:(NSString *)location;

- (jint)compareToWithId:(AndroidNetUri *)other;

+ (NSString *)decodeWithNSString:(NSString *)s;

+ (NSString *)encodeWithNSString:(NSString *)s;

+ (NSString *)encodeWithNSString:(NSString *)s
                    withNSString:(NSString *)allow;

- (jboolean)isEqual:(id)o;

+ (AndroidNetUri *)fromFileWithJavaIoFile:(JavaIoFile *)file;

+ (AndroidNetUri *)fromPartsWithNSString:(NSString *)scheme
                            withNSString:(NSString *)ssp
                            withNSString:(NSString *)fragment;

- (NSString *)getAuthority;

- (jboolean)getBooleanQueryParameterWithNSString:(NSString *)key
                                     withBoolean:(jboolean)defaultValue;

- (AndroidNetUri *)getCanonicalUri;

- (NSString *)getEncodedAuthority;

- (NSString *)getEncodedFragment;

- (NSString *)getEncodedPath;

- (NSString *)getEncodedQuery;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getEncodedUserInfo;

- (NSString *)getFragment;

- (NSString *)getHost;

- (NSString *)getLastPathSegment;

- (NSString *)getPath;

- (id<JavaUtilList>)getPathSegments;

- (jint)getPort;

- (NSString *)getQuery;

- (NSString *)getQueryParameterWithNSString:(NSString *)key;

- (id<JavaUtilSet>)getQueryParameterNames;

- (id<JavaUtilList>)getQueryParametersWithNSString:(NSString *)key;

- (NSString *)getScheme;

- (NSString *)getSchemeSpecificPart;

- (NSString *)getUserInfo;

- (NSUInteger)hash;

- (jboolean)isAbsolute;

- (jboolean)isHierarchical;

- (jboolean)isOpaque;

- (jboolean)isPathPrefixMatchWithAndroidNetUri:(AndroidNetUri *)prefix;

- (jboolean)isRelative;

- (AndroidNetUri *)normalizeScheme;

+ (AndroidNetUri *)parseWithNSString:(NSString *)uriString;

- (NSString *)toSafeString;

- (NSString *)description;

+ (AndroidNetUri *)withAppendedPathWithAndroidNetUri:(AndroidNetUri *)baseUri
                                        withNSString:(NSString *)pathSegment;

+ (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)outArg
                       withAndroidNetUri:(AndroidNetUri *)uri;

@end

J2OBJC_STATIC_INIT(AndroidNetUri)

inline AndroidNetUri *AndroidNetUri_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidNetUri *AndroidNetUri_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, EMPTY, AndroidNetUri *)

inline id<AndroidOsParcelable_Creator> AndroidNetUri_get_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<AndroidOsParcelable_Creator> AndroidNetUri_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, CREATOR, id<AndroidOsParcelable_Creator>)

FOUNDATION_EXPORT AndroidNetUri *AndroidNetUri_parseWithNSString_(NSString *uriString);

FOUNDATION_EXPORT AndroidNetUri *AndroidNetUri_fromFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT AndroidNetUri *AndroidNetUri_fromPartsWithNSString_withNSString_withNSString_(NSString *scheme, NSString *ssp, NSString *fragment);

FOUNDATION_EXPORT void AndroidNetUri_writeToParcelWithAndroidOsParcel_withAndroidNetUri_(AndroidOsParcel *outArg, AndroidNetUri *uri);

FOUNDATION_EXPORT NSString *AndroidNetUri_encodeWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *AndroidNetUri_encodeWithNSString_withNSString_(NSString *s, NSString *allow);

FOUNDATION_EXPORT NSString *AndroidNetUri_decodeWithNSString_(NSString *s);

FOUNDATION_EXPORT AndroidNetUri *AndroidNetUri_withAppendedPathWithAndroidNetUri_withNSString_(AndroidNetUri *baseUri, NSString *pathSegment);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri)

#endif

#if !defined (AndroidNetUri_PathSegments_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_PathSegments))
#define AndroidNetUri_PathSegments_

#define RESTRICT_JavaUtilAbstractList 1
#define INCLUDE_JavaUtilAbstractList 1
#include "java/util/AbstractList.h"

#define RESTRICT_JavaUtilRandomAccess 1
#define INCLUDE_JavaUtilRandomAccess 1
#include "java/util/RandomAccess.h"

@class IOSObjectArray;

@interface AndroidNetUri_PathSegments : JavaUtilAbstractList < JavaUtilRandomAccess > {
 @public
  IOSObjectArray *segments_;
  jint size_;
}

+ (AndroidNetUri_PathSegments *)EMPTY;

#pragma mark Public

- (NSString *)getWithInt:(jint)index;

- (NSString *)removeWithInt:(jint)arg0;

- (NSString *)setWithInt:(jint)arg0
                  withId:(NSString *)arg1;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)segments
                                        withInt:(jint)size;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidNetUri_PathSegments)

J2OBJC_FIELD_SETTER(AndroidNetUri_PathSegments, segments_, IOSObjectArray *)

inline AndroidNetUri_PathSegments *AndroidNetUri_PathSegments_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidNetUri_PathSegments *AndroidNetUri_PathSegments_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri_PathSegments, EMPTY, AndroidNetUri_PathSegments *)

FOUNDATION_EXPORT void AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(AndroidNetUri_PathSegments *self, IOSObjectArray *segments, jint size);

FOUNDATION_EXPORT AndroidNetUri_PathSegments *new_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidNetUri_PathSegments *create_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_PathSegments)

#endif

#if !defined (AndroidNetUri_PathSegmentsBuilder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_PathSegmentsBuilder))
#define AndroidNetUri_PathSegmentsBuilder_

@class AndroidNetUri_PathSegments;
@class IOSObjectArray;

@interface AndroidNetUri_PathSegmentsBuilder : NSObject {
 @public
  IOSObjectArray *segments_;
  jint size_;
}

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (void)addWithNSString:(NSString *)segment;

- (AndroidNetUri_PathSegments *)build;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_PathSegmentsBuilder)

J2OBJC_FIELD_SETTER(AndroidNetUri_PathSegmentsBuilder, segments_, IOSObjectArray *)

FOUNDATION_EXPORT void AndroidNetUri_PathSegmentsBuilder_init(AndroidNetUri_PathSegmentsBuilder *self);

FOUNDATION_EXPORT AndroidNetUri_PathSegmentsBuilder *new_AndroidNetUri_PathSegmentsBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidNetUri_PathSegmentsBuilder *create_AndroidNetUri_PathSegmentsBuilder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_PathSegmentsBuilder)

#endif

#if !defined (AndroidNetUri_Builder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_Builder))
#define AndroidNetUri_Builder_

@class AndroidNetUri;
@class AndroidNetUri_Part;
@class AndroidNetUri_PathPart;

@interface AndroidNetUri_Builder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (AndroidNetUri_Builder *)appendEncodedPathWithNSString:(NSString *)newSegment;

- (AndroidNetUri_Builder *)appendPathWithNSString:(NSString *)newSegment;

- (AndroidNetUri_Builder *)appendQueryParameterWithNSString:(NSString *)key
                                               withNSString:(NSString *)value;

- (AndroidNetUri_Builder *)authorityWithNSString:(NSString *)authority;

- (AndroidNetUri *)build;

- (AndroidNetUri_Builder *)clearQuery;

- (AndroidNetUri_Builder *)encodedAuthorityWithNSString:(NSString *)authority;

- (AndroidNetUri_Builder *)encodedFragmentWithNSString:(NSString *)fragment;

- (AndroidNetUri_Builder *)encodedOpaquePartWithNSString:(NSString *)opaquePart;

- (AndroidNetUri_Builder *)encodedPathWithNSString:(NSString *)path;

- (AndroidNetUri_Builder *)encodedQueryWithNSString:(NSString *)query;

- (AndroidNetUri_Builder *)fragmentWithNSString:(NSString *)fragment;

- (AndroidNetUri_Builder *)opaquePartWithNSString:(NSString *)opaquePart;

- (AndroidNetUri_Builder *)pathWithNSString:(NSString *)path;

- (AndroidNetUri_Builder *)queryWithNSString:(NSString *)query;

- (AndroidNetUri_Builder *)schemeWithNSString:(NSString *)scheme;

- (NSString *)description;

#pragma mark Package-Private

- (AndroidNetUri_Builder *)authorityWithAndroidNetUri_Part:(AndroidNetUri_Part *)authority;

- (AndroidNetUri_Builder *)fragmentWithAndroidNetUri_Part:(AndroidNetUri_Part *)fragment;

- (AndroidNetUri_Builder *)opaquePartWithAndroidNetUri_Part:(AndroidNetUri_Part *)opaquePart;

- (AndroidNetUri_Builder *)pathWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path;

- (AndroidNetUri_Builder *)queryWithAndroidNetUri_Part:(AndroidNetUri_Part *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_Builder)

FOUNDATION_EXPORT void AndroidNetUri_Builder_init(AndroidNetUri_Builder *self);

FOUNDATION_EXPORT AndroidNetUri_Builder *new_AndroidNetUri_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidNetUri_Builder *create_AndroidNetUri_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_Builder)

#endif

#if !defined (AndroidOsParcelable_Creator_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsParcelable_Creator))
#define AndroidOsParcelable_Creator_

@class AndroidOsParcel;
@class IOSObjectArray;

@protocol AndroidOsParcelable_Creator < JavaObject >

- (id)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)source;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsParcelable_Creator)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsParcelable_Creator)

#endif

#if !defined (AndroidNetUri_AbstractPart_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_AbstractPart))
#define AndroidNetUri_AbstractPart_

@class AndroidOsParcel;

@interface AndroidNetUri_AbstractPart : NSObject {
 @public
  volatile_id encoded_;
  volatile_id decoded_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString *)encoded
                              withNSString:(NSString *)decoded;

- (NSString *)getDecoded;

- (NSString *)getEncoded;

- (void)writeToWithAndroidOsParcel:(AndroidOsParcel *)parcel;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_AbstractPart)

J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_AbstractPart, encoded_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_AbstractPart, decoded_, NSString *)

FOUNDATION_EXPORT void AndroidNetUri_AbstractPart_initWithNSString_withNSString_(AndroidNetUri_AbstractPart *self, NSString *encoded, NSString *decoded);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_AbstractPart)

#endif

#if !defined (AndroidNetUri_AbstractPart_Representation_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_AbstractPart_Representation))
#define AndroidNetUri_AbstractPart_Representation_

@interface AndroidNetUri_AbstractPart_Representation : NSObject

+ (jint)BOTH;

+ (jint)ENCODED;

+ (jint)DECODED;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_AbstractPart_Representation)

inline jint AndroidNetUri_AbstractPart_Representation_get_BOTH(void);
#define AndroidNetUri_AbstractPart_Representation_BOTH 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_AbstractPart_Representation, BOTH, jint)

inline jint AndroidNetUri_AbstractPart_Representation_get_ENCODED(void);
#define AndroidNetUri_AbstractPart_Representation_ENCODED 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_AbstractPart_Representation, ENCODED, jint)

inline jint AndroidNetUri_AbstractPart_Representation_get_DECODED(void);
#define AndroidNetUri_AbstractPart_Representation_DECODED 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_AbstractPart_Representation, DECODED, jint)

FOUNDATION_EXPORT void AndroidNetUri_AbstractPart_Representation_init(AndroidNetUri_AbstractPart_Representation *self);

FOUNDATION_EXPORT AndroidNetUri_AbstractPart_Representation *new_AndroidNetUri_AbstractPart_Representation_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidNetUri_AbstractPart_Representation *create_AndroidNetUri_AbstractPart_Representation_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_AbstractPart_Representation)

#endif

#if !defined (AndroidNetUri_Part_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_Part))
#define AndroidNetUri_Part_

@class AndroidOsParcel;

@interface AndroidNetUri_Part : AndroidNetUri_AbstractPart

+ (AndroidNetUri_Part *)NULL_;

+ (AndroidNetUri_Part *)EMPTY;

#pragma mark Package-Private

+ (AndroidNetUri_Part *)fromWithNSString:(NSString *)encoded
                            withNSString:(NSString *)decoded;

+ (AndroidNetUri_Part *)fromDecodedWithNSString:(NSString *)decoded;

+ (AndroidNetUri_Part *)fromEncodedWithNSString:(NSString *)encoded;

- (NSString *)getEncoded;

- (jboolean)isEmpty;

+ (AndroidNetUri_Part *)nonNullWithAndroidNetUri_Part:(AndroidNetUri_Part *)part;

+ (AndroidNetUri_Part *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

@end

J2OBJC_STATIC_INIT(AndroidNetUri_Part)

inline AndroidNetUri_Part *AndroidNetUri_Part_get_NULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri_Part, NULL, AndroidNetUri_Part *)

inline AndroidNetUri_Part *AndroidNetUri_Part_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri_Part, EMPTY, AndroidNetUri_Part *)

FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(AndroidNetUri_Part *part);

FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_fromEncodedWithNSString_(NSString *encoded);

FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_fromDecodedWithNSString_(NSString *decoded);

FOUNDATION_EXPORT AndroidNetUri_Part *AndroidNetUri_Part_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_Part)

#endif

#if !defined (AndroidNetUri_PathPart_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidNetUri_PathPart))
#define AndroidNetUri_PathPart_

@class AndroidNetUri_PathSegments;
@class AndroidOsParcel;

@interface AndroidNetUri_PathPart : AndroidNetUri_AbstractPart

+ (AndroidNetUri_PathPart *)NULL_;

+ (AndroidNetUri_PathPart *)EMPTY;

#pragma mark Package-Private

+ (AndroidNetUri_PathPart *)appendDecodedSegmentWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart
                                                              withNSString:(NSString *)decoded;

+ (AndroidNetUri_PathPart *)appendEncodedSegmentWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart
                                                              withNSString:(NSString *)newSegment;

+ (AndroidNetUri_PathPart *)fromWithNSString:(NSString *)encoded
                                withNSString:(NSString *)decoded;

+ (AndroidNetUri_PathPart *)fromDecodedWithNSString:(NSString *)decoded;

+ (AndroidNetUri_PathPart *)fromEncodedWithNSString:(NSString *)encoded;

- (NSString *)getEncoded;

- (AndroidNetUri_PathSegments *)getPathSegments;

+ (AndroidNetUri_PathPart *)makeAbsoluteWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart;

+ (AndroidNetUri_PathPart *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

@end

J2OBJC_STATIC_INIT(AndroidNetUri_PathPart)

inline AndroidNetUri_PathPart *AndroidNetUri_PathPart_get_NULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri_PathPart, NULL, AndroidNetUri_PathPart *)

inline AndroidNetUri_PathPart *AndroidNetUri_PathPart_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri_PathPart, EMPTY, AndroidNetUri_PathPart *)

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(AndroidNetUri_PathPart *oldPart, NSString *newSegment);

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(AndroidNetUri_PathPart *oldPart, NSString *decoded);

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromEncodedWithNSString_(NSString *encoded);

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromDecodedWithNSString_(NSString *decoded);

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded);

FOUNDATION_EXPORT AndroidNetUri_PathPart *AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(AndroidNetUri_PathPart *oldPart);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_PathPart)

#endif

#if !defined (AndroidUtilAndroidRuntimeException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilAndroidRuntimeException))
#define AndroidUtilAndroidRuntimeException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangException;
@class JavaLangThrowable;

@interface AndroidUtilAndroidRuntimeException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)cause;

- (instancetype __nonnull)initWithNSString:(NSString *)name;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilAndroidRuntimeException)

FOUNDATION_EXPORT void AndroidUtilAndroidRuntimeException_init(AndroidUtilAndroidRuntimeException *self);

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_init(void);

FOUNDATION_EXPORT void AndroidUtilAndroidRuntimeException_initWithNSString_(AndroidUtilAndroidRuntimeException *self, NSString *name);

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(AndroidUtilAndroidRuntimeException *self, NSString *name, JavaLangThrowable *cause);

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *name, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *name, JavaLangThrowable *cause);

FOUNDATION_EXPORT void AndroidUtilAndroidRuntimeException_initWithJavaLangException_(AndroidUtilAndroidRuntimeException *self, JavaLangException *cause);

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_initWithJavaLangException_(JavaLangException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_initWithJavaLangException_(JavaLangException *cause);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilAndroidRuntimeException)

#endif

#if !defined (AndroidOsBadParcelableException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsBadParcelableException))
#define AndroidOsBadParcelableException_

@class JavaLangException;
@class JavaLangThrowable;

@interface AndroidOsBadParcelableException : AndroidUtilAndroidRuntimeException

#pragma mark Public

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)cause;

- (instancetype __nonnull)initWithNSString:(NSString *)msg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsBadParcelableException)

FOUNDATION_EXPORT void AndroidOsBadParcelableException_initWithNSString_(AndroidOsBadParcelableException *self, NSString *msg);

FOUNDATION_EXPORT AndroidOsBadParcelableException *new_AndroidOsBadParcelableException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBadParcelableException *create_AndroidOsBadParcelableException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void AndroidOsBadParcelableException_initWithJavaLangException_(AndroidOsBadParcelableException *self, JavaLangException *cause);

FOUNDATION_EXPORT AndroidOsBadParcelableException *new_AndroidOsBadParcelableException_initWithJavaLangException_(JavaLangException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBadParcelableException *create_AndroidOsBadParcelableException_initWithJavaLangException_(JavaLangException *cause);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsBadParcelableException)

#endif

#if !defined (AndroidOsBuild_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsBuild))
#define AndroidOsBuild_

@interface AndroidOsBuild : NSObject

+ (NSString *)UNKNOWN;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsBuild)

inline NSString *AndroidOsBuild_get_UNKNOWN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidOsBuild_UNKNOWN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsBuild, UNKNOWN, NSString *)

FOUNDATION_EXPORT void AndroidOsBuild_init(AndroidOsBuild *self);

FOUNDATION_EXPORT AndroidOsBuild *new_AndroidOsBuild_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBuild *create_AndroidOsBuild_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsBuild)

#endif

#if !defined (AndroidOsBuild_VERSION_CODES_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsBuild_VERSION_CODES))
#define AndroidOsBuild_VERSION_CODES_

@interface AndroidOsBuild_VERSION_CODES : NSObject

+ (jint)CUR_DEVELOPMENT;

+ (jint)BASE;

+ (jint)BASE_1_1;

+ (jint)CUPCAKE;

+ (jint)DONUT;

+ (jint)ECLAIR;

+ (jint)ECLAIR_0_1;

+ (jint)ECLAIR_MR1;

+ (jint)FROYO;

+ (jint)GINGERBREAD;

+ (jint)GINGERBREAD_MR1;

+ (jint)HONEYCOMB;

+ (jint)HONEYCOMB_MR1;

+ (jint)HONEYCOMB_MR2;

+ (jint)ICE_CREAM_SANDWICH;

+ (jint)ICE_CREAM_SANDWICH_MR1;

+ (jint)JELLY_BEAN;

+ (jint)JELLY_BEAN_MR1;

+ (jint)JELLY_BEAN_MR2;

+ (jint)KITKAT;

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsBuild_VERSION_CODES)

inline jint AndroidOsBuild_VERSION_CODES_get_CUR_DEVELOPMENT(void);
#define AndroidOsBuild_VERSION_CODES_CUR_DEVELOPMENT 10000
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, CUR_DEVELOPMENT, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_BASE(void);
#define AndroidOsBuild_VERSION_CODES_BASE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, BASE, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_BASE_1_1(void);
#define AndroidOsBuild_VERSION_CODES_BASE_1_1 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, BASE_1_1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_CUPCAKE(void);
#define AndroidOsBuild_VERSION_CODES_CUPCAKE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, CUPCAKE, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_DONUT(void);
#define AndroidOsBuild_VERSION_CODES_DONUT 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, DONUT, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_ECLAIR(void);
#define AndroidOsBuild_VERSION_CODES_ECLAIR 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, ECLAIR, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_ECLAIR_0_1(void);
#define AndroidOsBuild_VERSION_CODES_ECLAIR_0_1 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, ECLAIR_0_1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_ECLAIR_MR1(void);
#define AndroidOsBuild_VERSION_CODES_ECLAIR_MR1 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, ECLAIR_MR1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_FROYO(void);
#define AndroidOsBuild_VERSION_CODES_FROYO 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, FROYO, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_GINGERBREAD(void);
#define AndroidOsBuild_VERSION_CODES_GINGERBREAD 9
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, GINGERBREAD, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_GINGERBREAD_MR1(void);
#define AndroidOsBuild_VERSION_CODES_GINGERBREAD_MR1 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, GINGERBREAD_MR1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_HONEYCOMB(void);
#define AndroidOsBuild_VERSION_CODES_HONEYCOMB 11
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, HONEYCOMB, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_HONEYCOMB_MR1(void);
#define AndroidOsBuild_VERSION_CODES_HONEYCOMB_MR1 12
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, HONEYCOMB_MR1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_HONEYCOMB_MR2(void);
#define AndroidOsBuild_VERSION_CODES_HONEYCOMB_MR2 13
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, HONEYCOMB_MR2, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_ICE_CREAM_SANDWICH(void);
#define AndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH 14
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, ICE_CREAM_SANDWICH, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_ICE_CREAM_SANDWICH_MR1(void);
#define AndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH_MR1 15
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, ICE_CREAM_SANDWICH_MR1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_JELLY_BEAN(void);
#define AndroidOsBuild_VERSION_CODES_JELLY_BEAN 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, JELLY_BEAN, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_JELLY_BEAN_MR1(void);
#define AndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR1 17
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, JELLY_BEAN_MR1, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_JELLY_BEAN_MR2(void);
#define AndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR2 18
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, JELLY_BEAN_MR2, jint)

inline jint AndroidOsBuild_VERSION_CODES_get_KITKAT(void);
#define AndroidOsBuild_VERSION_CODES_KITKAT 19
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsBuild_VERSION_CODES, KITKAT, jint)

FOUNDATION_EXPORT void AndroidOsBuild_VERSION_CODES_init(AndroidOsBuild_VERSION_CODES *self);

FOUNDATION_EXPORT AndroidOsBuild_VERSION_CODES *new_AndroidOsBuild_VERSION_CODES_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBuild_VERSION_CODES *create_AndroidOsBuild_VERSION_CODES_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsBuild_VERSION_CODES)

#endif

#if !defined (AndroidOsBundle_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsBundle))
#define AndroidOsBundle_

@class AndroidOsParcel;
@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class JavaLangByte;
@class JavaLangClassLoader;
@class JavaUtilArrayList;
@protocol JavaIoSerializable;
@protocol JavaLangCharSequence;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface AndroidOsBundle : NSObject < AndroidOsParcelable, NSCopying > {
 @public
  id<JavaUtilMap> mMap_;
}

+ (AndroidOsBundle *)EMPTY;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithAndroidOsBundle:(AndroidOsBundle *)b;

- (instancetype __nonnull)initWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (instancetype __nonnull)initWithInt:(jint)capacity;

- (void)clear;

- (id)java_clone;

- (jboolean)containsKeyWithNSString:(NSString *)key;

- (jint)describeContents;

+ (AndroidOsBundle *)forPairWithNSString:(NSString *)key
                            withNSString:(NSString *)value;

- (id)getWithNSString:(NSString *)key;

- (jboolean)getBooleanWithNSString:(NSString *)key;

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue;

- (IOSBooleanArray *)getBooleanArrayWithNSString:(NSString *)key;

- (AndroidOsBundle *)getBundleWithNSString:(NSString *)key;

- (jbyte)getByteWithNSString:(NSString *)key;

- (JavaLangByte *)getByteWithNSString:(NSString *)key
                             withByte:(jbyte)defaultValue;

- (IOSByteArray *)getByteArrayWithNSString:(NSString *)key;

- (jchar)getCharWithNSString:(NSString *)key;

- (jchar)getCharWithNSString:(NSString *)key
                    withChar:(jchar)defaultValue;

- (IOSCharArray *)getCharArrayWithNSString:(NSString *)key;

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key;

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultValue;

- (IOSObjectArray *)getCharSequenceArrayWithNSString:(NSString *)key;

- (JavaUtilArrayList *)getCharSequenceArrayListWithNSString:(NSString *)key;

- (JavaLangClassLoader *)getClassLoader;

- (jdouble)getDoubleWithNSString:(NSString *)key;

- (jdouble)getDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue;

- (IOSDoubleArray *)getDoubleArrayWithNSString:(NSString *)key;

- (jfloat)getFloatWithNSString:(NSString *)key;

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defaultValue;

- (IOSFloatArray *)getFloatArrayWithNSString:(NSString *)key;

- (jint)getIntWithNSString:(NSString *)key;

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue;

- (IOSIntArray *)getIntArrayWithNSString:(NSString *)key;

- (JavaUtilArrayList *)getIntegerArrayListWithNSString:(NSString *)key;

- (jlong)getLongWithNSString:(NSString *)key;

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue;

- (IOSLongArray *)getLongArrayWithNSString:(NSString *)key;

- (NSString *)getPairValue;

- (id<JavaIoSerializable>)getSerializableWithNSString:(NSString *)key;

- (jshort)getShortWithNSString:(NSString *)key;

- (jshort)getShortWithNSString:(NSString *)key
                     withShort:(jshort)defaultValue;

- (IOSShortArray *)getShortArrayWithNSString:(NSString *)key;

- (NSString *)getStringWithNSString:(NSString *)key;

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue;

- (IOSObjectArray *)getStringArrayWithNSString:(NSString *)key;

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (void)putAllWithAndroidOsBundle:(AndroidOsBundle *)map;

- (void)putBooleanWithNSString:(NSString *)key
                   withBoolean:(jboolean)value;

- (void)putBooleanArrayWithNSString:(NSString *)key
                   withBooleanArray:(IOSBooleanArray *)value;

- (void)putBundleWithNSString:(NSString *)key
          withAndroidOsBundle:(AndroidOsBundle *)value;

- (void)putByteWithNSString:(NSString *)key
                   withByte:(jbyte)value;

- (void)putByteArrayWithNSString:(NSString *)key
                   withByteArray:(IOSByteArray *)value;

- (void)putCharWithNSString:(NSString *)key
                   withChar:(jchar)value;

- (void)putCharArrayWithNSString:(NSString *)key
                   withCharArray:(IOSCharArray *)value;

- (void)putCharSequenceWithNSString:(NSString *)key
           withJavaLangCharSequence:(id<JavaLangCharSequence>)value;

- (void)putCharSequenceArrayWithNSString:(NSString *)key
           withJavaLangCharSequenceArray:(IOSObjectArray *)value;

- (void)putCharSequenceArrayListWithNSString:(NSString *)key
                       withJavaUtilArrayList:(JavaUtilArrayList *)value;

- (void)putDoubleWithNSString:(NSString *)key
                   withDouble:(jdouble)value;

- (void)putDoubleArrayWithNSString:(NSString *)key
                   withDoubleArray:(IOSDoubleArray *)value;

- (void)putFloatWithNSString:(NSString *)key
                   withFloat:(jfloat)value;

- (void)putFloatArrayWithNSString:(NSString *)key
                   withFloatArray:(IOSFloatArray *)value;

- (void)putIntWithNSString:(NSString *)key
                   withInt:(jint)value;

- (void)putIntArrayWithNSString:(NSString *)key
                   withIntArray:(IOSIntArray *)value;

- (void)putIntegerArrayListWithNSString:(NSString *)key
                  withJavaUtilArrayList:(JavaUtilArrayList *)value;

- (void)putLongWithNSString:(NSString *)key
                   withLong:(jlong)value;

- (void)putLongArrayWithNSString:(NSString *)key
                   withLongArray:(IOSLongArray *)value;

- (void)putSerializableWithNSString:(NSString *)key
             withJavaIoSerializable:(id<JavaIoSerializable>)value;

- (void)putShortWithNSString:(NSString *)key
                   withShort:(jshort)value;

- (void)putShortArrayWithNSString:(NSString *)key
                   withShortArray:(IOSShortArray *)value;

- (void)putStringWithNSString:(NSString *)key
                 withNSString:(NSString *)value;

- (void)putStringArrayWithNSString:(NSString *)key
                 withNSStringArray:(IOSObjectArray *)value;

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value;

- (void)removeWithNSString:(NSString *)key;

- (jboolean)setAllowFdsWithBoolean:(jboolean)allowFds;

- (void)setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (jint)size;

- (NSString *)description;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)dest
                                 withInt:(jint)flags;

@end

J2OBJC_STATIC_INIT(AndroidOsBundle)

J2OBJC_FIELD_SETTER(AndroidOsBundle, mMap_, id<JavaUtilMap>)

inline AndroidOsBundle *AndroidOsBundle_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidOsBundle *AndroidOsBundle_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsBundle, EMPTY, AndroidOsBundle *)

FOUNDATION_EXPORT void AndroidOsBundle_init(AndroidOsBundle *self);

FOUNDATION_EXPORT AndroidOsBundle *new_AndroidOsBundle_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBundle *create_AndroidOsBundle_init(void);

FOUNDATION_EXPORT void AndroidOsBundle_initWithJavaLangClassLoader_(AndroidOsBundle *self, JavaLangClassLoader *loader);

FOUNDATION_EXPORT AndroidOsBundle *new_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBundle *create_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader);

FOUNDATION_EXPORT void AndroidOsBundle_initWithInt_(AndroidOsBundle *self, jint capacity);

FOUNDATION_EXPORT AndroidOsBundle *new_AndroidOsBundle_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBundle *create_AndroidOsBundle_initWithInt_(jint capacity);

FOUNDATION_EXPORT void AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *self, AndroidOsBundle *b);

FOUNDATION_EXPORT AndroidOsBundle *new_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsBundle *create_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b);

FOUNDATION_EXPORT AndroidOsBundle *AndroidOsBundle_forPairWithNSString_withNSString_(NSString *key, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsBundle)

#endif

#if !defined (AndroidOsCancellationSignal_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsCancellationSignal))
#define AndroidOsCancellationSignal_

@protocol AndroidOsCancellationSignal_OnCancelListener;

@interface AndroidOsCancellationSignal : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (void)cancel;

- (jboolean)isCanceled;

- (void)setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:(id<AndroidOsCancellationSignal_OnCancelListener>)listener;

- (void)throwIfCanceled;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsCancellationSignal)

FOUNDATION_EXPORT void AndroidOsCancellationSignal_init(AndroidOsCancellationSignal *self);

FOUNDATION_EXPORT AndroidOsCancellationSignal *new_AndroidOsCancellationSignal_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsCancellationSignal *create_AndroidOsCancellationSignal_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsCancellationSignal)

#endif

#if !defined (AndroidOsFileUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsFileUtils))
#define AndroidOsFileUtils_

@class AndroidOsFileUtils_FileStatus;
@class JavaIoFile;
@class JavaIoFileOutputStream;
@class JavaIoInputStream;

@interface AndroidOsFileUtils : NSObject

+ (jint)S_IRWXU_;

+ (jint)S_IRUSR_;

+ (jint)S_IWUSR_;

+ (jint)S_IXUSR_;

+ (jint)S_IRWXG_;

+ (jint)S_IRGRP_;

+ (jint)S_IWGRP_;

+ (jint)S_IXGRP_;

+ (jint)S_IRWXO_;

+ (jint)S_IROTH_;

+ (jint)S_IWOTH_;

+ (jint)S_IXOTH_;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)copyFileWithJavaIoFile:(JavaIoFile *)srcFile
                    withJavaIoFile:(JavaIoFile *)destFile OBJC_METHOD_FAMILY_NONE;

+ (jboolean)copyToFileWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                             withJavaIoFile:(JavaIoFile *)destFile OBJC_METHOD_FAMILY_NONE;

+ (jboolean)getFileStatusWithNSString:(NSString *)path
    withAndroidOsFileUtils_FileStatus:(AndroidOsFileUtils_FileStatus *)status;

+ (jboolean)isFilenameSafeWithJavaIoFile:(JavaIoFile *)file;

+ (NSString *)readTextFileWithJavaIoFile:(JavaIoFile *)file
                                 withInt:(jint)max
                            withNSString:(NSString *)ellipsis;

+ (jint)setPermissionsWithNSString:(NSString *)file
                           withInt:(jint)mode
                           withInt:(jint)uid
                           withInt:(jint)gid;

+ (jboolean)syncWithJavaIoFileOutputStream:(JavaIoFileOutputStream *)stream;

@end

J2OBJC_STATIC_INIT(AndroidOsFileUtils)

inline jint AndroidOsFileUtils_get_S_IRWXU(void);
#define AndroidOsFileUtils_S_IRWXU 448
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IRWXU, jint)

inline jint AndroidOsFileUtils_get_S_IRUSR(void);
#define AndroidOsFileUtils_S_IRUSR 256
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IRUSR, jint)

inline jint AndroidOsFileUtils_get_S_IWUSR(void);
#define AndroidOsFileUtils_S_IWUSR 128
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IWUSR, jint)

inline jint AndroidOsFileUtils_get_S_IXUSR(void);
#define AndroidOsFileUtils_S_IXUSR 64
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IXUSR, jint)

inline jint AndroidOsFileUtils_get_S_IRWXG(void);
#define AndroidOsFileUtils_S_IRWXG 56
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IRWXG, jint)

inline jint AndroidOsFileUtils_get_S_IRGRP(void);
#define AndroidOsFileUtils_S_IRGRP 32
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IRGRP, jint)

inline jint AndroidOsFileUtils_get_S_IWGRP(void);
#define AndroidOsFileUtils_S_IWGRP 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IWGRP, jint)

inline jint AndroidOsFileUtils_get_S_IXGRP(void);
#define AndroidOsFileUtils_S_IXGRP 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IXGRP, jint)

inline jint AndroidOsFileUtils_get_S_IRWXO(void);
#define AndroidOsFileUtils_S_IRWXO 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IRWXO, jint)

inline jint AndroidOsFileUtils_get_S_IROTH(void);
#define AndroidOsFileUtils_S_IROTH 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IROTH, jint)

inline jint AndroidOsFileUtils_get_S_IWOTH(void);
#define AndroidOsFileUtils_S_IWOTH 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IWOTH, jint)

inline jint AndroidOsFileUtils_get_S_IXOTH(void);
#define AndroidOsFileUtils_S_IXOTH 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsFileUtils, S_IXOTH, jint)

FOUNDATION_EXPORT void AndroidOsFileUtils_init(AndroidOsFileUtils *self);

FOUNDATION_EXPORT AndroidOsFileUtils *new_AndroidOsFileUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsFileUtils *create_AndroidOsFileUtils_init(void);

FOUNDATION_EXPORT jboolean AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_(NSString *path, AndroidOsFileUtils_FileStatus *status);

FOUNDATION_EXPORT jint AndroidOsFileUtils_setPermissionsWithNSString_withInt_withInt_withInt_(NSString *file, jint mode, jint uid, jint gid);

FOUNDATION_EXPORT jboolean AndroidOsFileUtils_syncWithJavaIoFileOutputStream_(JavaIoFileOutputStream *stream);

FOUNDATION_EXPORT jboolean AndroidOsFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destFile);

FOUNDATION_EXPORT jboolean AndroidOsFileUtils_copyToFileWithJavaIoInputStream_withJavaIoFile_(JavaIoInputStream *inputStream, JavaIoFile *destFile);

FOUNDATION_EXPORT jboolean AndroidOsFileUtils_isFilenameSafeWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT NSString *AndroidOsFileUtils_readTextFileWithJavaIoFile_withInt_withNSString_(JavaIoFile *file, jint max, NSString *ellipsis);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsFileUtils)

#endif

#if !defined (AndroidOsFileUtils_FileStatus_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsFileUtils_FileStatus))
#define AndroidOsFileUtils_FileStatus_

@interface AndroidOsFileUtils_FileStatus : NSObject {
 @public
  jint dev_;
  jint ino_;
  jint mode_;
  jint nlink_;
  jint uid_;
  jint gid_;
  jint rdev_;
  jlong size_;
  jint blksize_;
  jlong blocks_;
  jlong atime_;
  jlong mtime_;
  jlong ctime_;
}

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsFileUtils_FileStatus)

FOUNDATION_EXPORT void AndroidOsFileUtils_FileStatus_init(AndroidOsFileUtils_FileStatus *self);

FOUNDATION_EXPORT AndroidOsFileUtils_FileStatus *new_AndroidOsFileUtils_FileStatus_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsFileUtils_FileStatus *create_AndroidOsFileUtils_FileStatus_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsFileUtils_FileStatus)

#endif

#if !defined (AndroidOsHandler_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsHandler))
#define AndroidOsHandler_

@class AndroidOsLooper;
@class AndroidOsMessage;
@class AndroidOsMessageQueue;
@protocol AndroidOsHandler_Callback;
@protocol AndroidUtilPrinter;
@protocol JavaLangRunnable;

@interface AndroidOsHandler : NSObject {
 @public
  AndroidOsMessageQueue *mQueue_;
  AndroidOsLooper *mLooper_;
  id<AndroidOsHandler_Callback> mCallback_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithAndroidOsHandler_Callback:(id<AndroidOsHandler_Callback>)callback;

- (instancetype __nonnull)initWithAndroidOsLooper:(AndroidOsLooper *)looper;

- (instancetype __nonnull)initWithAndroidOsLooper:(AndroidOsLooper *)looper
                    withAndroidOsHandler_Callback:(id<AndroidOsHandler_Callback>)callback;

- (void)dispatchMessageWithAndroidOsMessage:(AndroidOsMessage *)msg;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)pw
                      withNSString:(NSString *)prefix;

- (AndroidOsLooper *)getLooper;

- (NSString *)getMessageNameWithAndroidOsMessage:(AndroidOsMessage *)message;

- (void)handleMessageWithAndroidOsMessage:(AndroidOsMessage *)msg;

- (jboolean)hasMessagesWithInt:(jint)what;

- (jboolean)hasMessagesWithInt:(jint)what
                        withId:(id)object;

- (AndroidOsMessage *)obtainMessage;

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what;

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what
                                   withInt:(jint)arg1
                                   withInt:(jint)arg2;

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what
                                   withInt:(jint)arg1
                                   withInt:(jint)arg2
                                    withId:(id)obj;

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what
                                    withId:(id)obj;

- (jboolean)postWithJavaLangRunnable:(id<JavaLangRunnable>)r;

- (jboolean)postAtFrontOfQueueWithJavaLangRunnable:(id<JavaLangRunnable>)r;

- (jboolean)postAtTimeWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                  withLong:(jlong)uptimeMillis;

- (jboolean)postAtTimeWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                    withId:(id)token
                                  withLong:(jlong)uptimeMillis;

- (jboolean)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                   withLong:(jlong)delayMillis;

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r;

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                     withId:(id)token;

- (void)removeCallbacksAndMessagesWithId:(id)token;

- (void)removeMessagesWithInt:(jint)what;

- (void)removeMessagesWithInt:(jint)what
                       withId:(id)object;

- (jboolean)sendEmptyMessageWithInt:(jint)what;

- (jboolean)sendEmptyMessageAtTimeWithInt:(jint)what
                                 withLong:(jlong)uptimeMillis;

- (jboolean)sendEmptyMessageDelayedWithInt:(jint)what
                                  withLong:(jlong)delayMillis;

- (jboolean)sendMessageWithAndroidOsMessage:(AndroidOsMessage *)msg;

- (jboolean)sendMessageAtFrontOfQueueWithAndroidOsMessage:(AndroidOsMessage *)msg;

- (jboolean)sendMessageAtTimeWithAndroidOsMessage:(AndroidOsMessage *)msg
                                         withLong:(jlong)uptimeMillis;

- (jboolean)sendMessageDelayedWithAndroidOsMessage:(AndroidOsMessage *)msg
                                          withLong:(jlong)delayMillis;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsHandler)

J2OBJC_FIELD_SETTER(AndroidOsHandler, mQueue_, AndroidOsMessageQueue *)
J2OBJC_FIELD_SETTER(AndroidOsHandler, mLooper_, AndroidOsLooper *)
J2OBJC_FIELD_SETTER(AndroidOsHandler, mCallback_, id<AndroidOsHandler_Callback>)

FOUNDATION_EXPORT void AndroidOsHandler_init(AndroidOsHandler *self);

FOUNDATION_EXPORT AndroidOsHandler *new_AndroidOsHandler_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsHandler *create_AndroidOsHandler_init(void);

FOUNDATION_EXPORT void AndroidOsHandler_initWithAndroidOsHandler_Callback_(AndroidOsHandler *self, id<AndroidOsHandler_Callback> callback);

FOUNDATION_EXPORT AndroidOsHandler *new_AndroidOsHandler_initWithAndroidOsHandler_Callback_(id<AndroidOsHandler_Callback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsHandler *create_AndroidOsHandler_initWithAndroidOsHandler_Callback_(id<AndroidOsHandler_Callback> callback);

FOUNDATION_EXPORT void AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsHandler *self, AndroidOsLooper *looper);

FOUNDATION_EXPORT AndroidOsHandler *new_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper *looper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsHandler *create_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper *looper);

FOUNDATION_EXPORT void AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsHandler *self, AndroidOsLooper *looper, id<AndroidOsHandler_Callback> callback);

FOUNDATION_EXPORT AndroidOsHandler *new_AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsLooper *looper, id<AndroidOsHandler_Callback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsHandler *create_AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsLooper *looper, id<AndroidOsHandler_Callback> callback);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsHandler)

#endif

#if !defined (AndroidOsHandler_Callback_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsHandler_Callback))
#define AndroidOsHandler_Callback_

@class AndroidOsMessage;

@protocol AndroidOsHandler_Callback < JavaObject >

- (jboolean)handleMessageWithAndroidOsMessage:(AndroidOsMessage *)msg;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsHandler_Callback)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsHandler_Callback)

#endif

#if !defined (AndroidOsHandlerThread_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsHandlerThread))
#define AndroidOsHandlerThread_

#define RESTRICT_JavaLangThread 1
#define INCLUDE_JavaLangThread 1
#include "java/lang/Thread.h"

@class AndroidOsLooper;
@class JavaLangThreadGroup;
@protocol JavaLangRunnable;

@interface AndroidOsHandlerThread : JavaLangThread {
 @public
  jint mPriority_;
  AndroidOsLooper *mLooper_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)priority;

- (AndroidOsLooper *)getLooper;

- (jint)getThreadId;

- (jboolean)quit;

- (void)run;

#pragma mark Protected

- (void)onLooperPrepared;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                      withNSString:(NSString *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1
                                         withNSString:(NSString *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1
                                         withNSString:(NSString *)arg2
                                             withLong:(jlong)arg3 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                         withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsHandlerThread)

J2OBJC_FIELD_SETTER(AndroidOsHandlerThread, mLooper_, AndroidOsLooper *)

FOUNDATION_EXPORT void AndroidOsHandlerThread_initWithNSString_(AndroidOsHandlerThread *self, NSString *name);

FOUNDATION_EXPORT AndroidOsHandlerThread *new_AndroidOsHandlerThread_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsHandlerThread *create_AndroidOsHandlerThread_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void AndroidOsHandlerThread_initWithNSString_withInt_(AndroidOsHandlerThread *self, NSString *name, jint priority);

FOUNDATION_EXPORT AndroidOsHandlerThread *new_AndroidOsHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsHandlerThread *create_AndroidOsHandlerThread_initWithNSString_withInt_(NSString *name, jint priority);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsHandlerThread)

#endif

#if !defined (AndroidOsIBinder_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsIBinder))
#define AndroidOsIBinder_

@class AndroidOsParcel;
@class IOSObjectArray;
@class JavaIoFileDescriptor;
@protocol AndroidOsIBinder_DeathRecipient;
@protocol AndroidOsIInterface;

@protocol AndroidOsIBinder < JavaObject >

- (NSString *)getInterfaceDescriptor;

- (jboolean)pingBinder;

- (jboolean)isBinderAlive;

- (id<AndroidOsIInterface>)queryLocalInterfaceWithNSString:(NSString *)descriptor;

- (void)dumpWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fd
                   withNSStringArray:(IOSObjectArray *)args;

- (jboolean)transactWithInt:(jint)code
        withAndroidOsParcel:(AndroidOsParcel *)data
        withAndroidOsParcel:(AndroidOsParcel *)reply
                    withInt:(jint)flags;

- (void)linkToDeathWithAndroidOsIBinder_DeathRecipient:(id<AndroidOsIBinder_DeathRecipient>)recipient
                                               withInt:(jint)flags;

- (jboolean)unlinkToDeathWithAndroidOsIBinder_DeathRecipient:(id<AndroidOsIBinder_DeathRecipient>)recipient
                                                     withInt:(jint)flags;

@end

@interface AndroidOsIBinder : NSObject

+ (jint)FIRST_CALL_TRANSACTION;

+ (jint)LAST_CALL_TRANSACTION;

+ (jint)PING_TRANSACTION;

+ (jint)DUMP_TRANSACTION;

+ (jint)INTERFACE_TRANSACTION;

+ (jint)FLAG_ONEWAY;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsIBinder)

inline jint AndroidOsIBinder_get_FIRST_CALL_TRANSACTION(void);
#define AndroidOsIBinder_FIRST_CALL_TRANSACTION 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsIBinder, FIRST_CALL_TRANSACTION, jint)

inline jint AndroidOsIBinder_get_LAST_CALL_TRANSACTION(void);
#define AndroidOsIBinder_LAST_CALL_TRANSACTION 16777215
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsIBinder, LAST_CALL_TRANSACTION, jint)

inline jint AndroidOsIBinder_get_PING_TRANSACTION(void);
#define AndroidOsIBinder_PING_TRANSACTION 1599098439
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsIBinder, PING_TRANSACTION, jint)

inline jint AndroidOsIBinder_get_DUMP_TRANSACTION(void);
#define AndroidOsIBinder_DUMP_TRANSACTION 1598311760
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsIBinder, DUMP_TRANSACTION, jint)

inline jint AndroidOsIBinder_get_INTERFACE_TRANSACTION(void);
#define AndroidOsIBinder_INTERFACE_TRANSACTION 1598968902
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsIBinder, INTERFACE_TRANSACTION, jint)

inline jint AndroidOsIBinder_get_FLAG_ONEWAY(void);
#define AndroidOsIBinder_FLAG_ONEWAY 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsIBinder, FLAG_ONEWAY, jint)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsIBinder)

#endif

#if !defined (AndroidOsIBinder_DeathRecipient_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsIBinder_DeathRecipient))
#define AndroidOsIBinder_DeathRecipient_

@protocol AndroidOsIBinder_DeathRecipient < JavaObject >

- (void)binderDied;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsIBinder_DeathRecipient)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsIBinder_DeathRecipient)

#endif

#if !defined (AndroidOsIInterface_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsIInterface))
#define AndroidOsIInterface_

@protocol AndroidOsIBinder;

@protocol AndroidOsIInterface < JavaObject >

- (id<AndroidOsIBinder>)asBinder;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsIInterface)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsIInterface)

#endif

#if !defined (AndroidOsThreadNudger_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsThreadNudger))
#define AndroidOsThreadNudger_

@protocol AndroidOsThreadNudger < JavaObject >

- (void)nudge;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsThreadNudger)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsThreadNudger)

#endif

#if !defined (AndroidOsLooper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsLooper))
#define AndroidOsLooper_

@class AndroidOsMessageQueue;
@class JavaLangThread;
@class JavaLangThreadLocal;
@protocol AndroidUtilPrinter;

@interface AndroidOsLooper : NSObject < AndroidOsThreadNudger > {
 @public
  AndroidOsMessageQueue *mQueue_;
  JavaLangThread *mThread_;
  volatile_jboolean mRun_;
}

+ (JavaLangThreadLocal *)sThreadLocal;

#pragma mark Public

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)pw
                      withNSString:(NSString *)prefix;

+ (AndroidOsLooper *)getMainLooper;

- (AndroidOsMessageQueue *)getQueue;

- (JavaLangThread *)getThread;

+ (void)loop;

+ (AndroidOsLooper *)myLooper;

+ (AndroidOsMessageQueue *)myQueue;

- (void)nudge;

+ (void)prepare;

+ (void)prepareMainLooper;

- (void)quit;

- (void)setMessageLoggingWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(AndroidOsLooper)

J2OBJC_FIELD_SETTER(AndroidOsLooper, mQueue_, AndroidOsMessageQueue *)
J2OBJC_FIELD_SETTER(AndroidOsLooper, mThread_, JavaLangThread *)

inline JavaLangThreadLocal *AndroidOsLooper_get_sThreadLocal(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangThreadLocal *AndroidOsLooper_sThreadLocal;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsLooper, sThreadLocal, JavaLangThreadLocal *)

FOUNDATION_EXPORT void AndroidOsLooper_prepare(void);

FOUNDATION_EXPORT void AndroidOsLooper_prepareMainLooper(void);

FOUNDATION_EXPORT AndroidOsLooper *AndroidOsLooper_getMainLooper(void);

FOUNDATION_EXPORT void AndroidOsLooper_loop(void);

FOUNDATION_EXPORT AndroidOsLooper *AndroidOsLooper_myLooper(void);

FOUNDATION_EXPORT AndroidOsMessageQueue *AndroidOsLooper_myQueue(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsLooper)

#endif

#if !defined (AndroidOsLooper_Profiler_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsLooper_Profiler))
#define AndroidOsLooper_Profiler_

@class AndroidOsMessage;

@protocol AndroidOsLooper_Profiler < JavaObject >

- (void)profileWithAndroidOsMessage:(AndroidOsMessage *)message
                           withLong:(jlong)wallStart
                           withLong:(jlong)wallTime
                           withLong:(jlong)threadStart
                           withLong:(jlong)threadTime;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsLooper_Profiler)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsLooper_Profiler)

#endif

#if !defined (AndroidOsMessage_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsMessage))
#define AndroidOsMessage_

@class AndroidOsBundle;
@class AndroidOsHandler;
@protocol JavaLangRunnable;

@interface AndroidOsMessage : NSObject {
 @public
  jint what_;
  jint arg1_;
  jint arg2_;
  id obj_;
  jint flags_;
  jlong when_;
  AndroidOsBundle *data_;
  AndroidOsHandler *target_;
  id<JavaLangRunnable> callback_;
  AndroidOsMessage *next_;
}

+ (jint)FLAG_IN_USE;

+ (jint)FLAGS_RESERVED;

+ (jint)FLAGS_TO_CLEAR_ON_COPY_FROM;

#pragma mark Public

- (instancetype __nonnull)init;

- (void)copyFromWithAndroidOsMessage:(AndroidOsMessage *)o OBJC_METHOD_FAMILY_NONE;

- (jint)describeContents;

- (id<JavaLangRunnable>)getCallback;

- (AndroidOsBundle *)getData;

- (AndroidOsHandler *)getTarget;

- (jlong)getWhen;

+ (AndroidOsMessage *)obtain;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2
                                          withId:(id)obj;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                          withId:(id)obj;

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                            withJavaLangRunnable:(id<JavaLangRunnable>)callback;

+ (AndroidOsMessage *)obtainWithAndroidOsMessage:(AndroidOsMessage *)orig;

- (AndroidOsBundle *)peekData;

- (void)recycle;

- (void)sendToTarget;

- (void)setDataWithAndroidOsBundle:(AndroidOsBundle *)data;

- (void)setTargetWithAndroidOsHandler:(AndroidOsHandler *)target;

- (NSString *)description;

#pragma mark Package-Private

- (void)clearForRecycle;

- (jboolean)isInUse;

- (void)markInUse;

- (NSString *)toStringWithLong:(jlong)now;

@end

J2OBJC_STATIC_INIT(AndroidOsMessage)

J2OBJC_FIELD_SETTER(AndroidOsMessage, obj_, id)
J2OBJC_FIELD_SETTER(AndroidOsMessage, data_, AndroidOsBundle *)
J2OBJC_FIELD_SETTER(AndroidOsMessage, target_, AndroidOsHandler *)
J2OBJC_FIELD_SETTER(AndroidOsMessage, callback_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(AndroidOsMessage, next_, AndroidOsMessage *)

inline jint AndroidOsMessage_get_FLAG_IN_USE(void);
#define AndroidOsMessage_FLAG_IN_USE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, FLAG_IN_USE, jint)

inline jint AndroidOsMessage_get_FLAGS_RESERVED(void);
#define AndroidOsMessage_FLAGS_RESERVED -2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, FLAGS_RESERVED, jint)

inline jint AndroidOsMessage_get_FLAGS_TO_CLEAR_ON_COPY_FROM(void);
#define AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, FLAGS_TO_CLEAR_ON_COPY_FROM, jint)

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtain(void);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsMessage_(AndroidOsMessage *orig);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_(AndroidOsHandler *h);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withJavaLangRunnable_(AndroidOsHandler *h, id<JavaLangRunnable> callback);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(AndroidOsHandler *h, jint what);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(AndroidOsHandler *h, jint what, id obj);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(AndroidOsHandler *h, jint what, jint arg1, jint arg2);

FOUNDATION_EXPORT AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(AndroidOsHandler *h, jint what, jint arg1, jint arg2, id obj);

FOUNDATION_EXPORT void AndroidOsMessage_init(AndroidOsMessage *self);

FOUNDATION_EXPORT AndroidOsMessage *new_AndroidOsMessage_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsMessage *create_AndroidOsMessage_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsMessage)

#endif

#if !defined (AndroidOsMessageQueue_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsMessageQueue))
#define AndroidOsMessageQueue_

@class AndroidOsHandler;
@class AndroidOsMessage;
@protocol AndroidOsMessageQueue_IdleHandler;
@protocol AndroidOsThreadNudger;
@protocol JavaLangRunnable;

@interface AndroidOsMessageQueue : NSObject {
 @public
  AndroidOsMessage *mMessages_;
  jboolean mQuitAllowed_;
}

#pragma mark Public

- (void)addIdleHandlerWithAndroidOsMessageQueue_IdleHandler:(id<AndroidOsMessageQueue_IdleHandler>)handler;

- (void)removeIdleHandlerWithAndroidOsMessageQueue_IdleHandler:(id<AndroidOsMessageQueue_IdleHandler>)handler;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAndroidOsThreadNudger:(id<AndroidOsThreadNudger>)threadNudger;

- (jboolean)enqueueMessageWithAndroidOsMessage:(AndroidOsMessage *)msg
                                      withLong:(jlong)when;

- (AndroidOsMessage *)next;

- (void)removeCallbacksAndMessagesWithAndroidOsHandler:(AndroidOsHandler *)h
                                                withId:(id)object;

- (jboolean)removeMessagesWithAndroidOsHandler:(AndroidOsHandler *)h
                                       withInt:(jint)what
                                        withId:(id)object
                                   withBoolean:(jboolean)doRemove;

- (void)removeMessagesWithAndroidOsHandler:(AndroidOsHandler *)h
                      withJavaLangRunnable:(id<JavaLangRunnable>)r
                                    withId:(id)object;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsMessageQueue)

J2OBJC_FIELD_SETTER(AndroidOsMessageQueue, mMessages_, AndroidOsMessage *)

FOUNDATION_EXPORT void AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(AndroidOsMessageQueue *self, id<AndroidOsThreadNudger> threadNudger);

FOUNDATION_EXPORT AndroidOsMessageQueue *new_AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(id<AndroidOsThreadNudger> threadNudger) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsMessageQueue *create_AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(id<AndroidOsThreadNudger> threadNudger);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsMessageQueue)

#endif

#if !defined (AndroidOsMessageQueue_IdleHandler_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsMessageQueue_IdleHandler))
#define AndroidOsMessageQueue_IdleHandler_

@protocol AndroidOsMessageQueue_IdleHandler < JavaObject >

- (jboolean)queueIdle;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsMessageQueue_IdleHandler)

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsMessageQueue_IdleHandler)

#endif

#if !defined (AndroidOsOperationCanceledException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsOperationCanceledException))
#define AndroidOsOperationCanceledException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface AndroidOsOperationCanceledException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsOperationCanceledException)

FOUNDATION_EXPORT void AndroidOsOperationCanceledException_init(AndroidOsOperationCanceledException *self);

FOUNDATION_EXPORT AndroidOsOperationCanceledException *new_AndroidOsOperationCanceledException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsOperationCanceledException *create_AndroidOsOperationCanceledException_init(void);

FOUNDATION_EXPORT void AndroidOsOperationCanceledException_initWithNSString_(AndroidOsOperationCanceledException *self, NSString *message);

FOUNDATION_EXPORT AndroidOsOperationCanceledException *new_AndroidOsOperationCanceledException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsOperationCanceledException *create_AndroidOsOperationCanceledException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsOperationCanceledException)

#endif

#if !defined (AndroidOsParcel_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsParcel))
#define AndroidOsParcel_

@class AndroidOsBundle;
@class AndroidOsParcelFileDescriptor;
@class AndroidUtilSparseArray;
@class AndroidUtilSparseBooleanArray;
@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class JavaIoFileDescriptor;
@class JavaLangClassLoader;
@class JavaLangException;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol AndroidOsIBinder;
@protocol AndroidOsIInterface;
@protocol AndroidOsParcelable;
@protocol AndroidOsParcelable_Creator;
@protocol JavaIoSerializable;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface AndroidOsParcel : NSObject

+ (id<AndroidOsParcelable_Creator>)STRING_CREATOR;

#pragma mark Public

- (void)appendFromWithAndroidOsParcel:(AndroidOsParcel *)parcel
                              withInt:(jint)offset
                              withInt:(jint)length;

- (IOSObjectArray *)createBinderArray;

- (JavaUtilArrayList *)createBinderArrayList;

- (IOSBooleanArray *)createBooleanArray;

- (IOSByteArray *)createByteArray;

- (IOSCharArray *)createCharArray;

- (IOSDoubleArray *)createDoubleArray;

- (IOSFloatArray *)createFloatArray;

- (IOSIntArray *)createIntArray;

- (IOSLongArray *)createLongArray;

- (IOSObjectArray *)createStringArray;

- (JavaUtilArrayList *)createStringArrayList;

- (IOSObjectArray *)createTypedArrayWithAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c;

- (JavaUtilArrayList *)createTypedArrayListWithAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c;

- (jint)dataAvail;

- (jint)dataCapacity;

- (jint)dataPosition;

- (jint)dataSize;

- (void)enforceInterfaceWithNSString:(NSString *)interfaceName;

- (jboolean)hasFileDescriptors;

- (IOSByteArray *)marshall;

+ (AndroidOsParcel *)obtain;

- (IOSObjectArray *)readArrayWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (JavaUtilArrayList *)readArrayListWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)readBinderArrayWithAndroidOsIBinderArray:(IOSObjectArray *)val;

- (void)readBinderListWithJavaUtilList:(id<JavaUtilList>)list;

- (void)readBooleanArrayWithBooleanArray:(IOSBooleanArray *)val;

- (AndroidOsBundle *)readBundle;

- (AndroidOsBundle *)readBundleWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (jbyte)readByte;

- (void)readByteArrayWithByteArray:(IOSByteArray *)val;

- (void)readCharArrayWithCharArray:(IOSCharArray *)val;

- (id<JavaLangCharSequence>)readCharSequence;

- (IOSObjectArray *)readCharSequenceArray;

- (jdouble)readDouble;

- (void)readDoubleArrayWithDoubleArray:(IOSDoubleArray *)val;

- (void)readException;

- (void)readExceptionWithInt:(jint)code
                withNSString:(NSString *)msg;

- (jint)readExceptionCode;

- (AndroidOsParcelFileDescriptor *)readFileDescriptor;

- (jfloat)readFloat;

- (void)readFloatArrayWithFloatArray:(IOSFloatArray *)val;

- (JavaUtilHashMap *)readHashMapWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (jint)readInt;

- (void)readIntArrayWithIntArray:(IOSIntArray *)val;

- (void)readListWithJavaUtilList:(id<JavaUtilList>)outVal
         withJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (jlong)readLong;

- (void)readLongArrayWithLongArray:(IOSLongArray *)val;

- (void)readMapWithJavaUtilMap:(id<JavaUtilMap>)outVal
       withJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (id<AndroidOsParcelable>)readParcelableWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (IOSObjectArray *)readParcelableArrayWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (id<JavaIoSerializable>)readSerializable;

- (AndroidUtilSparseArray *)readSparseArrayWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (AndroidUtilSparseBooleanArray *)readSparseBooleanArray;

- (NSString *)readString;

- (IOSObjectArray *)readStringArray;

- (void)readStringArrayWithNSStringArray:(IOSObjectArray *)val;

- (void)readStringListWithJavaUtilList:(id<JavaUtilList>)list;

- (id<AndroidOsIBinder>)readStrongBinder;

- (IOSObjectArray *)readTypedArrayWithAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c;

- (void)readTypedArrayWithNSObjectArray:(IOSObjectArray *)val
        withAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c;

- (void)readTypedListWithJavaUtilList:(id<JavaUtilList>)list
      withAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c;

- (id)readValueWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)recycle;

- (void)setDataCapacityWithInt:(jint)size;

- (void)setDataPositionWithInt:(jint)pos;

- (void)setDataSizeWithInt:(jint)size;

- (void)unmarshallWithByteArray:(IOSByteArray *)data
                        withInt:(jint)offest
                        withInt:(jint)length;

- (void)writeArrayWithNSObjectArray:(IOSObjectArray *)val;

- (void)writeBinderArrayWithAndroidOsIBinderArray:(IOSObjectArray *)val;

- (void)writeBinderListWithJavaUtilList:(id<JavaUtilList>)val;

- (void)writeBooleanArrayWithBooleanArray:(IOSBooleanArray *)val;

- (void)writeBundleWithAndroidOsBundle:(AndroidOsBundle *)val;

- (void)writeByteWithByte:(jbyte)val;

- (void)writeByteArrayWithByteArray:(IOSByteArray *)b;

- (void)writeByteArrayWithByteArray:(IOSByteArray *)b
                            withInt:(jint)offset
                            withInt:(jint)len;

- (void)writeCharArrayWithCharArray:(IOSCharArray *)val;

- (void)writeCharSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)val;

- (void)writeCharSequenceArrayWithJavaLangCharSequenceArray:(IOSObjectArray *)val;

- (void)writeDoubleWithDouble:(jdouble)val;

- (void)writeDoubleArrayWithDoubleArray:(IOSDoubleArray *)val;

- (void)writeExceptionWithJavaLangException:(JavaLangException *)e;

- (void)writeFileDescriptorWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)val;

- (void)writeFloatWithFloat:(jfloat)val;

- (void)writeFloatArrayWithFloatArray:(IOSFloatArray *)val;

- (void)writeIntWithInt:(jint)val;

- (void)writeIntArrayWithIntArray:(IOSIntArray *)val;

- (void)writeInterfaceTokenWithNSString:(NSString *)interfaceName;

- (void)writeListWithJavaUtilList:(id<JavaUtilList>)val;

- (void)writeLongWithLong:(jlong)val;

- (void)writeLongArrayWithLongArray:(IOSLongArray *)val;

- (void)writeMapWithJavaUtilMap:(id<JavaUtilMap>)val;

- (void)writeNoException;

- (void)writeParcelableWithAndroidOsParcelable:(id<AndroidOsParcelable>)p
                                       withInt:(jint)parcelableFlags;

- (void)writeParcelableArrayWithAndroidOsParcelableArray:(IOSObjectArray *)value
                                                 withInt:(jint)parcelableFlags;

- (void)writeSerializableWithJavaIoSerializable:(id<JavaIoSerializable>)s;

- (void)writeSparseArrayWithAndroidUtilSparseArray:(AndroidUtilSparseArray *)val;

- (void)writeSparseBooleanArrayWithAndroidUtilSparseBooleanArray:(AndroidUtilSparseBooleanArray *)val;

- (void)writeStringWithNSString:(NSString *)val;

- (void)writeStringArrayWithNSStringArray:(IOSObjectArray *)val;

- (void)writeStringListWithJavaUtilList:(id<JavaUtilList>)val;

- (void)writeStrongBinderWithAndroidOsIBinder:(id<AndroidOsIBinder>)val;

- (void)writeStrongInterfaceWithAndroidOsIInterface:(id<AndroidOsIInterface>)val;

- (void)writeTypedArrayWithAndroidOsParcelableArray:(IOSObjectArray *)val
                                            withInt:(jint)parcelableFlags;

- (void)writeTypedListWithJavaUtilList:(id<JavaUtilList>)val;

- (void)writeValueWithId:(id)v;

#pragma mark Protected

- (void)java_finalize;

+ (AndroidOsParcel *)obtainWithInt:(jint)obj;

#pragma mark Package-Private

+ (void)closeFileDescriptorWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)desc;

+ (JavaIoFileDescriptor *)openFileDescriptorWithNSString:(NSString *)file
                                                 withInt:(jint)mode;

- (void)readMapInternalWithJavaUtilMap:(id<JavaUtilMap>)outVal
                               withInt:(jint)N
               withJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)writeMapInternalWithJavaUtilMap:(id<JavaUtilMap>)val;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidOsParcel)

inline id<AndroidOsParcelable_Creator> AndroidOsParcel_get_STRING_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<AndroidOsParcelable_Creator> AndroidOsParcel_STRING_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsParcel, STRING_CREATOR, id<AndroidOsParcelable_Creator>)

FOUNDATION_EXPORT AndroidOsParcel *AndroidOsParcel_obtain(void);

FOUNDATION_EXPORT JavaIoFileDescriptor *AndroidOsParcel_openFileDescriptorWithNSString_withInt_(NSString *file, jint mode);

FOUNDATION_EXPORT void AndroidOsParcel_closeFileDescriptorWithJavaIoFileDescriptor_(JavaIoFileDescriptor *desc);

FOUNDATION_EXPORT AndroidOsParcel *AndroidOsParcel_obtainWithInt_(jint obj);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsParcel)

#endif

#if !defined (AndroidOsParcelFileDescriptor_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsParcelFileDescriptor))
#define AndroidOsParcelFileDescriptor_

@class AndroidOsParcel;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoFileDescriptor;
@class JavaNetSocket;
@protocol AndroidOsParcelable_Creator;

@interface AndroidOsParcelFileDescriptor : NSObject < AndroidOsParcelable >

+ (jint)MODE_WORLD_READABLE;

+ (jint)MODE_WORLD_WRITEABLE;

+ (jint)MODE_READ_ONLY;

+ (jint)MODE_WRITE_ONLY;

+ (jint)MODE_READ_WRITE;

+ (jint)MODE_CREATE;

+ (jint)MODE_TRUNCATE;

+ (jint)MODE_APPEND;

+ (id<AndroidOsParcelable_Creator>)CREATOR;

#pragma mark Public

- (instancetype __nonnull)initWithAndroidOsParcelFileDescriptor:(AndroidOsParcelFileDescriptor *)descriptor;

- (void)close;

+ (IOSObjectArray *)createPipe;

- (jint)describeContents;

+ (AndroidOsParcelFileDescriptor *)fromSocketWithJavaNetSocket:(JavaNetSocket *)socket;

- (JavaIoFileDescriptor *)getFileDescriptor;

- (jlong)getStatSize;

+ (AndroidOsParcelFileDescriptor *)openWithJavaIoFile:(JavaIoFile *)file
                                              withInt:(jint)mode;

- (jlong)seekToWithLong:(jlong)pos;

- (NSString *)description;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)outArg
                                 withInt:(jint)flags;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)descriptor;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidOsParcelFileDescriptor)

inline jint AndroidOsParcelFileDescriptor_get_MODE_WORLD_READABLE(void);
#define AndroidOsParcelFileDescriptor_MODE_WORLD_READABLE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_WORLD_READABLE, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_WORLD_WRITEABLE(void);
#define AndroidOsParcelFileDescriptor_MODE_WORLD_WRITEABLE 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_WORLD_WRITEABLE, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_READ_ONLY(void);
#define AndroidOsParcelFileDescriptor_MODE_READ_ONLY 268435456
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_READ_ONLY, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_WRITE_ONLY(void);
#define AndroidOsParcelFileDescriptor_MODE_WRITE_ONLY 536870912
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_WRITE_ONLY, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_READ_WRITE(void);
#define AndroidOsParcelFileDescriptor_MODE_READ_WRITE 805306368
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_READ_WRITE, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_CREATE(void);
#define AndroidOsParcelFileDescriptor_MODE_CREATE 134217728
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_CREATE, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_TRUNCATE(void);
#define AndroidOsParcelFileDescriptor_MODE_TRUNCATE 67108864
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_TRUNCATE, jint)

inline jint AndroidOsParcelFileDescriptor_get_MODE_APPEND(void);
#define AndroidOsParcelFileDescriptor_MODE_APPEND 33554432
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcelFileDescriptor, MODE_APPEND, jint)

inline id<AndroidOsParcelable_Creator> AndroidOsParcelFileDescriptor_get_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<AndroidOsParcelable_Creator> AndroidOsParcelFileDescriptor_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsParcelFileDescriptor, CREATOR, id<AndroidOsParcelable_Creator>)

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor *AndroidOsParcelFileDescriptor_openWithJavaIoFile_withInt_(JavaIoFile *file, jint mode);

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor *AndroidOsParcelFileDescriptor_fromSocketWithJavaNetSocket_(JavaNetSocket *socket);

FOUNDATION_EXPORT IOSObjectArray *AndroidOsParcelFileDescriptor_createPipe(void);

FOUNDATION_EXPORT void AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *self, AndroidOsParcelFileDescriptor *descriptor);

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor *new_AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *descriptor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor *create_AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *descriptor);

FOUNDATION_EXPORT void AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(AndroidOsParcelFileDescriptor *self, JavaIoFileDescriptor *descriptor);

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor *new_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *descriptor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor *create_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *descriptor);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsParcelFileDescriptor)

#endif

#if !defined (AndroidOsParcelFileDescriptor_AutoCloseInputStream_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsParcelFileDescriptor_AutoCloseInputStream))
#define AndroidOsParcelFileDescriptor_AutoCloseInputStream_

#define RESTRICT_JavaIoFileInputStream 1
#define INCLUDE_JavaIoFileInputStream 1
#include "java/io/FileInputStream.h"

@class AndroidOsParcelFileDescriptor;
@class JavaIoFile;
@class JavaIoFileDescriptor;

@interface AndroidOsParcelFileDescriptor_AutoCloseInputStream : JavaIoFileInputStream

#pragma mark Public

- (instancetype __nonnull)initWithAndroidOsParcelFileDescriptor:(AndroidOsParcelFileDescriptor *)fd;

- (void)close;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsParcelFileDescriptor_AutoCloseInputStream)

FOUNDATION_EXPORT void AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor_AutoCloseInputStream *self, AndroidOsParcelFileDescriptor *fd);

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor_AutoCloseInputStream *new_AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor_AutoCloseInputStream *create_AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsParcelFileDescriptor_AutoCloseInputStream)

#endif

#if !defined (AndroidOsParcelFileDescriptor_AutoCloseOutputStream_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsParcelFileDescriptor_AutoCloseOutputStream))
#define AndroidOsParcelFileDescriptor_AutoCloseOutputStream_

#define RESTRICT_JavaIoFileOutputStream 1
#define INCLUDE_JavaIoFileOutputStream 1
#include "java/io/FileOutputStream.h"

@class AndroidOsParcelFileDescriptor;
@class JavaIoFile;
@class JavaIoFileDescriptor;

@interface AndroidOsParcelFileDescriptor_AutoCloseOutputStream : JavaIoFileOutputStream

#pragma mark Public

- (instancetype __nonnull)initWithAndroidOsParcelFileDescriptor:(AndroidOsParcelFileDescriptor *)fd;

- (void)close;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)arg0
                                 withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                               withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsParcelFileDescriptor_AutoCloseOutputStream)

FOUNDATION_EXPORT void AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor_AutoCloseOutputStream *self, AndroidOsParcelFileDescriptor *fd);

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor_AutoCloseOutputStream *new_AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsParcelFileDescriptor_AutoCloseOutputStream *create_AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsParcelFileDescriptor_AutoCloseOutputStream)

#endif

#if !defined (AndroidUtilAndroidException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilAndroidException))
#define AndroidUtilAndroidException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangThrowable;

@interface AndroidUtilAndroidException : JavaLangException

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)cause;

- (instancetype __nonnull)initWithNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilAndroidException)

FOUNDATION_EXPORT void AndroidUtilAndroidException_init(AndroidUtilAndroidException *self);

FOUNDATION_EXPORT AndroidUtilAndroidException *new_AndroidUtilAndroidException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidException *create_AndroidUtilAndroidException_init(void);

FOUNDATION_EXPORT void AndroidUtilAndroidException_initWithNSString_(AndroidUtilAndroidException *self, NSString *name);

FOUNDATION_EXPORT AndroidUtilAndroidException *new_AndroidUtilAndroidException_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidException *create_AndroidUtilAndroidException_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void AndroidUtilAndroidException_initWithJavaLangException_(AndroidUtilAndroidException *self, JavaLangException *cause);

FOUNDATION_EXPORT AndroidUtilAndroidException *new_AndroidUtilAndroidException_initWithJavaLangException_(JavaLangException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilAndroidException *create_AndroidUtilAndroidException_initWithJavaLangException_(JavaLangException *cause);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilAndroidException)

#endif

#if !defined (AndroidOsRemoteException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsRemoteException))
#define AndroidOsRemoteException_

@class JavaLangException;

@interface AndroidOsRemoteException : AndroidUtilAndroidException

#pragma mark Public

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsRemoteException)

FOUNDATION_EXPORT void AndroidOsRemoteException_init(AndroidOsRemoteException *self);

FOUNDATION_EXPORT AndroidOsRemoteException *new_AndroidOsRemoteException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsRemoteException *create_AndroidOsRemoteException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsRemoteException)

#endif

#if !defined (AndroidOsTrace_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsTrace))
#define AndroidOsTrace_

@interface AndroidOsTrace : NSObject

+ (jlong)TRACE_TAG_NEVER;

+ (jlong)TRACE_TAG_ALWAYS;

+ (jlong)TRACE_TAG_GRAPHICS;

+ (jlong)TRACE_TAG_INPUT;

+ (jlong)TRACE_TAG_VIEW;

+ (jlong)TRACE_TAG_WEBVIEW;

+ (jlong)TRACE_TAG_WINDOW_MANAGER;

+ (jlong)TRACE_TAG_ACTIVITY_MANAGER;

+ (jlong)TRACE_TAG_SYNC_MANAGER;

+ (jlong)TRACE_TAG_AUDIO;

+ (jlong)TRACE_TAG_VIDEO;

+ (jlong)TRACE_TAG_CAMERA;

+ (jlong)TRACE_TAG_HAL;

+ (jlong)TRACE_TAG_APP;

+ (jlong)TRACE_TAG_RESOURCES;

+ (jlong)TRACE_TAG_DALVIK;

+ (jlong)TRACE_TAG_RS;

+ (jlong)TRACE_TAG_BIONIC;

+ (jlong)TRACE_TAG_POWER;

+ (jlong)TRACE_TAG_PACKAGE_MANAGER;

+ (jlong)TRACE_TAG_SYSTEM_SERVER;

+ (jlong)TRACE_TAG_DATABASE;

#pragma mark Public

+ (void)asyncTraceBeginWithLong:(jlong)traceTag
                   withNSString:(NSString *)methodName
                        withInt:(jint)cookie;

+ (void)asyncTraceEndWithLong:(jlong)traceTag
                 withNSString:(NSString *)methodName
                      withInt:(jint)cookie;

+ (void)beginSectionWithNSString:(NSString *)sectionName;

+ (void)endSection;

+ (jboolean)isTagEnabledWithLong:(jlong)traceTag;

+ (void)setAppTracingAllowedWithBoolean:(jboolean)allowed;

+ (void)setTracingEnabledWithBoolean:(jboolean)enabled;

+ (void)traceBeginWithLong:(jlong)traceTag
              withNSString:(NSString *)methodName;

+ (void)traceCounterWithLong:(jlong)traceTag
                withNSString:(NSString *)counterName
                     withInt:(jint)counterValue;

+ (void)traceEndWithLong:(jlong)traceTag;

@end

J2OBJC_STATIC_INIT(AndroidOsTrace)

inline jlong AndroidOsTrace_get_TRACE_TAG_NEVER(void);
#define AndroidOsTrace_TRACE_TAG_NEVER 0LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_NEVER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_ALWAYS(void);
#define AndroidOsTrace_TRACE_TAG_ALWAYS 1LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_ALWAYS, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_GRAPHICS(void);
#define AndroidOsTrace_TRACE_TAG_GRAPHICS 2LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_GRAPHICS, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_INPUT(void);
#define AndroidOsTrace_TRACE_TAG_INPUT 4LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_INPUT, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_VIEW(void);
#define AndroidOsTrace_TRACE_TAG_VIEW 8LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_VIEW, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_WEBVIEW(void);
#define AndroidOsTrace_TRACE_TAG_WEBVIEW 16LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_WEBVIEW, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_WINDOW_MANAGER(void);
#define AndroidOsTrace_TRACE_TAG_WINDOW_MANAGER 32LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_WINDOW_MANAGER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_ACTIVITY_MANAGER(void);
#define AndroidOsTrace_TRACE_TAG_ACTIVITY_MANAGER 64LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_ACTIVITY_MANAGER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_SYNC_MANAGER(void);
#define AndroidOsTrace_TRACE_TAG_SYNC_MANAGER 128LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_SYNC_MANAGER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_AUDIO(void);
#define AndroidOsTrace_TRACE_TAG_AUDIO 256LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_AUDIO, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_VIDEO(void);
#define AndroidOsTrace_TRACE_TAG_VIDEO 512LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_VIDEO, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_CAMERA(void);
#define AndroidOsTrace_TRACE_TAG_CAMERA 1024LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_CAMERA, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_HAL(void);
#define AndroidOsTrace_TRACE_TAG_HAL 2048LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_HAL, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_APP(void);
#define AndroidOsTrace_TRACE_TAG_APP 4096LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_APP, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_RESOURCES(void);
#define AndroidOsTrace_TRACE_TAG_RESOURCES 8192LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_RESOURCES, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_DALVIK(void);
#define AndroidOsTrace_TRACE_TAG_DALVIK 16384LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_DALVIK, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_RS(void);
#define AndroidOsTrace_TRACE_TAG_RS 32768LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_RS, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_BIONIC(void);
#define AndroidOsTrace_TRACE_TAG_BIONIC 65536LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_BIONIC, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_POWER(void);
#define AndroidOsTrace_TRACE_TAG_POWER 131072LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_POWER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_PACKAGE_MANAGER(void);
#define AndroidOsTrace_TRACE_TAG_PACKAGE_MANAGER 262144LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_PACKAGE_MANAGER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_SYSTEM_SERVER(void);
#define AndroidOsTrace_TRACE_TAG_SYSTEM_SERVER 524288LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_SYSTEM_SERVER, jlong)

inline jlong AndroidOsTrace_get_TRACE_TAG_DATABASE(void);
#define AndroidOsTrace_TRACE_TAG_DATABASE 1048576LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_DATABASE, jlong)

FOUNDATION_EXPORT jboolean AndroidOsTrace_isTagEnabledWithLong_(jlong traceTag);

FOUNDATION_EXPORT void AndroidOsTrace_traceCounterWithLong_withNSString_withInt_(jlong traceTag, NSString *counterName, jint counterValue);

FOUNDATION_EXPORT void AndroidOsTrace_setAppTracingAllowedWithBoolean_(jboolean allowed);

FOUNDATION_EXPORT void AndroidOsTrace_setTracingEnabledWithBoolean_(jboolean enabled);

FOUNDATION_EXPORT void AndroidOsTrace_traceBeginWithLong_withNSString_(jlong traceTag, NSString *methodName);

FOUNDATION_EXPORT void AndroidOsTrace_traceEndWithLong_(jlong traceTag);

FOUNDATION_EXPORT void AndroidOsTrace_asyncTraceBeginWithLong_withNSString_withInt_(jlong traceTag, NSString *methodName, jint cookie);

FOUNDATION_EXPORT void AndroidOsTrace_asyncTraceEndWithLong_withNSString_withInt_(jlong traceTag, NSString *methodName, jint cookie);

FOUNDATION_EXPORT void AndroidOsTrace_beginSectionWithNSString_(NSString *sectionName);

FOUNDATION_EXPORT void AndroidOsTrace_endSection(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsTrace)

#endif

#if !defined (AndroidOsUserHandle_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidOsUserHandle))
#define AndroidOsUserHandle_

@interface AndroidOsUserHandle : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (jint)getCallingUserId;

+ (jint)getUserIdWithInt:(jint)uid;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsUserHandle)

FOUNDATION_EXPORT void AndroidOsUserHandle_init(AndroidOsUserHandle *self);

FOUNDATION_EXPORT AndroidOsUserHandle *new_AndroidOsUserHandle_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidOsUserHandle *create_AndroidOsUserHandle_init(void);

FOUNDATION_EXPORT jint AndroidOsUserHandle_getUserIdWithInt_(jint uid);

FOUNDATION_EXPORT jint AndroidOsUserHandle_getCallingUserId(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidOsUserHandle)

#endif

#if !defined (AndroidProviderBaseColumns_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidProviderBaseColumns))
#define AndroidProviderBaseColumns_

@protocol AndroidProviderBaseColumns < JavaObject >

@end

@interface AndroidProviderBaseColumns : NSObject

+ (NSString *)_ID;

+ (NSString *)_COUNT;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidProviderBaseColumns)

inline NSString *AndroidProviderBaseColumns_get__ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidProviderBaseColumns__ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidProviderBaseColumns, _ID, NSString *)

inline NSString *AndroidProviderBaseColumns_get__COUNT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidProviderBaseColumns__COUNT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidProviderBaseColumns, _COUNT, NSString *)

J2OBJC_TYPE_LITERAL_HEADER(AndroidProviderBaseColumns)

#endif

#if !defined (AndroidSupportAnnotationAnyThread_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationAnyThread))
#define AndroidSupportAnnotationAnyThread_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationAnyThread < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationAnyThread)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationAnyThread)

#endif

#if !defined (AndroidSupportAnnotationCallSuper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationCallSuper))
#define AndroidSupportAnnotationCallSuper_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationCallSuper < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationCallSuper)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationCallSuper)

#endif

#if !defined (AndroidSupportAnnotationCheckResult_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationCheckResult))
#define AndroidSupportAnnotationCheckResult_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationCheckResult < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationCheckResult)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationCheckResult)

#endif

#if !defined (AndroidSupportAnnotationIntDef_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationIntDef))
#define AndroidSupportAnnotationIntDef_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationIntDef < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationIntDef)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationIntDef)

#endif

#if !defined (AndroidSupportAnnotationIntRange_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationIntRange))
#define AndroidSupportAnnotationIntRange_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationIntRange < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationIntRange)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationIntRange)

#endif

#if !defined (AndroidSupportAnnotationMainThread_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationMainThread))
#define AndroidSupportAnnotationMainThread_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationMainThread < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationMainThread)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationMainThread)

#endif

#if !defined (AndroidSupportAnnotationNonNull_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationNonNull))
#define AndroidSupportAnnotationNonNull_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationNonNull < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationNonNull)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationNonNull)

#endif

#if !defined (AndroidSupportAnnotationNullable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationNullable))
#define AndroidSupportAnnotationNullable_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationNullable < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationNullable)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationNullable)

#endif

#if !defined (AndroidSupportAnnotationRequiresApi_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationRequiresApi))
#define AndroidSupportAnnotationRequiresApi_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationRequiresApi < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationRequiresApi)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationRequiresApi)

#endif

#if !defined (AndroidSupportAnnotationRestrictTo_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationRestrictTo))
#define AndroidSupportAnnotationRestrictTo_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationRestrictTo < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationRestrictTo)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationRestrictTo)

#endif

#if !defined (AndroidSupportAnnotationRestrictTo_Scope_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationRestrictTo_Scope))
#define AndroidSupportAnnotationRestrictTo_Scope_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidSupportAnnotationRestrictTo_Scope_Enum) {
  AndroidSupportAnnotationRestrictTo_Scope_Enum_LIBRARY = 0,
  AndroidSupportAnnotationRestrictTo_Scope_Enum_LIBRARY_GROUP = 1,
  AndroidSupportAnnotationRestrictTo_Scope_Enum_GROUP_ID = 2,
  AndroidSupportAnnotationRestrictTo_Scope_Enum_TESTS = 3,
  AndroidSupportAnnotationRestrictTo_Scope_Enum_SUBCLASSES = 4,
};

@interface AndroidSupportAnnotationRestrictTo_Scope : JavaLangEnum

+ (AndroidSupportAnnotationRestrictTo_Scope * __nonnull)LIBRARY;

+ (AndroidSupportAnnotationRestrictTo_Scope * __nonnull)LIBRARY_GROUP;

+ (AndroidSupportAnnotationRestrictTo_Scope * __nonnull)GROUP_ID;

+ (AndroidSupportAnnotationRestrictTo_Scope * __nonnull)TESTS;

+ (AndroidSupportAnnotationRestrictTo_Scope * __nonnull)SUBCLASSES;

#pragma mark Public

+ (AndroidSupportAnnotationRestrictTo_Scope *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidSupportAnnotationRestrictTo_Scope_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidSupportAnnotationRestrictTo_Scope)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_values_[];

inline AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_get_LIBRARY(void);
J2OBJC_ENUM_CONSTANT(AndroidSupportAnnotationRestrictTo_Scope, LIBRARY)

inline AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_get_LIBRARY_GROUP(void);
J2OBJC_ENUM_CONSTANT(AndroidSupportAnnotationRestrictTo_Scope, LIBRARY_GROUP)

inline AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_get_GROUP_ID(void);
J2OBJC_ENUM_CONSTANT(AndroidSupportAnnotationRestrictTo_Scope, GROUP_ID)

inline AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_get_TESTS(void);
J2OBJC_ENUM_CONSTANT(AndroidSupportAnnotationRestrictTo_Scope, TESTS)

inline AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_get_SUBCLASSES(void);
J2OBJC_ENUM_CONSTANT(AndroidSupportAnnotationRestrictTo_Scope, SUBCLASSES)

FOUNDATION_EXPORT IOSObjectArray *AndroidSupportAnnotationRestrictTo_Scope_values(void);

FOUNDATION_EXPORT AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationRestrictTo_Scope)

#endif

#if !defined (AndroidSupportAnnotationVisibleForTesting_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationVisibleForTesting))
#define AndroidSupportAnnotationVisibleForTesting_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationVisibleForTesting < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationVisibleForTesting)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationVisibleForTesting)

#endif

#if !defined (AndroidSupportAnnotationWorkerThread_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidSupportAnnotationWorkerThread))
#define AndroidSupportAnnotationWorkerThread_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol AndroidSupportAnnotationWorkerThread < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidSupportAnnotationWorkerThread)

J2OBJC_TYPE_LITERAL_HEADER(AndroidSupportAnnotationWorkerThread)

#endif

#if !defined (AndroidTelephonyJapanesePhoneNumberFormatter_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidTelephonyJapanesePhoneNumberFormatter))
#define AndroidTelephonyJapanesePhoneNumberFormatter_

@protocol AndroidTextEditable;

@interface AndroidTelephonyJapanesePhoneNumberFormatter : NSObject

#pragma mark Public

+ (void)formatWithAndroidTextEditable:(id<AndroidTextEditable>)text;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(AndroidTelephonyJapanesePhoneNumberFormatter)

FOUNDATION_EXPORT void AndroidTelephonyJapanesePhoneNumberFormatter_init(AndroidTelephonyJapanesePhoneNumberFormatter *self);

FOUNDATION_EXPORT AndroidTelephonyJapanesePhoneNumberFormatter *new_AndroidTelephonyJapanesePhoneNumberFormatter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidTelephonyJapanesePhoneNumberFormatter *create_AndroidTelephonyJapanesePhoneNumberFormatter_init(void);

FOUNDATION_EXPORT void AndroidTelephonyJapanesePhoneNumberFormatter_formatWithAndroidTextEditable_(id<AndroidTextEditable> text);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTelephonyJapanesePhoneNumberFormatter)

#endif

#if !defined (AndroidTelephonyPhoneNumberUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidTelephonyPhoneNumberUtils))
#define AndroidTelephonyPhoneNumberUtils_

@class IOSByteArray;
@class JavaUtilLocale;
@protocol AndroidTextEditable;

@interface AndroidTelephonyPhoneNumberUtils : NSObject

+ (jchar)PAUSE;

+ (jchar)WAIT;

+ (jchar)WILD;

+ (jint)TOA_International;

+ (jint)TOA_Unknown;

+ (NSString *)LOG_TAG;

+ (jint)FORMAT_UNKNOWN;

+ (jint)FORMAT_NANP;

+ (jint)FORMAT_JAPAN;

+ (jint)MIN_MATCH;

#pragma mark Public

- (instancetype __nonnull)init;

+ (NSString *)calledPartyBCDFragmentToStringWithByteArray:(IOSByteArray *)bytes
                                                  withInt:(jint)offset
                                                  withInt:(jint)length;

+ (NSString *)calledPartyBCDToStringWithByteArray:(IOSByteArray *)bytes
                                          withInt:(jint)offset
                                          withInt:(jint)length;

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b;

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b
                    withBoolean:(jboolean)useStrictComparation;

+ (jboolean)compareLooselyWithNSString:(NSString *)a
                          withNSString:(NSString *)b;

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b;

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b
                            withBoolean:(jboolean)acceptInvalidCCCPrefix;

+ (NSString *)convertKeypadLettersToDigitsWithNSString:(NSString *)input;

+ (NSString *)extractNetworkPortionWithNSString:(NSString *)phoneNumber;

+ (NSString *)extractNetworkPortionAltWithNSString:(NSString *)phoneNumber;

+ (NSString *)extractPostDialPortionWithNSString:(NSString *)phoneNumber;

+ (void)formatJapaneseNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text;

+ (void)formatNanpNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text;

+ (void)formatNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text
                                    withInt:(jint)defaultFormattingType;

+ (NSString *)formatNumberWithNSString:(NSString *)source;

+ (NSString *)formatNumberWithNSString:(NSString *)source
                               withInt:(jint)defaultFormattingType;

+ (jint)getFormatTypeForLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

+ (NSString *)getStrippedReversedWithNSString:(NSString *)phoneNumber;

+ (jboolean)is12KeyWithChar:(jchar)c;

+ (jboolean)isDialableWithChar:(jchar)c;

+ (jboolean)isGlobalPhoneNumberWithNSString:(NSString *)phoneNumber;

+ (jboolean)isISODigitWithChar:(jchar)c;

+ (jboolean)isNonSeparatorWithChar:(jchar)c;

+ (jboolean)isReallyDialableWithChar:(jchar)c;

+ (jboolean)isStartsPostDialWithChar:(jchar)c;

+ (jboolean)isUriNumberWithNSString:(NSString *)number;

+ (jboolean)isWellFormedSmsAddressWithNSString:(NSString *)address;

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithNSString:(NSString *)s;

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithLengthWithNSString:(NSString *)s;

+ (IOSByteArray *)numberToCalledPartyBCDWithNSString:(NSString *)number;

+ (NSString *)stringFromStringAndTOAWithNSString:(NSString *)s
                                         withInt:(jint)TOA;

+ (NSString *)stripSeparatorsWithNSString:(NSString *)phoneNumber;

+ (jint)toaFromStringWithNSString:(NSString *)s;

+ (NSString *)toCallerIDMinMatchWithNSString:(NSString *)phoneNumber;

@end

J2OBJC_STATIC_INIT(AndroidTelephonyPhoneNumberUtils)

inline jchar AndroidTelephonyPhoneNumberUtils_get_PAUSE(void);
#define AndroidTelephonyPhoneNumberUtils_PAUSE ','
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, PAUSE, jchar)

inline jchar AndroidTelephonyPhoneNumberUtils_get_WAIT(void);
#define AndroidTelephonyPhoneNumberUtils_WAIT ';'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, WAIT, jchar)

inline jchar AndroidTelephonyPhoneNumberUtils_get_WILD(void);
#define AndroidTelephonyPhoneNumberUtils_WILD 'N'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, WILD, jchar)

inline jint AndroidTelephonyPhoneNumberUtils_get_TOA_International(void);
#define AndroidTelephonyPhoneNumberUtils_TOA_International 145
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, TOA_International, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_TOA_Unknown(void);
#define AndroidTelephonyPhoneNumberUtils_TOA_Unknown 129
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, TOA_Unknown, jint)

inline NSString *AndroidTelephonyPhoneNumberUtils_get_LOG_TAG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_LOG_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, LOG_TAG, NSString *)

inline jint AndroidTelephonyPhoneNumberUtils_get_FORMAT_UNKNOWN(void);
#define AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, FORMAT_UNKNOWN, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_FORMAT_NANP(void);
#define AndroidTelephonyPhoneNumberUtils_FORMAT_NANP 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, FORMAT_NANP, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_FORMAT_JAPAN(void);
#define AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, FORMAT_JAPAN, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_MIN_MATCH(void);
#define AndroidTelephonyPhoneNumberUtils_MIN_MATCH 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, MIN_MATCH, jint)

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_init(AndroidTelephonyPhoneNumberUtils *self);

FOUNDATION_EXPORT AndroidTelephonyPhoneNumberUtils *new_AndroidTelephonyPhoneNumberUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidTelephonyPhoneNumberUtils *create_AndroidTelephonyPhoneNumberUtils_init(void);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_is12KeyWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(jchar c);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(jchar c);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_stripSeparatorsWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_extractPostDialPortionWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean useStrictComparation);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean acceptInvalidCCCPrefix);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_toCallerIDMinMatchWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_getStrippedReversedWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_stringFromStringAndTOAWithNSString_withInt_(NSString *s, jint TOA);

FOUNDATION_EXPORT jint AndroidTelephonyPhoneNumberUtils_toaFromStringWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDFragmentToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isWellFormedSmsAddressWithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isGlobalPhoneNumberWithNSString_(NSString *phoneNumber);

FOUNDATION_EXPORT IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithNSString_(NSString *s);

FOUNDATION_EXPORT IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithLengthWithNSString_(NSString *s);

FOUNDATION_EXPORT IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDWithNSString_(NSString *number);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_(NSString *source);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_withInt_(NSString *source, jint defaultFormattingType);

FOUNDATION_EXPORT jint AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(id<AndroidTextEditable> text, jint defaultFormattingType);

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(id<AndroidTextEditable> text);

FOUNDATION_EXPORT void AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(id<AndroidTextEditable> text);

FOUNDATION_EXPORT NSString *AndroidTelephonyPhoneNumberUtils_convertKeypadLettersToDigitsWithNSString_(NSString *input);

FOUNDATION_EXPORT jboolean AndroidTelephonyPhoneNumberUtils_isUriNumberWithNSString_(NSString *number);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTelephonyPhoneNumberUtils)

#endif

#if !defined (AndroidUtilEmptyArray_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilEmptyArray))
#define AndroidUtilEmptyArray_

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;

@interface AndroidUtilEmptyArray : NSObject

+ (IOSBooleanArray *)BOOLEAN;

+ (IOSByteArray *)BYTE;

+ (IOSCharArray *)CHAR;

+ (IOSDoubleArray *)DOUBLE;

+ (IOSIntArray *)INT;

+ (IOSLongArray *)LONG;

+ (IOSObjectArray *)CLASS;

+ (IOSObjectArray *)OBJECT;

+ (IOSObjectArray *)STRING;

+ (IOSObjectArray *)THROWABLE;

+ (IOSObjectArray *)STACK_TRACE_ELEMENT;

+ (IOSObjectArray *)TYPE;

+ (IOSObjectArray *)TYPE_VARIABLE;

@end

J2OBJC_STATIC_INIT(AndroidUtilEmptyArray)

inline IOSBooleanArray *AndroidUtilEmptyArray_get_BOOLEAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSBooleanArray *AndroidUtilEmptyArray_BOOLEAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, BOOLEAN, IOSBooleanArray *)

inline IOSByteArray *AndroidUtilEmptyArray_get_BYTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *AndroidUtilEmptyArray_BYTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, BYTE, IOSByteArray *)

inline IOSCharArray *AndroidUtilEmptyArray_get_CHAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *AndroidUtilEmptyArray_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, CHAR, IOSCharArray *)

inline IOSDoubleArray *AndroidUtilEmptyArray_get_DOUBLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSDoubleArray *AndroidUtilEmptyArray_DOUBLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, DOUBLE, IOSDoubleArray *)

inline IOSIntArray *AndroidUtilEmptyArray_get_INT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *AndroidUtilEmptyArray_INT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, INT, IOSIntArray *)

inline IOSLongArray *AndroidUtilEmptyArray_get_LONG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *AndroidUtilEmptyArray_LONG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, LONG, IOSLongArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, CLASS, IOSObjectArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_OBJECT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_OBJECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, OBJECT, IOSObjectArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, STRING, IOSObjectArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_THROWABLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_THROWABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, THROWABLE, IOSObjectArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_STACK_TRACE_ELEMENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_STACK_TRACE_ELEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, STACK_TRACE_ELEMENT, IOSObjectArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, TYPE, IOSObjectArray *)

inline IOSObjectArray *AndroidUtilEmptyArray_get_TYPE_VARIABLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *AndroidUtilEmptyArray_TYPE_VARIABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilEmptyArray, TYPE_VARIABLE, IOSObjectArray *)

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilEmptyArray)

#endif

#if !defined (AndroidUtilJsonReader_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilJsonReader))
#define AndroidUtilJsonReader_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class AndroidUtilJsonToken;
@class JavaIoReader;

@interface AndroidUtilJsonReader : NSObject < JavaIoCloseable >

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)inArg;

- (void)beginArray;

- (void)beginObject;

- (void)close;

- (void)endArray;

- (void)endObject;

- (jboolean)hasNext;

- (jboolean)isLenient;

- (jboolean)nextBoolean;

- (jdouble)nextDouble;

- (jint)nextInt;

- (jlong)nextLong;

- (NSString *)nextName;

- (void)nextNull;

- (NSString *)nextString;

- (AndroidUtilJsonToken *)peek;

- (void)setLenientWithBoolean:(jboolean)lenient;

- (void)skipValue;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilJsonReader)

FOUNDATION_EXPORT void AndroidUtilJsonReader_initWithJavaIoReader_(AndroidUtilJsonReader *self, JavaIoReader *inArg);

FOUNDATION_EXPORT AndroidUtilJsonReader *new_AndroidUtilJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilJsonReader *create_AndroidUtilJsonReader_initWithJavaIoReader_(JavaIoReader *inArg);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilJsonReader)

#endif

#if !defined (AndroidUtilJsonScope_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilJsonScope))
#define AndroidUtilJsonScope_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidUtilJsonScope_Enum) {
  AndroidUtilJsonScope_Enum_EMPTY_ARRAY = 0,
  AndroidUtilJsonScope_Enum_NONEMPTY_ARRAY = 1,
  AndroidUtilJsonScope_Enum_EMPTY_OBJECT = 2,
  AndroidUtilJsonScope_Enum_DANGLING_NAME = 3,
  AndroidUtilJsonScope_Enum_NONEMPTY_OBJECT = 4,
  AndroidUtilJsonScope_Enum_EMPTY_DOCUMENT = 5,
  AndroidUtilJsonScope_Enum_NONEMPTY_DOCUMENT = 6,
  AndroidUtilJsonScope_Enum_CLOSED = 7,
};

@interface AndroidUtilJsonScope : JavaLangEnum

+ (AndroidUtilJsonScope * __nonnull)EMPTY_ARRAY;

+ (AndroidUtilJsonScope * __nonnull)NONEMPTY_ARRAY;

+ (AndroidUtilJsonScope * __nonnull)EMPTY_OBJECT;

+ (AndroidUtilJsonScope * __nonnull)DANGLING_NAME;

+ (AndroidUtilJsonScope * __nonnull)NONEMPTY_OBJECT;

+ (AndroidUtilJsonScope * __nonnull)EMPTY_DOCUMENT;

+ (AndroidUtilJsonScope * __nonnull)NONEMPTY_DOCUMENT;

+ (AndroidUtilJsonScope * __nonnull)CLOSED;

#pragma mark Public

+ (AndroidUtilJsonScope *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidUtilJsonScope_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidUtilJsonScope)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidUtilJsonScope *AndroidUtilJsonScope_values_[];

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_EMPTY_ARRAY(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, EMPTY_ARRAY)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_NONEMPTY_ARRAY(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, NONEMPTY_ARRAY)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_EMPTY_OBJECT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, EMPTY_OBJECT)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_DANGLING_NAME(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, DANGLING_NAME)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_NONEMPTY_OBJECT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, NONEMPTY_OBJECT)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_EMPTY_DOCUMENT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, EMPTY_DOCUMENT)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_NONEMPTY_DOCUMENT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, NONEMPTY_DOCUMENT)

inline AndroidUtilJsonScope *AndroidUtilJsonScope_get_CLOSED(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonScope, CLOSED)

FOUNDATION_EXPORT IOSObjectArray *AndroidUtilJsonScope_values(void);

FOUNDATION_EXPORT AndroidUtilJsonScope *AndroidUtilJsonScope_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidUtilJsonScope *AndroidUtilJsonScope_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilJsonScope)

#endif

#if !defined (AndroidUtilJsonToken_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilJsonToken))
#define AndroidUtilJsonToken_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidUtilJsonToken_Enum) {
  AndroidUtilJsonToken_Enum_BEGIN_ARRAY = 0,
  AndroidUtilJsonToken_Enum_END_ARRAY = 1,
  AndroidUtilJsonToken_Enum_BEGIN_OBJECT = 2,
  AndroidUtilJsonToken_Enum_END_OBJECT = 3,
  AndroidUtilJsonToken_Enum_NAME = 4,
  AndroidUtilJsonToken_Enum_STRING = 5,
  AndroidUtilJsonToken_Enum_NUMBER = 6,
  AndroidUtilJsonToken_Enum_BOOLEAN = 7,
  AndroidUtilJsonToken_Enum_NULL = 8,
  AndroidUtilJsonToken_Enum_END_DOCUMENT = 9,
};

@interface AndroidUtilJsonToken : JavaLangEnum

+ (AndroidUtilJsonToken * __nonnull)BEGIN_ARRAY;

+ (AndroidUtilJsonToken * __nonnull)END_ARRAY;

+ (AndroidUtilJsonToken * __nonnull)BEGIN_OBJECT;

+ (AndroidUtilJsonToken * __nonnull)END_OBJECT;

+ (AndroidUtilJsonToken * __nonnull)NAME;

+ (AndroidUtilJsonToken * __nonnull)STRING;

+ (AndroidUtilJsonToken * __nonnull)NUMBER;

+ (AndroidUtilJsonToken * __nonnull)BOOLEAN;

+ (AndroidUtilJsonToken * __nonnull)NULL_;

+ (AndroidUtilJsonToken * __nonnull)END_DOCUMENT;

#pragma mark Public

+ (AndroidUtilJsonToken *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidUtilJsonToken_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidUtilJsonToken)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidUtilJsonToken *AndroidUtilJsonToken_values_[];

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_BEGIN_ARRAY(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, BEGIN_ARRAY)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_END_ARRAY(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, END_ARRAY)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_BEGIN_OBJECT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, BEGIN_OBJECT)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_END_OBJECT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, END_OBJECT)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_NAME(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, NAME)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_STRING(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, STRING)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_NUMBER(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, NUMBER)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_BOOLEAN(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, BOOLEAN)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_NULL(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, NULL)

inline AndroidUtilJsonToken *AndroidUtilJsonToken_get_END_DOCUMENT(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilJsonToken, END_DOCUMENT)

FOUNDATION_EXPORT IOSObjectArray *AndroidUtilJsonToken_values(void);

FOUNDATION_EXPORT AndroidUtilJsonToken *AndroidUtilJsonToken_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidUtilJsonToken *AndroidUtilJsonToken_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilJsonToken)

#endif

#if !defined (AndroidUtilJsonWriter_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilJsonWriter))
#define AndroidUtilJsonWriter_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class JavaIoWriter;

@interface AndroidUtilJsonWriter : NSObject < JavaIoCloseable >

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)outArg;

- (AndroidUtilJsonWriter *)beginArray;

- (AndroidUtilJsonWriter *)beginObject;

- (void)close;

- (AndroidUtilJsonWriter *)endArray;

- (AndroidUtilJsonWriter *)endObject;

- (void)flush;

- (jboolean)isLenient;

- (AndroidUtilJsonWriter *)nameWithNSString:(NSString *)name;

- (AndroidUtilJsonWriter *)nullValue;

- (void)setIndentWithNSString:(NSString *)indent;

- (void)setLenientWithBoolean:(jboolean)lenient;

- (AndroidUtilJsonWriter *)valueWithBoolean:(jboolean)value;

- (AndroidUtilJsonWriter *)valueWithDouble:(jdouble)value;

- (AndroidUtilJsonWriter *)valueWithLong:(jlong)value;

- (AndroidUtilJsonWriter *)valueWithNSNumber:(NSNumber *)value;

- (AndroidUtilJsonWriter *)valueWithNSString:(NSString *)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilJsonWriter)

FOUNDATION_EXPORT void AndroidUtilJsonWriter_initWithJavaIoWriter_(AndroidUtilJsonWriter *self, JavaIoWriter *outArg);

FOUNDATION_EXPORT AndroidUtilJsonWriter *new_AndroidUtilJsonWriter_initWithJavaIoWriter_(JavaIoWriter *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilJsonWriter *create_AndroidUtilJsonWriter_initWithJavaIoWriter_(JavaIoWriter *outArg);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilJsonWriter)

#endif

#if !defined (AndroidUtilLongSparseArray_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilLongSparseArray))
#define AndroidUtilLongSparseArray_

@interface AndroidUtilLongSparseArray : NSObject < NSCopying >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)initialCapacity;

- (void)appendWithLong:(jlong)key
                withId:(id)value;

- (void)clear;

- (AndroidUtilLongSparseArray *)java_clone;

- (void)delete__WithLong:(jlong)key;

- (id)getWithLong:(jlong)key;

- (id)getWithLong:(jlong)key
           withId:(id)valueIfKeyNotFound;

- (jint)indexOfKeyWithLong:(jlong)key;

- (jint)indexOfValueWithId:(id)value;

- (jlong)keyAtWithInt:(jint)index;

- (void)putWithLong:(jlong)key
             withId:(id)value;

- (void)removeWithLong:(jlong)key;

- (void)removeAtWithInt:(jint)index;

- (void)setValueAtWithInt:(jint)index
                   withId:(id)value;

- (jint)size;

- (NSString *)description;

- (id)valueAtWithInt:(jint)index;

@end

J2OBJC_STATIC_INIT(AndroidUtilLongSparseArray)

FOUNDATION_EXPORT void AndroidUtilLongSparseArray_init(AndroidUtilLongSparseArray *self);

FOUNDATION_EXPORT AndroidUtilLongSparseArray *new_AndroidUtilLongSparseArray_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilLongSparseArray *create_AndroidUtilLongSparseArray_init(void);

FOUNDATION_EXPORT void AndroidUtilLongSparseArray_initWithInt_(AndroidUtilLongSparseArray *self, jint initialCapacity);

FOUNDATION_EXPORT AndroidUtilLongSparseArray *new_AndroidUtilLongSparseArray_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilLongSparseArray *create_AndroidUtilLongSparseArray_initWithInt_(jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilLongSparseArray)

#endif

#if !defined (AndroidUtilMalformedJsonException_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilMalformedJsonException))
#define AndroidUtilMalformedJsonException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "java/io/IOException.h"

@class JavaLangThrowable;

@interface AndroidUtilMalformedJsonException : JavaIoIOException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilMalformedJsonException)

FOUNDATION_EXPORT void AndroidUtilMalformedJsonException_initWithNSString_(AndroidUtilMalformedJsonException *self, NSString *message);

FOUNDATION_EXPORT AndroidUtilMalformedJsonException *new_AndroidUtilMalformedJsonException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilMalformedJsonException *create_AndroidUtilMalformedJsonException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilMalformedJsonException)

#endif

#if !defined (AndroidUtilPatterns_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilPatterns))
#define AndroidUtilPatterns_

@class JavaUtilRegexMatcher;
@class JavaUtilRegexPattern;

@interface AndroidUtilPatterns : NSObject

+ (NSString *)TOP_LEVEL_DOMAIN_STR;

+ (JavaUtilRegexPattern *)TOP_LEVEL_DOMAIN;

+ (NSString *)TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL;

+ (NSString *)GOOD_IRI_CHAR;

+ (JavaUtilRegexPattern *)WEB_URL;

+ (JavaUtilRegexPattern *)IP_ADDRESS;

+ (JavaUtilRegexPattern *)DOMAIN_NAME;

+ (JavaUtilRegexPattern *)EMAIL_ADDRESS;

+ (JavaUtilRegexPattern *)PHONE;

#pragma mark Public

+ (NSString *)concatGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher;

+ (NSString *)digitsAndPlusOnlyWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher;

@end

J2OBJC_STATIC_INIT(AndroidUtilPatterns)

inline NSString *AndroidUtilPatterns_get_TOP_LEVEL_DOMAIN_STR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, TOP_LEVEL_DOMAIN_STR, NSString *)

inline JavaUtilRegexPattern *AndroidUtilPatterns_get_TOP_LEVEL_DOMAIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidUtilPatterns_TOP_LEVEL_DOMAIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, TOP_LEVEL_DOMAIN, JavaUtilRegexPattern *)

inline NSString *AndroidUtilPatterns_get_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL, NSString *)

inline NSString *AndroidUtilPatterns_get_GOOD_IRI_CHAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidUtilPatterns_GOOD_IRI_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, GOOD_IRI_CHAR, NSString *)

inline JavaUtilRegexPattern *AndroidUtilPatterns_get_WEB_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidUtilPatterns_WEB_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, WEB_URL, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidUtilPatterns_get_IP_ADDRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidUtilPatterns_IP_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, IP_ADDRESS, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidUtilPatterns_get_DOMAIN_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidUtilPatterns_DOMAIN_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, DOMAIN_NAME, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidUtilPatterns_get_EMAIL_ADDRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidUtilPatterns_EMAIL_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, EMAIL_ADDRESS, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidUtilPatterns_get_PHONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidUtilPatterns_PHONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilPatterns, PHONE, JavaUtilRegexPattern *)

FOUNDATION_EXPORT NSString *AndroidUtilPatterns_concatGroupsWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher);

FOUNDATION_EXPORT NSString *AndroidUtilPatterns_digitsAndPlusOnlyWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilPatterns)

#endif

#if !defined (AndroidUtilPrefixPrinter_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilPrefixPrinter))
#define AndroidUtilPrefixPrinter_

#define RESTRICT_AndroidUtilPrinter 1
#define INCLUDE_AndroidUtilPrinter 1
#include "android/util/Printer.h"

@interface AndroidUtilPrefixPrinter : NSObject < AndroidUtilPrinter >

#pragma mark Public

+ (id<AndroidUtilPrinter>)createWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                                          withNSString:(NSString *)prefix;

- (void)printlnWithNSString:(NSString *)str;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilPrefixPrinter)

FOUNDATION_EXPORT id<AndroidUtilPrinter> AndroidUtilPrefixPrinter_createWithAndroidUtilPrinter_withNSString_(id<AndroidUtilPrinter> printer, NSString *prefix);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilPrefixPrinter)

#endif

#if !defined (AndroidUtilSize_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilSize))
#define AndroidUtilSize_

@interface AndroidUtilSize : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)width
                              withInt:(jint)height;

- (jboolean)isEqual:(id)obj;

- (jint)getHeight;

- (jint)getWidth;

- (NSUInteger)hash;

+ (AndroidUtilSize *)parseSizeWithNSString:(NSString *)string;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilSize)

FOUNDATION_EXPORT void AndroidUtilSize_initWithInt_withInt_(AndroidUtilSize *self, jint width, jint height);

FOUNDATION_EXPORT AndroidUtilSize *new_AndroidUtilSize_initWithInt_withInt_(jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilSize *create_AndroidUtilSize_initWithInt_withInt_(jint width, jint height);

FOUNDATION_EXPORT AndroidUtilSize *AndroidUtilSize_parseSizeWithNSString_(NSString *string);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilSize)

#endif

#if !defined (AndroidUtilSizeF_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilSizeF))
#define AndroidUtilSizeF_

@interface AndroidUtilSizeF : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithFloat:(jfloat)width
                              withFloat:(jfloat)height;

+ (jfloat)checkArgumentFiniteWithFloat:(jfloat)value
                          withNSString:(NSString *)valueName;

- (jboolean)isEqual:(id)obj;

- (jfloat)getHeight;

- (jfloat)getWidth;

- (NSUInteger)hash;

+ (AndroidUtilSizeF *)parseSizeFWithNSString:(NSString *)string;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilSizeF)

FOUNDATION_EXPORT void AndroidUtilSizeF_initWithFloat_withFloat_(AndroidUtilSizeF *self, jfloat width, jfloat height);

FOUNDATION_EXPORT AndroidUtilSizeF *new_AndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilSizeF *create_AndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height);

FOUNDATION_EXPORT jfloat AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(jfloat value, NSString *valueName);

FOUNDATION_EXPORT AndroidUtilSizeF *AndroidUtilSizeF_parseSizeFWithNSString_(NSString *string);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilSizeF)

#endif

#if !defined (AndroidUtilTimeUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilTimeUtils))
#define AndroidUtilTimeUtils_

@class JavaLangStringBuilder;

@interface AndroidUtilTimeUtils : NSObject

+ (jint)HUNDRED_DAY_FIELD_LEN;

+ (jlong)NANOS_PER_MS;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)formatDurationWithLong:(jlong)duration
     withJavaLangStringBuilder:(JavaLangStringBuilder *)builder;

@end

J2OBJC_STATIC_INIT(AndroidUtilTimeUtils)

inline jint AndroidUtilTimeUtils_get_HUNDRED_DAY_FIELD_LEN(void);
#define AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN 19
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, HUNDRED_DAY_FIELD_LEN, jint)

inline jlong AndroidUtilTimeUtils_get_NANOS_PER_MS(void);
#define AndroidUtilTimeUtils_NANOS_PER_MS 1000000LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, NANOS_PER_MS, jlong)

FOUNDATION_EXPORT void AndroidUtilTimeUtils_init(AndroidUtilTimeUtils *self);

FOUNDATION_EXPORT AndroidUtilTimeUtils *new_AndroidUtilTimeUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilTimeUtils *create_AndroidUtilTimeUtils_init(void);

FOUNDATION_EXPORT void AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(jlong duration, JavaLangStringBuilder *builder);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilTimeUtils)

#endif

#if !defined (AndroidUtilXml_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilXml))
#define AndroidUtilXml_

@class AndroidUtilXml_Encoding;
@protocol OrgXmlpullV1XmlPullParser;
@protocol OrgXmlpullV1XmlSerializer;

@interface AndroidUtilXml : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (AndroidUtilXml_Encoding *)findEncodingByNameWithNSString:(NSString *)encodingName;

+ (id<OrgXmlpullV1XmlPullParser>)newPullParser OBJC_METHOD_FAMILY_NONE;

+ (id<OrgXmlpullV1XmlSerializer>)newSerializer OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidUtilXml)

FOUNDATION_EXPORT void AndroidUtilXml_init(AndroidUtilXml *self);

FOUNDATION_EXPORT AndroidUtilXml *new_AndroidUtilXml_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilXml *create_AndroidUtilXml_init(void);

FOUNDATION_EXPORT id<OrgXmlpullV1XmlPullParser> AndroidUtilXml_newPullParser(void);

FOUNDATION_EXPORT id<OrgXmlpullV1XmlSerializer> AndroidUtilXml_newSerializer(void);

FOUNDATION_EXPORT AndroidUtilXml_Encoding *AndroidUtilXml_findEncodingByNameWithNSString_(NSString *encodingName);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilXml)

#endif

#if !defined (AndroidUtilXml_XmlSerializerFactory_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilXml_XmlSerializerFactory))
#define AndroidUtilXml_XmlSerializerFactory_

@class OrgXmlpullV1XmlPullParserFactory;

@interface AndroidUtilXml_XmlSerializerFactory : NSObject

+ (NSString *)TYPE;

+ (OrgXmlpullV1XmlPullParserFactory *)instance;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(AndroidUtilXml_XmlSerializerFactory)

inline NSString *AndroidUtilXml_XmlSerializerFactory_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidUtilXml_XmlSerializerFactory_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilXml_XmlSerializerFactory, TYPE, NSString *)

inline OrgXmlpullV1XmlPullParserFactory *AndroidUtilXml_XmlSerializerFactory_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgXmlpullV1XmlPullParserFactory *AndroidUtilXml_XmlSerializerFactory_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilXml_XmlSerializerFactory, instance, OrgXmlpullV1XmlPullParserFactory *)

FOUNDATION_EXPORT void AndroidUtilXml_XmlSerializerFactory_init(AndroidUtilXml_XmlSerializerFactory *self);

FOUNDATION_EXPORT AndroidUtilXml_XmlSerializerFactory *new_AndroidUtilXml_XmlSerializerFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidUtilXml_XmlSerializerFactory *create_AndroidUtilXml_XmlSerializerFactory_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilXml_XmlSerializerFactory)

#endif

#if !defined (AndroidUtilXml_Encoding_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_AndroidUtilXml_Encoding))
#define AndroidUtilXml_Encoding_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidUtilXml_Encoding_Enum) {
  AndroidUtilXml_Encoding_Enum_US_ASCII = 0,
  AndroidUtilXml_Encoding_Enum_UTF_8 = 1,
  AndroidUtilXml_Encoding_Enum_UTF_16 = 2,
  AndroidUtilXml_Encoding_Enum_ISO_8859_1 = 3,
};

@interface AndroidUtilXml_Encoding : JavaLangEnum {
 @public
  NSString *expatName_;
}

+ (AndroidUtilXml_Encoding * __nonnull)US_ASCII;

+ (AndroidUtilXml_Encoding * __nonnull)UTF_8;

+ (AndroidUtilXml_Encoding * __nonnull)UTF_16;

+ (AndroidUtilXml_Encoding * __nonnull)ISO_8859_1;

#pragma mark Public

+ (AndroidUtilXml_Encoding *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidUtilXml_Encoding_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidUtilXml_Encoding)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_values_[];

inline AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_get_US_ASCII(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilXml_Encoding, US_ASCII)

inline AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_get_UTF_8(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilXml_Encoding, UTF_8)

inline AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_get_UTF_16(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilXml_Encoding, UTF_16)

inline AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_get_ISO_8859_1(void);
J2OBJC_ENUM_CONSTANT(AndroidUtilXml_Encoding, ISO_8859_1)

J2OBJC_FIELD_SETTER(AndroidUtilXml_Encoding, expatName_, NSString *)

FOUNDATION_EXPORT IOSObjectArray *AndroidUtilXml_Encoding_values(void);

FOUNDATION_EXPORT AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidUtilXml_Encoding)

#endif

#if !defined (CoDopplAltUtilsArrayUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_CoDopplAltUtilsArrayUtils))
#define CoDopplAltUtilsArrayUtils_

@class AndroidUtilArraySet;
@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class JavaUtilArrayList;

@interface CoDopplAltUtilsArrayUtils : NSObject

#pragma mark Public

+ (JavaUtilArrayList *)addWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                         withId:(id)val;

+ (AndroidUtilArraySet *)addWithAndroidUtilArraySet:(AndroidUtilArraySet *)cur
                                             withId:(id)val;

+ (IOSObjectArray *)appendElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element;

+ (IOSIntArray *)appendIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val;

+ (IOSLongArray *)appendLongWithLongArray:(IOSLongArray *)cur
                                 withLong:(jlong)val;

+ (IOSLongArray *)cloneOrNullWithLongArray:(IOSLongArray *)array;

+ (jboolean)containsWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                   withId:(id)val;

+ (jboolean)containsWithAndroidUtilArraySet:(AndroidUtilArraySet *)cur
                                     withId:(id)val;

+ (jboolean)containsWithIntArray:(IOSIntArray *)array
                         withInt:(jint)value;

+ (jboolean)containsWithLongArray:(IOSLongArray *)array
                         withLong:(jlong)value;

+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)value;

+ (jboolean)containsAllWithNSObjectArray:(IOSObjectArray *)array
                       withNSObjectArray:(IOSObjectArray *)check;

+ (IOSObjectArray *)emptyArrayWithIOSClass:(IOSClass *)kind;

+ (jboolean)equalsWithByteArray:(IOSByteArray *)array1
                  withByteArray:(IOSByteArray *)array2
                        withInt:(jint)length;

+ (jint)idealBooleanArraySizeWithInt:(jint)need;

+ (jint)idealByteArraySizeWithInt:(jint)need;

+ (jint)idealCharArraySizeWithInt:(jint)need;

+ (jint)idealFloatArraySizeWithInt:(jint)need;

+ (jint)idealIntArraySizeWithInt:(jint)need;

+ (jint)idealLongArraySizeWithInt:(jint)need;

+ (jint)idealObjectArraySizeWithInt:(jint)need;

+ (jint)idealShortArraySizeWithInt:(jint)need;

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)value;

+ (jboolean)isEmptyWithIntArray:(IOSIntArray *)array;

+ (jboolean)isEmptyWithLongArray:(IOSLongArray *)array;

+ (jboolean)isEmptyWithNSObjectArray:(IOSObjectArray *)array;

+ (IOSObjectArray *)newUnpaddedArrayWithIOSClass:(IOSClass *)clazz
                                         withInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSBooleanArray *)newUnpaddedBooleanArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)newUnpaddedByteArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSCharArray *)newUnpaddedCharArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSFloatArray *)newUnpaddedFloatArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)newUnpaddedIntArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)newUnpaddedLongArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)newUnpaddedObjectArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (JavaUtilArrayList *)removeWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                            withId:(id)val;

+ (AndroidUtilArraySet *)removeWithAndroidUtilArraySet:(AndroidUtilArraySet *)cur
                                                withId:(id)val;

+ (IOSObjectArray *)removeElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element;

+ (IOSIntArray *)removeIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val;

+ (IOSLongArray *)removeLongWithLongArray:(IOSLongArray *)cur
                                 withLong:(jlong)val;

+ (jlong)totalWithLongArray:(IOSLongArray *)array;

@end

J2OBJC_STATIC_INIT(CoDopplAltUtilsArrayUtils)

FOUNDATION_EXPORT IOSByteArray *CoDopplAltUtilsArrayUtils_newUnpaddedByteArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSCharArray *CoDopplAltUtilsArrayUtils_newUnpaddedCharArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSIntArray *CoDopplAltUtilsArrayUtils_newUnpaddedIntArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSBooleanArray *CoDopplAltUtilsArrayUtils_newUnpaddedBooleanArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSLongArray *CoDopplAltUtilsArrayUtils_newUnpaddedLongArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSFloatArray *CoDopplAltUtilsArrayUtils_newUnpaddedFloatArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsArrayUtils_newUnpaddedObjectArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsArrayUtils_newUnpaddedArrayWithIOSClass_withInt_(IOSClass *clazz, jint minLen);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealBooleanArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealShortArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealCharArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealIntArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealFloatArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealObjectArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_idealLongArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_equalsWithByteArray_withByteArray_withInt_(IOSByteArray *array1, IOSByteArray *array2, jint length);

FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsArrayUtils_emptyArrayWithIOSClass_(IOSClass *kind);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_isEmptyWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_isEmptyWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_isEmptyWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_containsWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jint CoDopplAltUtilsArrayUtils_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_containsAllWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array, IOSObjectArray *check);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_containsWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_containsWithLongArray_withLong_(IOSLongArray *array, jlong value);

FOUNDATION_EXPORT jlong CoDopplAltUtilsArrayUtils_totalWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsArrayUtils_appendElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsArrayUtils_removeElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSIntArray *CoDopplAltUtilsArrayUtils_appendIntWithIntArray_withInt_(IOSIntArray *cur, jint val);

FOUNDATION_EXPORT IOSIntArray *CoDopplAltUtilsArrayUtils_removeIntWithIntArray_withInt_(IOSIntArray *cur, jint val);

FOUNDATION_EXPORT IOSLongArray *CoDopplAltUtilsArrayUtils_appendLongWithLongArray_withLong_(IOSLongArray *cur, jlong val);

FOUNDATION_EXPORT IOSLongArray *CoDopplAltUtilsArrayUtils_removeLongWithLongArray_withLong_(IOSLongArray *cur, jlong val);

FOUNDATION_EXPORT IOSLongArray *CoDopplAltUtilsArrayUtils_cloneOrNullWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT AndroidUtilArraySet *CoDopplAltUtilsArrayUtils_addWithAndroidUtilArraySet_withId_(AndroidUtilArraySet *cur, id val);

FOUNDATION_EXPORT AndroidUtilArraySet *CoDopplAltUtilsArrayUtils_removeWithAndroidUtilArraySet_withId_(AndroidUtilArraySet *cur, id val);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_containsWithAndroidUtilArraySet_withId_(AndroidUtilArraySet *cur, id val);

FOUNDATION_EXPORT JavaUtilArrayList *CoDopplAltUtilsArrayUtils_addWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val);

FOUNDATION_EXPORT JavaUtilArrayList *CoDopplAltUtilsArrayUtils_removeWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val);

FOUNDATION_EXPORT jboolean CoDopplAltUtilsArrayUtils_containsWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val);

J2OBJC_TYPE_LITERAL_HEADER(CoDopplAltUtilsArrayUtils)

#endif

#if !defined (CoDopplAltUtilsEmptyArray_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_CoDopplAltUtilsEmptyArray))
#define CoDopplAltUtilsEmptyArray_

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;

@interface CoDopplAltUtilsEmptyArray : NSObject

+ (IOSBooleanArray *)BOOLEAN;

+ (IOSByteArray *)BYTE;

+ (IOSCharArray *)CHAR;

+ (IOSDoubleArray *)DOUBLE;

+ (IOSIntArray *)INT;

+ (IOSLongArray *)LONG;

+ (IOSObjectArray *)CLASS;

+ (IOSObjectArray *)OBJECT;

+ (IOSObjectArray *)STRING;

+ (IOSObjectArray *)THROWABLE;

+ (IOSObjectArray *)STACK_TRACE_ELEMENT;

+ (IOSObjectArray *)TYPE;

+ (IOSObjectArray *)TYPE_VARIABLE;

@end

J2OBJC_STATIC_INIT(CoDopplAltUtilsEmptyArray)

inline IOSBooleanArray *CoDopplAltUtilsEmptyArray_get_BOOLEAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSBooleanArray *CoDopplAltUtilsEmptyArray_BOOLEAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, BOOLEAN, IOSBooleanArray *)

inline IOSByteArray *CoDopplAltUtilsEmptyArray_get_BYTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *CoDopplAltUtilsEmptyArray_BYTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, BYTE, IOSByteArray *)

inline IOSCharArray *CoDopplAltUtilsEmptyArray_get_CHAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *CoDopplAltUtilsEmptyArray_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, CHAR, IOSCharArray *)

inline IOSDoubleArray *CoDopplAltUtilsEmptyArray_get_DOUBLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSDoubleArray *CoDopplAltUtilsEmptyArray_DOUBLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, DOUBLE, IOSDoubleArray *)

inline IOSIntArray *CoDopplAltUtilsEmptyArray_get_INT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *CoDopplAltUtilsEmptyArray_INT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, INT, IOSIntArray *)

inline IOSLongArray *CoDopplAltUtilsEmptyArray_get_LONG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *CoDopplAltUtilsEmptyArray_LONG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, LONG, IOSLongArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, CLASS, IOSObjectArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_OBJECT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_OBJECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, OBJECT, IOSObjectArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, STRING, IOSObjectArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_THROWABLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_THROWABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, THROWABLE, IOSObjectArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_STACK_TRACE_ELEMENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_STACK_TRACE_ELEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, STACK_TRACE_ELEMENT, IOSObjectArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, TYPE, IOSObjectArray *)

inline IOSObjectArray *CoDopplAltUtilsEmptyArray_get_TYPE_VARIABLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *CoDopplAltUtilsEmptyArray_TYPE_VARIABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoDopplAltUtilsEmptyArray, TYPE_VARIABLE, IOSObjectArray *)

J2OBJC_TYPE_LITERAL_HEADER(CoDopplAltUtilsEmptyArray)

#endif

#if !defined (ComAndroidInternalUtilGrowingArrayUtils_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_ComAndroidInternalUtilGrowingArrayUtils))
#define ComAndroidInternalUtilGrowingArrayUtils_

@class IOSBooleanArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;

@interface ComAndroidInternalUtilGrowingArrayUtils : NSObject

#pragma mark Public

+ (IOSBooleanArray *)appendWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                withBoolean:(jboolean)element;

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)element;

+ (IOSLongArray *)appendWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                             withLong:(jlong)element;

+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                     withId:(id)element;

+ (jint)growSizeWithInt:(jint)currentSize;

+ (IOSBooleanArray *)insertWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                withBoolean:(jboolean)element;

+ (IOSIntArray *)insertWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)index
                            withInt:(jint)element;

+ (IOSLongArray *)insertWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                              withInt:(jint)index
                             withLong:(jlong)element;

+ (IOSObjectArray *)insertWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                     withId:(id)element;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAndroidInternalUtilGrowingArrayUtils)

FOUNDATION_EXPORT IOSObjectArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(IOSObjectArray *array, jint currentSize, id element);

FOUNDATION_EXPORT IOSIntArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(IOSIntArray *array, jint currentSize, jint element);

FOUNDATION_EXPORT IOSLongArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(IOSLongArray *array, jint currentSize, jlong element);

FOUNDATION_EXPORT IOSBooleanArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jboolean element);

FOUNDATION_EXPORT IOSObjectArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint currentSize, jint index, id element);

FOUNDATION_EXPORT IOSIntArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint currentSize, jint index, jint element);

FOUNDATION_EXPORT IOSLongArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint currentSize, jint index, jlong element);

FOUNDATION_EXPORT IOSBooleanArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jint index, jboolean element);

FOUNDATION_EXPORT jint ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(jint currentSize);

J2OBJC_TYPE_LITERAL_HEADER(ComAndroidInternalUtilGrowingArrayUtils)

#endif

#if !defined (JavaxAnnotationCheckForNull_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationCheckForNull))
#define JavaxAnnotationCheckForNull_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationCheckForNull < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationCheckForNull : NSObject < JavaxAnnotationCheckForNull >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationCheckForNull)

FOUNDATION_EXPORT id<JavaxAnnotationCheckForNull> create_JavaxAnnotationCheckForNull(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationCheckForNull)

#endif

#if !defined (JavaxAnnotationCheckForSigned_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationCheckForSigned))
#define JavaxAnnotationCheckForSigned_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationCheckForSigned < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationCheckForSigned : NSObject < JavaxAnnotationCheckForSigned >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationCheckForSigned)

FOUNDATION_EXPORT id<JavaxAnnotationCheckForSigned> create_JavaxAnnotationCheckForSigned(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationCheckForSigned)

#endif

#if !defined (JavaxAnnotationCheckReturnValue_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationCheckReturnValue))
#define JavaxAnnotationCheckReturnValue_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationCheckReturnValue < JavaLangAnnotationAnnotation >

@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationCheckReturnValue : NSObject < JavaxAnnotationCheckReturnValue > {
 @public
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationCheckReturnValue)

FOUNDATION_EXPORT id<JavaxAnnotationCheckReturnValue> create_JavaxAnnotationCheckReturnValue(JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationCheckReturnValue)

#endif

#if !defined (JavaxAnnotationDetainted_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationDetainted))
#define JavaxAnnotationDetainted_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationDetainted < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationDetainted : NSObject < JavaxAnnotationDetainted >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationDetainted)

FOUNDATION_EXPORT id<JavaxAnnotationDetainted> create_JavaxAnnotationDetainted(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationDetainted)

#endif

#if !defined (JavaxAnnotationMatchesPattern_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMatchesPattern))
#define JavaxAnnotationMatchesPattern_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationMatchesPattern < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;
@property (readonly) jint flags;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationMatchesPattern : NSObject < JavaxAnnotationMatchesPattern > {
 @public
  NSString *value_;
  jint flags_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMatchesPattern)

FOUNDATION_EXPORT id<JavaxAnnotationMatchesPattern> create_JavaxAnnotationMatchesPattern(jint flags, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMatchesPattern)

#endif

#if !defined (JavaxAnnotationMetaTypeQualifierValidator_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaTypeQualifierValidator))
#define JavaxAnnotationMetaTypeQualifierValidator_

@class JavaxAnnotationMetaWhen;
@protocol JavaLangAnnotationAnnotation;

@protocol JavaxAnnotationMetaTypeQualifierValidator < JavaObject >

- (JavaxAnnotationMetaWhen * __nonnull)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaLangAnnotationAnnotation> __nonnull)annotation
                                                                                 withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaTypeQualifierValidator)

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaTypeQualifierValidator)

#endif

#if !defined (JavaxAnnotationMatchesPattern_Checker_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMatchesPattern_Checker))
#define JavaxAnnotationMatchesPattern_Checker_

@class JavaxAnnotationMetaWhen;
@protocol JavaxAnnotationMatchesPattern;

@interface JavaxAnnotationMatchesPattern_Checker : NSObject < JavaxAnnotationMetaTypeQualifierValidator >

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationMatchesPattern>)annotation
                                                                       withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMatchesPattern_Checker)

FOUNDATION_EXPORT void JavaxAnnotationMatchesPattern_Checker_init(JavaxAnnotationMatchesPattern_Checker *self);

FOUNDATION_EXPORT JavaxAnnotationMatchesPattern_Checker *new_JavaxAnnotationMatchesPattern_Checker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxAnnotationMatchesPattern_Checker *create_JavaxAnnotationMatchesPattern_Checker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMatchesPattern_Checker)

#endif

#if !defined (JavaxAnnotationNonnegative_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationNonnegative))
#define JavaxAnnotationNonnegative_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationNonnegative < JavaLangAnnotationAnnotation >

@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationNonnegative : NSObject < JavaxAnnotationNonnegative > {
 @public
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationNonnegative)

FOUNDATION_EXPORT id<JavaxAnnotationNonnegative> create_JavaxAnnotationNonnegative(JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationNonnegative)

#endif

#if !defined (JavaxAnnotationNonnegative_Checker_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationNonnegative_Checker))
#define JavaxAnnotationNonnegative_Checker_

@class JavaxAnnotationMetaWhen;
@protocol JavaxAnnotationNonnegative;

@interface JavaxAnnotationNonnegative_Checker : NSObject < JavaxAnnotationMetaTypeQualifierValidator >

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationNonnegative>)annotation
                                                                       withId:(id)v;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationNonnegative_Checker)

FOUNDATION_EXPORT void JavaxAnnotationNonnegative_Checker_init(JavaxAnnotationNonnegative_Checker *self);

FOUNDATION_EXPORT JavaxAnnotationNonnegative_Checker *new_JavaxAnnotationNonnegative_Checker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxAnnotationNonnegative_Checker *create_JavaxAnnotationNonnegative_Checker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationNonnegative_Checker)

#endif

#if !defined (JavaxAnnotationNonnull_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationNonnull))
#define JavaxAnnotationNonnull_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationNonnull < JavaLangAnnotationAnnotation >

@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationNonnull : NSObject < JavaxAnnotationNonnull > {
 @public
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationNonnull)

FOUNDATION_EXPORT id<JavaxAnnotationNonnull> create_JavaxAnnotationNonnull(JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationNonnull)

#endif

#if !defined (JavaxAnnotationNonnull_Checker_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationNonnull_Checker))
#define JavaxAnnotationNonnull_Checker_

@class JavaxAnnotationMetaWhen;
@protocol JavaxAnnotationNonnull;

@interface JavaxAnnotationNonnull_Checker : NSObject < JavaxAnnotationMetaTypeQualifierValidator >

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationNonnull>)qualifierArgument
                                                                       withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationNonnull_Checker)

FOUNDATION_EXPORT void JavaxAnnotationNonnull_Checker_init(JavaxAnnotationNonnull_Checker *self);

FOUNDATION_EXPORT JavaxAnnotationNonnull_Checker *new_JavaxAnnotationNonnull_Checker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxAnnotationNonnull_Checker *create_JavaxAnnotationNonnull_Checker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationNonnull_Checker)

#endif

#if !defined (JavaxAnnotationNullable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationNullable))
#define JavaxAnnotationNullable_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationNullable < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationNullable : NSObject < JavaxAnnotationNullable >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationNullable)

FOUNDATION_EXPORT id<JavaxAnnotationNullable> create_JavaxAnnotationNullable(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationNullable)

#endif

#if !defined (JavaxAnnotationOverridingMethodsMustInvokeSuper_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationOverridingMethodsMustInvokeSuper))
#define JavaxAnnotationOverridingMethodsMustInvokeSuper_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationOverridingMethodsMustInvokeSuper < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationOverridingMethodsMustInvokeSuper : NSObject < JavaxAnnotationOverridingMethodsMustInvokeSuper >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationOverridingMethodsMustInvokeSuper)

FOUNDATION_EXPORT id<JavaxAnnotationOverridingMethodsMustInvokeSuper> create_JavaxAnnotationOverridingMethodsMustInvokeSuper(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationOverridingMethodsMustInvokeSuper)

#endif

#if !defined (JavaxAnnotationParametersAreNonnullByDefault_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationParametersAreNonnullByDefault))
#define JavaxAnnotationParametersAreNonnullByDefault_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationParametersAreNonnullByDefault < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationParametersAreNonnullByDefault : NSObject < JavaxAnnotationParametersAreNonnullByDefault >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationParametersAreNonnullByDefault)

FOUNDATION_EXPORT id<JavaxAnnotationParametersAreNonnullByDefault> create_JavaxAnnotationParametersAreNonnullByDefault(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationParametersAreNonnullByDefault)

#endif

#if !defined (JavaxAnnotationParametersAreNullableByDefault_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationParametersAreNullableByDefault))
#define JavaxAnnotationParametersAreNullableByDefault_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationParametersAreNullableByDefault < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationParametersAreNullableByDefault : NSObject < JavaxAnnotationParametersAreNullableByDefault >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationParametersAreNullableByDefault)

FOUNDATION_EXPORT id<JavaxAnnotationParametersAreNullableByDefault> create_JavaxAnnotationParametersAreNullableByDefault(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationParametersAreNullableByDefault)

#endif

#if !defined (JavaxAnnotationPropertyKey_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationPropertyKey))
#define JavaxAnnotationPropertyKey_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationPropertyKey < JavaLangAnnotationAnnotation >

@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationPropertyKey : NSObject < JavaxAnnotationPropertyKey > {
 @public
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationPropertyKey)

FOUNDATION_EXPORT id<JavaxAnnotationPropertyKey> create_JavaxAnnotationPropertyKey(JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationPropertyKey)

#endif

#if !defined (JavaxAnnotationRegEx_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationRegEx))
#define JavaxAnnotationRegEx_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationRegEx < JavaLangAnnotationAnnotation >

@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationRegEx : NSObject < JavaxAnnotationRegEx > {
 @public
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationRegEx)

FOUNDATION_EXPORT id<JavaxAnnotationRegEx> create_JavaxAnnotationRegEx(JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationRegEx)

#endif

#if !defined (JavaxAnnotationRegEx_Checker_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationRegEx_Checker))
#define JavaxAnnotationRegEx_Checker_

@class JavaxAnnotationMetaWhen;
@protocol JavaxAnnotationRegEx;

@interface JavaxAnnotationRegEx_Checker : NSObject < JavaxAnnotationMetaTypeQualifierValidator >

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationRegEx>)annotation
                                                                       withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationRegEx_Checker)

FOUNDATION_EXPORT void JavaxAnnotationRegEx_Checker_init(JavaxAnnotationRegEx_Checker *self);

FOUNDATION_EXPORT JavaxAnnotationRegEx_Checker *new_JavaxAnnotationRegEx_Checker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxAnnotationRegEx_Checker *create_JavaxAnnotationRegEx_Checker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationRegEx_Checker)

#endif

#if !defined (JavaxAnnotationSigned_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationSigned))
#define JavaxAnnotationSigned_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationSigned < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationSigned : NSObject < JavaxAnnotationSigned >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationSigned)

FOUNDATION_EXPORT id<JavaxAnnotationSigned> create_JavaxAnnotationSigned(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationSigned)

#endif

#if !defined (JavaxAnnotationSyntax_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationSyntax))
#define JavaxAnnotationSyntax_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationSyntax < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;
@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationSyntax : NSObject < JavaxAnnotationSyntax > {
 @public
  NSString *value_;
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationSyntax)

FOUNDATION_EXPORT id<JavaxAnnotationSyntax> create_JavaxAnnotationSyntax(NSString *value, JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationSyntax)

#endif

#if !defined (JavaxAnnotationTainted_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationTainted))
#define JavaxAnnotationTainted_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationTainted < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationTainted : NSObject < JavaxAnnotationTainted >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationTainted)

FOUNDATION_EXPORT id<JavaxAnnotationTainted> create_JavaxAnnotationTainted(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationTainted)

#endif

#if !defined (JavaxAnnotationUntainted_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationUntainted))
#define JavaxAnnotationUntainted_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class JavaxAnnotationMetaWhen;

@protocol JavaxAnnotationUntainted < JavaLangAnnotationAnnotation >

@property (readonly) JavaxAnnotationMetaWhen *when;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationUntainted : NSObject < JavaxAnnotationUntainted > {
 @public
  JavaxAnnotationMetaWhen *when_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationUntainted)

FOUNDATION_EXPORT id<JavaxAnnotationUntainted> create_JavaxAnnotationUntainted(JavaxAnnotationMetaWhen *when);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationUntainted)

#endif

#if !defined (JavaxAnnotationWillClose_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationWillClose))
#define JavaxAnnotationWillClose_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationWillClose < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationWillClose : NSObject < JavaxAnnotationWillClose >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationWillClose)

FOUNDATION_EXPORT id<JavaxAnnotationWillClose> create_JavaxAnnotationWillClose(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationWillClose)

#endif

#if !defined (JavaxAnnotationWillCloseWhenClosed_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationWillCloseWhenClosed))
#define JavaxAnnotationWillCloseWhenClosed_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationWillCloseWhenClosed < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationWillCloseWhenClosed : NSObject < JavaxAnnotationWillCloseWhenClosed >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationWillCloseWhenClosed)

FOUNDATION_EXPORT id<JavaxAnnotationWillCloseWhenClosed> create_JavaxAnnotationWillCloseWhenClosed(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationWillCloseWhenClosed)

#endif

#if !defined (JavaxAnnotationWillNotClose_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationWillNotClose))
#define JavaxAnnotationWillNotClose_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationWillNotClose < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationWillNotClose : NSObject < JavaxAnnotationWillNotClose >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationWillNotClose)

FOUNDATION_EXPORT id<JavaxAnnotationWillNotClose> create_JavaxAnnotationWillNotClose(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationWillNotClose)

#endif

#if !defined (JavaxAnnotationConcurrentGuardedBy_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationConcurrentGuardedBy))
#define JavaxAnnotationConcurrentGuardedBy_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol JavaxAnnotationConcurrentGuardedBy < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationConcurrentGuardedBy)

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationConcurrentGuardedBy)

#endif

#if !defined (JavaxAnnotationConcurrentImmutable_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationConcurrentImmutable))
#define JavaxAnnotationConcurrentImmutable_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol JavaxAnnotationConcurrentImmutable < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationConcurrentImmutable)

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationConcurrentImmutable)

#endif

#if !defined (JavaxAnnotationConcurrentNotThreadSafe_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationConcurrentNotThreadSafe))
#define JavaxAnnotationConcurrentNotThreadSafe_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol JavaxAnnotationConcurrentNotThreadSafe < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationConcurrentNotThreadSafe)

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationConcurrentNotThreadSafe)

#endif

#if !defined (JavaxAnnotationConcurrentThreadSafe_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationConcurrentThreadSafe))
#define JavaxAnnotationConcurrentThreadSafe_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol JavaxAnnotationConcurrentThreadSafe < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationConcurrentThreadSafe)

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationConcurrentThreadSafe)

#endif

#if !defined (JavaxAnnotationMetaExclusive_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaExclusive))
#define JavaxAnnotationMetaExclusive_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationMetaExclusive < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationMetaExclusive : NSObject < JavaxAnnotationMetaExclusive >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaExclusive)

FOUNDATION_EXPORT id<JavaxAnnotationMetaExclusive> create_JavaxAnnotationMetaExclusive(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaExclusive)

#endif

#if !defined (JavaxAnnotationMetaExhaustive_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaExhaustive))
#define JavaxAnnotationMetaExhaustive_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationMetaExhaustive < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationMetaExhaustive : NSObject < JavaxAnnotationMetaExhaustive >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaExhaustive)

FOUNDATION_EXPORT id<JavaxAnnotationMetaExhaustive> create_JavaxAnnotationMetaExhaustive(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaExhaustive)

#endif

#if !defined (JavaxAnnotationMetaTypeQualifier_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaTypeQualifier))
#define JavaxAnnotationMetaTypeQualifier_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxAnnotationMetaTypeQualifier < JavaLangAnnotationAnnotation >

@property (readonly) IOSClass *applicableTo;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationMetaTypeQualifier : NSObject < JavaxAnnotationMetaTypeQualifier > {
 @public
  IOSClass *applicableTo_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaTypeQualifier)

FOUNDATION_EXPORT id<JavaxAnnotationMetaTypeQualifier> create_JavaxAnnotationMetaTypeQualifier(IOSClass *applicableTo);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaTypeQualifier)

#endif

#if !defined (JavaxAnnotationMetaTypeQualifierDefault_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaTypeQualifierDefault))
#define JavaxAnnotationMetaTypeQualifierDefault_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

@protocol JavaxAnnotationMetaTypeQualifierDefault < JavaLangAnnotationAnnotation >

@property (readonly) IOSObjectArray *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationMetaTypeQualifierDefault : NSObject < JavaxAnnotationMetaTypeQualifierDefault > {
 @public
  IOSObjectArray *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaTypeQualifierDefault)

FOUNDATION_EXPORT id<JavaxAnnotationMetaTypeQualifierDefault> create_JavaxAnnotationMetaTypeQualifierDefault(IOSObjectArray *value);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaTypeQualifierDefault)

#endif

#if !defined (JavaxAnnotationMetaTypeQualifierNickname_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaTypeQualifierNickname))
#define JavaxAnnotationMetaTypeQualifierNickname_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@protocol JavaxAnnotationMetaTypeQualifierNickname < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaTypeQualifierNickname)

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaTypeQualifierNickname)

#endif

#if !defined (JavaxAnnotationMetaWhen_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxAnnotationMetaWhen))
#define JavaxAnnotationMetaWhen_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaxAnnotationMetaWhen_Enum) {
  JavaxAnnotationMetaWhen_Enum_ALWAYS = 0,
  JavaxAnnotationMetaWhen_Enum_UNKNOWN = 1,
  JavaxAnnotationMetaWhen_Enum_MAYBE = 2,
  JavaxAnnotationMetaWhen_Enum_NEVER = 3,
};

@interface JavaxAnnotationMetaWhen : JavaLangEnum

+ (JavaxAnnotationMetaWhen * __nonnull)ALWAYS;

+ (JavaxAnnotationMetaWhen * __nonnull)UNKNOWN;

+ (JavaxAnnotationMetaWhen * __nonnull)MAYBE;

+ (JavaxAnnotationMetaWhen * __nonnull)NEVER;

#pragma mark Public

+ (JavaxAnnotationMetaWhen *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaxAnnotationMetaWhen_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaxAnnotationMetaWhen)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_values_[];

inline JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_get_ALWAYS(void);
J2OBJC_ENUM_CONSTANT(JavaxAnnotationMetaWhen, ALWAYS)

inline JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_get_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(JavaxAnnotationMetaWhen, UNKNOWN)

inline JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_get_MAYBE(void);
J2OBJC_ENUM_CONSTANT(JavaxAnnotationMetaWhen, MAYBE)

inline JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_get_NEVER(void);
J2OBJC_ENUM_CONSTANT(JavaxAnnotationMetaWhen, NEVER)

FOUNDATION_EXPORT IOSObjectArray *JavaxAnnotationMetaWhen_values(void);

FOUNDATION_EXPORT JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaWhen)

#endif

#if !defined (JavaxInjectInject_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxInjectInject))
#define JavaxInjectInject_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxInjectInject < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxInjectInject : NSObject < JavaxInjectInject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxInjectInject)

FOUNDATION_EXPORT id<JavaxInjectInject> create_JavaxInjectInject(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxInjectInject)

#endif

#if !defined (JavaxInjectNamed_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxInjectNamed))
#define JavaxInjectNamed_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxInjectNamed < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxInjectNamed : NSObject < JavaxInjectNamed > {
 @public
  NSString *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxInjectNamed)

FOUNDATION_EXPORT id<JavaxInjectNamed> create_JavaxInjectNamed(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(JavaxInjectNamed)

#endif

#if !defined (JavaxInjectProvider_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxInjectProvider))
#define JavaxInjectProvider_

@protocol JavaxInjectProvider < JavaObject >

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxInjectProvider)

J2OBJC_TYPE_LITERAL_HEADER(JavaxInjectProvider)

#endif

#if !defined (JavaxInjectQualifier_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxInjectQualifier))
#define JavaxInjectQualifier_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxInjectQualifier < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxInjectQualifier : NSObject < JavaxInjectQualifier >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxInjectQualifier)

FOUNDATION_EXPORT id<JavaxInjectQualifier> create_JavaxInjectQualifier(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxInjectQualifier)

#endif

#if !defined (JavaxInjectScope_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxInjectScope))
#define JavaxInjectScope_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxInjectScope < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxInjectScope : NSObject < JavaxInjectScope >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxInjectScope)

FOUNDATION_EXPORT id<JavaxInjectScope> create_JavaxInjectScope(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxInjectScope)

#endif

#if !defined (JavaxInjectSingleton_) && (INCLUDE_ALL_MainDependencyOut || defined(INCLUDE_JavaxInjectSingleton))
#define JavaxInjectSingleton_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol JavaxInjectSingleton < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxInjectSingleton : NSObject < JavaxInjectSingleton >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxInjectSingleton)

FOUNDATION_EXPORT id<JavaxInjectSingleton> create_JavaxInjectSingleton(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxInjectSingleton)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_MainDependencyOut")
