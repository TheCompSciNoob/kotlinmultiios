//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: mainSourceOut
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/List.h"
#include "mainDependencyOut.h"
#include "mainSourceOut.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation ComKgalliganJustdbextractSharedIosCursorFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComKgalliganJustdbextractSharedIosCursorFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<AndroidDatabaseCursor>)newCursorWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                  withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                 withNSString:(NSString *)editTable
                                         withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  return [self newCursorRealWithAndroidDatabaseSqliteSQLiteDatabase:db withAndroidDatabaseSqliteSQLiteCursorDriver:masterQuery withNSString:editTable withAndroidDatabaseSqliteSQLiteQuery:query];
}

- (id<AndroidDatabaseCursor>)newCursorRealWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                      withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)masterQuery
                                                                     withNSString:(NSString *)editTable
                                             withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  methods[2].selector = @selector(newCursorRealWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newCursor", "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "newCursorReal" };
  static const J2ObjcClassInfo _ComKgalliganJustdbextractSharedIosCursorFactory = { "IosCursorFactory", "com.kgalligan.justdbextract.shared", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComKgalliganJustdbextractSharedIosCursorFactory;
}

@end

void ComKgalliganJustdbextractSharedIosCursorFactory_init(ComKgalliganJustdbextractSharedIosCursorFactory *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComKgalliganJustdbextractSharedIosCursorFactory)

@implementation ComKgalliganJustdbextractSharedIosDatabaseErrorHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComKgalliganJustdbextractSharedIosDatabaseErrorHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)dbObj {
}

- (void)onCorruptionRealWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)dbObj {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[2].selector = @selector(onCorruptionRealWithAndroidDatabaseSqliteSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCorruption", "LAndroidDatabaseSqliteSQLiteDatabase;", "onCorruptionReal" };
  static const J2ObjcClassInfo _ComKgalliganJustdbextractSharedIosDatabaseErrorHandler = { "IosDatabaseErrorHandler", "com.kgalligan.justdbextract.shared", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComKgalliganJustdbextractSharedIosDatabaseErrorHandler;
}

@end

void ComKgalliganJustdbextractSharedIosDatabaseErrorHandler_init(ComKgalliganJustdbextractSharedIosDatabaseErrorHandler *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComKgalliganJustdbextractSharedIosDatabaseErrorHandler)

@implementation ComKgalliganJustdbextractSharedIosSQLiteTransactionListener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComKgalliganJustdbextractSharedIosSQLiteTransactionListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _ComKgalliganJustdbextractSharedIosSQLiteTransactionListener = { "IosSQLiteTransactionListener", "com.kgalligan.justdbextract.shared", NULL, methods, NULL, 7, 0x401, 1, 0, -1, -1, -1, -1, -1 };
  return &_ComKgalliganJustdbextractSharedIosSQLiteTransactionListener;
}

@end

void ComKgalliganJustdbextractSharedIosSQLiteTransactionListener_init(ComKgalliganJustdbextractSharedIosSQLiteTransactionListener *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComKgalliganJustdbextractSharedIosSQLiteTransactionListener)

@implementation ComKgalliganJustdbextractSharedTypeHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComKgalliganJustdbextractSharedTypeHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)stringArrayWithInt:(jint)size {
  return ComKgalliganJustdbextractSharedTypeHelper_stringArrayWithInt_(size);
}

+ (void)replaceStringAtIndexWithNSStringArray:(IOSObjectArray *)arr
                                 withNSString:(NSString *)s
                                      withInt:(jint)index {
  ComKgalliganJustdbextractSharedTypeHelper_replaceStringAtIndexWithNSStringArray_withNSString_withInt_(arr, s, index);
}

+ (void)replaceObjectAtIndexWithNSObjectArray:(IOSObjectArray *)arr
                                       withId:(id)o
                                      withInt:(jint)index {
  ComKgalliganJustdbextractSharedTypeHelper_replaceObjectAtIndexWithNSObjectArray_withId_withInt_(arr, o, index);
}

+ (IOSObjectArray *)createObjectArrayWithInt:(jint)length {
  return ComKgalliganJustdbextractSharedTypeHelper_createObjectArrayWithInt_(length);
}

+ (NSString *)stringAtIndexWithNSStringArray:(IOSObjectArray *)arr
                                     withInt:(jint)index {
  return ComKgalliganJustdbextractSharedTypeHelper_stringAtIndexWithNSStringArray_withInt_(arr, index);
}

+ (IOSObjectArray *)listToArrayWithJavaUtilList:(id<JavaUtilList>)asdf {
  return ComKgalliganJustdbextractSharedTypeHelper_listToArrayWithJavaUtilList_(asdf);
}

+ (IOSByteArray *)justTestingToUtf8WithNSString:(NSString *)s {
  return ComKgalliganJustdbextractSharedTypeHelper_justTestingToUtf8WithNSString_(s);
}

+ (NSString *)justTestingFromUtf8WithByteArray:(IOSByteArray *)b {
  return ComKgalliganJustdbextractSharedTypeHelper_justTestingFromUtf8WithByteArray_(b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 9, 10, -1, 11, -1, -1 },
    { NULL, "[B", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(stringArrayWithInt:);
  methods[2].selector = @selector(replaceStringAtIndexWithNSStringArray:withNSString:withInt:);
  methods[3].selector = @selector(replaceObjectAtIndexWithNSObjectArray:withId:withInt:);
  methods[4].selector = @selector(createObjectArrayWithInt:);
  methods[5].selector = @selector(stringAtIndexWithNSStringArray:withInt:);
  methods[6].selector = @selector(listToArrayWithJavaUtilList:);
  methods[7].selector = @selector(justTestingToUtf8WithNSString:);
  methods[8].selector = @selector(justTestingFromUtf8WithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "stringArray", "I", "replaceStringAtIndex", "[LNSString;LNSString;I", "replaceObjectAtIndex", "[LNSObject;LNSObject;I", "createObjectArray", "stringAtIndex", "[LNSString;I", "listToArray", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Object;>;)[Ljava/lang/Object;", "justTestingToUtf8", "LNSString;", "justTestingFromUtf8", "[B" };
  static const J2ObjcClassInfo _ComKgalliganJustdbextractSharedTypeHelper = { "TypeHelper", "com.kgalligan.justdbextract.shared", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_ComKgalliganJustdbextractSharedTypeHelper;
}

@end

void ComKgalliganJustdbextractSharedTypeHelper_init(ComKgalliganJustdbextractSharedTypeHelper *self) {
  NSObject_init(self);
}

ComKgalliganJustdbextractSharedTypeHelper *new_ComKgalliganJustdbextractSharedTypeHelper_init() {
  J2OBJC_NEW_IMPL(ComKgalliganJustdbextractSharedTypeHelper, init)
}

ComKgalliganJustdbextractSharedTypeHelper *create_ComKgalliganJustdbextractSharedTypeHelper_init() {
  J2OBJC_CREATE_IMPL(ComKgalliganJustdbextractSharedTypeHelper, init)
}

IOSObjectArray *ComKgalliganJustdbextractSharedTypeHelper_stringArrayWithInt_(jint size) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  return [IOSObjectArray arrayWithLength:size type:NSString_class_()];
}

void ComKgalliganJustdbextractSharedTypeHelper_replaceStringAtIndexWithNSStringArray_withNSString_withInt_(IOSObjectArray *arr, NSString *s, jint index) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  IOSObjectArray_Set(nil_chk(arr), index, s);
}

void ComKgalliganJustdbextractSharedTypeHelper_replaceObjectAtIndexWithNSObjectArray_withId_withInt_(IOSObjectArray *arr, id o, jint index) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  IOSObjectArray_Set(nil_chk(arr), index, o);
}

IOSObjectArray *ComKgalliganJustdbextractSharedTypeHelper_createObjectArrayWithInt_(jint length) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  return [IOSObjectArray arrayWithLength:length type:NSObject_class_()];
}

NSString *ComKgalliganJustdbextractSharedTypeHelper_stringAtIndexWithNSStringArray_withInt_(IOSObjectArray *arr, jint index) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  return IOSObjectArray_Get(nil_chk(arr), index);
}

IOSObjectArray *ComKgalliganJustdbextractSharedTypeHelper_listToArrayWithJavaUtilList_(id<JavaUtilList> asdf) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  return [((id<JavaUtilList>) nil_chk(asdf)) toArray];
}

IOSByteArray *ComKgalliganJustdbextractSharedTypeHelper_justTestingToUtf8WithNSString_(NSString *s) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  return [((NSString *) nil_chk(s)) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
}

NSString *ComKgalliganJustdbextractSharedTypeHelper_justTestingFromUtf8WithByteArray_(IOSByteArray *b) {
  ComKgalliganJustdbextractSharedTypeHelper_initialize();
  return [NSString java_stringWithBytes:b charset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComKgalliganJustdbextractSharedTypeHelper)
