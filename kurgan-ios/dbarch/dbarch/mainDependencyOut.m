//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: mainDependencyOut
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Maps.h"
#include "android/os/SystemClock.h"
#include "android/text/Editable.h"
#include "android/text/SpannableStringBuilder.h"
#include "android/text/TextUtils.h"
#include "android/util/ArraySet.h"
#include "android/util/ContainerHelpers.h"
#include "android/util/Log.h"
#include "android/util/LruCache.h"
#include "android/util/Pair.h"
#include "android/util/Printer.h"
#include "android/util/SparseArray.h"
#include "android/util/SparseBooleanArray.h"
#include "android/util/SparseIntArray.h"
#include "dalvik/system/BlockGuard.h"
#include "dalvik/system/CloseGuard.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileDescriptor.h"
#include "java/io/FileFilter.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/Serializable.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/Short.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/net/Socket.h"
#include "java/net/URLEncoder.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/IllegalCharsetNameException.h"
#include "java/nio/charset/UnsupportedCharsetException.h"
#include "java/text/CollationKey.h"
#include "java/text/Collator.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/AbstractList.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/locks/LockSupport.h"
#include "java/util/function/Consumer.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "java/util/regex/PatternSyntaxException.h"
#include "libcore/internal/StringPool.h"
#include "mainDependencyOut.h"
#include "org/kxml2/io/KXmlParser.h"
#include "org/kxml2/io/KXmlSerializer.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"
#include "org/xmlpull/v1/XmlPullParserFactory.h"
#include "org/xmlpull/v1/XmlSerializer.h"

#include <sys/stat.h>

@class AndroidAppSharedPreferencesImpl_MemoryCommitResult;
@class AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;
@class AndroidDatabaseSqliteSQLiteConnection_Operation;
@class AndroidDatabaseSqliteSQLiteConnection_OperationLog;
@class AndroidDatabaseSqliteSQLiteConnection_PreparedStatement;
@class AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;
@class AndroidDatabaseSqliteSQLiteSession_Transaction;
@class AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AndroidAnnotationNonNull : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidAnnotationNonNull__Annotations$0(void);

@interface AndroidAnnotationNullable : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidAnnotationNullable__Annotations$0(void);

@interface AndroidAnnotationSuppressLint : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidAnnotationSuppressLint__Annotations$0(void);

@interface AndroidAnnotationTargetApi : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidAnnotationTargetApi__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidContentContext__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidContentContext__Annotations$1(void);

inline JavaUtilConcurrentConcurrentLinkedQueue *AndroidAppQueuedWork_get_sPendingWorkFinishers(void);
static JavaUtilConcurrentConcurrentLinkedQueue *AndroidAppQueuedWork_sPendingWorkFinishers;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidAppQueuedWork, sPendingWorkFinishers, JavaUtilConcurrentConcurrentLinkedQueue *)

inline id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_get_sSingleThreadExecutor(void);
inline id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_set_sSingleThreadExecutor(id<JavaUtilConcurrentExecutorService> value);
static id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_sSingleThreadExecutor;
J2OBJC_STATIC_FIELD_OBJ(AndroidAppQueuedWork, sSingleThreadExecutor, id<JavaUtilConcurrentExecutorService>)

@interface AndroidContentSharedPreferences : NSObject

@end

@interface AndroidAppSharedPreferencesImpl () {
 @public
  JavaIoFile *mFile_;
  AndroidOsHandler *mainHandler_;
  JavaIoFile *mBackupFile_;
  jint mMode_;
  id<JavaUtilMap> mMap_;
  jint mDiskWritesInFlight_;
  jboolean mLoaded_;
  jlong mStatTimestamp_;
  jlong mStatSize_;
  id mWritingToDiskLock_;
  JavaUtilWeakHashMap *mListeners_;
}

+ (JavaIoFile *)makeBackupFileWithJavaIoFile:(JavaIoFile *)prefsFile;

- (void)enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)mcr
                                                          withJavaLangRunnable:(id<JavaLangRunnable>)postWriteRunnable;

+ (JavaIoFileOutputStream *)createFileOutputStreamWithJavaIoFile:(JavaIoFile *)file;

- (void)writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)mcr;

+ (void)setFilePermissionsFromModeWithNSString:(NSString *)name
                                       withInt:(jint)mode
                                       withInt:(jint)extraPermissions;

@end

J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl, mFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl, mainHandler_, AndroidOsHandler *)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl, mBackupFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl, mMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl, mWritingToDiskLock_, id)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl, mListeners_, JavaUtilWeakHashMap *)

inline NSString *AndroidAppSharedPreferencesImpl_get_TAG(void);
static NSString *AndroidAppSharedPreferencesImpl_TAG = @"ApplicationContext";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidAppSharedPreferencesImpl, TAG, NSString *)

inline jboolean AndroidAppSharedPreferencesImpl_get_DEBUG(void);
#define AndroidAppSharedPreferencesImpl_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidAppSharedPreferencesImpl, DEBUG, jboolean)

inline id AndroidAppSharedPreferencesImpl_get_mContent(void);
static id AndroidAppSharedPreferencesImpl_mContent;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidAppSharedPreferencesImpl, mContent, id)

__attribute__((unused)) static JavaIoFile *AndroidAppSharedPreferencesImpl_makeBackupFileWithJavaIoFile_(JavaIoFile *prefsFile);

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr, id<JavaLangRunnable> postWriteRunnable);

__attribute__((unused)) static JavaIoFileOutputStream *AndroidAppSharedPreferencesImpl_createFileOutputStreamWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr);

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_setFilePermissionsFromModeWithNSString_withInt_withInt_(NSString *name, jint mode, jint extraPermissions);

@interface AndroidAppSharedPreferencesImpl_MemoryCommitResult : NSObject {
 @public
  jboolean changesMade_;
  id<JavaUtilList> keysModified_;
  id<JavaUtilSet> listeners_;
  id<JavaUtilMap> mapToWriteToDisk_;
  JavaUtilConcurrentCountDownLatch *writtenToDiskLatch_;
  volatile_jboolean writeToDiskResult_;
}

- (instancetype __nonnull)init;

- (void)setDiskWriteResultWithBoolean:(jboolean)result;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppSharedPreferencesImpl_MemoryCommitResult)

J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl_MemoryCommitResult, keysModified_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl_MemoryCommitResult, listeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl_MemoryCommitResult, mapToWriteToDisk_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl_MemoryCommitResult, writtenToDiskLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_MemoryCommitResult_init(AndroidAppSharedPreferencesImpl_MemoryCommitResult *self);

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_MemoryCommitResult *new_AndroidAppSharedPreferencesImpl_MemoryCommitResult_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_MemoryCommitResult *create_AndroidAppSharedPreferencesImpl_MemoryCommitResult_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidAppSharedPreferencesImpl_MemoryCommitResult)

@interface AndroidContentSharedPreferences_Editor : NSObject

@end

@interface AndroidAppSharedPreferencesImpl_EditorImpl () {
 @public
  AndroidAppSharedPreferencesImpl *this$0_;
  id<JavaUtilMap> mModified_;
  jboolean mClear_;
}

- (AndroidAppSharedPreferencesImpl_MemoryCommitResult *)commitToMemory;

- (void)notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)mcr;

@end

J2OBJC_FIELD_SETTER(AndroidAppSharedPreferencesImpl_EditorImpl, mModified_, id<JavaUtilMap>)

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_MemoryCommitResult *AndroidAppSharedPreferencesImpl_EditorImpl_commitToMemory(AndroidAppSharedPreferencesImpl_EditorImpl *self);

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_EditorImpl_notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr);

@interface AndroidAppSharedPreferencesImpl_EditorImpl_1 : NSObject < JavaLangRunnable > {
 @public
  AndroidAppSharedPreferencesImpl_MemoryCommitResult *val$mcr_;
}

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppSharedPreferencesImpl_EditorImpl_1)

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl_1 *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0);

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_EditorImpl_1 *new_AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_EditorImpl_1 *create_AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0);

@interface AndroidAppSharedPreferencesImpl_EditorImpl_2 : NSObject < JavaLangRunnable > {
 @public
  id<JavaLangRunnable> val$awaitCommit_;
}

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppSharedPreferencesImpl_EditorImpl_2)

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(AndroidAppSharedPreferencesImpl_EditorImpl_2 *self, id<JavaLangRunnable> capture$0);

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_EditorImpl_2 *new_AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(id<JavaLangRunnable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_EditorImpl_2 *create_AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(id<JavaLangRunnable> capture$0);

@interface AndroidAppSharedPreferencesImpl_EditorImpl_3 : NSObject < JavaLangRunnable > {
 @public
  AndroidAppSharedPreferencesImpl_EditorImpl *this$0_;
  AndroidAppSharedPreferencesImpl_MemoryCommitResult *val$mcr_;
}

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl_EditorImpl:(AndroidAppSharedPreferencesImpl_EditorImpl *)outer$
                      withAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppSharedPreferencesImpl_EditorImpl_3)

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl_3 *self, AndroidAppSharedPreferencesImpl_EditorImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0);

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_EditorImpl_3 *new_AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_EditorImpl_3 *create_AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0);

@interface AndroidAppSharedPreferencesImpl_1 : NSObject < JavaLangRunnable > {
 @public
  AndroidAppSharedPreferencesImpl *this$0_;
  AndroidAppSharedPreferencesImpl_MemoryCommitResult *val$mcr_;
  id<JavaLangRunnable> val$postWriteRunnable_;
}

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl:(AndroidAppSharedPreferencesImpl *)outer$
           withAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)capture$0
                                             withJavaLangRunnable:(id<JavaLangRunnable>)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidAppSharedPreferencesImpl_1)

__attribute__((unused)) static void AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl_1 *self, AndroidAppSharedPreferencesImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0, id<JavaLangRunnable> capture$1);

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_1 *new_AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0, id<JavaLangRunnable> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidAppSharedPreferencesImpl_1 *create_AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0, id<JavaLangRunnable> capture$1);

@interface AndroidArchPersistenceDbSupportSQLiteQuery : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidArchPersistenceDbSupportSQLiteQuery__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidArchPersistenceDbSupportSQLiteQuery__Annotations$1(void);

@interface AndroidArchPersistenceDbSimpleSQLiteQuery () {
 @public
  NSString *mQuery_;
  IOSObjectArray *mBindArgs_;
}

+ (void)bindWithAndroidArchPersistenceDbSupportSQLiteProgram:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)statement
                                                     withInt:(jint)index
                                                      withId:(id)arg;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSimpleSQLiteQuery, mQuery_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSimpleSQLiteQuery, mBindArgs_, IOSObjectArray *)

__attribute__((unused)) static void AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withInt_withId_(id<AndroidArchPersistenceDbSupportSQLiteProgram> statement, jint index, id arg);

@interface AndroidArchPersistenceDbSupportSQLiteDatabase : NSObject

@end

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper : NSObject

@end

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback ()

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName;

@end

inline NSString *AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_get_TAG(void);
static NSString *AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_TAG = @"SupportSQLite";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback, TAG, NSString *)

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_deleteDatabaseFileWithNSString_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *self, NSString *fileName);

@interface AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory : NSObject

@end

@interface AndroidArchPersistenceDbSupportSQLiteProgram : NSObject

@end

@interface AndroidArchPersistenceDbSupportSQLiteQueryBuilder () {
 @public
  jboolean mDistinct_;
  NSString *mTable_;
  IOSObjectArray *mColumns_;
  NSString *mSelection_;
  IOSObjectArray *mBindArgs_;
  NSString *mGroupBy_;
  NSString *mHaving_;
  NSString *mOrderBy_;
  NSString *mLimit_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)table;

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause;

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns;

+ (jboolean)isEmptyWithNSString:(NSString *)input;

@end

J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mTable_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mColumns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mSelection_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mBindArgs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mGroupBy_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mHaving_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mOrderBy_, NSString *)
J2OBJC_FIELD_SETTER(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, mLimit_, NSString *)

inline JavaUtilRegexPattern *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_get_sLimitPattern(void);
static JavaUtilRegexPattern *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, sLimitPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(AndroidArchPersistenceDbSupportSQLiteQueryBuilder *self, NSString *table);

__attribute__((unused)) static AndroidArchPersistenceDbSupportSQLiteQueryBuilder *new_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidArchPersistenceDbSupportSQLiteQueryBuilder *create_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table);

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause);

__attribute__((unused)) static void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns);

__attribute__((unused)) static jboolean AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(NSString *input);

@interface AndroidArchPersistenceDbSupportSQLiteStatement : NSObject

@end

@interface AndroidContentContentValues () {
 @public
  JavaUtilHashMap *mValues_;
}

- (instancetype __nonnull)initWithJavaUtilHashMap:(JavaUtilHashMap *)values;

@end

J2OBJC_FIELD_SETTER(AndroidContentContentValues, mValues_, JavaUtilHashMap *)

__attribute__((unused)) static void AndroidContentContentValues_initWithJavaUtilHashMap_(AndroidContentContentValues *self, JavaUtilHashMap *values);

__attribute__((unused)) static AndroidContentContentValues *new_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidContentContentValues *create_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values);

__attribute__((unused)) static IOSObjectArray *AndroidContentContentValues__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidContentContentValues__Annotations$1(void);

@interface AndroidContentIOSContext () {
 @public
  id mSync_;
  JavaIoFile *mPreferencesDir_;
  JavaUtilHashMap *sSharedPrefs_;
}

+ (JavaIoFile *)makeBackupFileWithJavaIoFile:(JavaIoFile *)prefsFile;

- (JavaIoFile *)makeFilenameWithJavaIoFile:(JavaIoFile *)base
                              withNSString:(NSString *)name;

- (JavaIoFile *)getPreferencesDir;

- (JavaIoFile *)findLocalFileWithNSString:(NSString *)name;

- (NSString *)getRootDirString;

@end

J2OBJC_FIELD_SETTER(AndroidContentIOSContext, mSync_, id)
J2OBJC_FIELD_SETTER(AndroidContentIOSContext, mPreferencesDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(AndroidContentIOSContext, sSharedPrefs_, JavaUtilHashMap *)

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(JavaIoFile *prefsFile);

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(AndroidContentIOSContext *self, JavaIoFile *base, NSString *name);

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_getPreferencesDir(AndroidContentIOSContext *self);

__attribute__((unused)) static JavaIoFile *AndroidContentIOSContext_findLocalFileWithNSString_(AndroidContentIOSContext *self, NSString *name);

__attribute__((unused)) static NSString *AndroidContentIOSContext_getRootDirString(AndroidContentIOSContext *self);

@interface AndroidContentSharedPreferences_OnSharedPreferenceChangeListener : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursor__Annotations$0(void);

@interface AndroidDatabaseCrossProcessCursor : NSObject

@end

@interface AndroidDatabaseAbstractCursor () {
 @public
  AndroidNetUri *mNotifyUri_;
  id mSelfObserverLock_;
  AndroidDatabaseContentObserver *mSelfObserver_;
  jboolean mSelfObserverRegistered_;
  AndroidDatabaseDataSetObservable *mDataSetObservable_;
  AndroidDatabaseContentObservable *mContentObservable_;
  AndroidOsBundle *mExtras_;
}

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mNotifyUri_, AndroidNetUri *)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mSelfObserverLock_, id)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mSelfObserver_, AndroidDatabaseContentObserver *)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mDataSetObservable_, AndroidDatabaseDataSetObservable *)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mContentObservable_, AndroidDatabaseContentObservable *)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mExtras_, AndroidOsBundle *)

inline NSString *AndroidDatabaseAbstractCursor_get_TAG(void);
static NSString *AndroidDatabaseAbstractCursor_TAG = @"Cursor";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseAbstractCursor, TAG, NSString *)

__attribute__((unused)) static jboolean AndroidDatabaseAbstractCursor_moveToPositionWithInt_(AndroidDatabaseAbstractCursor *self, jint position);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$4(void);

@interface AndroidDatabaseContentObserver () {
 @public
  id mLock_;
}

- (void)dispatchChangeWithBoolean:(jboolean)selfChange
                withAndroidNetUri:(AndroidNetUri *)uri
                          withInt:(jint)userId;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseContentObserver, mLock_, id)

__attribute__((unused)) static void AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_(AndroidDatabaseContentObserver *self, jboolean selfChange, AndroidNetUri *uri);

__attribute__((unused)) static void AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver *self, jboolean selfChange, AndroidNetUri *uri, jint userId);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseContentObserver__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseContentObservable__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseContentObservable__Annotations$1(void);

@interface AndroidDatabaseContentObserver_NotificationRunnable : NSObject < JavaLangRunnable > {
 @public
  AndroidDatabaseContentObserver *this$0_;
  jboolean mSelfChange_;
  AndroidNetUri *mUri_;
  jint mUserId_;
}

- (instancetype __nonnull)initWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)outer$
                                                     withBoolean:(jboolean)selfChange
                                               withAndroidNetUri:(AndroidNetUri *)uri
                                                         withInt:(jint)userId;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseContentObserver_NotificationRunnable)

J2OBJC_FIELD_SETTER(AndroidDatabaseContentObserver_NotificationRunnable, mUri_, AndroidNetUri *)

__attribute__((unused)) static void AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver_NotificationRunnable *self, AndroidDatabaseContentObserver *outer$, jboolean selfChange, AndroidNetUri *uri, jint userId);

__attribute__((unused)) static AndroidDatabaseContentObserver_NotificationRunnable *new_AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver *outer$, jboolean selfChange, AndroidNetUri *uri, jint userId) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseContentObserver_NotificationRunnable *create_AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver *outer$, jboolean selfChange, AndroidNetUri *uri, jint userId);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseContentObserver_NotificationRunnable)

@interface AndroidDatabaseCursorJoiner () {
 @public
  id<AndroidDatabaseCursor> mCursorLeft_;
  id<AndroidDatabaseCursor> mCursorRight_;
  jboolean mCompareResultIsValid_;
  AndroidDatabaseCursorJoiner_Result *mCompareResult_;
  IOSIntArray *mColumnsLeft_;
  IOSIntArray *mColumnsRight_;
  IOSObjectArray *mValues_;
}

- (IOSIntArray *)buildColumnIndiciesArrayWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                 withNSStringArray:(IOSObjectArray *)columnNames;

+ (void)populateValuesWithNSStringArray:(IOSObjectArray *)values
              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                           withIntArray:(IOSIntArray *)columnIndicies
                                withInt:(jint)startingIndex;

- (void)incrementCursors;

+ (jint)compareStringsWithNSStringArray:(IOSObjectArray *)values;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseCursorJoiner, mCursorLeft_, id<AndroidDatabaseCursor>)
J2OBJC_FIELD_SETTER(AndroidDatabaseCursorJoiner, mCursorRight_, id<AndroidDatabaseCursor>)
J2OBJC_FIELD_SETTER(AndroidDatabaseCursorJoiner, mCompareResult_, AndroidDatabaseCursorJoiner_Result *)
J2OBJC_FIELD_SETTER(AndroidDatabaseCursorJoiner, mColumnsLeft_, IOSIntArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseCursorJoiner, mColumnsRight_, IOSIntArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseCursorJoiner, mValues_, IOSObjectArray *)

__attribute__((unused)) static IOSIntArray *AndroidDatabaseCursorJoiner_buildColumnIndiciesArrayWithAndroidDatabaseCursor_withNSStringArray_(AndroidDatabaseCursorJoiner *self, id<AndroidDatabaseCursor> cursor, IOSObjectArray *columnNames);

__attribute__((unused)) static void AndroidDatabaseCursorJoiner_populateValuesWithNSStringArray_withAndroidDatabaseCursor_withIntArray_withInt_(IOSObjectArray *values, id<AndroidDatabaseCursor> cursor, IOSIntArray *columnIndicies, jint startingIndex);

__attribute__((unused)) static void AndroidDatabaseCursorJoiner_incrementCursors(AndroidDatabaseCursorJoiner *self);

__attribute__((unused)) static jint AndroidDatabaseCursorJoiner_compareStringsWithNSStringArray_(IOSObjectArray *values);

__attribute__((unused)) static void AndroidDatabaseCursorJoiner_Result_initWithNSString_withInt_(AndroidDatabaseCursorJoiner_Result *self, NSString *__name, jint __ordinal);

@interface AndroidDatabaseSqliteSQLiteClosable () {
 @public
  jint mReferenceCount_;
}

@end

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteClosable__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteClosable__Annotations$1(void);

@interface AndroidDatabaseCursorWindow () {
 @public
  jint mStartPos_;
  NSString *mName_;
  DalvikSystemCloseGuard *mCloseGuard_;
}

+ (jlong)nativeCreateWithNSString:(NSString *)name
                          withInt:(jint)cursorWindowSize;

+ (void)nativeDisposeWithLong:(jlong)windowPtr;

+ (void)nativeClearWithLong:(jlong)windowPtr;

+ (jint)nativeGetNumRowsWithLong:(jlong)windowPtr;

+ (jboolean)nativeSetNumColumnsWithLong:(jlong)windowPtr
                                withInt:(jint)columnNum;

+ (jboolean)nativeAllocRowWithLong:(jlong)windowPtr;

+ (void)nativeFreeLastRowWithLong:(jlong)windowPtr;

+ (jint)nativeGetTypeWithLong:(jlong)windowPtr
                      withInt:(jint)row
                      withInt:(jint)column;

+ (IOSByteArray *)nativeGetBlobWithLong:(jlong)windowPtr
                                withInt:(jint)row
                                withInt:(jint)column;

+ (NSString *)nativeGetStringWithLong:(jlong)windowPtr
                              withInt:(jint)row
                              withInt:(jint)column;

+ (jlong)nativeGetLongWithLong:(jlong)windowPtr
                       withInt:(jint)row
                       withInt:(jint)column;

+ (jdouble)nativeGetDoubleWithLong:(jlong)windowPtr
                           withInt:(jint)row
                           withInt:(jint)column;

+ (void)nativeCopyStringToBufferWithLong:(jlong)windowPtr
                                 withInt:(jint)row
                                 withInt:(jint)column
      withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer;

+ (jboolean)nativePutBlobWithLong:(jlong)windowPtr
                    withByteArray:(IOSByteArray *)value
                          withInt:(jint)row
                          withInt:(jint)column;

+ (jboolean)nativePutStringWithLong:(jlong)windowPtr
                       withNSString:(NSString *)value
                            withInt:(jint)row
                            withInt:(jint)column;

+ (jboolean)nativePutLongWithLong:(jlong)windowPtr
                         withLong:(jlong)value
                          withInt:(jint)row
                          withInt:(jint)column;

+ (jboolean)nativePutDoubleWithLong:(jlong)windowPtr
                         withDouble:(jdouble)value
                            withInt:(jint)row
                            withInt:(jint)column;

+ (jboolean)nativePutNullWithLong:(jlong)windowPtr
                          withInt:(jint)row
                          withInt:(jint)column;

+ (NSString *)nativeGetNameWithLong:(jlong)windowPtr;

- (void)dispose;

- (NSString *)printStats;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseCursorWindow, mName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseCursorWindow, mCloseGuard_, DalvikSystemCloseGuard *)

inline NSString *AndroidDatabaseCursorWindow_get_STATS_TAG(void);
static NSString *AndroidDatabaseCursorWindow_STATS_TAG = @"CursorWindowStats";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseCursorWindow, STATS_TAG, NSString *)

inline jint AndroidDatabaseCursorWindow_get_sCursorWindowSize(void);
inline jint AndroidDatabaseCursorWindow_set_sCursorWindowSize(jint value);
inline jint *AndroidDatabaseCursorWindow_getRef_sCursorWindowSize(void);
static jint AndroidDatabaseCursorWindow_sCursorWindowSize = -1;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidDatabaseCursorWindow, sCursorWindowSize, jint)

jlong AndroidDatabaseCursorWindow_nativeCreateWithNSString_withInt_(NSString *name, jint cursorWindowSize);

void AndroidDatabaseCursorWindow_nativeDisposeWithLong_(jlong windowPtr);

void AndroidDatabaseCursorWindow_nativeClearWithLong_(jlong windowPtr);

jint AndroidDatabaseCursorWindow_nativeGetNumRowsWithLong_(jlong windowPtr);

jboolean AndroidDatabaseCursorWindow_nativeSetNumColumnsWithLong_withInt_(jlong windowPtr, jint columnNum);

jboolean AndroidDatabaseCursorWindow_nativeAllocRowWithLong_(jlong windowPtr);

void AndroidDatabaseCursorWindow_nativeFreeLastRowWithLong_(jlong windowPtr);

jint AndroidDatabaseCursorWindow_nativeGetTypeWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column);

IOSByteArray *AndroidDatabaseCursorWindow_nativeGetBlobWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column);

NSString *AndroidDatabaseCursorWindow_nativeGetStringWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column);

jlong AndroidDatabaseCursorWindow_nativeGetLongWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column);

jdouble AndroidDatabaseCursorWindow_nativeGetDoubleWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column);

void AndroidDatabaseCursorWindow_nativeCopyStringToBufferWithLong_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(jlong windowPtr, jint row, jint column, AndroidDatabaseCharArrayBuffer *buffer);

jboolean AndroidDatabaseCursorWindow_nativePutBlobWithLong_withByteArray_withInt_withInt_(jlong windowPtr, IOSByteArray *value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutStringWithLong_withNSString_withInt_withInt_(jlong windowPtr, NSString *value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutLongWithLong_withLong_withInt_withInt_(jlong windowPtr, jlong value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutDoubleWithLong_withDouble_withInt_withInt_(jlong windowPtr, jdouble value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutNullWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column);

NSString *AndroidDatabaseCursorWindow_nativeGetNameWithLong_(jlong windowPtr);

__attribute__((unused)) static void AndroidDatabaseCursorWindow_dispose(AndroidDatabaseCursorWindow *self);

__attribute__((unused)) static NSString *AndroidDatabaseCursorWindow_printStats(AndroidDatabaseCursorWindow *self);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$5(void);

@interface AndroidDatabaseDatabaseErrorHandler : NSObject

@end

@interface AndroidDatabaseDatabaseUtils ()

+ (jint)getKeyLenWithByteArray:(IOSByteArray *)arr;

+ (IOSByteArray *)getCollationKeyInBytesWithNSString:(NSString *)name;

@end

inline NSString *AndroidDatabaseDatabaseUtils_get_TAG(void);
static NSString *AndroidDatabaseDatabaseUtils_TAG = @"DatabaseUtils";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseDatabaseUtils, TAG, NSString *)

inline jboolean AndroidDatabaseDatabaseUtils_get_DEBUG(void);
#define AndroidDatabaseDatabaseUtils_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseDatabaseUtils, DEBUG, jboolean)

inline JavaTextCollator *AndroidDatabaseDatabaseUtils_get_mColl(void);
inline JavaTextCollator *AndroidDatabaseDatabaseUtils_set_mColl(JavaTextCollator *value);
static JavaTextCollator *AndroidDatabaseDatabaseUtils_mColl;
J2OBJC_STATIC_FIELD_OBJ(AndroidDatabaseDatabaseUtils, mColl, JavaTextCollator *)

__attribute__((unused)) static jint AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(IOSByteArray *arr);

__attribute__((unused)) static IOSByteArray *AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(NSString *name);

@interface AndroidDatabaseDatabaseUtils_InsertHelper () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDb_;
  NSString *mTableName_;
  JavaUtilHashMap *mColumns_;
  NSString *mInsertSQL_;
  AndroidDatabaseSqliteSQLiteStatement *mInsertStatement_;
  AndroidDatabaseSqliteSQLiteStatement *mReplaceStatement_;
  AndroidDatabaseSqliteSQLiteStatement *mPreparedStatement_;
}

- (void)buildSQL;

- (AndroidDatabaseSqliteSQLiteStatement *)getStatementWithBoolean:(jboolean)allowReplace;

- (jlong)insertInternalWithAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withBoolean:(jboolean)allowReplace;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mDb_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mTableName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mColumns_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mInsertSQL_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mInsertStatement_, AndroidDatabaseSqliteSQLiteStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mReplaceStatement_, AndroidDatabaseSqliteSQLiteStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseDatabaseUtils_InsertHelper, mPreparedStatement_, AndroidDatabaseSqliteSQLiteStatement *)

__attribute__((unused)) static void AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(AndroidDatabaseDatabaseUtils_InsertHelper *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteStatement *AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, jboolean allowReplace);

__attribute__((unused)) static jlong AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidContentContentValues *values, jboolean allowReplace);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseDatabaseUtils_InsertHelper__Annotations$0(void);

@interface AndroidDatabaseDefaultDatabaseErrorHandler ()

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName;

@end

inline NSString *AndroidDatabaseDefaultDatabaseErrorHandler_get_TAG(void);
static NSString *AndroidDatabaseDefaultDatabaseErrorHandler_TAG = @"DefaultDatabaseErrorHandler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseDefaultDatabaseErrorHandler, TAG, NSString *)

__attribute__((unused)) static void AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(AndroidDatabaseDefaultDatabaseErrorHandler *self, NSString *fileName);

@interface AndroidDatabaseMatrixCursor () {
 @public
  IOSObjectArray *columnNames_;
  IOSObjectArray *data_;
  jint rowCount_;
  jint columnCount_;
}

- (id)getWithInt:(jint)column;

- (void)addRowWithJavaUtilArrayList:(JavaUtilArrayList *)columnValues
                            withInt:(jint)start;

- (void)ensureCapacityWithInt:(jint)size;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseMatrixCursor, columnNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseMatrixCursor, data_, IOSObjectArray *)

__attribute__((unused)) static id AndroidDatabaseMatrixCursor_getWithInt_(AndroidDatabaseMatrixCursor *self, jint column);

__attribute__((unused)) static void AndroidDatabaseMatrixCursor_addRowWithJavaUtilArrayList_withInt_(AndroidDatabaseMatrixCursor *self, JavaUtilArrayList *columnValues, jint start);

__attribute__((unused)) static void AndroidDatabaseMatrixCursor_ensureCapacityWithInt_(AndroidDatabaseMatrixCursor *self, jint size);

@interface AndroidDatabaseMatrixCursor_RowBuilder () {
 @public
  AndroidDatabaseMatrixCursor *this$0_;
  jint row_;
  jint endIndex_;
  jint index_;
}

@end

@interface AndroidDatabaseMergeCursor () {
 @public
  AndroidDatabaseDataSetObserver *mObserver_;
  id<AndroidDatabaseCursor> mCursor_;
  IOSObjectArray *mCursors_;
}

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseMergeCursor, mObserver_, AndroidDatabaseDataSetObserver *)
J2OBJC_FIELD_SETTER(AndroidDatabaseMergeCursor, mCursor_, id<AndroidDatabaseCursor>)
J2OBJC_FIELD_SETTER(AndroidDatabaseMergeCursor, mCursors_, IOSObjectArray *)

@interface AndroidDatabaseMergeCursor_1 : AndroidDatabaseDataSetObserver {
 @public
  AndroidDatabaseMergeCursor *this$0_;
}

- (instancetype __nonnull)initWithAndroidDatabaseMergeCursor:(AndroidDatabaseMergeCursor *)outer$;

- (void)onChanged;

- (void)onInvalidated;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseMergeCursor_1)

__attribute__((unused)) static void AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor_1 *self, AndroidDatabaseMergeCursor *outer$);

__attribute__((unused)) static AndroidDatabaseMergeCursor_1 *new_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseMergeCursor_1 *create_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$);

inline NSString *AndroidDatabaseSqliteDatabaseObjectNotClosedException_get_s(void);
static NSString *AndroidDatabaseSqliteDatabaseObjectNotClosedException_s = @"Application did not close the cursor or database object that was opened here";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteDatabaseObjectNotClosedException, s, NSString *)

@interface AndroidOsCancellationSignal_OnCancelListener : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteConnection () {
 @public
  DalvikSystemCloseGuard *mCloseGuard_;
  AndroidDatabaseSqliteSQLiteConnectionPool *mPool_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfiguration_;
  jint mConnectionId_;
  jboolean mIsPrimaryConnection_;
  jboolean mIsReadOnlyConnection_;
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *mPreparedStatementCache_;
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *mPreparedStatementPool_;
  AndroidDatabaseSqliteSQLiteConnection_OperationLog *mRecentOperations_;
  jlong mConnectionPtr_;
  jboolean mOnlyAllowReadOnlyOperations_;
  jint mCancellationSignalAttachCount_;
}

+ (jlong)nativeOpenWithNSString:(NSString *)path
                        withInt:(jint)openFlags
                   withNSString:(NSString *)label
                    withBoolean:(jboolean)enableTrace
                    withBoolean:(jboolean)enableProfile;

+ (void)nativeCloseWithLong:(jlong)connectionPtr;

+ (void)nativeRegisterCustomFunctionWithLong:(jlong)connectionPtr
withAndroidDatabaseSqliteSQLiteCustomFunction:(AndroidDatabaseSqliteSQLiteCustomFunction *)function;

+ (void)nativeRegisterLocalizedCollatorsWithLong:(jlong)connectionPtr
                                    withNSString:(NSString *)locale;

+ (jlong)nativePrepareStatementWithLong:(jlong)connectionPtr
                           withNSString:(NSString *)sql;

+ (void)nativeFinalizeStatementWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr;

+ (jint)nativeGetParameterCountWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr;

+ (jboolean)nativeIsReadOnlyWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr;

+ (jint)nativeGetColumnCountWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr;

+ (NSString *)nativeGetColumnNameWithLong:(jlong)connectionPtr
                                 withLong:(jlong)statementPtr
                                  withInt:(jint)index;

+ (void)nativeBindNullWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index;

+ (void)nativeBindLongWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                      withLong:(jlong)value;

+ (void)nativeBindDoubleWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                      withDouble:(jdouble)value;

+ (void)nativeBindStringWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                    withNSString:(NSString *)value;

+ (void)nativeBindBlobWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                 withByteArray:(IOSByteArray *)value;

+ (void)nativeResetStatementAndClearBindingsWithLong:(jlong)connectionPtr
                                            withLong:(jlong)statementPtr;

+ (void)nativeExecuteWithLong:(jlong)connectionPtr
                     withLong:(jlong)statementPtr;

+ (jlong)nativeExecuteForLongWithLong:(jlong)connectionPtr
                             withLong:(jlong)statementPtr;

+ (NSString *)nativeExecuteForStringWithLong:(jlong)connectionPtr
                                    withLong:(jlong)statementPtr;

+ (jint)nativeExecuteForChangedRowCountWithLong:(jlong)connectionPtr
                                       withLong:(jlong)statementPtr;

+ (jlong)nativeExecuteForLastInsertedRowIdWithLong:(jlong)connectionPtr
                                          withLong:(jlong)statementPtr;

+ (jlong)nativeExecuteForCursorWindowWithLong:(jlong)connectionPtr
                                     withLong:(jlong)statementPtr
                                     withLong:(jlong)windowPtr
                                      withInt:(jint)startPos
                                      withInt:(jint)requiredPos
                                  withBoolean:(jboolean)countAllRows;

+ (jint)nativeGetDbLookasideWithLong:(jlong)connectionPtr;

+ (void)nativeCancelWithLong:(jlong)connectionPtr;

+ (void)nativeResetCancelWithLong:(jlong)connectionPtr
                      withBoolean:(jboolean)cancelable;

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
                       withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                    withInt:(jint)connectionId
                                                                withBoolean:(jboolean)primaryConnection;

- (void)open;

- (void)disposeWithBoolean:(jboolean)finalized;

- (void)setPageSize;

- (void)setAutoCheckpointInterval;

- (void)setJournalSizeLimit;

- (void)setForeignKeyModeFromConfiguration;

- (void)setWalModeFromConfiguration;

- (void)setSyncModeWithNSString:(NSString *)newValue;

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value;

- (void)setJournalModeWithNSString:(NSString *)newValue;

- (void)setLocaleFromConfiguration;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql;

- (void)releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (void)finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (void)attachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)detachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement
                                                               withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

+ (jboolean)isCacheableWithInt:(jint)statementType;

- (void)applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (AndroidDatabaseSqliteSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                                 withLong:(jlong)pageCount
                                                                 withLong:(jlong)pageSize;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                                        withLong:(jlong)statementPtr
                                                                                         withInt:(jint)numParameters
                                                                                         withInt:(jint)type
                                                                                     withBoolean:(jboolean)readOnly;

- (void)recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mCloseGuard_, DalvikSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPool_, AndroidDatabaseSqliteSQLiteConnectionPool *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mConfiguration_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPreparedStatementCache_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPreparedStatementPool_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mRecentOperations_, AndroidDatabaseSqliteSQLiteConnection_OperationLog *)

inline NSString *AndroidDatabaseSqliteSQLiteConnection_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteConnection_TAG = @"SQLiteConnection";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, TAG, NSString *)

inline jboolean AndroidDatabaseSqliteSQLiteConnection_get_DEBUG(void);
#define AndroidDatabaseSqliteSQLiteConnection_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection, DEBUG, jboolean)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteConnection_get_EMPTY_STRING_ARRAY(void);
static IOSObjectArray *AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, EMPTY_STRING_ARRAY, IOSObjectArray *)

inline IOSByteArray *AndroidDatabaseSqliteSQLiteConnection_get_EMPTY_BYTE_ARRAY(void);
static IOSByteArray *AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, EMPTY_BYTE_ARRAY, IOSByteArray *)

inline JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteConnection_get_TRIM_SQL_PATTERN(void);
static JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, TRIM_SQL_PATTERN, JavaUtilRegexPattern *)

jlong AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile);

void AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(jlong connectionPtr, AndroidDatabaseSqliteSQLiteCustomFunction *function);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(jlong connectionPtr, NSString *locale);

jlong AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(jlong connectionPtr, NSString *sql);

void AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jboolean AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(jlong connectionPtr, jlong statementPtr, jint index, jlong value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(jlong connectionPtr, jlong statementPtr, jint index, jdouble value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(jlong connectionPtr, jlong statementPtr, jint index, NSString *value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(jlong connectionPtr, jlong statementPtr, jint index, IOSByteArray *value);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(jlong connectionPtr, jlong statementPtr, jlong windowPtr, jint startPos, jint requiredPos, jboolean countAllRows);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(jlong connectionPtr, jboolean cancelable);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_open(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, jboolean finalized);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setPageSize(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(jint statementType);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug_DbStats *AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(AndroidDatabaseSqliteSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql, jlong statementPtr, jint numParameters, jint type, jboolean readOnly);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql);

@interface AndroidDatabaseSqliteSQLiteConnection_PreparedStatement : NSObject {
 @public
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *mPoolNext_;
  NSString *mSql_;
  jlong mStatementPtr_;
  jint mNumParameters_;
  jint mType_;
  jboolean mReadOnly_;
  jboolean mInCache_;
  jboolean mInUse_;
}

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mPoolNext_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mSql_, NSString *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

@interface AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache : AndroidUtilLruCache {
 @public
  __unsafe_unretained AndroidDatabaseSqliteSQLiteConnection *this$0_;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)outer$
                                                                withInt:(jint)size;

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)oldValue
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)newValue;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)getWithId:(NSString *)arg0;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)createWithId:(NSString *)arg0;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)removeWithId:(NSString *)arg0;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)putWithId:(NSString *)arg0
                                                                withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self, AndroidDatabaseSqliteSQLiteConnection *outer$, jint size);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

@interface AndroidDatabaseSqliteSQLiteConnection_OperationLog : NSObject {
 @public
  IOSObjectArray *mOperations_;
  jint mIndex_;
  jint mGeneration_;
}

- (instancetype __nonnull)init;

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex;

- (void)endOperationWithInt:(jint)cookie;

- (jboolean)endOperationDeferLogWithInt:(jint)cookie;

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail;

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie;

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail;

- (jint)newOperationCookieLockedWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

- (AndroidDatabaseSqliteSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie;

- (NSString *)describeCurrentOperation;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_OperationLog, mOperations_, IOSObjectArray *)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_MAX_RECENT_OPERATIONS(void);
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS 20
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, MAX_RECENT_OPERATIONS, jint)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_COOKIE_GENERATION_SHIFT(void);
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, COOKIE_GENERATION_SHIFT, jint)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_COOKIE_INDEX_MASK(void);
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK 255
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, COOKIE_INDEX_MASK, jint)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_OperationLog *new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_OperationLog *create_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(void);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie, NSString *detail);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint index);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

@interface AndroidDatabaseSqliteSQLiteConnection_Operation : NSObject {
 @public
  jlong mStartTime_;
  jlong mEndTime_;
  NSString *mKind_;
  NSString *mSql_;
  JavaUtilArrayList *mBindArgs_;
  jboolean mFinished_;
  JavaLangException *mException_;
  jint mCookie_;
}

- (instancetype __nonnull)init;

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose;

- (NSString *)getStatus;

- (NSString *)getFormattedStartTime;

@end

J2OBJC_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_Operation)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mKind_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mBindArgs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mException_, JavaLangException *)

inline JavaTextSimpleDateFormat *AndroidDatabaseSqliteSQLiteConnection_Operation_get_sDateFormat(void);
static JavaTextSimpleDateFormat *AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection_Operation, sDateFormat, JavaTextSimpleDateFormat *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_Operation_init(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *new_AndroidDatabaseSqliteSQLiteConnection_Operation_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *create_AndroidDatabaseSqliteSQLiteConnection_Operation_init(void);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_Operation)

@interface AndroidDatabaseSqliteSQLiteConnectionPool () {
 @public
  DalvikSystemCloseGuard *mCloseGuard_;
  id mLock_;
  JavaUtilConcurrentAtomicAtomicBoolean *mConnectionLeaked_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfiguration_;
  jint mMaxConnectionPoolSize_;
  jboolean mIsOpen_;
  jint mNextConnectionId_;
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *mConnectionWaiterPool_;
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *mConnectionWaiterQueue_;
  JavaUtilArrayList *mAvailableNonPrimaryConnections_;
  AndroidDatabaseSqliteSQLiteConnection *mAvailablePrimaryConnection_;
  JavaUtilWeakHashMap *mAcquiredConnections_;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)open;

- (void)disposeWithBoolean:(jboolean)finalized;

- (jboolean)recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
      withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status;

- (AndroidDatabaseSqliteSQLiteConnection *)openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                                        withBoolean:(jboolean)primaryConnection;

- (void)closeAvailableConnectionsAndLogExceptionsLocked;

- (void)closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked;

- (void)closeExcessConnectionsAndLogExceptionsLocked;

- (void)closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection;

- (void)discardAcquiredConnectionsLocked;

- (void)reconfigureAllConnectionsLocked;

- (void)markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status;

- (AndroidDatabaseSqliteSQLiteConnection *)waitForConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags
                                         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)waiter;

- (void)logConnectionPoolBusyLockedWithLong:(jlong)waitMillis
                                    withInt:(jint)connectionFlags;

- (void)wakeConnectionWaitersLocked;

- (AndroidDatabaseSqliteSQLiteConnection *)tryAcquirePrimaryConnectionLockedWithInt:(jint)connectionFlags;

- (AndroidDatabaseSqliteSQLiteConnection *)tryAcquireNonPrimaryConnectionLockedWithNSString:(NSString *)sql
                                                                                    withInt:(jint)connectionFlags;

- (void)finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
                                                                       withInt:(jint)connectionFlags;

- (jboolean)isSessionBlockingImportantConnectionWaitersLockedWithBoolean:(jboolean)holdingPrimaryConnection
                                                                 withInt:(jint)connectionFlags;

+ (jint)getPriorityWithInt:(jint)connectionFlags;

- (void)setMaxConnectionPoolSizeLocked;

- (void)throwIfClosedLocked;

- (AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)obtainConnectionWaiterLockedWithJavaLangThread:(JavaLangThread *)thread
                                                                                                      withLong:(jlong)startTime
                                                                                                       withInt:(jint)priority
                                                                                                   withBoolean:(jboolean)wantPrimaryConnection
                                                                                                  withNSString:(NSString *)sql
                                                                                                       withInt:(jint)connectionFlags;

- (void)recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)waiter;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mCloseGuard_, DalvikSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mLock_, id)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mConnectionLeaked_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mConfiguration_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mConnectionWaiterPool_, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mConnectionWaiterQueue_, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mAvailableNonPrimaryConnections_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mAvailablePrimaryConnection_, AndroidDatabaseSqliteSQLiteConnection *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool, mAcquiredConnections_, JavaUtilWeakHashMap *)

inline NSString *AndroidDatabaseSqliteSQLiteConnectionPool_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteConnectionPool_TAG = @"SQLiteConnectionPool";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnectionPool, TAG, NSString *)

inline jlong AndroidDatabaseSqliteSQLiteConnectionPool_get_CONNECTION_POOL_BUSY_MILLIS(void);
#define AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnectionPool, CONNECTION_POOL_BUSY_MILLIS, jlong)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool *new_AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool *create_AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_open(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jboolean finalized);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnection *connection, AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jboolean primaryConnection);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnection *connection);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jlong waitMillis, jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jint connectionFlags);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnection *connection, jint connectionFlags);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jboolean holdingPrimaryConnection, jint connectionFlags);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnectionPool_getPriorityWithInt_(jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *AndroidDatabaseSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, JavaLangThread *thread, jlong startTime, jint priority, jboolean wantPrimaryConnection, NSString *sql, jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *self, NSString *__name, jint __ordinal);

@interface AndroidDatabaseSqliteSQLiteConnectionPool_1 : NSObject < AndroidOsCancellationSignal_OnCancelListener > {
 @public
  AndroidDatabaseSqliteSQLiteConnectionPool *this$0_;
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *val$waiter_;
  jint val$nonce_;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)outer$
             withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)capture$0
                                                                    withInt:(jint)capture$1;

- (void)onCancel;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnectionPool_1)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool_1 *self, AndroidDatabaseSqliteSQLiteConnectionPool *outer$, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *capture$0, jint capture$1);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool_1 *new_AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *outer$, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool_1 *create_AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *outer$, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *capture$0, jint capture$1);

@interface AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter : NSObject {
 @public
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *mNext_;
  JavaLangThread *mThread_;
  jlong mStartTime_;
  jint mPriority_;
  jboolean mWantPrimaryConnection_;
  NSString *mSql_;
  jint mConnectionFlags_;
  AndroidDatabaseSqliteSQLiteConnection *mAssignedConnection_;
  JavaLangRuntimeException *mException_;
  jint mNonce_;
}

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, mNext_, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, mThread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, mAssignedConnection_, AndroidDatabaseSqliteSQLiteConnection *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, mException_, JavaLangRuntimeException *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *new_AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *create_AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter)

@interface AndroidDatabaseSqliteSQLiteCursor () {
 @public
  NSString *mEditTable_;
  IOSObjectArray *mColumns_;
  AndroidDatabaseSqliteSQLiteQuery *mQuery_;
  id<AndroidDatabaseSqliteSQLiteCursorDriver> mDriver_;
  jint mCount_;
  jint mCursorWindowCapacity_;
  id<JavaUtilMap> mColumnNameMap_;
}

- (void)fillWindowWithInt:(jint)requiredPos;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCursor, mEditTable_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCursor, mColumns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCursor, mQuery_, AndroidDatabaseSqliteSQLiteQuery *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCursor, mDriver_, id<AndroidDatabaseSqliteSQLiteCursorDriver>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteCursor, mColumnNameMap_, id<JavaUtilMap>)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteCursor_fillWindowWithInt_(AndroidDatabaseSqliteSQLiteCursor *self, jint requiredPos);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteCursor__Annotations$0(void);

@interface AndroidDatabaseSqliteSQLiteCursorDriver : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteCustomFunction ()

- (void)dispatchCallbackWithNSStringArray:(IOSObjectArray *)args;

@end

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteCustomFunction_dispatchCallbackWithNSStringArray_(AndroidDatabaseSqliteSQLiteCustomFunction *self, IOSObjectArray *args);

@interface AndroidDatabaseSqliteSQLiteDatabase () {
 @public
  JavaLangThreadLocal *mThreadSession_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> mCursorFactory_;
  id<AndroidDatabaseDatabaseErrorHandler> mErrorHandler_;
  id mLock_;
  DalvikSystemCloseGuard *mCloseGuardLocked_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfigurationLocked_;
  AndroidDatabaseSqliteSQLiteConnectionPool *mConnectionPoolLocked_;
  jboolean mHasAttachedDbsLocked_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)path
                                   withInt:(jint)openFlags
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
   withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

- (void)disposeWithBoolean:(jboolean)finalized;

+ (jboolean)isMainThread;

- (void)beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                                               withBoolean:(jboolean)exclusive;

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay;

- (void)open;

- (void)openInner;

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs;

- (jboolean)isReadOnlyLocked;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

+ (JavaUtilArrayList *)getActiveDatabases;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

- (void)throwIfNotOpenLocked;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mThreadSession_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mCursorFactory_, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mErrorHandler_, id<AndroidDatabaseDatabaseErrorHandler>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mLock_, id)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mCloseGuardLocked_, DalvikSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mConfigurationLocked_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mConnectionPoolLocked_, AndroidDatabaseSqliteSQLiteConnectionPool *)

inline NSString *AndroidDatabaseSqliteSQLiteDatabase_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteDatabase_TAG = @"SQLiteDatabase";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabase, TAG, NSString *)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_EVENT_DB_CORRUPT(void);
#define AndroidDatabaseSqliteSQLiteDatabase_EVENT_DB_CORRUPT 75004
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, EVENT_DB_CORRUPT, jint)

inline JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_get_sActiveDatabases(void);
inline JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_set_sActiveDatabases(JavaUtilWeakHashMap *value);
static JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases;
J2OBJC_STATIC_FIELD_OBJ(AndroidDatabaseSqliteSQLiteDatabase, sActiveDatabases, JavaUtilWeakHashMap *)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_VALUES(void);
static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_VALUES, IOSObjectArray *)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_OPEN_READ_MASK(void);
#define AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, OPEN_READ_MASK, jint)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean finalized);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_isMainThread(void);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jboolean exclusive);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_open(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_openInner(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteDatabase_getPath(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(AndroidDatabaseSqliteSQLiteDatabase *self, JavaUtilArrayList *dbStatsList);

__attribute__((unused)) static JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases(void);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidUtilPrinter> printer, jboolean verbose);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$5(void);

@interface AndroidDatabaseSqliteSQLiteDatabase_1 : JavaLangThreadLocal {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *this$0_;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)outer$;

- (AndroidDatabaseSqliteSQLiteSession *)initialValue OBJC_METHOD_FAMILY_NONE;

- (AndroidDatabaseSqliteSQLiteSession *)get;

- (AndroidDatabaseSqliteSQLiteSession *)childValueWithId:(AndroidDatabaseSqliteSQLiteSession *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_1)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase_1 *self, AndroidDatabaseSqliteSQLiteDatabase *outer$);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_1 *new_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_1 *create_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$);

@interface AndroidDatabaseSqliteSQLiteDatabase_2 : NSObject < JavaIoFileFilter > {
 @public
  NSString *val$prefix_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)capture$0;

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_2)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabase_2 *self, NSString *capture$0);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_2 *new_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_2 *create_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0);

@interface AndroidDatabaseSqliteSQLiteDatabase_CursorFactory : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteDatabase_CustomFunction : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteDatabaseConfiguration ()

+ (NSString *)stripPathForLogsWithNSString:(NSString *)path;

@end

inline JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_get_EMAIL_IN_DB_PATTERN(void);
static JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_EMAIL_IN_DB_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, EMAIL_IN_DB_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_stripPathForLogsWithNSString_(NSString *path);

@interface AndroidDatabaseSqliteSQLiteDebug ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDebug_init(AndroidDatabaseSqliteSQLiteDebug *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug *new_AndroidDatabaseSqliteSQLiteDebug_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug *create_AndroidDatabaseSqliteSQLiteDebug_init(void);

@interface AndroidDatabaseSqliteSQLiteDirectCursorDriver () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDatabase_;
  NSString *mEditTable_;
  NSString *mSql_;
  AndroidOsCancellationSignal *mCancellationSignal_;
  AndroidDatabaseSqliteSQLiteQuery *mQuery_;
}

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDirectCursorDriver, mDatabase_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDirectCursorDriver, mEditTable_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDirectCursorDriver, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDirectCursorDriver, mCancellationSignal_, AndroidOsCancellationSignal *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDirectCursorDriver, mQuery_, AndroidDatabaseSqliteSQLiteQuery *)

@interface AndroidDatabaseSqliteSQLiteGlobal ()

+ (jint)nativeReleaseMemory;

- (instancetype __nonnull)init;

@end

inline NSString *AndroidDatabaseSqliteSQLiteGlobal_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteGlobal_TAG = @"SQLiteGlobal";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteGlobal, TAG, NSString *)

inline id AndroidDatabaseSqliteSQLiteGlobal_get_sLock(void);
static id AndroidDatabaseSqliteSQLiteGlobal_sLock;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteGlobal, sLock, id)

inline jint AndroidDatabaseSqliteSQLiteGlobal_get_sDefaultPageSize(void);
inline jint AndroidDatabaseSqliteSQLiteGlobal_set_sDefaultPageSize(jint value);
inline jint *AndroidDatabaseSqliteSQLiteGlobal_getRef_sDefaultPageSize(void);
static jint AndroidDatabaseSqliteSQLiteGlobal_sDefaultPageSize;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidDatabaseSqliteSQLiteGlobal, sDefaultPageSize, jint)

jint AndroidDatabaseSqliteSQLiteGlobal_nativeReleaseMemory(void);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteGlobal_init(AndroidDatabaseSqliteSQLiteGlobal *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteGlobal *new_AndroidDatabaseSqliteSQLiteGlobal_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteGlobal *create_AndroidDatabaseSqliteSQLiteGlobal_init(void);

@interface AndroidDatabaseSqliteSQLiteOpenHelper () {
 @public
  AndroidContentContext *mContext_;
  NSString *mName_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> mFactory_;
  jint mNewVersion_;
  AndroidDatabaseSqliteSQLiteDatabase *mDatabase_;
  jboolean mIsInitializing_;
  jboolean mEnableWriteAheadLogging_;
  id<AndroidDatabaseDatabaseErrorHandler> mErrorHandler_;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabaseLockedWithBoolean:(jboolean)writable;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteOpenHelper, mContext_, AndroidContentContext *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteOpenHelper, mName_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteOpenHelper, mFactory_, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteOpenHelper, mDatabase_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteOpenHelper, mErrorHandler_, id<AndroidDatabaseDatabaseErrorHandler>)

inline NSString *AndroidDatabaseSqliteSQLiteOpenHelper_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteOpenHelper_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteOpenHelper, TAG, NSString *)

inline jboolean AndroidDatabaseSqliteSQLiteOpenHelper_get_DEBUG_STRICT_READONLY(void);
#define AndroidDatabaseSqliteSQLiteOpenHelper_DEBUG_STRICT_READONLY false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteOpenHelper, DEBUG_STRICT_READONLY, jboolean)

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(AndroidDatabaseSqliteSQLiteOpenHelper *self, jboolean writable);

@interface AndroidDatabaseSqliteSQLiteProgram () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDatabase_;
  NSString *mSql_;
  jboolean mReadOnly_;
  IOSObjectArray *mColumnNames_;
  jint mNumParameters_;
  IOSObjectArray *mBindArgs_;
}

- (void)bindWithInt:(jint)index
             withId:(id)value;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mDatabase_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mColumnNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mBindArgs_, IOSObjectArray *)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram_get_EMPTY_STRING_ARRAY(void);
static IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteProgram, EMPTY_STRING_ARRAY, IOSObjectArray *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(AndroidDatabaseSqliteSQLiteProgram *self, jint index, id value);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram__Annotations$0(void);

@interface AndroidDatabaseSqliteSQLiteQuery () {
 @public
  AndroidOsCancellationSignal *mCancellationSignal_;
}

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQuery, mCancellationSignal_, AndroidOsCancellationSignal *)

inline NSString *AndroidDatabaseSqliteSQLiteQuery_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteQuery_TAG = @"SQLiteQuery";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteQuery, TAG, NSString *)

@interface AndroidDatabaseSqliteSQLiteQueryBuilder () {
 @public
  id<JavaUtilMap> mProjectionMap_;
  NSString *mTables_;
  JavaLangStringBuilder *mWhereClause_;
  jboolean mDistinct_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> mFactory_;
  jboolean mStrict_;
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause;

- (void)validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)sql
                                withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (IOSObjectArray *)computeProjectionWithNSStringArray:(IOSObjectArray *)projectionIn;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mProjectionMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mTables_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mWhereClause_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mFactory_, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)

inline NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_get_TAG(void);
static NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_TAG = @"SQLiteQueryBuilder";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteQueryBuilder, TAG, NSString *)

inline JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteQueryBuilder_get_sLimitPattern(void);
static JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteQueryBuilder, sLimitPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, IOSObjectArray *projectionIn);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder__Annotations$1(void);

@interface AndroidDatabaseSqliteSQLiteSession () {
 @public
  AndroidDatabaseSqliteSQLiteConnectionPool *mConnectionPool_;
  AndroidDatabaseSqliteSQLiteConnection *mConnection_;
  jint mConnectionFlags_;
  jint mConnectionUseCount_;
  AndroidDatabaseSqliteSQLiteSession_Transaction *mTransactionPool_;
  AndroidDatabaseSqliteSQLiteSession_Transaction *mTransactionStack_;
}

- (void)beginTransactionUncheckedWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                 withInt:(jint)connectionFlags
         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)endTransactionUncheckedWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal
                                                   withBoolean:(jboolean)yielding;

- (jboolean)yieldTransactionUncheckedWithLong:(jlong)sleepAfterYieldDelayMillis
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (jboolean)executeSpecialWithNSString:(NSString *)sql
                     withNSObjectArray:(IOSObjectArray *)bindArgs
                               withInt:(jint)connectionFlags
       withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)acquireConnectionWithNSString:(NSString *)sql
                              withInt:(jint)connectionFlags
      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal;

- (void)releaseConnection;

- (void)throwIfNoTransaction;

- (void)throwIfTransactionMarkedSuccessful;

- (void)throwIfNestedTransaction;

- (AndroidDatabaseSqliteSQLiteSession_Transaction *)obtainTransactionWithInt:(jint)mode
                          withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)listener;

- (void)recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction:(AndroidDatabaseSqliteSQLiteSession_Transaction *)transaction;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mConnectionPool_, AndroidDatabaseSqliteSQLiteConnectionPool *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mConnection_, AndroidDatabaseSqliteSQLiteConnection *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mTransactionPool_, AndroidDatabaseSqliteSQLiteSession_Transaction *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mTransactionStack_, AndroidDatabaseSqliteSQLiteSession_Transaction *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, jint transactionMode, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithAndroidOsCancellationSignal_withBoolean_(AndroidDatabaseSqliteSQLiteSession *self, AndroidOsCancellationSignal *cancellationSignal, jboolean yielding);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, jlong sleepAfterYieldDelayMillis, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, IOSObjectArray *bindArgs, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_releaseConnection(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteSession_Transaction *AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(AndroidDatabaseSqliteSQLiteSession *self, jint mode, id<AndroidDatabaseSqliteSQLiteTransactionListener> listener);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteSession_Transaction *transaction);

@interface AndroidDatabaseSqliteSQLiteSession_Transaction : NSObject {
 @public
  AndroidDatabaseSqliteSQLiteSession_Transaction *mParent_;
  jint mMode_;
  id<AndroidDatabaseSqliteSQLiteTransactionListener> mListener_;
  jboolean mMarkedSuccessful_;
  jboolean mChildFailed_;
}

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteSession_Transaction)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession_Transaction, mParent_, AndroidDatabaseSqliteSQLiteSession_Transaction *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession_Transaction, mListener_, id<AndroidDatabaseSqliteSQLiteTransactionListener>)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_Transaction_init(AndroidDatabaseSqliteSQLiteSession_Transaction *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteSession_Transaction *new_AndroidDatabaseSqliteSQLiteSession_Transaction_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteSession_Transaction *create_AndroidDatabaseSqliteSQLiteSession_Transaction_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteSession_Transaction)

@interface AndroidDatabaseSqliteSQLiteTransactionListener : NSObject

@end

@interface AndroidInternalUtilFastXmlSerializer () {
 @public
  IOSCharArray *mText_;
  jint mPos_;
  JavaIoWriter *mWriter_;
  JavaIoOutputStream *mOutputStream_;
  JavaNioCharsetCharsetEncoder *mCharset_;
  JavaNioByteBuffer *mBytes_;
  jboolean mInTag_;
}

- (void)appendWithChar:(jchar)c;

- (void)appendWithNSString:(NSString *)str
                   withInt:(jint)i
                   withInt:(jint)length;

- (void)appendWithCharArray:(IOSCharArray *)buf
                    withInt:(jint)i
                    withInt:(jint)length;

- (void)appendWithNSString:(NSString *)str;

- (void)escapeAndAppendStringWithNSString:(NSString *)string;

- (void)escapeAndAppendStringWithCharArray:(IOSCharArray *)buf
                                   withInt:(jint)start
                                   withInt:(jint)len;

- (void)flushBytes;

@end

J2OBJC_FIELD_SETTER(AndroidInternalUtilFastXmlSerializer, mText_, IOSCharArray *)
J2OBJC_FIELD_SETTER(AndroidInternalUtilFastXmlSerializer, mWriter_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(AndroidInternalUtilFastXmlSerializer, mOutputStream_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(AndroidInternalUtilFastXmlSerializer, mCharset_, JavaNioCharsetCharsetEncoder *)
J2OBJC_FIELD_SETTER(AndroidInternalUtilFastXmlSerializer, mBytes_, JavaNioByteBuffer *)

inline IOSObjectArray *AndroidInternalUtilFastXmlSerializer_get_ESCAPE_TABLE(void);
static IOSObjectArray *AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidInternalUtilFastXmlSerializer, ESCAPE_TABLE, IOSObjectArray *)

inline jint AndroidInternalUtilFastXmlSerializer_get_BUFFER_LEN(void);
#define AndroidInternalUtilFastXmlSerializer_BUFFER_LEN 8192
J2OBJC_STATIC_FIELD_CONSTANT(AndroidInternalUtilFastXmlSerializer, BUFFER_LEN, jint)

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_appendWithChar_(AndroidInternalUtilFastXmlSerializer *self, jchar c);

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(AndroidInternalUtilFastXmlSerializer *self, NSString *str, jint i, jint length);

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_appendWithCharArray_withInt_withInt_(AndroidInternalUtilFastXmlSerializer *self, IOSCharArray *buf, jint i, jint length);

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_appendWithNSString_(AndroidInternalUtilFastXmlSerializer *self, NSString *str);

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithNSString_(AndroidInternalUtilFastXmlSerializer *self, NSString *string);

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithCharArray_withInt_withInt_(AndroidInternalUtilFastXmlSerializer *self, IOSCharArray *buf, jint start, jint len);

__attribute__((unused)) static void AndroidInternalUtilFastXmlSerializer_flushBytes(AndroidInternalUtilFastXmlSerializer *self);

@interface AndroidInternalUtilXmlUtils ()

+ (id)readThisValueXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                  withNSStringArray:(IOSObjectArray *)name;

@end

inline IOSObjectArray *AndroidInternalUtilXmlUtils_get_hardref(void);
inline IOSObjectArray *AndroidInternalUtilXmlUtils_set_hardref(IOSObjectArray *value);
static IOSObjectArray *AndroidInternalUtilXmlUtils_hardref;
J2OBJC_STATIC_FIELD_OBJ(AndroidInternalUtilXmlUtils, hardref, IOSObjectArray *)

__attribute__((unused)) static id AndroidInternalUtilXmlUtils_readThisValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, IOSObjectArray *name);

@interface AndroidNetUri ()

- (instancetype __nonnull)init;

+ (jboolean)isAllowedWithChar:(jchar)c
                 withNSString:(NSString *)allow;

@end

inline NSString *AndroidNetUri_get_LOG(void);
static NSString *AndroidNetUri_LOG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, LOG, NSString *)

inline NSString *AndroidNetUri_get_NOT_CACHED(void);
static NSString *AndroidNetUri_NOT_CACHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, NOT_CACHED, NSString *)

inline jint AndroidNetUri_get_NOT_FOUND(void);
#define AndroidNetUri_NOT_FOUND -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri, NOT_FOUND, jint)

inline jint AndroidNetUri_get_NOT_CALCULATED(void);
#define AndroidNetUri_NOT_CALCULATED -2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri, NOT_CALCULATED, jint)

inline NSString *AndroidNetUri_get_NOT_HIERARCHICAL(void);
static NSString *AndroidNetUri_NOT_HIERARCHICAL = @"This isn't a hierarchical URI.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, NOT_HIERARCHICAL, NSString *)

inline NSString *AndroidNetUri_get_DEFAULT_ENCODING(void);
static NSString *AndroidNetUri_DEFAULT_ENCODING = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, DEFAULT_ENCODING, NSString *)

inline jint AndroidNetUri_get_NULL_TYPE_ID(void);
#define AndroidNetUri_NULL_TYPE_ID 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri, NULL_TYPE_ID, jint)

inline IOSCharArray *AndroidNetUri_get_HEX_DIGITS(void);
static IOSCharArray *AndroidNetUri_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidNetUri, HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static void AndroidNetUri_init(AndroidNetUri *self);

__attribute__((unused)) static jboolean AndroidNetUri_isAllowedWithChar_withNSString_(jchar c, NSString *allow);

@interface AndroidNetUri_AbstractHierarchicalUri : AndroidNetUri {
 @public
  AndroidNetUri_Part *userInfo_;
  volatile_id host_;
  volatile_jint port_;
}

- (instancetype __nonnull)init;

- (NSString *)getLastPathSegment;

- (AndroidNetUri_Part *)getUserInfoPart;

- (NSString *)getEncodedUserInfo;

- (NSString *)parseUserInfo;

- (NSString *)getUserInfo;

- (NSString *)getHost;

- (NSString *)parseHost;

- (jint)getPort;

- (jint)parsePort;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_AbstractHierarchicalUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_AbstractHierarchicalUri, userInfo_, AndroidNetUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_AbstractHierarchicalUri, host_, NSString *)

__attribute__((unused)) static void AndroidNetUri_AbstractHierarchicalUri_init(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_AbstractHierarchicalUri_parseHost(AndroidNetUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static jint AndroidNetUri_AbstractHierarchicalUri_parsePort(AndroidNetUri_AbstractHierarchicalUri *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_AbstractHierarchicalUri)

@interface AndroidNetUri_StringUri : AndroidNetUri_AbstractHierarchicalUri {
 @public
  NSString *uriString_;
  volatile_jint cachedSsi_;
  volatile_jint cachedFsi_;
  volatile_id scheme_;
  AndroidNetUri_Part *ssp_;
  AndroidNetUri_Part *authority_;
  AndroidNetUri_PathPart *path_;
  AndroidNetUri_Part *query_;
  AndroidNetUri_Part *fragment_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)uriString;

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags;

- (jint)findSchemeSeparator;

- (jint)findFragmentSeparator;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (NSString *)parseScheme;

- (AndroidNetUri_Part *)getSsp;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)parseSsp;

- (AndroidNetUri_Part *)getAuthorityPart;

- (NSString *)getEncodedAuthority;

- (NSString *)getAuthority;

- (AndroidNetUri_PathPart *)getPathPart;

- (NSString *)getPath;

- (NSString *)getEncodedPath;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)parsePath;

- (AndroidNetUri_Part *)getQueryPart;

- (NSString *)getEncodedQuery;

- (NSString *)parseQuery;

- (NSString *)getQuery;

- (AndroidNetUri_Part *)getFragmentPart;

- (NSString *)getEncodedFragment;

- (NSString *)parseFragment;

- (NSString *)getFragment;

- (NSString *)description;

+ (NSString *)parseAuthorityWithNSString:(NSString *)uriString
                                 withInt:(jint)ssi;

+ (NSString *)parsePathWithNSString:(NSString *)uriString
                            withInt:(jint)ssi;

- (AndroidNetUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_StringUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, uriString_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_StringUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, ssp_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, authority_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, path_, AndroidNetUri_PathPart *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, query_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_StringUri, fragment_, AndroidNetUri_Part *)

inline jint AndroidNetUri_StringUri_get_TYPE_ID(void);
#define AndroidNetUri_StringUri_TYPE_ID 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_StringUri, TYPE_ID, jint)

__attribute__((unused)) static void AndroidNetUri_StringUri_initWithNSString_(AndroidNetUri_StringUri *self, NSString *uriString);

__attribute__((unused)) static AndroidNetUri_StringUri *new_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_StringUri *create_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString);

__attribute__((unused)) static AndroidNetUri *AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

__attribute__((unused)) static jint AndroidNetUri_StringUri_findSchemeSeparator(AndroidNetUri_StringUri *self);

__attribute__((unused)) static jint AndroidNetUri_StringUri_findFragmentSeparator(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseScheme(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getSsp(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseSsp(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getAuthorityPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_PathPart *AndroidNetUri_StringUri_getPathPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parsePath(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getQueryPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseQuery(AndroidNetUri_StringUri *self);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_StringUri_getFragmentPart(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseFragment(AndroidNetUri_StringUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(NSString *uriString, jint ssi);

__attribute__((unused)) static NSString *AndroidNetUri_StringUri_parsePathWithNSString_withInt_(NSString *uriString, jint ssi);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_StringUri)

@interface AndroidNetUri_OpaqueUri : AndroidNetUri {
 @public
  NSString *scheme_;
  AndroidNetUri_Part *ssp_;
  AndroidNetUri_Part *fragment_;
  volatile_id cachedString_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)scheme
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)ssp
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment;

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)getAuthority;

- (NSString *)getEncodedAuthority;

- (NSString *)getPath;

- (NSString *)getEncodedPath;

- (NSString *)getQuery;

- (NSString *)getEncodedQuery;

- (NSString *)getFragment;

- (NSString *)getEncodedFragment;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)getLastPathSegment;

- (NSString *)getUserInfo;

- (NSString *)getEncodedUserInfo;

- (NSString *)getHost;

- (jint)getPort;

- (NSString *)description;

- (AndroidNetUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_OpaqueUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_OpaqueUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_OpaqueUri, ssp_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_OpaqueUri, fragment_, AndroidNetUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_OpaqueUri, cachedString_, NSString *)

inline jint AndroidNetUri_OpaqueUri_get_TYPE_ID(void);
#define AndroidNetUri_OpaqueUri_TYPE_ID 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_OpaqueUri, TYPE_ID, jint)

__attribute__((unused)) static void AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_OpaqueUri *self, NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri_OpaqueUri *new_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_OpaqueUri *create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri *AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_OpaqueUri)

@interface AndroidNetUri_HierarchicalUri : AndroidNetUri_AbstractHierarchicalUri {
 @public
  NSString *scheme_;
  AndroidNetUri_Part *authority_;
  AndroidNetUri_PathPart *path_;
  AndroidNetUri_Part *query_;
  AndroidNetUri_Part *fragment_;
  AndroidNetUri_Part *ssp_;
  volatile_id uriString_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)scheme
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)authority
                withAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)query
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment;

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel;

- (jint)describeContents;

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (AndroidNetUri_Part *)getSsp;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)makeSchemeSpecificPart;

- (void)appendSspToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder;

- (NSString *)getAuthority;

- (NSString *)getEncodedAuthority;

- (NSString *)getEncodedPath;

- (NSString *)getPath;

- (NSString *)getQuery;

- (NSString *)getEncodedQuery;

- (NSString *)getFragment;

- (NSString *)getEncodedFragment;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)description;

- (NSString *)makeUriString;

- (AndroidNetUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_HierarchicalUri)

J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, authority_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, path_, AndroidNetUri_PathPart *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, query_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, fragment_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_HierarchicalUri, ssp_, AndroidNetUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(AndroidNetUri_HierarchicalUri, uriString_, NSString *)

inline jint AndroidNetUri_HierarchicalUri_get_TYPE_ID(void);
#define AndroidNetUri_HierarchicalUri_TYPE_ID 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidNetUri_HierarchicalUri, TYPE_ID, jint)

__attribute__((unused)) static void AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_HierarchicalUri *self, NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri_HierarchicalUri *new_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_HierarchicalUri *create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment);

__attribute__((unused)) static AndroidNetUri *AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel);

__attribute__((unused)) static AndroidNetUri_Part *AndroidNetUri_HierarchicalUri_getSsp(AndroidNetUri_HierarchicalUri *self);

__attribute__((unused)) static NSString *AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(AndroidNetUri_HierarchicalUri *self);

__attribute__((unused)) static void AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(AndroidNetUri_HierarchicalUri *self, JavaLangStringBuilder *builder);

__attribute__((unused)) static NSString *AndroidNetUri_HierarchicalUri_makeUriString(AndroidNetUri_HierarchicalUri *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_HierarchicalUri)

@interface AndroidNetUri_Builder () {
 @public
  NSString *scheme_;
  AndroidNetUri_Part *opaquePart_;
  AndroidNetUri_Part *authority_;
  AndroidNetUri_PathPart *path_;
  AndroidNetUri_Part *query_;
  AndroidNetUri_Part *fragment_;
}

- (jboolean)hasSchemeOrAuthority;

@end

J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, scheme_, NSString *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, opaquePart_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, authority_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, path_, AndroidNetUri_PathPart *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, query_, AndroidNetUri_Part *)
J2OBJC_FIELD_SETTER(AndroidNetUri_Builder, fragment_, AndroidNetUri_Part *)

__attribute__((unused)) static jboolean AndroidNetUri_Builder_hasSchemeOrAuthority(AndroidNetUri_Builder *self);

@interface AndroidOsParcelable_Creator : NSObject

@end

@interface AndroidNetUri_1 : NSObject < AndroidOsParcelable_Creator >

- (instancetype __nonnull)init;

- (AndroidNetUri *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)inArg;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_1)

__attribute__((unused)) static void AndroidNetUri_1_init(AndroidNetUri_1 *self);

__attribute__((unused)) static AndroidNetUri_1 *new_AndroidNetUri_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_1 *create_AndroidNetUri_1_init(void);

__attribute__((unused)) static NSString *AndroidNetUri_AbstractPart_getDecoded(AndroidNetUri_AbstractPart *self);

__attribute__((unused)) static void AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(AndroidNetUri_AbstractPart *self, AndroidOsParcel *parcel);

@interface AndroidNetUri_Part ()

- (instancetype __nonnull)initWithNSString:(NSString *)encoded
                              withNSString:(NSString *)decoded;

@end

__attribute__((unused)) static void AndroidNetUri_Part_initWithNSString_withNSString_(AndroidNetUri_Part *self, NSString *encoded, NSString *decoded);

__attribute__((unused)) static AndroidNetUri_Part *new_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_Part *create_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded);

@interface AndroidNetUri_Part_EmptyPart : AndroidNetUri_Part

- (instancetype __nonnull)initWithNSString:(NSString *)value;

- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidNetUri_Part_EmptyPart)

__attribute__((unused)) static void AndroidNetUri_Part_EmptyPart_initWithNSString_(AndroidNetUri_Part_EmptyPart *self, NSString *value);

__attribute__((unused)) static AndroidNetUri_Part_EmptyPart *new_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_Part_EmptyPart *create_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(AndroidNetUri_Part_EmptyPart)

@interface AndroidNetUri_PathPart () {
 @public
  AndroidNetUri_PathSegments *pathSegments_;
}

- (instancetype __nonnull)initWithNSString:(NSString *)encoded
                              withNSString:(NSString *)decoded;

@end

J2OBJC_FIELD_SETTER(AndroidNetUri_PathPart, pathSegments_, AndroidNetUri_PathSegments *)

__attribute__((unused)) static void AndroidNetUri_PathPart_initWithNSString_withNSString_(AndroidNetUri_PathPart *self, NSString *encoded, NSString *decoded);

__attribute__((unused)) static AndroidNetUri_PathPart *new_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidNetUri_PathPart *create_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded);

@interface AndroidOsBundle () {
 @public
  jboolean mHasFds_;
  jboolean mFdsKnown_;
  jboolean mAllowFds_;
  JavaLangClassLoader *mClassLoader_;
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
                         withId:(id)defaultValue
 withJavaLangClassCastException:(JavaLangClassCastException *)e;

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
 withJavaLangClassCastException:(JavaLangClassCastException *)e;

@end

J2OBJC_FIELD_SETTER(AndroidOsBundle, mClassLoader_, JavaLangClassLoader *)

inline NSString *AndroidOsBundle_get_LOG_TAG(void);
static NSString *AndroidOsBundle_LOG_TAG = @"Bundle";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsBundle, LOG_TAG, NSString *)

__attribute__((unused)) static void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, id defaultValue, JavaLangClassCastException *e);

__attribute__((unused)) static void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, JavaLangClassCastException *e);

@interface AndroidOsCancellationSignal () {
 @public
  jboolean mIsCanceled_;
  id<AndroidOsCancellationSignal_OnCancelListener> mOnCancelListener_;
  jboolean mCancelInProgress_;
}

- (void)waitForCancelFinishedLocked;

@end

J2OBJC_FIELD_SETTER(AndroidOsCancellationSignal, mOnCancelListener_, id<AndroidOsCancellationSignal_OnCancelListener>)

__attribute__((unused)) static void AndroidOsCancellationSignal_waitForCancelFinishedLocked(AndroidOsCancellationSignal *self);

inline JavaUtilRegexPattern *AndroidOsFileUtils_get_SAFE_FILENAME_PATTERN(void);
static JavaUtilRegexPattern *AndroidOsFileUtils_SAFE_FILENAME_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsFileUtils, SAFE_FILENAME_PATTERN, JavaUtilRegexPattern *)

@interface AndroidOsHandler ()

- (AndroidOsMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r;

- (AndroidOsMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                                  withId:(id)token;

- (void)handleCallbackWithAndroidOsMessage:(AndroidOsMessage *)message;

@end

inline jboolean AndroidOsHandler_get_FIND_POTENTIAL_LEAKS(void);
#define AndroidOsHandler_FIND_POTENTIAL_LEAKS false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsHandler, FIND_POTENTIAL_LEAKS, jboolean)

inline NSString *AndroidOsHandler_get_TAG(void);
static NSString *AndroidOsHandler_TAG = @"Handler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsHandler, TAG, NSString *)

__attribute__((unused)) static jboolean AndroidOsHandler_sendEmptyMessageDelayedWithInt_withLong_(AndroidOsHandler *self, jint what, jlong delayMillis);

__attribute__((unused)) static jboolean AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(AndroidOsHandler *self, AndroidOsMessage *msg, jlong delayMillis);

__attribute__((unused)) static jboolean AndroidOsHandler_sendMessageAtFrontOfQueueWithAndroidOsMessage_(AndroidOsHandler *self, AndroidOsMessage *msg);

__attribute__((unused)) static AndroidOsMessage *AndroidOsHandler_getPostMessageWithJavaLangRunnable_(AndroidOsHandler *self, id<JavaLangRunnable> r);

__attribute__((unused)) static AndroidOsMessage *AndroidOsHandler_getPostMessageWithJavaLangRunnable_withId_(AndroidOsHandler *self, id<JavaLangRunnable> r, id token);

__attribute__((unused)) static void AndroidOsHandler_handleCallbackWithAndroidOsMessage_(AndroidOsHandler *self, AndroidOsMessage *message);

@interface AndroidOsHandler_Callback : NSObject

@end

@interface AndroidOsIBinder_DeathRecipient : NSObject

@end

@interface AndroidOsIInterface : NSObject

@end

@interface AndroidOsThreadNudger : NSObject

@end

@interface AndroidOsLooper () {
 @public
  id<AndroidUtilPrinter> mLogging_;
}

+ (void)setMainLooperWithAndroidOsLooper:(AndroidOsLooper *)looper;

- (instancetype __nonnull)init;

@end

J2OBJC_FIELD_SETTER(AndroidOsLooper, mLogging_, id<AndroidUtilPrinter>)

inline NSString *AndroidOsLooper_get_TAG(void);
static NSString *AndroidOsLooper_TAG = @"Looper";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsLooper, TAG, NSString *)

inline AndroidOsLooper *AndroidOsLooper_get_mMainLooper(void);
inline AndroidOsLooper *AndroidOsLooper_set_mMainLooper(AndroidOsLooper *value);
static AndroidOsLooper *AndroidOsLooper_mMainLooper;
J2OBJC_STATIC_FIELD_OBJ(AndroidOsLooper, mMainLooper, AndroidOsLooper *)

__attribute__((unused)) static void AndroidOsLooper_setMainLooperWithAndroidOsLooper_(AndroidOsLooper *looper);

__attribute__((unused)) static void AndroidOsLooper_init(AndroidOsLooper *self);

__attribute__((unused)) static AndroidOsLooper *new_AndroidOsLooper_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsLooper *create_AndroidOsLooper_init(void);

@interface AndroidOsLooper_Profiler : NSObject

@end

inline id AndroidOsMessage_get_sPoolSync(void);
static id AndroidOsMessage_sPoolSync;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsMessage, sPoolSync, id)

inline AndroidOsMessage *AndroidOsMessage_get_sPool(void);
inline AndroidOsMessage *AndroidOsMessage_set_sPool(AndroidOsMessage *value);
static AndroidOsMessage *AndroidOsMessage_sPool;
J2OBJC_STATIC_FIELD_OBJ(AndroidOsMessage, sPool, AndroidOsMessage *)

inline jint AndroidOsMessage_get_sPoolSize(void);
inline jint AndroidOsMessage_set_sPoolSize(jint value);
inline jint *AndroidOsMessage_getRef_sPoolSize(void);
static jint AndroidOsMessage_sPoolSize = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidOsMessage, sPoolSize, jint)

inline jint AndroidOsMessage_get_MAX_POOL_SIZE(void);
#define AndroidOsMessage_MAX_POOL_SIZE 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsMessage, MAX_POOL_SIZE, jint)

@interface AndroidOsMessageQueue () {
 @public
  __unsafe_unretained id<AndroidOsThreadNudger> mThreadNudger_;
  jboolean mQuiting_;
  jboolean mBlocked_;
  jint mPtr_;
}

- (void)nativeInit;

- (void)nativeDestroy;

- (void)dopNudgeThreadNow;

- (void)dopNudgeThreadAtWithInt:(jint)timeoutMillis;

- (void)testThreadTimerWithInt:(jint)timeout;

- (void)callNudgeOnThread;

- (void)callNudge;

@end

__attribute__((unused)) static void AndroidOsMessageQueue_nativeInit(AndroidOsMessageQueue *self);

__attribute__((unused)) static void AndroidOsMessageQueue_nativeDestroy(AndroidOsMessageQueue *self);

__attribute__((unused)) static void AndroidOsMessageQueue_dopNudgeThreadNow(AndroidOsMessageQueue *self);

__attribute__((unused)) static void AndroidOsMessageQueue_dopNudgeThreadAtWithInt_(AndroidOsMessageQueue *self, jint timeoutMillis);

__attribute__((unused)) static void AndroidOsMessageQueue_testThreadTimerWithInt_(AndroidOsMessageQueue *self, jint timeout);

__attribute__((unused)) static void AndroidOsMessageQueue_callNudgeOnThread(AndroidOsMessageQueue *self);

__attribute__((unused)) static void AndroidOsMessageQueue_callNudge(AndroidOsMessageQueue *self);

@interface AndroidOsMessageQueue_1 : JavaLangThread {
 @public
  AndroidOsMessageQueue *this$0_;
  jint val$timeout_;
}

- (instancetype __nonnull)initWithAndroidOsMessageQueue:(AndroidOsMessageQueue *)outer$
                                                withInt:(jint)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsMessageQueue_1)

__attribute__((unused)) static void AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(AndroidOsMessageQueue_1 *self, AndroidOsMessageQueue *outer$, jint capture$0);

__attribute__((unused)) static AndroidOsMessageQueue_1 *new_AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(AndroidOsMessageQueue *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsMessageQueue_1 *create_AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(AndroidOsMessageQueue *outer$, jint capture$0);

@interface AndroidOsMessageQueue_IdleHandler : NSObject

@end

@interface AndroidOsParcel () {
 @public
  jint mObject_;
  jint mOwnObject_;
  JavaLangRuntimeException *mStack_;
}

- (void)writeNativeWithByteArray:(IOSByteArray *)b
                         withInt:(jint)offset
                         withInt:(jint)len;

- (JavaIoFileDescriptor *)internalReadFileDescriptor;

- (instancetype __nonnull)initWithInt:(jint)obj;

- (void)freeBuffer;

- (void)init__WithInt:(jint)obj OBJC_METHOD_FAMILY_NONE;

- (void)destroy;

- (void)readListInternalWithJavaUtilList:(id<JavaUtilList>)outVal
                                 withInt:(jint)N
                 withJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)readArrayInternalWithNSObjectArray:(IOSObjectArray *)outVal
                                   withInt:(jint)N
                   withJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)readSparseArrayInternalWithAndroidUtilSparseArray:(AndroidUtilSparseArray *)outVal
                                                  withInt:(jint)N
                                  withJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray:(AndroidUtilSparseBooleanArray *)outVal
                                                                withInt:(jint)N;

@end

J2OBJC_FIELD_SETTER(AndroidOsParcel, mStack_, JavaLangRuntimeException *)

inline jboolean AndroidOsParcel_get_DEBUG_RECYCLE(void);
#define AndroidOsParcel_DEBUG_RECYCLE false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, DEBUG_RECYCLE, jboolean)

inline NSString *AndroidOsParcel_get_TAG(void);
static NSString *AndroidOsParcel_TAG = @"Parcel";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsParcel, TAG, NSString *)

inline jint AndroidOsParcel_get_POOL_SIZE(void);
#define AndroidOsParcel_POOL_SIZE 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, POOL_SIZE, jint)

inline IOSObjectArray *AndroidOsParcel_get_sOwnedPool(void);
static IOSObjectArray *AndroidOsParcel_sOwnedPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsParcel, sOwnedPool, IOSObjectArray *)

inline IOSObjectArray *AndroidOsParcel_get_sHolderPool(void);
static IOSObjectArray *AndroidOsParcel_sHolderPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsParcel, sHolderPool, IOSObjectArray *)

inline jint AndroidOsParcel_get_VAL_NULL(void);
#define AndroidOsParcel_VAL_NULL -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_NULL, jint)

inline jint AndroidOsParcel_get_VAL_STRING(void);
#define AndroidOsParcel_VAL_STRING 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_STRING, jint)

inline jint AndroidOsParcel_get_VAL_INTEGER(void);
#define AndroidOsParcel_VAL_INTEGER 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_INTEGER, jint)

inline jint AndroidOsParcel_get_VAL_MAP(void);
#define AndroidOsParcel_VAL_MAP 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_MAP, jint)

inline jint AndroidOsParcel_get_VAL_BUNDLE(void);
#define AndroidOsParcel_VAL_BUNDLE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_BUNDLE, jint)

inline jint AndroidOsParcel_get_VAL_PARCELABLE(void);
#define AndroidOsParcel_VAL_PARCELABLE 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_PARCELABLE, jint)

inline jint AndroidOsParcel_get_VAL_SHORT(void);
#define AndroidOsParcel_VAL_SHORT 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_SHORT, jint)

inline jint AndroidOsParcel_get_VAL_LONG(void);
#define AndroidOsParcel_VAL_LONG 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_LONG, jint)

inline jint AndroidOsParcel_get_VAL_FLOAT(void);
#define AndroidOsParcel_VAL_FLOAT 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_FLOAT, jint)

inline jint AndroidOsParcel_get_VAL_DOUBLE(void);
#define AndroidOsParcel_VAL_DOUBLE 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_DOUBLE, jint)

inline jint AndroidOsParcel_get_VAL_BOOLEAN(void);
#define AndroidOsParcel_VAL_BOOLEAN 9
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_BOOLEAN, jint)

inline jint AndroidOsParcel_get_VAL_CHARSEQUENCE(void);
#define AndroidOsParcel_VAL_CHARSEQUENCE 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_CHARSEQUENCE, jint)

inline jint AndroidOsParcel_get_VAL_LIST(void);
#define AndroidOsParcel_VAL_LIST 11
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_LIST, jint)

inline jint AndroidOsParcel_get_VAL_SPARSEARRAY(void);
#define AndroidOsParcel_VAL_SPARSEARRAY 12
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_SPARSEARRAY, jint)

inline jint AndroidOsParcel_get_VAL_BYTEARRAY(void);
#define AndroidOsParcel_VAL_BYTEARRAY 13
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_BYTEARRAY, jint)

inline jint AndroidOsParcel_get_VAL_STRINGARRAY(void);
#define AndroidOsParcel_VAL_STRINGARRAY 14
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_STRINGARRAY, jint)

inline jint AndroidOsParcel_get_VAL_IBINDER(void);
#define AndroidOsParcel_VAL_IBINDER 15
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_IBINDER, jint)

inline jint AndroidOsParcel_get_VAL_PARCELABLEARRAY(void);
#define AndroidOsParcel_VAL_PARCELABLEARRAY 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_PARCELABLEARRAY, jint)

inline jint AndroidOsParcel_get_VAL_OBJECTARRAY(void);
#define AndroidOsParcel_VAL_OBJECTARRAY 17
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_OBJECTARRAY, jint)

inline jint AndroidOsParcel_get_VAL_INTARRAY(void);
#define AndroidOsParcel_VAL_INTARRAY 18
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_INTARRAY, jint)

inline jint AndroidOsParcel_get_VAL_LONGARRAY(void);
#define AndroidOsParcel_VAL_LONGARRAY 19
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_LONGARRAY, jint)

inline jint AndroidOsParcel_get_VAL_BYTE(void);
#define AndroidOsParcel_VAL_BYTE 20
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_BYTE, jint)

inline jint AndroidOsParcel_get_VAL_SERIALIZABLE(void);
#define AndroidOsParcel_VAL_SERIALIZABLE 21
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_SERIALIZABLE, jint)

inline jint AndroidOsParcel_get_VAL_SPARSEBOOLEANARRAY(void);
#define AndroidOsParcel_VAL_SPARSEBOOLEANARRAY 22
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_SPARSEBOOLEANARRAY, jint)

inline jint AndroidOsParcel_get_VAL_BOOLEANARRAY(void);
#define AndroidOsParcel_VAL_BOOLEANARRAY 23
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_BOOLEANARRAY, jint)

inline jint AndroidOsParcel_get_VAL_CHARSEQUENCEARRAY(void);
#define AndroidOsParcel_VAL_CHARSEQUENCEARRAY 24
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, VAL_CHARSEQUENCEARRAY, jint)

inline jint AndroidOsParcel_get_EX_SECURITY(void);
#define AndroidOsParcel_EX_SECURITY -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, EX_SECURITY, jint)

inline jint AndroidOsParcel_get_EX_BAD_PARCELABLE(void);
#define AndroidOsParcel_EX_BAD_PARCELABLE -2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, EX_BAD_PARCELABLE, jint)

inline jint AndroidOsParcel_get_EX_ILLEGAL_ARGUMENT(void);
#define AndroidOsParcel_EX_ILLEGAL_ARGUMENT -3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, EX_ILLEGAL_ARGUMENT, jint)

inline jint AndroidOsParcel_get_EX_NULL_POINTER(void);
#define AndroidOsParcel_EX_NULL_POINTER -4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, EX_NULL_POINTER, jint)

inline jint AndroidOsParcel_get_EX_ILLEGAL_STATE(void);
#define AndroidOsParcel_EX_ILLEGAL_STATE -5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, EX_ILLEGAL_STATE, jint)

inline jint AndroidOsParcel_get_EX_HAS_REPLY_HEADER(void);
#define AndroidOsParcel_EX_HAS_REPLY_HEADER -128
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsParcel, EX_HAS_REPLY_HEADER, jint)

inline JavaUtilHashMap *AndroidOsParcel_get_mCreators(void);
static JavaUtilHashMap *AndroidOsParcel_mCreators;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsParcel, mCreators, JavaUtilHashMap *)

__attribute__((unused)) static jint AndroidOsParcel_dataAvail(AndroidOsParcel *self);

__attribute__((unused)) static jint AndroidOsParcel_dataPosition(AndroidOsParcel *self);

__attribute__((unused)) static void AndroidOsParcel_writeByteArrayWithByteArray_(AndroidOsParcel *self, IOSByteArray *b);

__attribute__((unused)) static void AndroidOsParcel_writeByteArrayWithByteArray_withInt_withInt_(AndroidOsParcel *self, IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static void AndroidOsParcel_writeNativeWithByteArray_withInt_withInt_(AndroidOsParcel *self, IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static void AndroidOsParcel_writeIntWithInt_(AndroidOsParcel *self, jint val);

__attribute__((unused)) static void AndroidOsParcel_writeLongWithLong_(AndroidOsParcel *self, jlong val);

__attribute__((unused)) static void AndroidOsParcel_writeFloatWithFloat_(AndroidOsParcel *self, jfloat val);

__attribute__((unused)) static void AndroidOsParcel_writeStringWithNSString_(AndroidOsParcel *self, NSString *val);

__attribute__((unused)) static void AndroidOsParcel_writeStrongBinderWithAndroidOsIBinder_(AndroidOsParcel *self, id<AndroidOsIBinder> val);

__attribute__((unused)) static void AndroidOsParcel_writeByteWithByte_(AndroidOsParcel *self, jbyte val);

__attribute__((unused)) static IOSBooleanArray *AndroidOsParcel_createBooleanArray(AndroidOsParcel *self);

__attribute__((unused)) static IOSIntArray *AndroidOsParcel_createIntArray(AndroidOsParcel *self);

__attribute__((unused)) static IOSLongArray *AndroidOsParcel_createLongArray(AndroidOsParcel *self);

__attribute__((unused)) static void AndroidOsParcel_writeValueWithId_(AndroidOsParcel *self, id v);

__attribute__((unused)) static void AndroidOsParcel_writeParcelableWithAndroidOsParcelable_withInt_(AndroidOsParcel *self, id<AndroidOsParcelable> p, jint parcelableFlags);

__attribute__((unused)) static jint AndroidOsParcel_readExceptionCode(AndroidOsParcel *self);

__attribute__((unused)) static void AndroidOsParcel_readExceptionWithInt_withNSString_(AndroidOsParcel *self, jint code, NSString *msg);

__attribute__((unused)) static jint AndroidOsParcel_readInt(AndroidOsParcel *self);

__attribute__((unused)) static jlong AndroidOsParcel_readLong(AndroidOsParcel *self);

__attribute__((unused)) static jfloat AndroidOsParcel_readFloat(AndroidOsParcel *self);

__attribute__((unused)) static jdouble AndroidOsParcel_readDouble(AndroidOsParcel *self);

__attribute__((unused)) static NSString *AndroidOsParcel_readString(AndroidOsParcel *self);

__attribute__((unused)) static id<JavaLangCharSequence> AndroidOsParcel_readCharSequence(AndroidOsParcel *self);

__attribute__((unused)) static id<AndroidOsIBinder> AndroidOsParcel_readStrongBinder(AndroidOsParcel *self);

__attribute__((unused)) static JavaIoFileDescriptor *AndroidOsParcel_internalReadFileDescriptor(AndroidOsParcel *self);

__attribute__((unused)) static jbyte AndroidOsParcel_readByte(AndroidOsParcel *self);

__attribute__((unused)) static JavaUtilHashMap *AndroidOsParcel_readHashMapWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static AndroidOsBundle *AndroidOsParcel_readBundleWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static IOSByteArray *AndroidOsParcel_createByteArray(AndroidOsParcel *self);

__attribute__((unused)) static IOSObjectArray *AndroidOsParcel_readStringArray(AndroidOsParcel *self);

__attribute__((unused)) static IOSObjectArray *AndroidOsParcel_readCharSequenceArray(AndroidOsParcel *self);

__attribute__((unused)) static JavaUtilArrayList *AndroidOsParcel_readArrayListWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static IOSObjectArray *AndroidOsParcel_readArrayWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static AndroidUtilSparseArray *AndroidOsParcel_readSparseArrayWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static AndroidUtilSparseBooleanArray *AndroidOsParcel_readSparseBooleanArray(AndroidOsParcel *self);

__attribute__((unused)) static IOSObjectArray *AndroidOsParcel_createTypedArrayWithAndroidOsParcelable_Creator_(AndroidOsParcel *self, id<AndroidOsParcelable_Creator> c);

__attribute__((unused)) static id AndroidOsParcel_readValueWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static id<AndroidOsParcelable> AndroidOsParcel_readParcelableWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static IOSObjectArray *AndroidOsParcel_readParcelableArrayWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader);

__attribute__((unused)) static id<JavaIoSerializable> AndroidOsParcel_readSerializable(AndroidOsParcel *self);

__attribute__((unused)) static void AndroidOsParcel_initWithInt_(AndroidOsParcel *self, jint obj);

__attribute__((unused)) static AndroidOsParcel *new_AndroidOsParcel_initWithInt_(jint obj) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsParcel *create_AndroidOsParcel_initWithInt_(jint obj);

__attribute__((unused)) static void AndroidOsParcel_freeBuffer(AndroidOsParcel *self);

__attribute__((unused)) static void AndroidOsParcel_init__WithInt_(AndroidOsParcel *self, jint obj);

__attribute__((unused)) static void AndroidOsParcel_destroy(AndroidOsParcel *self);

__attribute__((unused)) static void AndroidOsParcel_readListInternalWithJavaUtilList_withInt_withJavaLangClassLoader_(AndroidOsParcel *self, id<JavaUtilList> outVal, jint N, JavaLangClassLoader *loader);

__attribute__((unused)) static void AndroidOsParcel_readArrayInternalWithNSObjectArray_withInt_withJavaLangClassLoader_(AndroidOsParcel *self, IOSObjectArray *outVal, jint N, JavaLangClassLoader *loader);

__attribute__((unused)) static void AndroidOsParcel_readSparseArrayInternalWithAndroidUtilSparseArray_withInt_withJavaLangClassLoader_(AndroidOsParcel *self, AndroidUtilSparseArray *outVal, jint N, JavaLangClassLoader *loader);

__attribute__((unused)) static void AndroidOsParcel_readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray_withInt_(AndroidOsParcel *self, AndroidUtilSparseBooleanArray *outVal, jint N);

__attribute__((unused)) static IOSObjectArray *AndroidOsParcel__Annotations$0(void);

@interface AndroidOsParcel_1 : NSObject < AndroidOsParcelable_Creator >

- (instancetype __nonnull)init;

- (NSString *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)source;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsParcel_1)

__attribute__((unused)) static void AndroidOsParcel_1_init(AndroidOsParcel_1 *self);

__attribute__((unused)) static AndroidOsParcel_1 *new_AndroidOsParcel_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsParcel_1 *create_AndroidOsParcel_1_init(void);

@interface AndroidOsParcelFileDescriptor () {
 @public
  JavaIoFileDescriptor *mFileDescriptor_;
  jboolean mClosed_;
  AndroidOsParcelFileDescriptor *mParcelDescriptor_;
}

+ (JavaIoFileDescriptor *)getFileDescriptorFromSocketWithJavaNetSocket:(JavaNetSocket *)socket;

+ (jint)createPipeNativeWithJavaIoFileDescriptorArray:(IOSObjectArray *)outFds;

@end

J2OBJC_FIELD_SETTER(AndroidOsParcelFileDescriptor, mFileDescriptor_, JavaIoFileDescriptor *)
J2OBJC_FIELD_SETTER(AndroidOsParcelFileDescriptor, mParcelDescriptor_, AndroidOsParcelFileDescriptor *)

__attribute__((unused)) static JavaIoFileDescriptor *AndroidOsParcelFileDescriptor_getFileDescriptorFromSocketWithJavaNetSocket_(JavaNetSocket *socket);

__attribute__((unused)) static jint AndroidOsParcelFileDescriptor_createPipeNativeWithJavaIoFileDescriptorArray_(IOSObjectArray *outFds);

@interface AndroidOsParcelFileDescriptor_AutoCloseInputStream () {
 @public
  AndroidOsParcelFileDescriptor *mFd_;
}

@end

J2OBJC_FIELD_SETTER(AndroidOsParcelFileDescriptor_AutoCloseInputStream, mFd_, AndroidOsParcelFileDescriptor *)

@interface AndroidOsParcelFileDescriptor_AutoCloseOutputStream () {
 @public
  AndroidOsParcelFileDescriptor *mFd_;
}

@end

J2OBJC_FIELD_SETTER(AndroidOsParcelFileDescriptor_AutoCloseOutputStream, mFd_, AndroidOsParcelFileDescriptor *)

@interface AndroidOsParcelFileDescriptor_1 : NSObject < AndroidOsParcelable_Creator >

- (instancetype __nonnull)init;

- (AndroidOsParcelFileDescriptor *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)inArg;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidOsParcelFileDescriptor_1)

__attribute__((unused)) static void AndroidOsParcelFileDescriptor_1_init(AndroidOsParcelFileDescriptor_1 *self);

__attribute__((unused)) static AndroidOsParcelFileDescriptor_1 *new_AndroidOsParcelFileDescriptor_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsParcelFileDescriptor_1 *create_AndroidOsParcelFileDescriptor_1_init(void);

@interface AndroidOsTrace ()

+ (jlong)nativeGetEnabledTags;

+ (void)nativeTraceCounterWithLong:(jlong)tag
                      withNSString:(NSString *)name
                           withInt:(jint)value;

+ (void)nativeTraceBeginWithLong:(jlong)tag
                    withNSString:(NSString *)name;

+ (void)nativeTraceEndWithLong:(jlong)tag;

+ (void)nativeAsyncTraceBeginWithLong:(jlong)tag
                         withNSString:(NSString *)name
                              withInt:(jint)cookie;

+ (void)nativeAsyncTraceEndWithLong:(jlong)tag
                       withNSString:(NSString *)name
                            withInt:(jint)cookie;

+ (void)nativeSetAppTracingAllowedWithBoolean:(jboolean)allowed;

+ (void)nativeSetTracingEnabledWithBoolean:(jboolean)allowed;

- (instancetype __nonnull)init;

+ (jlong)cacheEnabledTags;

@end

inline NSString *AndroidOsTrace_get_TAG(void);
static NSString *AndroidOsTrace_TAG = @"Trace";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsTrace, TAG, NSString *)

inline jlong AndroidOsTrace_get_TRACE_TAG_NOT_READY(void);
#define AndroidOsTrace_TRACE_TAG_NOT_READY ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, TRACE_TAG_NOT_READY, jlong)

inline jint AndroidOsTrace_get_MAX_SECTION_NAME_LEN(void);
#define AndroidOsTrace_MAX_SECTION_NAME_LEN 127
J2OBJC_STATIC_FIELD_CONSTANT(AndroidOsTrace, MAX_SECTION_NAME_LEN, jint)

inline jlong AndroidOsTrace_get_sEnabledTags(void);
inline jlong AndroidOsTrace_set_sEnabledTags(jlong value);
static volatile_jlong AndroidOsTrace_sEnabledTags = -0x7fffffffffffffffLL - 1;
J2OBJC_STATIC_FIELD_PRIMITIVE_VOLATILE(AndroidOsTrace, sEnabledTags, jlong)

__attribute__((unused)) static jlong AndroidOsTrace_nativeGetEnabledTags(void);

__attribute__((unused)) static void AndroidOsTrace_nativeTraceCounterWithLong_withNSString_withInt_(jlong tag, NSString *name, jint value);

__attribute__((unused)) static void AndroidOsTrace_nativeTraceBeginWithLong_withNSString_(jlong tag, NSString *name);

__attribute__((unused)) static void AndroidOsTrace_nativeTraceEndWithLong_(jlong tag);

__attribute__((unused)) static void AndroidOsTrace_nativeAsyncTraceBeginWithLong_withNSString_withInt_(jlong tag, NSString *name, jint cookie);

__attribute__((unused)) static void AndroidOsTrace_nativeAsyncTraceEndWithLong_withNSString_withInt_(jlong tag, NSString *name, jint cookie);

__attribute__((unused)) static void AndroidOsTrace_nativeSetAppTracingAllowedWithBoolean_(jboolean allowed);

__attribute__((unused)) static void AndroidOsTrace_nativeSetTracingEnabledWithBoolean_(jboolean allowed);

__attribute__((unused)) static void AndroidOsTrace_init(AndroidOsTrace *self);

__attribute__((unused)) static AndroidOsTrace *new_AndroidOsTrace_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidOsTrace *create_AndroidOsTrace_init(void);

__attribute__((unused)) static jlong AndroidOsTrace_cacheEnabledTags(void);

@interface AndroidSupportAnnotationAnyThread : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationAnyThread__Annotations$0(void);

@interface AndroidSupportAnnotationCallSuper : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationCallSuper__Annotations$0(void);

@interface AndroidSupportAnnotationCheckResult : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationCheckResult__Annotations$0(void);

@interface AndroidSupportAnnotationIntDef : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationIntDef__Annotations$0(void);

@interface AndroidSupportAnnotationIntRange : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationIntRange__Annotations$0(void);

@interface AndroidSupportAnnotationMainThread : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationMainThread__Annotations$0(void);

@interface AndroidSupportAnnotationNonNull : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationNonNull__Annotations$0(void);

@interface AndroidSupportAnnotationNullable : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationNullable__Annotations$0(void);

@interface AndroidSupportAnnotationRequiresApi : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationRequiresApi__Annotations$0(void);

@interface AndroidSupportAnnotationRestrictTo : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationRestrictTo__Annotations$0(void);

__attribute__((unused)) static void AndroidSupportAnnotationRestrictTo_Scope_initWithNSString_withInt_(AndroidSupportAnnotationRestrictTo_Scope *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationRestrictTo_Scope__Annotations$0(void);

@interface AndroidSupportAnnotationVisibleForTesting : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationVisibleForTesting__Annotations$0(void);

@interface AndroidSupportAnnotationWorkerThread : NSObject

@end

__attribute__((unused)) static IOSObjectArray *AndroidSupportAnnotationWorkerThread__Annotations$0(void);

inline IOSShortArray *AndroidTelephonyJapanesePhoneNumberFormatter_get_FORMAT_MAP(void);
inline IOSShortArray *AndroidTelephonyJapanesePhoneNumberFormatter_set_FORMAT_MAP(IOSShortArray *value);
static IOSShortArray *AndroidTelephonyJapanesePhoneNumberFormatter_FORMAT_MAP;
J2OBJC_STATIC_FIELD_OBJ(AndroidTelephonyJapanesePhoneNumberFormatter, FORMAT_MAP, IOSShortArray *)

@interface AndroidTelephonyPhoneNumberUtils ()

+ (jboolean)isSeparatorWithChar:(jchar)ch;

+ (jint)minPositiveWithInt:(jint)a
                   withInt:(jint)b;

+ (void)logWithNSString:(NSString *)msg;

+ (jint)indexOfLastNetworkCharWithNSString:(NSString *)a;

+ (NSString *)internalGetStrippedReversedWithNSString:(NSString *)np
                                              withInt:(jint)numDigits;

+ (void)internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                          withByteArray:(IOSByteArray *)bytes
                                                                withInt:(jint)offset
                                                                withInt:(jint)length;

+ (jchar)bcdToCharWithByte:(jbyte)b;

+ (jint)charToBCDWithChar:(jchar)c;

+ (jboolean)isDialableWithNSString:(NSString *)address;

+ (jboolean)isNonSeparatorWithNSString:(NSString *)address;

+ (IOSByteArray *)numberToCalledPartyBCDHelperWithNSString:(NSString *)number
                                               withBoolean:(jboolean)includeLength;

+ (jboolean)isTwoToNineWithChar:(jchar)c;

+ (jint)getFormatTypeFromCountryCodeWithNSString:(NSString *)country;

+ (jboolean)isNanpWithNSString:(NSString *)dialStr;

+ (jboolean)isOneNanpWithNSString:(NSString *)dialStr;

+ (jint)findDialableIndexFromPostDialStrWithNSString:(NSString *)postDialStr;

+ (NSString *)appendPwCharBackToOrigDialStrWithInt:(jint)dialableIndex
                                      withNSString:(NSString *)origStr
                                      withNSString:(NSString *)dialStr;

+ (jboolean)matchIntlPrefixWithNSString:(NSString *)a
                                withInt:(jint)len;

+ (jboolean)matchIntlPrefixAndCCWithNSString:(NSString *)a
                                     withInt:(jint)len;

+ (jboolean)matchTrunkPrefixWithNSString:(NSString *)a
                                 withInt:(jint)len;

+ (jboolean)isCountryCallingCodeWithInt:(jint)countryCallingCodeCandidate;

+ (jint)tryGetISODigitWithChar:(jchar)ch;

+ (AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *)tryGetCountryCallingCodeAndNewIndexWithNSString:(NSString *)str
                                                                                                        withBoolean:(jboolean)acceptThailandCase;

+ (jint)tryGetTrunkPrefixOmittedIndexWithNSString:(NSString *)str
                                          withInt:(jint)currentIndex;

+ (jboolean)checkPrefixIsIgnorableWithNSString:(NSString *)str
                                       withInt:(jint)forwardIndex
                                       withInt:(jint)backwardIndex;

@end

inline jboolean AndroidTelephonyPhoneNumberUtils_get_DBG(void);
#define AndroidTelephonyPhoneNumberUtils_DBG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, DBG, jboolean)

inline JavaUtilRegexPattern *AndroidTelephonyPhoneNumberUtils_get_GLOBAL_PHONE_NUMBER_PATTERN(void);
static JavaUtilRegexPattern *AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, GLOBAL_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern *)

inline IOSObjectArray *AndroidTelephonyPhoneNumberUtils_get_NANP_COUNTRIES(void);
static IOSObjectArray *AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, NANP_COUNTRIES, IOSObjectArray *)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_DIGIT(void);
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_DIGIT, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_PLUS(void);
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_PLUS, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_ONE(void);
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_ONE, jint)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_STATE_DASH(void);
#define AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_STATE_DASH, jint)

inline AndroidUtilSparseIntArray *AndroidTelephonyPhoneNumberUtils_get_KEYPAD_MAP(void);
static AndroidUtilSparseIntArray *AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, KEYPAD_MAP, AndroidUtilSparseIntArray *)

inline jchar AndroidTelephonyPhoneNumberUtils_get_PLUS_SIGN_CHAR(void);
#define AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_CHAR '+'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, PLUS_SIGN_CHAR, jchar)

inline NSString *AndroidTelephonyPhoneNumberUtils_get_PLUS_SIGN_STRING(void);
static NSString *AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_STRING = @"+";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, PLUS_SIGN_STRING, NSString *)

inline NSString *AndroidTelephonyPhoneNumberUtils_get_NANP_IDP_STRING(void);
static NSString *AndroidTelephonyPhoneNumberUtils_NANP_IDP_STRING = @"011";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, NANP_IDP_STRING, NSString *)

inline jint AndroidTelephonyPhoneNumberUtils_get_NANP_LENGTH(void);
#define AndroidTelephonyPhoneNumberUtils_NANP_LENGTH 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTelephonyPhoneNumberUtils, NANP_LENGTH, jint)

inline IOSBooleanArray *AndroidTelephonyPhoneNumberUtils_get_COUNTLY_CALLING_CALL(void);
static IOSBooleanArray *AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidTelephonyPhoneNumberUtils, COUNTLY_CALLING_CALL, IOSBooleanArray *)

inline jint AndroidTelephonyPhoneNumberUtils_get_CCC_LENGTH(void);
static jint AndroidTelephonyPhoneNumberUtils_CCC_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(AndroidTelephonyPhoneNumberUtils, CCC_LENGTH, jint)

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(jchar ch);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(jint a, jint b);

__attribute__((unused)) static void AndroidTelephonyPhoneNumberUtils_logWithNSString_(NSString *msg);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(NSString *a);

__attribute__((unused)) static NSString *AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(NSString *np, jint numDigits);

__attribute__((unused)) static void AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(JavaLangStringBuilder *sb, IOSByteArray *bytes, jint offset, jint length);

__attribute__((unused)) static jchar AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(jbyte b);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(jchar c);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(NSString *address);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithNSString_(NSString *address);

__attribute__((unused)) static IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(NSString *number, jboolean includeLength);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_(jchar c);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(NSString *country);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(NSString *dialStr);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isOneNanpWithNSString_(NSString *dialStr);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_findDialableIndexFromPostDialStrWithNSString_(NSString *postDialStr);

__attribute__((unused)) static NSString *AndroidTelephonyPhoneNumberUtils_appendPwCharBackToOrigDialStrWithInt_withNSString_withNSString_(jint dialableIndex, NSString *origStr, NSString *dialStr);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(NSString *a, jint len);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(NSString *a, jint len);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(NSString *a, jint len);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(jint countryCallingCodeCandidate);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(jchar ch);

__attribute__((unused)) static AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(NSString *str, jboolean acceptThailandCase);

__attribute__((unused)) static jint AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(NSString *str, jint currentIndex);

__attribute__((unused)) static jboolean AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(NSString *str, jint forwardIndex, jint backwardIndex);

@interface AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex : NSObject {
 @public
  jint countryCallingCode_;
  jint newIndex_;
}

- (instancetype __nonnull)initWithInt:(jint)countryCode
                              withInt:(jint)newIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex)

__attribute__((unused)) static void AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *self, jint countryCode, jint newIndex);

__attribute__((unused)) static AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *new_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex)

@interface AndroidUtilEmptyArray ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void AndroidUtilEmptyArray_init(AndroidUtilEmptyArray *self);

__attribute__((unused)) static AndroidUtilEmptyArray *new_AndroidUtilEmptyArray_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidUtilEmptyArray *create_AndroidUtilEmptyArray_init(void);

@interface AndroidUtilJsonReader () {
 @public
  LibcoreInternalStringPool *stringPool_;
  JavaIoReader *in_;
  jboolean lenient_;
  IOSCharArray *buffer_;
  jint pos_;
  jint limit_;
  jint bufferStartLine_;
  jint bufferStartColumn_;
  id<JavaUtilList> stack_;
  AndroidUtilJsonToken *token_;
  NSString *name_;
  NSString *value_;
  jint valuePos_;
  jint valueLength_;
  jboolean skipping_;
}

- (void)expectWithAndroidUtilJsonToken:(AndroidUtilJsonToken *)expected;

- (AndroidUtilJsonToken *)advance;

- (AndroidUtilJsonScope *)peekStack;

- (AndroidUtilJsonScope *)pop;

- (void)pushWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)newTop;

- (void)replaceTopWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)newTop;

- (AndroidUtilJsonToken *)nextInArrayWithBoolean:(jboolean)firstElement;

- (AndroidUtilJsonToken *)nextInObjectWithBoolean:(jboolean)firstElement;

- (AndroidUtilJsonToken *)objectValue;

- (AndroidUtilJsonToken *)nextValue;

- (jboolean)fillBufferWithInt:(jint)minimum;

- (jint)getLineNumber;

- (jint)getColumnNumber;

- (jint)nextNonWhitespace;

- (void)checkLenient;

- (void)skipToEndOfLine;

- (jboolean)skipToWithNSString:(NSString *)toFind;

- (NSString *)nextStringWithChar:(jchar)quote;

- (NSString *)nextLiteralWithBoolean:(jboolean)assignOffsetsOnly;

- (jchar)readEscapeCharacter;

- (AndroidUtilJsonToken *)readLiteral;

- (AndroidUtilJsonToken *)decodeLiteral;

- (AndroidUtilJsonToken *)decodeNumberWithCharArray:(IOSCharArray *)chars
                                            withInt:(jint)offset
                                            withInt:(jint)length;

- (JavaIoIOException *)syntaxErrorWithNSString:(NSString *)message;

- (id<JavaLangCharSequence>)getSnippet;

@end

J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, stringPool_, LibcoreInternalStringPool *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, in_, JavaIoReader *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, buffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, stack_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, token_, AndroidUtilJsonToken *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, name_, NSString *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonReader, value_, NSString *)

inline NSString *AndroidUtilJsonReader_get_TRUE(void);
static NSString *AndroidUtilJsonReader_TRUE = @"true";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilJsonReader, TRUE, NSString *)

inline NSString *AndroidUtilJsonReader_get_FALSE(void);
static NSString *AndroidUtilJsonReader_FALSE = @"false";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilJsonReader, FALSE, NSString *)

__attribute__((unused)) static void AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(AndroidUtilJsonReader *self, AndroidUtilJsonToken *expected);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_advance(AndroidUtilJsonReader *self);

__attribute__((unused)) static AndroidUtilJsonScope *AndroidUtilJsonReader_peekStack(AndroidUtilJsonReader *self);

__attribute__((unused)) static AndroidUtilJsonScope *AndroidUtilJsonReader_pop(AndroidUtilJsonReader *self);

__attribute__((unused)) static void AndroidUtilJsonReader_pushWithAndroidUtilJsonScope_(AndroidUtilJsonReader *self, AndroidUtilJsonScope *newTop);

__attribute__((unused)) static void AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(AndroidUtilJsonReader *self, AndroidUtilJsonScope *newTop);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_nextInArrayWithBoolean_(AndroidUtilJsonReader *self, jboolean firstElement);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_nextInObjectWithBoolean_(AndroidUtilJsonReader *self, jboolean firstElement);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_objectValue(AndroidUtilJsonReader *self);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_nextValue(AndroidUtilJsonReader *self);

__attribute__((unused)) static jboolean AndroidUtilJsonReader_fillBufferWithInt_(AndroidUtilJsonReader *self, jint minimum);

__attribute__((unused)) static jint AndroidUtilJsonReader_getLineNumber(AndroidUtilJsonReader *self);

__attribute__((unused)) static jint AndroidUtilJsonReader_getColumnNumber(AndroidUtilJsonReader *self);

__attribute__((unused)) static jint AndroidUtilJsonReader_nextNonWhitespace(AndroidUtilJsonReader *self);

__attribute__((unused)) static void AndroidUtilJsonReader_checkLenient(AndroidUtilJsonReader *self);

__attribute__((unused)) static void AndroidUtilJsonReader_skipToEndOfLine(AndroidUtilJsonReader *self);

__attribute__((unused)) static jboolean AndroidUtilJsonReader_skipToWithNSString_(AndroidUtilJsonReader *self, NSString *toFind);

__attribute__((unused)) static NSString *AndroidUtilJsonReader_nextStringWithChar_(AndroidUtilJsonReader *self, jchar quote);

__attribute__((unused)) static NSString *AndroidUtilJsonReader_nextLiteralWithBoolean_(AndroidUtilJsonReader *self, jboolean assignOffsetsOnly);

__attribute__((unused)) static jchar AndroidUtilJsonReader_readEscapeCharacter(AndroidUtilJsonReader *self);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_readLiteral(AndroidUtilJsonReader *self);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_decodeLiteral(AndroidUtilJsonReader *self);

__attribute__((unused)) static AndroidUtilJsonToken *AndroidUtilJsonReader_decodeNumberWithCharArray_withInt_withInt_(AndroidUtilJsonReader *self, IOSCharArray *chars, jint offset, jint length);

__attribute__((unused)) static JavaIoIOException *AndroidUtilJsonReader_syntaxErrorWithNSString_(AndroidUtilJsonReader *self, NSString *message);

__attribute__((unused)) static id<JavaLangCharSequence> AndroidUtilJsonReader_getSnippet(AndroidUtilJsonReader *self);

__attribute__((unused)) static void AndroidUtilJsonScope_initWithNSString_withInt_(AndroidUtilJsonScope *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void AndroidUtilJsonToken_initWithNSString_withInt_(AndroidUtilJsonToken *self, NSString *__name, jint __ordinal);

@interface AndroidUtilJsonWriter () {
 @public
  JavaIoWriter *out_;
  id<JavaUtilList> stack_;
  NSString *indent_;
  NSString *separator_;
  jboolean lenient_;
}

- (AndroidUtilJsonWriter *)openWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)empty
                                           withNSString:(NSString *)openBracket;

- (AndroidUtilJsonWriter *)closeWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)empty
                                withAndroidUtilJsonScope:(AndroidUtilJsonScope *)nonempty
                                            withNSString:(NSString *)closeBracket;

- (AndroidUtilJsonScope *)peek;

- (void)replaceTopWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)topOfStack;

- (void)stringWithNSString:(NSString *)value;

- (void)newline OBJC_METHOD_FAMILY_NONE;

- (void)beforeName;

- (void)beforeValueWithBoolean:(jboolean)root;

@end

J2OBJC_FIELD_SETTER(AndroidUtilJsonWriter, out_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonWriter, stack_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AndroidUtilJsonWriter, indent_, NSString *)
J2OBJC_FIELD_SETTER(AndroidUtilJsonWriter, separator_, NSString *)

__attribute__((unused)) static AndroidUtilJsonWriter *AndroidUtilJsonWriter_openWithAndroidUtilJsonScope_withNSString_(AndroidUtilJsonWriter *self, AndroidUtilJsonScope *empty, NSString *openBracket);

__attribute__((unused)) static AndroidUtilJsonWriter *AndroidUtilJsonWriter_closeWithAndroidUtilJsonScope_withAndroidUtilJsonScope_withNSString_(AndroidUtilJsonWriter *self, AndroidUtilJsonScope *empty, AndroidUtilJsonScope *nonempty, NSString *closeBracket);

__attribute__((unused)) static AndroidUtilJsonScope *AndroidUtilJsonWriter_peek(AndroidUtilJsonWriter *self);

__attribute__((unused)) static void AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(AndroidUtilJsonWriter *self, AndroidUtilJsonScope *topOfStack);

__attribute__((unused)) static void AndroidUtilJsonWriter_stringWithNSString_(AndroidUtilJsonWriter *self, NSString *value);

__attribute__((unused)) static void AndroidUtilJsonWriter_newline(AndroidUtilJsonWriter *self);

__attribute__((unused)) static void AndroidUtilJsonWriter_beforeName(AndroidUtilJsonWriter *self);

__attribute__((unused)) static void AndroidUtilJsonWriter_beforeValueWithBoolean_(AndroidUtilJsonWriter *self, jboolean root);

@interface AndroidUtilLongSparseArray () {
 @public
  jboolean mGarbage_;
  IOSLongArray *mKeys_;
  IOSObjectArray *mValues_;
  jint mSize_;
}

- (void)gc;

@end

J2OBJC_FIELD_SETTER(AndroidUtilLongSparseArray, mKeys_, IOSLongArray *)
J2OBJC_FIELD_SETTER(AndroidUtilLongSparseArray, mValues_, IOSObjectArray *)

inline id AndroidUtilLongSparseArray_get_DELETED(void);
static id AndroidUtilLongSparseArray_DELETED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilLongSparseArray, DELETED, id)

__attribute__((unused)) static void AndroidUtilLongSparseArray_gc(AndroidUtilLongSparseArray *self);

inline jlong AndroidUtilMalformedJsonException_get_serialVersionUID(void);
#define AndroidUtilMalformedJsonException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilMalformedJsonException, serialVersionUID, jlong)

@interface AndroidUtilPatterns ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void AndroidUtilPatterns_init(AndroidUtilPatterns *self);

__attribute__((unused)) static AndroidUtilPatterns *new_AndroidUtilPatterns_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidUtilPatterns *create_AndroidUtilPatterns_init(void);

@interface AndroidUtilPrefixPrinter () {
 @public
  id<AndroidUtilPrinter> mPrinter_;
  NSString *mPrefix_;
}

- (instancetype __nonnull)initWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                                        withNSString:(NSString *)prefix;

@end

J2OBJC_FIELD_SETTER(AndroidUtilPrefixPrinter, mPrinter_, id<AndroidUtilPrinter>)
J2OBJC_FIELD_SETTER(AndroidUtilPrefixPrinter, mPrefix_, NSString *)

__attribute__((unused)) static void AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(AndroidUtilPrefixPrinter *self, id<AndroidUtilPrinter> printer, NSString *prefix);

__attribute__((unused)) static AndroidUtilPrefixPrinter *new_AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(id<AndroidUtilPrinter> printer, NSString *prefix) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidUtilPrefixPrinter *create_AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(id<AndroidUtilPrinter> printer, NSString *prefix);

@interface AndroidUtilSize () {
 @public
  jint mWidth_;
  jint mHeight_;
}

+ (JavaLangNumberFormatException *)invalidSizeWithNSString:(NSString *)s;

@end

__attribute__((unused)) static JavaLangNumberFormatException *AndroidUtilSize_invalidSizeWithNSString_(NSString *s);

@interface AndroidUtilSizeF () {
 @public
  jfloat mWidth_;
  jfloat mHeight_;
}

+ (JavaLangNumberFormatException *)invalidSizeFWithNSString:(NSString *)s;

@end

__attribute__((unused)) static JavaLangNumberFormatException *AndroidUtilSizeF_invalidSizeFWithNSString_(NSString *s);

@interface AndroidUtilTimeUtils ()

+ (jint)accumFieldWithInt:(jint)amt
                  withInt:(jint)suffix
              withBoolean:(jboolean)always
                  withInt:(jint)zeropad;

+ (jint)printFieldLockedWithCharArray:(IOSCharArray *)formatStr
                              withInt:(jint)amt
                             withChar:(jchar)suffix
                              withInt:(jint)pos
                          withBoolean:(jboolean)always
                              withInt:(jint)zeropad;

+ (jint)formatDurationLockedWithLong:(jlong)duration
                             withInt:(jint)fieldLen;

@end

inline jint AndroidUtilTimeUtils_get_SECONDS_PER_MINUTE(void);
#define AndroidUtilTimeUtils_SECONDS_PER_MINUTE 60
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, SECONDS_PER_MINUTE, jint)

inline jint AndroidUtilTimeUtils_get_SECONDS_PER_HOUR(void);
#define AndroidUtilTimeUtils_SECONDS_PER_HOUR 3600
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, SECONDS_PER_HOUR, jint)

inline jint AndroidUtilTimeUtils_get_SECONDS_PER_DAY(void);
#define AndroidUtilTimeUtils_SECONDS_PER_DAY 86400
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, SECONDS_PER_DAY, jint)

inline id AndroidUtilTimeUtils_get_sFormatSync(void);
static id AndroidUtilTimeUtils_sFormatSync;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilTimeUtils, sFormatSync, id)

inline IOSCharArray *AndroidUtilTimeUtils_get_sFormatStr(void);
inline IOSCharArray *AndroidUtilTimeUtils_set_sFormatStr(IOSCharArray *value);
static IOSCharArray *AndroidUtilTimeUtils_sFormatStr;
J2OBJC_STATIC_FIELD_OBJ(AndroidUtilTimeUtils, sFormatStr, IOSCharArray *)

inline IOSCharArray *AndroidUtilTimeUtils_get_sTmpFormatStr(void);
inline IOSCharArray *AndroidUtilTimeUtils_set_sTmpFormatStr(IOSCharArray *value);
static IOSCharArray *AndroidUtilTimeUtils_sTmpFormatStr;
J2OBJC_STATIC_FIELD_OBJ(AndroidUtilTimeUtils, sTmpFormatStr, IOSCharArray *)

__attribute__((unused)) static jint AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(jint amt, jint suffix, jboolean always, jint zeropad);

__attribute__((unused)) static jint AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(IOSCharArray *formatStr, jint amt, jchar suffix, jint pos, jboolean always, jint zeropad);

__attribute__((unused)) static jint AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(jlong duration, jint fieldLen);

__attribute__((unused)) static void AndroidUtilXml_Encoding_initWithNSString_withNSString_withInt_(AndroidUtilXml_Encoding *self, NSString *expatName, NSString *__name, jint __ordinal);

@interface CoDopplAltUtilsArrayUtils ()

- (instancetype __nonnull)init;

@end

inline IOSObjectArray *CoDopplAltUtilsArrayUtils_get_EMPTY(void);
inline IOSObjectArray *CoDopplAltUtilsArrayUtils_set_EMPTY(IOSObjectArray *value);
static IOSObjectArray *CoDopplAltUtilsArrayUtils_EMPTY;
J2OBJC_STATIC_FIELD_OBJ(CoDopplAltUtilsArrayUtils, EMPTY, IOSObjectArray *)

inline jint CoDopplAltUtilsArrayUtils_get_CACHE_SIZE(void);
#define CoDopplAltUtilsArrayUtils_CACHE_SIZE 73
J2OBJC_STATIC_FIELD_CONSTANT(CoDopplAltUtilsArrayUtils, CACHE_SIZE, jint)

inline IOSObjectArray *CoDopplAltUtilsArrayUtils_get_sCache(void);
inline IOSObjectArray *CoDopplAltUtilsArrayUtils_set_sCache(IOSObjectArray *value);
static IOSObjectArray *CoDopplAltUtilsArrayUtils_sCache;
J2OBJC_STATIC_FIELD_OBJ(CoDopplAltUtilsArrayUtils, sCache, IOSObjectArray *)

__attribute__((unused)) static void CoDopplAltUtilsArrayUtils_init(CoDopplAltUtilsArrayUtils *self);

__attribute__((unused)) static CoDopplAltUtilsArrayUtils *new_CoDopplAltUtilsArrayUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoDopplAltUtilsArrayUtils *create_CoDopplAltUtilsArrayUtils_init(void);

@interface CoDopplAltUtilsEmptyArray ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void CoDopplAltUtilsEmptyArray_init(CoDopplAltUtilsEmptyArray *self);

__attribute__((unused)) static CoDopplAltUtilsEmptyArray *new_CoDopplAltUtilsEmptyArray_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoDopplAltUtilsEmptyArray *create_CoDopplAltUtilsEmptyArray_init(void);

@interface ComAndroidInternalUtilGrowingArrayUtils ()

- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void ComAndroidInternalUtilGrowingArrayUtils_init(ComAndroidInternalUtilGrowingArrayUtils *self);

__attribute__((unused)) static ComAndroidInternalUtilGrowingArrayUtils *new_ComAndroidInternalUtilGrowingArrayUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAndroidInternalUtilGrowingArrayUtils *create_ComAndroidInternalUtilGrowingArrayUtils_init(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationCheckForNull__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationCheckForSigned__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationCheckReturnValue__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationDetainted__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMatchesPattern__Annotations$0(void);

@interface JavaxAnnotationMetaTypeQualifierValidator : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaTypeQualifierValidator__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaTypeQualifierValidator__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationNonnegative__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationNonnull__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationNullable__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationOverridingMethodsMustInvokeSuper__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationParametersAreNonnullByDefault__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationParametersAreNullableByDefault__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationPropertyKey__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationRegEx__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationSigned__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationSyntax__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationTainted__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationUntainted__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationWillClose__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationWillCloseWhenClosed__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationWillNotClose__Annotations$0(void);

@interface JavaxAnnotationConcurrentGuardedBy : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationConcurrentGuardedBy__Annotations$0(void);

@interface JavaxAnnotationConcurrentImmutable : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationConcurrentImmutable__Annotations$0(void);

@interface JavaxAnnotationConcurrentNotThreadSafe : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationConcurrentNotThreadSafe__Annotations$0(void);

@interface JavaxAnnotationConcurrentThreadSafe : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationConcurrentThreadSafe__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaExclusive__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaExhaustive__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaTypeQualifier__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaTypeQualifierDefault__Annotations$0(void);

@interface JavaxAnnotationMetaTypeQualifierNickname : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMetaTypeQualifierNickname__Annotations$0(void);

__attribute__((unused)) static void JavaxAnnotationMetaWhen_initWithNSString_withInt_(JavaxAnnotationMetaWhen *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *JavaxInjectInject__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxInjectNamed__Annotations$0(void);

@interface JavaxInjectProvider : NSObject

@end

__attribute__((unused)) static IOSObjectArray *JavaxInjectQualifier__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxInjectScope__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *JavaxInjectSingleton__Annotations$0(void);

@implementation DopplRuntime

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  DopplRuntime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)start {
  DopplRuntime_start();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(start);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _DopplRuntime = { "DopplRuntime", NULL, NULL, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_DopplRuntime;
}

@end

void DopplRuntime_init(DopplRuntime *self) {
  NSObject_init(self);
}

DopplRuntime *new_DopplRuntime_init() {
  J2OBJC_NEW_IMPL(DopplRuntime, init)
}

DopplRuntime *create_DopplRuntime_init() {
  J2OBJC_CREATE_IMPL(DopplRuntime, init)
}

void DopplRuntime_start() {
  DopplRuntime_initialize();
  AndroidOsLooper_prepareMainLooper();
  AndroidDatabaseSqliteSQLiteGlobal_initStatics();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DopplRuntime)

@implementation AndroidAnnotationNonNull

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidAnnotationNonNull__Annotations$0 };
  static const J2ObjcClassInfo _AndroidAnnotationNonNull = { "NonNull", "android.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidAnnotationNonNull;
}

@end

IOSObjectArray *AndroidAnnotationNonNull__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidAnnotationNonNull)

@implementation AndroidAnnotationNullable

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidAnnotationNullable__Annotations$0 };
  static const J2ObjcClassInfo _AndroidAnnotationNullable = { "Nullable", "android.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidAnnotationNullable;
}

@end

IOSObjectArray *AndroidAnnotationNullable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidAnnotationNullable)

@implementation AndroidAnnotationSuppressLint

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidAnnotationSuppressLint__Annotations$0 };
  static const J2ObjcClassInfo _AndroidAnnotationSuppressLint = { "SuppressLint", "android.annotation", ptrTable, methods, NULL, 7, 0x2609, 1, 0, -1, -1, -1, -1, 0 };
  return &_AndroidAnnotationSuppressLint;
}

@end

IOSObjectArray *AndroidAnnotationSuppressLint__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE), JreLoadEnum(JavaLangAnnotationElementType, FIELD), JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, LOCAL_VARIABLE) } count:6 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidAnnotationSuppressLint)

@implementation AndroidAnnotationTargetApi

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidAnnotationTargetApi__Annotations$0 };
  static const J2ObjcClassInfo _AndroidAnnotationTargetApi = { "TargetApi", "android.annotation", ptrTable, methods, NULL, 7, 0x2609, 1, 0, -1, -1, -1, -1, 0 };
  return &_AndroidAnnotationTargetApi;
}

@end

IOSObjectArray *AndroidAnnotationTargetApi__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE), JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR) } count:3 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidAnnotationTargetApi)

@implementation AndroidContentContext

+ (jint)MODE_PRIVATE {
  return AndroidContentContext_MODE_PRIVATE;
}

+ (jint)MODE_WORLD_READABLE {
  return AndroidContentContext_MODE_WORLD_READABLE;
}

+ (jint)MODE_WORLD_WRITEABLE {
  return AndroidContentContext_MODE_WORLD_WRITEABLE;
}

+ (jint)MODE_APPEND {
  return AndroidContentContext_MODE_APPEND;
}

+ (jint)MODE_ENABLE_WRITE_AHEAD_LOGGING {
  return AndroidContentContext_MODE_ENABLE_WRITE_AHEAD_LOGGING;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidContentContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidOsLooper *)getMainLooper {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile *)getSharedPrefsFileWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<AndroidContentSharedPreferences>)getSharedPreferencesWithNSString:(NSString *)name
                                                                withInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFileInputStream *)openFileInputWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFileOutputStream *)openFileOutputWithNSString:(NSString *)name
                                               withInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)deleteFileWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile *)getFileStreamPathWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile *)getFilesDir {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile * __nullable)getExternalFilesDirWithNSString:(NSString * __nullable)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getExternalFilesDirsWithNSString:(NSString *)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile *)getCacheDir {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)fileList {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile *)getDirWithNSString:(NSString *)name
                           withInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler> __nullable)errorHandler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)deleteDatabaseWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoFile *)getDatabasePathWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)databaseList {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AndroidContentContext *)getApplicationContext {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences;", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileInputStream;", 0x401, 4, 1, 5, -1, -1, -1 },
    { NULL, "LJavaIoFileOutputStream;", 0x401, 6, 3, 5, -1, -1, -1 },
    { NULL, "Z", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, 8, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, 9, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaIoFile;", 0x401, 10, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, 11, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x401, 12, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x401, 12, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 15, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x401, 16, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidContentContext;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMainLooper);
  methods[2].selector = @selector(getSharedPrefsFileWithNSString:);
  methods[3].selector = @selector(getSharedPreferencesWithNSString:withInt:);
  methods[4].selector = @selector(openFileInputWithNSString:);
  methods[5].selector = @selector(openFileOutputWithNSString:withInt:);
  methods[6].selector = @selector(deleteFileWithNSString:);
  methods[7].selector = @selector(getFileStreamPathWithNSString:);
  methods[8].selector = @selector(getFilesDir);
  methods[9].selector = @selector(getExternalFilesDirWithNSString:);
  methods[10].selector = @selector(getExternalFilesDirsWithNSString:);
  methods[11].selector = @selector(getCacheDir);
  methods[12].selector = @selector(fileList);
  methods[13].selector = @selector(getDirWithNSString:withInt:);
  methods[14].selector = @selector(openOrCreateDatabaseWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[15].selector = @selector(openOrCreateDatabaseWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[16].selector = @selector(deleteDatabaseWithNSString:);
  methods[17].selector = @selector(getDatabasePathWithNSString:);
  methods[18].selector = @selector(databaseList);
  methods[19].selector = @selector(getApplicationContext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MODE_PRIVATE", "I", .constantValue.asInt = AndroidContentContext_MODE_PRIVATE, 0x19, -1, -1, -1, -1 },
    { "MODE_WORLD_READABLE", "I", .constantValue.asInt = AndroidContentContext_MODE_WORLD_READABLE, 0x19, -1, -1, -1, 17 },
    { "MODE_WORLD_WRITEABLE", "I", .constantValue.asInt = AndroidContentContext_MODE_WORLD_WRITEABLE, 0x19, -1, -1, -1, 18 },
    { "MODE_APPEND", "I", .constantValue.asInt = AndroidContentContext_MODE_APPEND, 0x19, -1, -1, -1, -1 },
    { "MODE_ENABLE_WRITE_AHEAD_LOGGING", "I", .constantValue.asInt = AndroidContentContext_MODE_ENABLE_WRITE_AHEAD_LOGGING, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getSharedPrefsFile", "LNSString;", "getSharedPreferences", "LNSString;I", "openFileInput", "LJavaIoFileNotFoundException;", "openFileOutput", "deleteFile", "getFileStreamPath", "getExternalFilesDir", "getExternalFilesDirs", "getDir", "openOrCreateDatabase", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "deleteDatabase", "getDatabasePath", (void *)&AndroidContentContext__Annotations$0, (void *)&AndroidContentContext__Annotations$1 };
  static const J2ObjcClassInfo _AndroidContentContext = { "Context", "android.content", ptrTable, methods, fields, 7, 0x401, 20, 5, -1, -1, -1, -1, -1 };
  return &_AndroidContentContext;
}

@end

void AndroidContentContext_init(AndroidContentContext *self) {
  NSObject_init(self);
}

IOSObjectArray *AndroidContentContext__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidContentContext__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidContentContext)

@implementation AndroidAppApplication

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidAppApplication_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidAppApplication = { "Application", "android.app", NULL, methods, NULL, 7, 0x401, 1, 0, -1, -1, -1, -1, -1 };
  return &_AndroidAppApplication;
}

@end

void AndroidAppApplication_init(AndroidAppApplication *self) {
  AndroidContentContext_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidAppApplication)

J2OBJC_INITIALIZED_DEFN(AndroidAppQueuedWork)

@implementation AndroidAppQueuedWork

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidAppQueuedWork_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilConcurrentExecutorService>)singleThreadExecutor {
  return AndroidAppQueuedWork_singleThreadExecutor();
}

+ (void)addWithJavaLangRunnable:(id<JavaLangRunnable>)finisher {
  AndroidAppQueuedWork_addWithJavaLangRunnable_(finisher);
}

+ (void)removeWithJavaLangRunnable:(id<JavaLangRunnable>)finisher {
  AndroidAppQueuedWork_removeWithJavaLangRunnable_(finisher);
}

+ (void)waitToFinish {
  AndroidAppQueuedWork_waitToFinish();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(singleThreadExecutor);
  methods[2].selector = @selector(addWithJavaLangRunnable:);
  methods[3].selector = @selector(removeWithJavaLangRunnable:);
  methods[4].selector = @selector(waitToFinish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sPendingWorkFinishers", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
    { "sSingleThreadExecutor", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LJavaLangRunnable;", "remove", &AndroidAppQueuedWork_sPendingWorkFinishers, "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Runnable;>;", &AndroidAppQueuedWork_sSingleThreadExecutor };
  static const J2ObjcClassInfo _AndroidAppQueuedWork = { "QueuedWork", "android.app", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_AndroidAppQueuedWork;
}

+ (void)initialize {
  if (self == [AndroidAppQueuedWork class]) {
    JreStrongAssignAndConsume(&AndroidAppQueuedWork_sPendingWorkFinishers, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
    JreStrongAssign(&AndroidAppQueuedWork_sSingleThreadExecutor, nil);
    J2OBJC_SET_INITIALIZED(AndroidAppQueuedWork)
  }
}

@end

void AndroidAppQueuedWork_init(AndroidAppQueuedWork *self) {
  NSObject_init(self);
}

AndroidAppQueuedWork *new_AndroidAppQueuedWork_init() {
  J2OBJC_NEW_IMPL(AndroidAppQueuedWork, init)
}

AndroidAppQueuedWork *create_AndroidAppQueuedWork_init() {
  J2OBJC_CREATE_IMPL(AndroidAppQueuedWork, init)
}

id<JavaUtilConcurrentExecutorService> AndroidAppQueuedWork_singleThreadExecutor() {
  AndroidAppQueuedWork_initialize();
  @synchronized(AndroidAppQueuedWork_class_()) {
    if (AndroidAppQueuedWork_sSingleThreadExecutor == nil) {
      JreStrongAssign(&AndroidAppQueuedWork_sSingleThreadExecutor, JavaUtilConcurrentExecutors_newSingleThreadExecutor());
    }
    return JreRetainedLocalValue(AndroidAppQueuedWork_sSingleThreadExecutor);
  }
}

void AndroidAppQueuedWork_addWithJavaLangRunnable_(id<JavaLangRunnable> finisher) {
  AndroidAppQueuedWork_initialize();
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(AndroidAppQueuedWork_sPendingWorkFinishers)) addWithId:finisher];
}

void AndroidAppQueuedWork_removeWithJavaLangRunnable_(id<JavaLangRunnable> finisher) {
  AndroidAppQueuedWork_initialize();
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(AndroidAppQueuedWork_sPendingWorkFinishers)) removeWithId:finisher];
}

void AndroidAppQueuedWork_waitToFinish() {
  AndroidAppQueuedWork_initialize();
  id<JavaLangRunnable> toFinish;
  while ((toFinish = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(AndroidAppQueuedWork_sPendingWorkFinishers)) poll]) != nil) {
    [((id<JavaLangRunnable>) nil_chk(toFinish)) run];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidAppQueuedWork)

@implementation AndroidContentSharedPreferences

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 15, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAll);
  methods[1].selector = @selector(getStringWithNSString:withNSString:);
  methods[2].selector = @selector(getIntWithNSString:withInt:);
  methods[3].selector = @selector(getLongWithNSString:withLong:);
  methods[4].selector = @selector(getFloatWithNSString:withFloat:);
  methods[5].selector = @selector(getBooleanWithNSString:withBoolean:);
  methods[6].selector = @selector(containsWithNSString:);
  methods[7].selector = @selector(edit);
  methods[8].selector = @selector(registerOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:);
  methods[9].selector = @selector(unregisterOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;*>;", "getString", "LNSString;LNSString;", "getInt", "LNSString;I", "getLong", "LNSString;J", "getFloat", "LNSString;F", "getBoolean", "LNSString;Z", "contains", "LNSString;", "registerOnSharedPreferenceChangeListener", "LAndroidContentSharedPreferences_OnSharedPreferenceChangeListener;", "unregisterOnSharedPreferenceChangeListener", "LAndroidContentSharedPreferences_OnSharedPreferenceChangeListener;LAndroidContentSharedPreferences_Editor;" };
  static const J2ObjcClassInfo _AndroidContentSharedPreferences = { "SharedPreferences", "android.content", ptrTable, methods, NULL, 7, 0x609, 10, 0, -1, 16, -1, -1, -1 };
  return &_AndroidContentSharedPreferences;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidContentSharedPreferences)

J2OBJC_INITIALIZED_DEFN(AndroidAppSharedPreferencesImpl)

@implementation AndroidAppSharedPreferencesImpl

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                     withInt:(jint)mode
                             withJavaUtilMap:(id<JavaUtilMap>)initialContents
                        withAndroidOsHandler:(AndroidOsHandler *)mainHandler {
  AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(self, file, mode, initialContents, mainHandler);
  return self;
}

+ (JavaIoFile *)makeBackupFileWithJavaIoFile:(JavaIoFile *)prefsFile {
  return AndroidAppSharedPreferencesImpl_makeBackupFileWithJavaIoFile_(prefsFile);
}

- (jboolean)isLoaded {
  @synchronized(self) {
    return mLoaded_;
  }
}

- (jboolean)hasFileChangedUnexpectedly {
  @synchronized(self) {
    if (mDiskWritesInFlight_ > 0) {
      return false;
    }
  }
  AndroidOsFileUtils_FileStatus *stat = create_AndroidOsFileUtils_FileStatus_init();
  if (!AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_([((JavaIoFile *) nil_chk(mFile_)) getPath], stat)) {
    return true;
  }
  @synchronized(self) {
    return mStatTimestamp_ != stat->mtime_ || mStatSize_ != stat->size_;
  }
}

- (void)replaceWithJavaUtilMap:(id<JavaUtilMap>)newContents
withAndroidOsFileUtils_FileStatus:(AndroidOsFileUtils_FileStatus *)stat {
  @synchronized(self) {
    mLoaded_ = true;
    if (newContents != nil) {
      JreStrongAssign(&mMap_, newContents);
    }
    if (stat != nil) {
      mStatTimestamp_ = stat->mtime_;
      mStatSize_ = stat->size_;
    }
  }
}

- (void)registerOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:(id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener>)listener {
  @synchronized(self) {
    [((JavaUtilWeakHashMap *) nil_chk(mListeners_)) putWithId:listener withId:AndroidAppSharedPreferencesImpl_mContent];
  }
}

- (void)unregisterOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:(id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener>)listener {
  @synchronized(self) {
    [((JavaUtilWeakHashMap *) nil_chk(mListeners_)) removeWithId:listener];
  }
}

- (id<JavaUtilMap>)getAll {
  @synchronized(self) {
    return JreRetainedLocalValue(create_JavaUtilHashMap_initWithJavaUtilMap_(mMap_));
  }
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defValue {
  @synchronized(self) {
    NSString *v = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key], [NSString class]);
    return JreRetainedLocalValue(v != nil ? v : defValue);
  }
}

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defValue {
  @synchronized(self) {
    JavaLangInteger *v = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key], [JavaLangInteger class]);
    return v != nil ? [v intValue] : defValue;
  }
}

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defValue {
  @synchronized(self) {
    JavaLangLong *v = (JavaLangLong *) cast_chk([((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key], [JavaLangLong class]);
    return v != nil ? [v longLongValue] : defValue;
  }
}

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defValue {
  @synchronized(self) {
    JavaLangFloat *v = (JavaLangFloat *) cast_chk([((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key], [JavaLangFloat class]);
    return v != nil ? [v floatValue] : defValue;
  }
}

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defValue {
  @synchronized(self) {
    JavaLangBoolean *v = (JavaLangBoolean *) cast_chk([((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key], [JavaLangBoolean class]);
    return v != nil ? [v booleanValue] : defValue;
  }
}

- (jboolean)containsWithNSString:(NSString *)key {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(mMap_)) containsKeyWithId:key];
  }
}

- (id<AndroidContentSharedPreferences_Editor>)edit {
  return create_AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(self);
}

- (void)enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)mcr
                                                          withJavaLangRunnable:(id<JavaLangRunnable>)postWriteRunnable {
  AndroidAppSharedPreferencesImpl_enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(self, mcr, postWriteRunnable);
}

+ (JavaIoFileOutputStream *)createFileOutputStreamWithJavaIoFile:(JavaIoFile *)file {
  return AndroidAppSharedPreferencesImpl_createFileOutputStreamWithJavaIoFile_(file);
}

- (void)writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)mcr {
  AndroidAppSharedPreferencesImpl_writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, mcr);
}

+ (void)setFilePermissionsFromModeWithNSString:(NSString *)name
                                       withInt:(jint)mode
                                       withInt:(jint)extraPermissions {
  AndroidAppSharedPreferencesImpl_setFilePermissionsFromModeWithNSString_withInt_withInt_(name, mode, extraPermissions);
}

- (void)dealloc {
  RELEASE_(mFile_);
  RELEASE_(mainHandler_);
  RELEASE_(mBackupFile_);
  RELEASE_(mMap_);
  RELEASE_(mWritingToDiskLock_);
  RELEASE_(mListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileOutputStream;", 0xa, 23, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoFile:withInt:withJavaUtilMap:withAndroidOsHandler:);
  methods[1].selector = @selector(makeBackupFileWithJavaIoFile:);
  methods[2].selector = @selector(isLoaded);
  methods[3].selector = @selector(hasFileChangedUnexpectedly);
  methods[4].selector = @selector(replaceWithJavaUtilMap:withAndroidOsFileUtils_FileStatus:);
  methods[5].selector = @selector(registerOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:);
  methods[6].selector = @selector(unregisterOnSharedPreferenceChangeListenerWithAndroidContentSharedPreferences_OnSharedPreferenceChangeListener:);
  methods[7].selector = @selector(getAll);
  methods[8].selector = @selector(getStringWithNSString:withNSString:);
  methods[9].selector = @selector(getIntWithNSString:withInt:);
  methods[10].selector = @selector(getLongWithNSString:withLong:);
  methods[11].selector = @selector(getFloatWithNSString:withFloat:);
  methods[12].selector = @selector(getBooleanWithNSString:withBoolean:);
  methods[13].selector = @selector(containsWithNSString:);
  methods[14].selector = @selector(edit);
  methods[15].selector = @selector(enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:withJavaLangRunnable:);
  methods[16].selector = @selector(createFileOutputStreamWithJavaIoFile:);
  methods[17].selector = @selector(writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:);
  methods[18].selector = @selector(setFilePermissionsFromModeWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = AndroidAppSharedPreferencesImpl_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "mFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mainHandler_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mBackupFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMode_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "mDiskWritesInFlight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLoaded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStatTimestamp_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStatSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWritingToDiskLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mContent", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "mListeners_", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;ILJavaUtilMap;LAndroidOsHandler;", "makeBackupFile", "LJavaIoFile;", "replace", "LJavaUtilMap;LAndroidOsFileUtils_FileStatus;", "registerOnSharedPreferenceChangeListener", "LAndroidContentSharedPreferences_OnSharedPreferenceChangeListener;", "unregisterOnSharedPreferenceChangeListener", "()Ljava/util/Map<Ljava/lang/String;*>;", "getString", "LNSString;LNSString;", "getInt", "LNSString;I", "getLong", "LNSString;J", "getFloat", "LNSString;F", "getBoolean", "LNSString;Z", "contains", "LNSString;", "enqueueDiskWrite", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;LJavaLangRunnable;", "createFileOutputStream", "writeToFile", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;", "setFilePermissionsFromMode", "LNSString;II", &AndroidAppSharedPreferencesImpl_TAG, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", &AndroidAppSharedPreferencesImpl_mContent, "Ljava/util/WeakHashMap<Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;Ljava/lang/Object;>;", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;LAndroidAppSharedPreferencesImpl_EditorImpl;" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl = { "SharedPreferencesImpl", "android.app", ptrTable, methods, fields, 7, 0x11, 19, 14, -1, 32, -1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl;
}

+ (void)initialize {
  if (self == [AndroidAppSharedPreferencesImpl class]) {
    JreStrongAssignAndConsume(&AndroidAppSharedPreferencesImpl_mContent, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(AndroidAppSharedPreferencesImpl)
  }
}

@end

void AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(AndroidAppSharedPreferencesImpl *self, JavaIoFile *file, jint mode, id<JavaUtilMap> initialContents, AndroidOsHandler *mainHandler) {
  NSObject_init(self);
  self->mDiskWritesInFlight_ = 0;
  self->mLoaded_ = false;
  JreStrongAssignAndConsume(&self->mWritingToDiskLock_, new_NSObject_init());
  JreStrongAssign(&self->mFile_, file);
  JreStrongAssign(&self->mainHandler_, mainHandler);
  JreStrongAssign(&self->mBackupFile_, AndroidAppSharedPreferencesImpl_makeBackupFileWithJavaIoFile_(file));
  self->mMode_ = mode;
  self->mLoaded_ = (initialContents != nil);
  JreStrongAssign(&self->mMap_, initialContents != nil ? initialContents : create_JavaUtilHashMap_init());
  AndroidOsFileUtils_FileStatus *stat = create_AndroidOsFileUtils_FileStatus_init();
  if (AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_([((JavaIoFile *) nil_chk(file)) getPath], stat)) {
    self->mStatTimestamp_ = stat->mtime_;
  }
  JreStrongAssignAndConsume(&self->mListeners_, new_JavaUtilWeakHashMap_init());
}

AndroidAppSharedPreferencesImpl *new_AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(JavaIoFile *file, jint mode, id<JavaUtilMap> initialContents, AndroidOsHandler *mainHandler) {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl, initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_, file, mode, initialContents, mainHandler)
}

AndroidAppSharedPreferencesImpl *create_AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(JavaIoFile *file, jint mode, id<JavaUtilMap> initialContents, AndroidOsHandler *mainHandler) {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl, initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_, file, mode, initialContents, mainHandler)
}

JavaIoFile *AndroidAppSharedPreferencesImpl_makeBackupFileWithJavaIoFile_(JavaIoFile *prefsFile) {
  AndroidAppSharedPreferencesImpl_initialize();
  return create_JavaIoFile_initWithNSString_(JreStrcat("$$", [((JavaIoFile *) nil_chk(prefsFile)) getPath], @".bak"));
}

void AndroidAppSharedPreferencesImpl_enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr, id<JavaLangRunnable> postWriteRunnable) {
  id<JavaLangRunnable> writeToDiskRunnable = create_AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(self, mcr, postWriteRunnable);
  jboolean isFromSyncCommit = postWriteRunnable == nil;
  if (isFromSyncCommit) {
    jboolean wasEmpty = false;
    @synchronized(self) {
      wasEmpty = (self->mDiskWritesInFlight_ == 1);
    }
    if (wasEmpty) {
      [writeToDiskRunnable run];
      return;
    }
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(AndroidAppQueuedWork_singleThreadExecutor())) executeWithJavaLangRunnable:writeToDiskRunnable];
}

JavaIoFileOutputStream *AndroidAppSharedPreferencesImpl_createFileOutputStreamWithJavaIoFile_(JavaIoFile *file) {
  AndroidAppSharedPreferencesImpl_initialize();
  JavaIoFileOutputStream *str = nil;
  @try {
    str = create_JavaIoFileOutputStream_initWithJavaIoFile_(file);
  }
  @catch (JavaIoFileNotFoundException *e) {
    JavaIoFile *parent = [((JavaIoFile *) nil_chk(file)) getParentFile];
    if (![((JavaIoFile *) nil_chk(parent)) mkdir]) {
      AndroidUtilLog_eWithNSString_withNSString_(AndroidAppSharedPreferencesImpl_TAG, JreStrcat("$@", @"Couldn't create directory for SharedPreferences file ", file));
      return nil;
    }
    AndroidOsFileUtils_setPermissionsWithNSString_withInt_withInt_withInt_([parent getPath], AndroidOsFileUtils_S_IRWXU | AndroidOsFileUtils_S_IRWXG | AndroidOsFileUtils_S_IXOTH, -1, -1);
    @try {
      str = create_JavaIoFileOutputStream_initWithJavaIoFile_(file);
    }
    @catch (JavaIoFileNotFoundException *e2) {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidAppSharedPreferencesImpl_TAG, JreStrcat("$@", @"Couldn't create SharedPreferences file ", file), e2);
    }
  }
  return str;
}

void AndroidAppSharedPreferencesImpl_writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr) {
  if ([((JavaIoFile *) nil_chk(self->mFile_)) exists]) {
    if (!((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(mcr))->changesMade_) {
      [mcr setDiskWriteResultWithBoolean:true];
      return;
    }
    if (![((JavaIoFile *) nil_chk(self->mBackupFile_)) exists]) {
      if (![self->mFile_ renameToWithJavaIoFile:self->mBackupFile_]) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidAppSharedPreferencesImpl_TAG, JreStrcat("$@$@", @"Couldn't rename file ", self->mFile_, @" to backup file ", self->mBackupFile_));
        [mcr setDiskWriteResultWithBoolean:false];
        return;
      }
    }
    else {
      [self->mFile_ delete__];
    }
  }
  @try {
    JavaIoFileOutputStream *str = AndroidAppSharedPreferencesImpl_createFileOutputStreamWithJavaIoFile_(self->mFile_);
    if (str == nil) {
      [((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(mcr)) setDiskWriteResultWithBoolean:false];
      return;
    }
    AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withJavaIoOutputStream_(((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(mcr))->mapToWriteToDisk_, str);
    AndroidOsFileUtils_syncWithJavaIoFileOutputStream_(str);
    [str close];
    AndroidAppSharedPreferencesImpl_setFilePermissionsFromModeWithNSString_withInt_withInt_([self->mFile_ getPath], self->mMode_, 0);
    AndroidOsFileUtils_FileStatus *stat = create_AndroidOsFileUtils_FileStatus_init();
    if (AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_([self->mFile_ getPath], stat)) {
      @synchronized(self) {
        self->mStatTimestamp_ = stat->mtime_;
        self->mStatSize_ = stat->size_;
      }
    }
    [((JavaIoFile *) nil_chk(self->mBackupFile_)) delete__];
    [mcr setDiskWriteResultWithBoolean:true];
    return;
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidAppSharedPreferencesImpl_TAG, @"writeToFile: Got exception:", e);
  }
  @catch (JavaIoIOException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidAppSharedPreferencesImpl_TAG, @"writeToFile: Got exception:", e);
  }
  if ([self->mFile_ exists]) {
    if (![self->mFile_ delete__]) {
      AndroidUtilLog_eWithNSString_withNSString_(AndroidAppSharedPreferencesImpl_TAG, JreStrcat("$@", @"Couldn't clean up partially-written file ", self->mFile_));
    }
  }
  [((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(mcr)) setDiskWriteResultWithBoolean:false];
}

void AndroidAppSharedPreferencesImpl_setFilePermissionsFromModeWithNSString_withInt_withInt_(NSString *name, jint mode, jint extraPermissions) {
  AndroidAppSharedPreferencesImpl_initialize();
  jint perms = AndroidOsFileUtils_S_IRUSR | AndroidOsFileUtils_S_IWUSR | AndroidOsFileUtils_S_IRGRP | AndroidOsFileUtils_S_IWGRP | extraPermissions;
  if ((mode & AndroidContentContext_MODE_WORLD_READABLE) != 0) {
    perms |= AndroidOsFileUtils_S_IROTH;
  }
  if ((mode & AndroidContentContext_MODE_WORLD_WRITEABLE) != 0) {
    perms |= AndroidOsFileUtils_S_IWOTH;
  }
  AndroidOsFileUtils_setPermissionsWithNSString_withInt_withInt_withInt_(name, perms, - 1, - 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidAppSharedPreferencesImpl)

@implementation AndroidAppSharedPreferencesImpl_MemoryCommitResult

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidAppSharedPreferencesImpl_MemoryCommitResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDiskWriteResultWithBoolean:(jboolean)result {
  JreAssignVolatileBoolean(&writeToDiskResult_, result);
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(writtenToDiskLatch_)) countDown];
}

- (void)dealloc {
  RELEASE_(keysModified_);
  RELEASE_(listeners_);
  RELEASE_(mapToWriteToDisk_);
  RELEASE_(writtenToDiskLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDiskWriteResultWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "changesMade_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "keysModified_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 2, -1 },
    { "listeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1, -1, -1, 3, -1 },
    { "mapToWriteToDisk_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 4, -1 },
    { "writtenToDiskLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "writeToDiskResult_", "Z", .constantValue.asLong = 0, 0x41, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDiskWriteResult", "Z", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Set<Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;>;", "Ljava/util/Map<**>;", "LAndroidAppSharedPreferencesImpl;" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl_MemoryCommitResult = { "MemoryCommitResult", "android.app", ptrTable, methods, fields, 7, 0xa, 2, 6, 5, -1, -1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl_MemoryCommitResult;
}

@end

void AndroidAppSharedPreferencesImpl_MemoryCommitResult_init(AndroidAppSharedPreferencesImpl_MemoryCommitResult *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->writtenToDiskLatch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  JreAssignVolatileBoolean(&self->writeToDiskResult_, false);
}

AndroidAppSharedPreferencesImpl_MemoryCommitResult *new_AndroidAppSharedPreferencesImpl_MemoryCommitResult_init() {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl_MemoryCommitResult, init)
}

AndroidAppSharedPreferencesImpl_MemoryCommitResult *create_AndroidAppSharedPreferencesImpl_MemoryCommitResult_init() {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl_MemoryCommitResult, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidAppSharedPreferencesImpl_MemoryCommitResult)

@implementation AndroidContentSharedPreferences_Editor

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(putStringWithNSString:withNSString:);
  methods[1].selector = @selector(putIntWithNSString:withInt:);
  methods[2].selector = @selector(putLongWithNSString:withLong:);
  methods[3].selector = @selector(putFloatWithNSString:withFloat:);
  methods[4].selector = @selector(putBooleanWithNSString:withBoolean:);
  methods[5].selector = @selector(removeWithNSString:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(commit);
  methods[8].selector = @selector(apply);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "putString", "LNSString;LNSString;", "putInt", "LNSString;I", "putLong", "LNSString;J", "putFloat", "LNSString;F", "putBoolean", "LNSString;Z", "remove", "LNSString;", "LAndroidContentSharedPreferences;" };
  static const J2ObjcClassInfo _AndroidContentSharedPreferences_Editor = { "Editor", "android.content", ptrTable, methods, NULL, 7, 0x609, 9, 0, 12, -1, -1, -1, -1 };
  return &_AndroidContentSharedPreferences_Editor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidContentSharedPreferences_Editor)

@implementation AndroidAppSharedPreferencesImpl_EditorImpl

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl:(AndroidAppSharedPreferencesImpl *)outer$ {
  AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(self, outer$);
  return self;
}

- (id<AndroidContentSharedPreferences_Editor>)putStringWithNSString:(NSString *)key
                                                       withNSString:(NSString *)value {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(mModified_)) putWithId:key withId:value];
    return JreRetainedLocalValue(self);
  }
}

- (id<AndroidContentSharedPreferences_Editor>)putIntWithNSString:(NSString *)key
                                                         withInt:(jint)value {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(mModified_)) putWithId:key withId:JavaLangInteger_valueOfWithInt_(value)];
    return JreRetainedLocalValue(self);
  }
}

- (id<AndroidContentSharedPreferences_Editor>)putLongWithNSString:(NSString *)key
                                                         withLong:(jlong)value {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(mModified_)) putWithId:key withId:JavaLangLong_valueOfWithLong_(value)];
    return JreRetainedLocalValue(self);
  }
}

- (id<AndroidContentSharedPreferences_Editor>)putFloatWithNSString:(NSString *)key
                                                         withFloat:(jfloat)value {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(mModified_)) putWithId:key withId:JavaLangFloat_valueOfWithFloat_(value)];
    return JreRetainedLocalValue(self);
  }
}

- (id<AndroidContentSharedPreferences_Editor>)putBooleanWithNSString:(NSString *)key
                                                         withBoolean:(jboolean)value {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(mModified_)) putWithId:key withId:JavaLangBoolean_valueOfWithBoolean_(value)];
    return JreRetainedLocalValue(self);
  }
}

- (id<AndroidContentSharedPreferences_Editor>)removeWithNSString:(NSString *)key {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(mModified_)) putWithId:key withId:self];
    return JreRetainedLocalValue(self);
  }
}

- (id<AndroidContentSharedPreferences_Editor>)clear {
  @synchronized(self) {
    mClear_ = true;
    return JreRetainedLocalValue(self);
  }
}

- (void)apply {
  AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr = AndroidAppSharedPreferencesImpl_EditorImpl_commitToMemory(self);
  id<JavaLangRunnable> awaitCommit = create_AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(mcr);
  AndroidAppQueuedWork_addWithJavaLangRunnable_(awaitCommit);
  id<JavaLangRunnable> postWriteRunnable = create_AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(awaitCommit);
  AndroidAppSharedPreferencesImpl_enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(this$0_, mcr, postWriteRunnable);
  AndroidAppSharedPreferencesImpl_EditorImpl_notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, mcr);
}

- (AndroidAppSharedPreferencesImpl_MemoryCommitResult *)commitToMemory {
  return AndroidAppSharedPreferencesImpl_EditorImpl_commitToMemory(self);
}

- (jboolean)commit {
  AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr = AndroidAppSharedPreferencesImpl_EditorImpl_commitToMemory(self);
  AndroidAppSharedPreferencesImpl_enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(this$0_, mcr, nil);
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(mcr))->writtenToDiskLatch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    return false;
  }
  AndroidAppSharedPreferencesImpl_EditorImpl_notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, mcr);
  return JreLoadVolatileBoolean(&mcr->writeToDiskResult_);
}

- (void)notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)mcr {
  AndroidAppSharedPreferencesImpl_EditorImpl_notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, mcr);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mModified_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences_Editor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidAppSharedPreferencesImpl:);
  methods[1].selector = @selector(putStringWithNSString:withNSString:);
  methods[2].selector = @selector(putIntWithNSString:withInt:);
  methods[3].selector = @selector(putLongWithNSString:withLong:);
  methods[4].selector = @selector(putFloatWithNSString:withFloat:);
  methods[5].selector = @selector(putBooleanWithNSString:withBoolean:);
  methods[6].selector = @selector(removeWithNSString:);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(apply);
  methods[9].selector = @selector(commitToMemory);
  methods[10].selector = @selector(commit);
  methods[11].selector = @selector(notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidAppSharedPreferencesImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mModified_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "mClear_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "putString", "LNSString;LNSString;", "putInt", "LNSString;I", "putLong", "LNSString;J", "putFloat", "LNSString;F", "putBoolean", "LNSString;Z", "remove", "LNSString;", "notifyListeners", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LAndroidAppSharedPreferencesImpl;" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl_EditorImpl = { "EditorImpl", "android.app", ptrTable, methods, fields, 7, 0x11, 12, 3, 15, -1, -1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl_EditorImpl;
}

@end

void AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(AndroidAppSharedPreferencesImpl_EditorImpl *self, AndroidAppSharedPreferencesImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->mModified_, ComGoogleAndroidCollectMaps_newHashMap());
  self->mClear_ = false;
}

AndroidAppSharedPreferencesImpl_EditorImpl *new_AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(AndroidAppSharedPreferencesImpl *outer$) {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl, initWithAndroidAppSharedPreferencesImpl_, outer$)
}

AndroidAppSharedPreferencesImpl_EditorImpl *create_AndroidAppSharedPreferencesImpl_EditorImpl_initWithAndroidAppSharedPreferencesImpl_(AndroidAppSharedPreferencesImpl *outer$) {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl, initWithAndroidAppSharedPreferencesImpl_, outer$)
}

AndroidAppSharedPreferencesImpl_MemoryCommitResult *AndroidAppSharedPreferencesImpl_EditorImpl_commitToMemory(AndroidAppSharedPreferencesImpl_EditorImpl *self) {
  AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr = create_AndroidAppSharedPreferencesImpl_MemoryCommitResult_init();
  @synchronized(self->this$0_) {
    if (self->this$0_->mDiskWritesInFlight_ > 0) {
      JreStrongAssignAndConsume(&self->this$0_->mMap_, new_JavaUtilHashMap_initWithJavaUtilMap_(self->this$0_->mMap_));
    }
    JreStrongAssign(&mcr->mapToWriteToDisk_, self->this$0_->mMap_);
    self->this$0_->mDiskWritesInFlight_++;
    jboolean hasListeners = [((JavaUtilWeakHashMap *) nil_chk(self->this$0_->mListeners_)) size] > 0;
    if (hasListeners) {
      JreStrongAssignAndConsume(&mcr->keysModified_, new_JavaUtilArrayList_init());
      JreStrongAssignAndConsume(&mcr->listeners_, new_JavaUtilHashSet_initWithJavaUtilCollection_([self->this$0_->mListeners_ keySet]));
    }
    @synchronized(self) {
      if (self->mClear_) {
        if (![((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) isEmpty]) {
          mcr->changesMade_ = true;
          [((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) clear];
        }
        self->mClear_ = false;
      }
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(self->mModified_)) entrySet])) {
        NSString *k = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
        id v = [e getValue];
        if (v == self) {
          if (![((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) containsKeyWithId:k]) {
            continue;
          }
          [((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) removeWithId:k];
        }
        else {
          if ([((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) containsKeyWithId:k]) {
            id existingValue = [((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) getWithId:k];
            if (existingValue != nil && [existingValue isEqual:v]) {
              continue;
            }
          }
          [((id<JavaUtilMap>) nil_chk(self->this$0_->mMap_)) putWithId:k withId:v];
        }
        mcr->changesMade_ = true;
        if (hasListeners) {
          [((id<JavaUtilList>) nil_chk(mcr->keysModified_)) addWithId:k];
        }
      }
      [self->mModified_ clear];
    }
  }
  return mcr;
}

void AndroidAppSharedPreferencesImpl_EditorImpl_notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *mcr) {
  if (((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(mcr))->listeners_ == nil || mcr->keysModified_ == nil || [mcr->keysModified_ size] == 0) {
    return;
  }
  if (AndroidOsLooper_myLooper() == AndroidOsLooper_getMainLooper()) {
    for (jint i = [((id<JavaUtilList>) nil_chk(mcr->keysModified_)) size] - 1; i >= 0; i--) {
      NSString *key = [((id<JavaUtilList>) nil_chk(mcr->keysModified_)) getWithInt:i];
      for (id<AndroidContentSharedPreferences_OnSharedPreferenceChangeListener> __strong listener in nil_chk(mcr->listeners_)) {
        if (listener != nil) {
          [listener onSharedPreferenceChangedWithAndroidContentSharedPreferences:self->this$0_ withNSString:key];
        }
      }
    }
  }
  else {
    [((AndroidOsHandler *) nil_chk(self->this$0_->mainHandler_)) postWithJavaLangRunnable:create_AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, mcr)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidAppSharedPreferencesImpl_EditorImpl)

@implementation AndroidAppSharedPreferencesImpl_EditorImpl_1

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)capture$0 {
  AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, capture$0);
  return self;
}

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(((AndroidAppSharedPreferencesImpl_MemoryCommitResult *) nil_chk(val$mcr_))->writtenToDiskLatch_)) await];
  }
  @catch (JavaLangInterruptedException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(val$mcr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$mcr_", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidAppSharedPreferencesImpl_EditorImpl;", "apply" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl_EditorImpl_1 = { "", "android.app", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl_EditorImpl_1;
}

@end

void AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl_1 *self, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) {
  JreStrongAssign(&self->val$mcr_, capture$0);
  NSObject_init(self);
}

AndroidAppSharedPreferencesImpl_EditorImpl_1 *new_AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl_1, initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_, capture$0)
}

AndroidAppSharedPreferencesImpl_EditorImpl_1 *create_AndroidAppSharedPreferencesImpl_EditorImpl_1_initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl_1, initWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_, capture$0)
}

@implementation AndroidAppSharedPreferencesImpl_EditorImpl_2

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(self, capture$0);
  return self;
}

- (void)run {
  [((id<JavaLangRunnable>) nil_chk(val$awaitCommit_)) run];
  AndroidAppQueuedWork_removeWithJavaLangRunnable_(val$awaitCommit_);
}

- (void)dealloc {
  RELEASE_(val$awaitCommit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangRunnable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$awaitCommit_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidAppSharedPreferencesImpl_EditorImpl;", "apply" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl_EditorImpl_2 = { "", "android.app", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl_EditorImpl_2;
}

@end

void AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(AndroidAppSharedPreferencesImpl_EditorImpl_2 *self, id<JavaLangRunnable> capture$0) {
  JreStrongAssign(&self->val$awaitCommit_, capture$0);
  NSObject_init(self);
}

AndroidAppSharedPreferencesImpl_EditorImpl_2 *new_AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(id<JavaLangRunnable> capture$0) {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl_2, initWithJavaLangRunnable_, capture$0)
}

AndroidAppSharedPreferencesImpl_EditorImpl_2 *create_AndroidAppSharedPreferencesImpl_EditorImpl_2_initWithJavaLangRunnable_(id<JavaLangRunnable> capture$0) {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl_2, initWithJavaLangRunnable_, capture$0)
}

@implementation AndroidAppSharedPreferencesImpl_EditorImpl_3

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl_EditorImpl:(AndroidAppSharedPreferencesImpl_EditorImpl *)outer$
                      withAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)capture$0 {
  AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(self, outer$, capture$0);
  return self;
}

- (void)run {
  AndroidAppSharedPreferencesImpl_EditorImpl_notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(this$0_, val$mcr_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$mcr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidAppSharedPreferencesImpl_EditorImpl:withAndroidAppSharedPreferencesImpl_MemoryCommitResult:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidAppSharedPreferencesImpl_EditorImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$mcr_", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidAppSharedPreferencesImpl_EditorImpl;", "notifyListenersWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl_EditorImpl_3 = { "", "android.app", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl_EditorImpl_3;
}

@end

void AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl_3 *self, AndroidAppSharedPreferencesImpl_EditorImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$mcr_, capture$0);
  NSObject_init(self);
}

AndroidAppSharedPreferencesImpl_EditorImpl_3 *new_AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl_3, initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_, outer$, capture$0)
}

AndroidAppSharedPreferencesImpl_EditorImpl_3 *create_AndroidAppSharedPreferencesImpl_EditorImpl_3_initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_(AndroidAppSharedPreferencesImpl_EditorImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl_EditorImpl_3, initWithAndroidAppSharedPreferencesImpl_EditorImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_, outer$, capture$0)
}

@implementation AndroidAppSharedPreferencesImpl_1

- (instancetype __nonnull)initWithAndroidAppSharedPreferencesImpl:(AndroidAppSharedPreferencesImpl *)outer$
           withAndroidAppSharedPreferencesImpl_MemoryCommitResult:(AndroidAppSharedPreferencesImpl_MemoryCommitResult *)capture$0
                                             withJavaLangRunnable:(id<JavaLangRunnable>)capture$1 {
  AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  @synchronized(this$0_->mWritingToDiskLock_) {
    AndroidAppSharedPreferencesImpl_writeToFileWithAndroidAppSharedPreferencesImpl_MemoryCommitResult_(this$0_, val$mcr_);
  }
  @synchronized(this$0_) {
    this$0_->mDiskWritesInFlight_--;
  }
  if (val$postWriteRunnable_ != nil) {
    [val$postWriteRunnable_ run];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$mcr_);
  RELEASE_(val$postWriteRunnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidAppSharedPreferencesImpl:withAndroidAppSharedPreferencesImpl_MemoryCommitResult:withJavaLangRunnable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidAppSharedPreferencesImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$mcr_", "LAndroidAppSharedPreferencesImpl_MemoryCommitResult;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$postWriteRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidAppSharedPreferencesImpl;", "enqueueDiskWriteWithAndroidAppSharedPreferencesImpl_MemoryCommitResult:withJavaLangRunnable:" };
  static const J2ObjcClassInfo _AndroidAppSharedPreferencesImpl_1 = { "", "android.app", ptrTable, methods, fields, 7, 0x8018, 2, 3, 0, -1, 1, -1, -1 };
  return &_AndroidAppSharedPreferencesImpl_1;
}

@end

void AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl_1 *self, AndroidAppSharedPreferencesImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0, id<JavaLangRunnable> capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$mcr_, capture$0);
  JreStrongAssign(&self->val$postWriteRunnable_, capture$1);
  NSObject_init(self);
}

AndroidAppSharedPreferencesImpl_1 *new_AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0, id<JavaLangRunnable> capture$1) {
  J2OBJC_NEW_IMPL(AndroidAppSharedPreferencesImpl_1, initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_, outer$, capture$0, capture$1)
}

AndroidAppSharedPreferencesImpl_1 *create_AndroidAppSharedPreferencesImpl_1_initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_(AndroidAppSharedPreferencesImpl *outer$, AndroidAppSharedPreferencesImpl_MemoryCommitResult *capture$0, id<JavaLangRunnable> capture$1) {
  J2OBJC_CREATE_IMPL(AndroidAppSharedPreferencesImpl_1, initWithAndroidAppSharedPreferencesImpl_withAndroidAppSharedPreferencesImpl_MemoryCommitResult_withJavaLangRunnable_, outer$, capture$0, capture$1)
}

@implementation AndroidArchPersistenceDbSupportSQLiteQuery

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x401, 1, 2, -1, -1, -1, 3 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getSql);
  methods[1].selector = @selector(bindTo:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidArchPersistenceDbSupportSQLiteQuery__Annotations$0, "bindTo", "LAndroidArchPersistenceDbSupportSQLiteProgram;", (void *)&AndroidArchPersistenceDbSupportSQLiteQuery__Annotations$1 };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteQuery = { "SupportSQLiteQuery", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteQuery;
}

@end

IOSObjectArray *AndroidArchPersistenceDbSupportSQLiteQuery__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidArchPersistenceDbSupportSQLiteQuery__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteQuery)

@implementation AndroidArchPersistenceDbSimpleSQLiteQuery

- (instancetype __nonnull)initWithNSString:(NSString *)query
                         withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(self, query, bindArgs);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)query {
  AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(self, query);
  return self;
}

- (NSString *)getSql {
  return mQuery_;
}

- (void)bindTo:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)statement {
  AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withNSObjectArray_(statement, mBindArgs_);
}

+ (void)bindWithAndroidArchPersistenceDbSupportSQLiteProgram:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)statement
                                           withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withNSObjectArray_(statement, bindArgs);
}

+ (void)bindWithAndroidArchPersistenceDbSupportSQLiteProgram:(id<AndroidArchPersistenceDbSupportSQLiteProgram>)statement
                                                     withInt:(jint)index
                                                      withId:(id)arg {
  AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withInt_withId_(statement, index, arg);
}

- (void)dealloc {
  RELEASE_(mQuery_);
  RELEASE_(mBindArgs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSObjectArray:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(getSql);
  methods[3].selector = @selector(bindTo:);
  methods[4].selector = @selector(bindWithAndroidArchPersistenceDbSupportSQLiteProgram:withNSObjectArray:);
  methods[5].selector = @selector(bindWithAndroidArchPersistenceDbSupportSQLiteProgram:withInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mQuery_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mBindArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LNSString;", "bindTo", "LAndroidArchPersistenceDbSupportSQLiteProgram;", "bind", "LAndroidArchPersistenceDbSupportSQLiteProgram;[LNSObject;", "LAndroidArchPersistenceDbSupportSQLiteProgram;ILNSObject;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSimpleSQLiteQuery = { "SimpleSQLiteQuery", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x11, 6, 2, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSimpleSQLiteQuery;
}

@end

void AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(AndroidArchPersistenceDbSimpleSQLiteQuery *self, NSString *query, IOSObjectArray *bindArgs) {
  NSObject_init(self);
  JreStrongAssign(&self->mQuery_, query);
  JreStrongAssign(&self->mBindArgs_, bindArgs);
}

AndroidArchPersistenceDbSimpleSQLiteQuery *new_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(NSString *query, IOSObjectArray *bindArgs) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSimpleSQLiteQuery, initWithNSString_withNSObjectArray_, query, bindArgs)
}

AndroidArchPersistenceDbSimpleSQLiteQuery *create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(NSString *query, IOSObjectArray *bindArgs) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSimpleSQLiteQuery, initWithNSString_withNSObjectArray_, query, bindArgs)
}

void AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(AndroidArchPersistenceDbSimpleSQLiteQuery *self, NSString *query) {
  AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_(self, query, nil);
}

AndroidArchPersistenceDbSimpleSQLiteQuery *new_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(NSString *query) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSimpleSQLiteQuery, initWithNSString_, query)
}

AndroidArchPersistenceDbSimpleSQLiteQuery *create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_(NSString *query) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSimpleSQLiteQuery, initWithNSString_, query)
}

void AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withNSObjectArray_(id<AndroidArchPersistenceDbSupportSQLiteProgram> statement, IOSObjectArray *bindArgs) {
  AndroidArchPersistenceDbSimpleSQLiteQuery_initialize();
  if (bindArgs == nil) {
    return;
  }
  jint limit = bindArgs->size_;
  for (jint i = 0; i < limit; i++) {
    id arg = IOSObjectArray_Get(bindArgs, i);
    AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withInt_withId_(statement, i + 1, arg);
  }
}

void AndroidArchPersistenceDbSimpleSQLiteQuery_bindWithAndroidArchPersistenceDbSupportSQLiteProgram_withInt_withId_(id<AndroidArchPersistenceDbSupportSQLiteProgram> statement, jint index, id arg) {
  AndroidArchPersistenceDbSimpleSQLiteQuery_initialize();
  if (arg == nil) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindNull:index];
  }
  else if ([arg isKindOfClass:[IOSByteArray class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindBlob:index value:(IOSByteArray *) cast_chk(arg, [IOSByteArray class])];
  }
  else if ([arg isKindOfClass:[JavaLangFloat class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindDouble:index value:[(JavaLangFloat *) cast_chk(arg, [JavaLangFloat class]) floatValue]];
  }
  else if ([arg isKindOfClass:[JavaLangDouble class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindDouble:index value:[(JavaLangDouble *) cast_chk(arg, [JavaLangDouble class]) doubleValue]];
  }
  else if ([arg isKindOfClass:[JavaLangLong class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindLong:index value:[(JavaLangLong *) cast_chk(arg, [JavaLangLong class]) longLongValue]];
  }
  else if ([arg isKindOfClass:[JavaLangInteger class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindLong:index value:[(JavaLangInteger *) cast_chk(arg, [JavaLangInteger class]) intValue]];
  }
  else if ([arg isKindOfClass:[JavaLangShort class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindLong:index value:[(JavaLangShort *) cast_chk(arg, [JavaLangShort class]) shortValue]];
  }
  else if ([arg isKindOfClass:[JavaLangByte class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindLong:index value:[(JavaLangByte *) cast_chk(arg, [JavaLangByte class]) charValue]];
  }
  else if ([arg isKindOfClass:[NSString class]]) {
    [((id<AndroidArchPersistenceDbSupportSQLiteProgram>) nil_chk(statement)) bindString:index value:(NSString *) cast_chk(arg, [NSString class])];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$I$", @"Cannot bind ", arg, @" at index ", index, @" Supported types: null, byte[], float, double, long, int, short, byte, string"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSimpleSQLiteQuery)

@implementation AndroidArchPersistenceDbSupportSQLiteDatabase

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteStatement;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 9, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x401, 11, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x401, 11, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x401, 11, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 15, 16, 17, -1, -1, -1 },
    { NULL, "I", 0x401, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 22, 1, 17, -1, -1, -1 },
    { NULL, "V", 0x401, 22, 12, 17, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 23, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 26, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 29, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(compileStatementWithNSString:);
  methods[1].selector = @selector(beginTransaction);
  methods[2].selector = @selector(beginTransactionNonExclusive);
  methods[3].selector = @selector(beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[4].selector = @selector(beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[5].selector = @selector(endTransaction);
  methods[6].selector = @selector(setTransactionSuccessful);
  methods[7].selector = @selector(inTransaction);
  methods[8].selector = @selector(isDbLockedByCurrentThread);
  methods[9].selector = @selector(yieldIfContendedSafely);
  methods[10].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[11].selector = @selector(getVersion);
  methods[12].selector = @selector(setVersionWithInt:);
  methods[13].selector = @selector(getMaximumSize);
  methods[14].selector = @selector(setMaximumSizeWithLong:);
  methods[15].selector = @selector(getPageSize);
  methods[16].selector = @selector(setPageSizeWithLong:);
  methods[17].selector = @selector(queryWithNSString:);
  methods[18].selector = @selector(queryWithNSString:withNSObjectArray:);
  methods[19].selector = @selector(queryWithAndroidArchPersistenceDbSupportSQLiteQuery:);
  methods[20].selector = @selector(queryWithAndroidArchPersistenceDbSupportSQLiteQuery:withAndroidOsCancellationSignal:);
  methods[21].selector = @selector(insertWithNSString:withInt:withAndroidContentContentValues:);
  methods[22].selector = @selector(delete__WithNSString:withNSString:withNSObjectArray:);
  methods[23].selector = @selector(updateWithNSString:withInt:withAndroidContentContentValues:withNSString:withNSObjectArray:);
  methods[24].selector = @selector(execSQLWithNSString:);
  methods[25].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[26].selector = @selector(isReadOnly);
  methods[27].selector = @selector(isOpen);
  methods[28].selector = @selector(needUpgradeWithInt:);
  methods[29].selector = @selector(getPath);
  methods[30].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[31].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[32].selector = @selector(setForeignKeyConstraintsEnabledWithBoolean:);
  methods[33].selector = @selector(enableWriteAheadLogging);
  methods[34].selector = @selector(disableWriteAheadLogging);
  methods[35].selector = @selector(isWriteAheadLoggingEnabled);
  methods[36].selector = @selector(getAttachedDbs);
  methods[37].selector = @selector(isDatabaseIntegrityOk);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compileStatement", "LNSString;", "beginTransactionWithListener", "LAndroidDatabaseSqliteSQLiteTransactionListener;", "beginTransactionWithListenerNonExclusive", "yieldIfContendedSafely", "J", "setVersion", "I", "setMaximumSize", "setPageSize", "query", "LNSString;[LNSObject;", "LAndroidArchPersistenceDbSupportSQLiteQuery;", "LAndroidArchPersistenceDbSupportSQLiteQuery;LAndroidOsCancellationSignal;", "insert", "LNSString;ILAndroidContentContentValues;", "LAndroidDatabaseSQLException;", "delete", "LNSString;LNSString;[LNSObject;", "update", "LNSString;ILAndroidContentContentValues;LNSString;[LNSObject;", "execSQL", "needUpgrade", "setLocale", "LJavaUtilLocale;", "setMaxSqlCacheSize", "setForeignKeyConstraintsEnabled", "Z", "()Ljava/util/List<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteDatabase = { "SupportSQLiteDatabase", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 38, 0, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteDatabase;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteDatabase)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteDatabase;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getDatabaseName);
  methods[1].selector = @selector(setWriteAheadLoggingEnabledWithBoolean:);
  methods[2].selector = @selector(getWritableDatabase);
  methods[3].selector = @selector(getReadableDatabase);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setWriteAheadLoggingEnabled", "Z", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper = { "SupportSQLiteOpenHelper", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 5, 0, -1, 2, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback

- (instancetype __nonnull)initWithInt:(jint)version_ {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_initWithInt_(self, version_);
  return self;
}

- (void)onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
}

- (void)onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                           withInt:(jint)oldVersion
                                                           withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db
                                                             withInt:(jint)oldVersion
                                                             withInt:(jint)newVersion {
  @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(JreStrcat("$I$I", @"Can't downgrade database from version ", oldVersion, @" to ", newVersion));
}

- (void)onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
}

- (void)onCorruptionWithAndroidArchPersistenceDbSupportSQLiteDatabase:(id<AndroidArchPersistenceDbSupportSQLiteDatabase>)db {
  AndroidUtilLog_eWithNSString_withNSString_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_TAG, JreStrcat("$$", @"Corruption reported by sqlite on database: ", [((id<AndroidArchPersistenceDbSupportSQLiteDatabase>) nil_chk(db)) getPath]));
  if (![db isOpen]) {
    AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_deleteDatabaseFileWithNSString_(self, [db getPath]);
    return;
  }
  __unused id<JavaUtilList> attachedDbs = nil;
  @try {
    @try {
      attachedDbs = [db getAttachedDbs];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
    }
    @try {
      [db close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
  @finally {
    if (attachedDbs != nil) {
      for (AndroidUtilPair * __strong p in attachedDbs) {
        AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_deleteDatabaseFileWithNSString_(self, ((AndroidUtilPair *) nil_chk(p))->second_);
      }
    }
    else {
      AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_deleteDatabaseFileWithNSString_(self, [db getPath]);
    }
  }
}

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_deleteDatabaseFileWithNSString_(self, fileName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(onConfigureWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[2].selector = @selector(onCreateWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[3].selector = @selector(onUpgradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:withInt:);
  methods[4].selector = @selector(onDowngradeWithAndroidArchPersistenceDbSupportSQLiteDatabase:withInt:withInt:);
  methods[5].selector = @selector(onOpenWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[6].selector = @selector(onCorruptionWithAndroidArchPersistenceDbSupportSQLiteDatabase:);
  methods[7].selector = @selector(deleteDatabaseFileWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x11, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "onConfigure", "LAndroidArchPersistenceDbSupportSQLiteDatabase;", "onCreate", "onUpgrade", "LAndroidArchPersistenceDbSupportSQLiteDatabase;II", "onDowngrade", "onOpen", "onCorruption", "deleteDatabaseFile", "LNSString;", &AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_TAG, "version", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback = { "Callback", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x409, 8, 2, 13, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;
}

@end

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_initWithInt_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *self, jint version_) {
  NSObject_init(self);
  self->version__ = version_;
}

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_deleteDatabaseFileWithNSString_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *self, NSString *fileName) {
  if ([((NSString *) nil_chk(fileName)) java_equalsIgnoreCase:@":memory:"] || [((NSString *) nil_chk([fileName java_trim])) java_length] == 0) {
    return;
  }
  AndroidUtilLog_wWithNSString_withNSString_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_TAG, JreStrcat("$$", @"deleting the database file: ", fileName));
  @try {
    AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(create_JavaIoFile_initWithNSString_(fileName));
  }
  @catch (JavaLangException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_TAG, @"delete failed: ", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext * __nonnull)context
                                           withNSString:(NSString * __nullable)name
withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback * __nonnull)callback {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(self, context, name, callback);
  return self;
}

+ (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)builderWithAndroidContentContext:(AndroidContentContext *)context {
  return AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_builderWithAndroidContentContext_(context);
}

- (void)dealloc {
  RELEASE_(context_);
  RELEASE_(name_);
  RELEASE_(callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x9, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:);
  methods[1].selector = @selector(builderWithAndroidContentContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "callback_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", "builder", "LAndroidContentContext;", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration = { "Configuration", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x9, 2, 3, 3, 4, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;
}

@end

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *self, AndroidContentContext *context, NSString *name, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  NSObject_init(self);
  JreStrongAssign(&self->context_, context);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->callback_, callback);
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *new_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_, context, name, callback)
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(AndroidContentContext *context, NSString *name, AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback *callback) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration, initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_, context, name, callback)
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_builderWithAndroidContentContext_(AndroidContentContext *context) {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initialize();
  return create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(context);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration *)build {
  if (mCallback_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must set a callback to create the configuration.");
  }
  if (mContext_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must set a non-null context to create the configuration.");
  }
  return create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_initWithAndroidContentContext_withNSString_withAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback_(mContext_, mName_, mCallback_);
}

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext * __nonnull)context {
  AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(self, context);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)nameWithNSString:(NSString * __nullable)name {
  JreStrongAssign(&mName_, name);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *)callbackWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback * __nonnull)callback {
  JreStrongAssign(&mCallback_, callback);
  return self;
}

- (void)dealloc {
  RELEASE_(mContext_);
  RELEASE_(mName_);
  RELEASE_(mCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(build);
  methods[1].selector = @selector(initWithAndroidContentContext:);
  methods[2].selector = @selector(nameWithNSString:);
  methods[3].selector = @selector(callbackWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mContext_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCallback_", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;", "name", "LNSString;", "callback", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Callback;", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder = { "Builder", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x9, 4, 3, 5, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder;
}

@end

void AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *self, AndroidContentContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->mContext_, context);
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *new_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, initWithAndroidContentContext_, context)
}

AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder *create_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder_initWithAndroidContentContext_(AndroidContentContext *context) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder, initWithAndroidContentContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration_Builder)

@implementation AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createWithAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper_Configuration;", "LAndroidArchPersistenceDbSupportSQLiteOpenHelper;" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory = { "Factory", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteOpenHelper_Factory)

@implementation AndroidArchPersistenceDbSupportSQLiteProgram

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(bindNull:);
  methods[1].selector = @selector(bindLong:value:);
  methods[2].selector = @selector(bindDouble:value:);
  methods[3].selector = @selector(bindString:value:);
  methods[4].selector = @selector(bindBlob:value:);
  methods[5].selector = @selector(clearBindings);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "bindNull", "I", "bindLong", "IJ", "bindDouble", "ID", "bindString", "ILNSString;", "bindBlob", "I[B" };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteProgram = { "SupportSQLiteProgram", "android.arch.persistence.db", ptrTable, methods, NULL, 7, 0x609, 6, 0, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteProgram;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteProgram)

J2OBJC_INITIALIZED_DEFN(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)

@implementation AndroidArchPersistenceDbSupportSQLiteQueryBuilder

+ (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)builderWithNSString:(NSString *)tableName {
  return AndroidArchPersistenceDbSupportSQLiteQueryBuilder_builderWithNSString_(tableName);
}

- (instancetype __nonnull)initWithNSString:(NSString *)table {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(self, table);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)distinct {
  mDistinct_ = true;
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)columnsWithNSStringArray:(IOSObjectArray *)columns {
  JreStrongAssign(&mColumns_, columns);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)selectionWithNSString:(NSString *)selection
                                                           withNSObjectArray:(IOSObjectArray *)bindArgs {
  JreStrongAssign(&mSelection_, selection);
  JreStrongAssign(&mBindArgs_, bindArgs);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)groupByWithNSString:(NSString *)groupBy {
  JreStrongAssign(&mGroupBy_, groupBy);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)havingWithNSString:(NSString *)having {
  JreStrongAssign(&mHaving_, having);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)orderByWithNSString:(NSString *)orderBy {
  JreStrongAssign(&mOrderBy_, orderBy);
  return self;
}

- (AndroidArchPersistenceDbSupportSQLiteQueryBuilder *)limitWithNSString:(NSString *)limit {
  if (!AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(limit) && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern)) matcherWithJavaLangCharSequence:limit])) matches]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid LIMIT clauses:", limit));
  }
  JreStrongAssign(&mLimit_, limit);
  return self;
}

- (id<AndroidArchPersistenceDbSupportSQLiteQuery>)create {
  if (AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(mGroupBy_) && !AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(mHaving_)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"HAVING clauses are only permitted when using a groupBy clause");
  }
  __unused JavaLangStringBuilder *query = create_JavaLangStringBuilder_initWithInt_(120);
  [query appendWithNSString:@"SELECT "];
  if (mDistinct_) {
    [query appendWithNSString:@"DISTINCT "];
  }
  if (mColumns_ != nil && mColumns_->size_ != 0) {
    AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(query, mColumns_);
  }
  else {
    [query appendWithNSString:@" * "];
  }
  [query appendWithNSString:@" FROM "];
  [query appendWithNSString:mTable_];
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" WHERE ", mSelection_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" GROUP BY ", mGroupBy_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" HAVING ", mHaving_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", mOrderBy_);
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", mLimit_);
  return create_AndroidArchPersistenceDbSimpleSQLiteQuery_initWithNSString_withNSObjectArray_([query description], mBindArgs_);
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(s, name, clause);
}

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(s, columns);
}

+ (jboolean)isEmptyWithNSString:(NSString *)input {
  return AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(input);
}

- (void)dealloc {
  RELEASE_(mTable_);
  RELEASE_(mColumns_);
  RELEASE_(mSelection_);
  RELEASE_(mBindArgs_);
  RELEASE_(mGroupBy_);
  RELEASE_(mHaving_);
  RELEASE_(mOrderBy_);
  RELEASE_(mLimit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQueryBuilder;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidArchPersistenceDbSupportSQLiteQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 14, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(builderWithNSString:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(distinct);
  methods[3].selector = @selector(columnsWithNSStringArray:);
  methods[4].selector = @selector(selectionWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(groupByWithNSString:);
  methods[6].selector = @selector(havingWithNSString:);
  methods[7].selector = @selector(orderByWithNSString:);
  methods[8].selector = @selector(limitWithNSString:);
  methods[9].selector = @selector(create);
  methods[10].selector = @selector(appendClauseWithJavaLangStringBuilder:withNSString:withNSString:);
  methods[11].selector = @selector(appendColumnsWithJavaLangStringBuilder:withNSStringArray:);
  methods[12].selector = @selector(isEmptyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sLimitPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "mDistinct_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTable_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumns_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelection_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBindArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGroupBy_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHaving_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOrderBy_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLimit_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "builder", "LNSString;", "columns", "[LNSString;", "selection", "LNSString;[LNSObject;", "groupBy", "having", "orderBy", "limit", "appendClause", "LJavaLangStringBuilder;LNSString;LNSString;", "appendColumns", "LJavaLangStringBuilder;[LNSString;", "isEmpty", &AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern };
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteQueryBuilder = { "SupportSQLiteQueryBuilder", "android.arch.persistence.db", ptrTable, methods, fields, 7, 0x11, 13, 10, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteQueryBuilder;
}

+ (void)initialize {
  if (self == [AndroidArchPersistenceDbSupportSQLiteQueryBuilder class]) {
    JreStrongAssign(&AndroidArchPersistenceDbSupportSQLiteQueryBuilder_sLimitPattern, JavaUtilRegexPattern_compileWithNSString_(@"\\s*\\d+\\s*(,\\s*\\d+\\s*)?"));
    J2OBJC_SET_INITIALIZED(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)
  }
}

@end

AndroidArchPersistenceDbSupportSQLiteQueryBuilder *AndroidArchPersistenceDbSupportSQLiteQueryBuilder_builderWithNSString_(NSString *tableName) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  return create_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(tableName);
}

void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(AndroidArchPersistenceDbSupportSQLiteQueryBuilder *self, NSString *table) {
  NSObject_init(self);
  self->mDistinct_ = false;
  JreStrongAssign(&self->mColumns_, nil);
  JreStrongAssign(&self->mGroupBy_, nil);
  JreStrongAssign(&self->mHaving_, nil);
  JreStrongAssign(&self->mOrderBy_, nil);
  JreStrongAssign(&self->mLimit_, nil);
  JreStrongAssign(&self->mTable_, table);
}

AndroidArchPersistenceDbSupportSQLiteQueryBuilder *new_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table) {
  J2OBJC_NEW_IMPL(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, initWithNSString_, table)
}

AndroidArchPersistenceDbSupportSQLiteQueryBuilder *create_AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initWithNSString_(NSString *table) {
  J2OBJC_CREATE_IMPL(AndroidArchPersistenceDbSupportSQLiteQueryBuilder, initWithNSString_, table)
}

void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  if (!AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(clause)) {
    [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:name];
    [s appendWithNSString:clause];
  }
}

void AndroidArchPersistenceDbSupportSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  __unused jint n = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < n; i++) {
    __unused NSString *column = IOSObjectArray_Get(columns, i);
    if (i > 0) {
      [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:column];
  }
  [((JavaLangStringBuilder *) nil_chk(s)) appendWithChar:' '];
}

jboolean AndroidArchPersistenceDbSupportSQLiteQueryBuilder_isEmptyWithNSString_(NSString *input) {
  AndroidArchPersistenceDbSupportSQLiteQueryBuilder_initialize();
  return input == nil || [input java_length] == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteQueryBuilder)

@implementation AndroidArchPersistenceDbSupportSQLiteStatement

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(execute);
  methods[1].selector = @selector(executeUpdateDelete);
  methods[2].selector = @selector(executeInsert);
  methods[3].selector = @selector(simpleQueryForLong);
  methods[4].selector = @selector(simpleQueryForString);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidArchPersistenceDbSupportSQLiteStatement = { "SupportSQLiteStatement", "android.arch.persistence.db", NULL, methods, NULL, 7, 0x609, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidArchPersistenceDbSupportSQLiteStatement;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidArchPersistenceDbSupportSQLiteStatement)

NSString *AndroidContentContentValues_TAG = @"ContentValues";

@implementation AndroidContentContentValues

+ (NSString *)TAG {
  return AndroidContentContentValues_TAG;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidContentContentValues_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithInt:(jint)size {
  AndroidContentContentValues_initWithInt_(self, size);
  return self;
}

- (instancetype __nonnull)initWithAndroidContentContentValues:(AndroidContentContentValues *)from {
  AndroidContentContentValues_initWithAndroidContentContentValues_(self, from);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  AndroidContentContentValues_initWithJavaUtilHashMap_(self, values);
  return self;
}

- (jboolean)isEqual:(id)object {
  if (!([object isKindOfClass:[AndroidContentContentValues class]])) {
    return false;
  }
  return [((JavaUtilHashMap *) nil_chk(mValues_)) isEqual:((AndroidContentContentValues *) nil_chk(((AndroidContentContentValues *) cast_chk(object, [AndroidContentContentValues class]))))->mValues_];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilHashMap *) nil_chk(mValues_)) hash]);
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putAllWithAndroidContentContentValues:(AndroidContentContentValues *)other {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putAllWithJavaUtilMap:((AndroidContentContentValues *) nil_chk(other))->mValues_];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangByte:(JavaLangByte *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangShort:(JavaLangShort *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangInteger:(JavaLangInteger *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangLong:(JavaLangLong *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangFloat:(JavaLangFloat *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
     withJavaLangDouble:(JavaLangDouble *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangBoolean:(JavaLangBoolean *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
          withByteArray:(IOSByteArray *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (void)putNullWithNSString:(NSString *)key {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:nil];
}

- (jint)size {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) size];
}

- (void)removeWithNSString:(NSString *)key {
  [((JavaUtilHashMap *) nil_chk(mValues_)) removeWithId:key];
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(mValues_)) clear];
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) containsKeyWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
}

- (NSString *)getAsStringWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  return value != nil ? [value description] : nil;
}

- (JavaLangLong *)getAsLongWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangLong_valueOfWithLong_([((NSNumber *) cast_chk(value, [NSNumber class])) longLongValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangLong_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Long value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Long: ", value), e);
      return nil;
    }
  }
}

- (JavaLangInteger *)getAsIntegerWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangInteger_valueOfWithInt_([((NSNumber *) cast_chk(value, [NSNumber class])) intValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangInteger_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Integer value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Integer: ", value), e);
      return nil;
    }
  }
}

- (JavaLangShort *)getAsShortWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangShort_valueOfWithShort_([((NSNumber *) cast_chk(value, [NSNumber class])) shortValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangShort_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Short value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Short: ", value), e);
      return nil;
    }
  }
}

- (JavaLangByte *)getAsByteWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangByte_valueOfWithByte_([((NSNumber *) cast_chk(value, [NSNumber class])) charValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangByte_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Byte value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Byte: ", value), e);
      return nil;
    }
  }
}

- (JavaLangDouble *)getAsDoubleWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangDouble_valueOfWithDouble_([((NSNumber *) cast_chk(value, [NSNumber class])) doubleValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangDouble_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Double value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Double: ", value), e);
      return nil;
    }
  }
}

- (JavaLangFloat *)getAsFloatWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return value != nil ? JavaLangFloat_valueOfWithFloat_([((NSNumber *) cast_chk(value, [NSNumber class])) floatValue]) : nil;
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      @try {
        return JavaLangFloat_valueOfWithNSString_([value description]);
      }
      @catch (JavaLangNumberFormatException *e2) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidContentContentValues_TAG, JreStrcat("$@$$", @"Cannot parse Float value for ", value, @" at key ", key));
        return nil;
      }
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Float: ", value), e);
      return nil;
    }
  }
}

- (JavaLangBoolean *)getAsBooleanWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  @try {
    return (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
  }
  @catch (JavaLangClassCastException *e) {
    if ([JavaLangCharSequence_class_() isInstance:value]) {
      return JavaLangBoolean_valueOfWithNSString_([nil_chk(value) description]);
    }
    else if ([value isKindOfClass:[NSNumber class]]) {
      return JavaLangBoolean_valueOfWithBoolean_([((NSNumber *) nil_chk(((NSNumber *) cast_chk(value, [NSNumber class])))) intValue] != 0);
    }
    else {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidContentContentValues_TAG, JreStrcat("$$$@", @"Cannot cast value for ", key, @" to a Boolean: ", value), e);
      return nil;
    }
  }
}

- (IOSByteArray *)getAsByteArrayWithNSString:(NSString *)key {
  id value = [((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key];
  if ([value isKindOfClass:[IOSByteArray class]]) {
    return (IOSByteArray *) cast_chk(value, [IOSByteArray class]);
  }
  else {
    return nil;
  }
}

- (id<JavaUtilSet>)valueSet {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) entrySet];
}

- (id<JavaUtilSet>)keySet {
  return [((JavaUtilHashMap *) nil_chk(mValues_)) keySet];
}

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((JavaUtilHashMap *) nil_chk(mValues_)) putWithId:key withId:value];
}

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key {
  return (JavaUtilArrayList *) cast_chk([((JavaUtilHashMap *) nil_chk(mValues_)) getWithId:key], [JavaUtilArrayList class]);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (NSString * __strong name in nil_chk([((JavaUtilHashMap *) nil_chk(mValues_)) keySet])) {
    NSString *value = [self getAsStringWithNSString:name];
    if ([sb java_length] > 0) [sb appendWithNSString:@" "];
    [sb appendWithNSString:JreStrcat("$C$", name, '=', value)];
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 25, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangShort;", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, 27, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 28, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 29, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, 30, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 31, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 32, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, 36, 37, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 38, 19, -1, 39, 40, -1 },
    { NULL, "LNSString;", 0x1, 41, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithAndroidContentContentValues:);
  methods[3].selector = @selector(initWithJavaUtilHashMap:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(putWithNSString:withNSString:);
  methods[7].selector = @selector(putAllWithAndroidContentContentValues:);
  methods[8].selector = @selector(putWithNSString:withJavaLangByte:);
  methods[9].selector = @selector(putWithNSString:withJavaLangShort:);
  methods[10].selector = @selector(putWithNSString:withJavaLangInteger:);
  methods[11].selector = @selector(putWithNSString:withJavaLangLong:);
  methods[12].selector = @selector(putWithNSString:withJavaLangFloat:);
  methods[13].selector = @selector(putWithNSString:withJavaLangDouble:);
  methods[14].selector = @selector(putWithNSString:withJavaLangBoolean:);
  methods[15].selector = @selector(putWithNSString:withByteArray:);
  methods[16].selector = @selector(putNullWithNSString:);
  methods[17].selector = @selector(size);
  methods[18].selector = @selector(removeWithNSString:);
  methods[19].selector = @selector(clear);
  methods[20].selector = @selector(containsKeyWithNSString:);
  methods[21].selector = @selector(getWithNSString:);
  methods[22].selector = @selector(getAsStringWithNSString:);
  methods[23].selector = @selector(getAsLongWithNSString:);
  methods[24].selector = @selector(getAsIntegerWithNSString:);
  methods[25].selector = @selector(getAsShortWithNSString:);
  methods[26].selector = @selector(getAsByteWithNSString:);
  methods[27].selector = @selector(getAsDoubleWithNSString:);
  methods[28].selector = @selector(getAsFloatWithNSString:);
  methods[29].selector = @selector(getAsBooleanWithNSString:);
  methods[30].selector = @selector(getAsByteArrayWithNSString:);
  methods[31].selector = @selector(valueSet);
  methods[32].selector = @selector(keySet);
  methods[33].selector = @selector(putStringArrayListWithNSString:withJavaUtilArrayList:);
  methods[34].selector = @selector(getStringArrayListWithNSString:);
  methods[35].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "mValues_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 43, -1 },
  };
  static const void *ptrTable[] = { "I", "LAndroidContentContentValues;", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;)V", "equals", "LNSObject;", "hashCode", "put", "LNSString;LNSString;", "putAll", "LNSString;LJavaLangByte;", "LNSString;LJavaLangShort;", "LNSString;LJavaLangInteger;", "LNSString;LJavaLangLong;", "LNSString;LJavaLangFloat;", "LNSString;LJavaLangDouble;", "LNSString;LJavaLangBoolean;", "LNSString;[B", "putNull", "LNSString;", "remove", "containsKey", "get", "getAsString", "getAsLong", "getAsInteger", "getAsShort", "getAsByte", "getAsDouble", "getAsFloat", "getAsBoolean", "getAsByteArray", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "putStringArrayList", "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V", (void *)&AndroidContentContentValues__Annotations$0, "getStringArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/String;>;", (void *)&AndroidContentContentValues__Annotations$1, "toString", &AndroidContentContentValues_TAG, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _AndroidContentContentValues = { "ContentValues", "android.content", ptrTable, methods, fields, 7, 0x11, 36, 2, -1, -1, -1, -1, -1 };
  return &_AndroidContentContentValues;
}

@end

void AndroidContentContentValues_init(AndroidContentContentValues *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mValues_, new_JavaUtilHashMap_initWithInt_(8));
}

AndroidContentContentValues *new_AndroidContentContentValues_init() {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, init)
}

AndroidContentContentValues *create_AndroidContentContentValues_init() {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, init)
}

void AndroidContentContentValues_initWithInt_(AndroidContentContentValues *self, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mValues_, new_JavaUtilHashMap_initWithInt_withFloat_(size, 1.0f));
}

AndroidContentContentValues *new_AndroidContentContentValues_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, initWithInt_, size)
}

AndroidContentContentValues *create_AndroidContentContentValues_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, initWithInt_, size)
}

void AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *self, AndroidContentContentValues *from) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mValues_, new_JavaUtilHashMap_initWithJavaUtilMap_(((AndroidContentContentValues *) nil_chk(from))->mValues_));
}

AndroidContentContentValues *new_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from) {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, initWithAndroidContentContentValues_, from)
}

AndroidContentContentValues *create_AndroidContentContentValues_initWithAndroidContentContentValues_(AndroidContentContentValues *from) {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, initWithAndroidContentContentValues_, from)
}

void AndroidContentContentValues_initWithJavaUtilHashMap_(AndroidContentContentValues *self, JavaUtilHashMap *values) {
  NSObject_init(self);
  JreStrongAssign(&self->mValues_, values);
}

AndroidContentContentValues *new_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values) {
  J2OBJC_NEW_IMPL(AndroidContentContentValues, initWithJavaUtilHashMap_, values)
}

AndroidContentContentValues *create_AndroidContentContentValues_initWithJavaUtilHashMap_(JavaUtilHashMap *values) {
  J2OBJC_CREATE_IMPL(AndroidContentContentValues, initWithJavaUtilHashMap_, values)
}

IOSObjectArray *AndroidContentContentValues__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidContentContentValues__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidContentContentValues)

NSString *AndroidContentIOSContext_DATABASES = @"databases";
NSString *AndroidContentIOSContext_TAG = @"IOSContext";

@implementation AndroidContentIOSContext

+ (NSString *)DATABASES {
  return AndroidContentIOSContext_DATABASES;
}

+ (NSString *)TAG {
  return AndroidContentIOSContext_TAG;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidContentIOSContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidOsLooper *)getMainLooper {
  return AndroidOsLooper_getMainLooper();
}

+ (JavaIoFile *)makeBackupFileWithJavaIoFile:(JavaIoFile *)prefsFile {
  return AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(prefsFile);
}

- (JavaIoFile *)getSharedPrefsFileWithNSString:(NSString *)name {
  return AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(self, AndroidContentIOSContext_getPreferencesDir(self), JreStrcat("$$", name, @".xml"));
}

- (JavaIoFile *)makeFilenameWithJavaIoFile:(JavaIoFile *)base
                              withNSString:(NSString *)name {
  return AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(self, base, name);
}

- (id<AndroidContentSharedPreferences>)getSharedPreferencesWithNSString:(NSString *)name
                                                                withInt:(jint)mode {
  AndroidAppSharedPreferencesImpl *sp;
  JavaIoFile *prefsFile;
  jboolean needInitialLoad = false;
  @synchronized(sSharedPrefs_) {
    sp = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(sSharedPrefs_)) getWithId:name]);
    if (sp != nil && ![sp hasFileChangedUnexpectedly]) {
      return JreRetainedLocalValue(sp);
    }
    prefsFile = JreRetainedLocalValue([self getSharedPrefsFileWithNSString:name]);
    if (sp == nil) {
      sp = JreRetainedLocalValue(create_AndroidAppSharedPreferencesImpl_initWithJavaIoFile_withInt_withJavaUtilMap_withAndroidOsHandler_(prefsFile, mode, nil, create_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper_getMainLooper())));
      [sSharedPrefs_ putWithId:name withId:sp];
      needInitialLoad = true;
    }
  }
  @synchronized(sp) {
    if (needInitialLoad && [sp isLoaded]) {
      return JreRetainedLocalValue(sp);
    }
    JavaIoFile *backup = AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(prefsFile);
    if ([((JavaIoFile *) nil_chk(backup)) exists]) {
      [((JavaIoFile *) nil_chk(prefsFile)) delete__];
      [backup renameToWithJavaIoFile:prefsFile];
    }
    if ([((JavaIoFile *) nil_chk(prefsFile)) exists] && ![prefsFile canRead]) {
      AndroidUtilLog_wWithNSString_withNSString_(AndroidContentIOSContext_TAG, JreStrcat("$@$", @"Attempt to read preferences file ", prefsFile, @" without permission"));
    }
    id<JavaUtilMap> map = nil;
    AndroidOsFileUtils_FileStatus *stat = create_AndroidOsFileUtils_FileStatus_init();
    if (AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_([prefsFile getPath], stat) && [prefsFile canRead]) {
      @try {
        JavaIoFileInputStream *str = create_JavaIoFileInputStream_initWithJavaIoFile_(prefsFile);
        map = AndroidInternalUtilXmlUtils_readMapXmlWithJavaIoInputStream_(str);
        [str close];
      }
      @catch (OrgXmlpullV1XmlPullParserException *e) {
        AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidContentIOSContext_TAG, @"getSharedPreferences", e);
      }
      @catch (JavaIoFileNotFoundException *e) {
        AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidContentIOSContext_TAG, @"getSharedPreferences", e);
      }
      @catch (JavaIoIOException *e) {
        AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidContentIOSContext_TAG, @"getSharedPreferences", e);
      }
    }
    [sp replaceWithJavaUtilMap:map withAndroidOsFileUtils_FileStatus:stat];
  }
  return sp;
}

- (JavaIoFile *)getPreferencesDir {
  return AndroidContentIOSContext_getPreferencesDir(self);
}

- (JavaIoFileInputStream *)openFileInputWithNSString:(NSString *)name {
  return create_JavaIoFileInputStream_initWithJavaIoFile_(AndroidContentIOSContext_findLocalFileWithNSString_(self, name));
}

- (JavaIoFileOutputStream *)openFileOutputWithNSString:(NSString *)name
                                               withInt:(jint)mode {
  return create_JavaIoFileOutputStream_initWithJavaIoFile_(AndroidContentIOSContext_findLocalFileWithNSString_(self, name));
}

- (JavaIoFile *)findLocalFileWithNSString:(NSString *)name {
  return AndroidContentIOSContext_findLocalFileWithNSString_(self, name);
}

- (jboolean)deleteFileWithNSString:(NSString *)name {
  JavaIoFile *localFile = AndroidContentIOSContext_findLocalFileWithNSString_(self, name);
  return [((JavaIoFile *) nil_chk(localFile)) delete__];
}

- (JavaIoFile *)getFileStreamPathWithNSString:(NSString *)name {
  return AndroidContentIOSContext_findLocalFileWithNSString_(self, name);
}

- (JavaIoFile *)getFilesDir {
  return [self getDirWithNSString:@"files" withInt:AndroidContentContext_MODE_PRIVATE];
}

- (JavaIoFile *)getRootDir {
  JavaIoFile *file = create_JavaIoFile_initWithNSString_(AndroidContentIOSContext_getRootDirString(self));
  [file mkdirs];
  return file;
}

- (NSString *)getRootDirString {
  return AndroidContentIOSContext_getRootDirString(self);
}

- (JavaIoFile *)getExternalFilesDirWithNSString:(NSString * __nullable)type {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)getExternalFilesDirsWithNSString:(NSString *)type {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaIoFile *)getCacheDir {
  return [self getDirWithNSString:@"cache" withInt:AndroidContentContext_MODE_PRIVATE];
}

- (IOSObjectArray *)fileList {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaIoFile *)getDirWithNSString:(NSString *)name
                           withInt:(jint)mode {
  JavaIoFile *rootDir = [self getRootDir];
  JavaIoFile *filesDir = create_JavaIoFile_initWithJavaIoFile_withNSString_(rootDir, name);
  [filesDir mkdirs];
  return filesDir;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_([self getDatabasePathWithNSString:name], factory);
}

- (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)name
                                                                  withInt:(jint)mode
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler> __nullable)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_([((JavaIoFile *) nil_chk([self getDatabasePathWithNSString:name])) getPath], factory, errorHandler);
}

- (jboolean)deleteDatabaseWithNSString:(NSString *)name {
  return [((JavaIoFile *) nil_chk([self getDatabasePathWithNSString:name])) delete__];
}

- (JavaIoFile *)getDatabasePathWithNSString:(NSString *)name {
  JavaIoFile *dbDir = [self getDirWithNSString:AndroidContentIOSContext_DATABASES withInt:AndroidContentContext_MODE_PRIVATE];
  JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_(dbDir, name);
  return file;
}

- (IOSObjectArray *)databaseList {
  return [((JavaIoFile *) nil_chk([self getDirWithNSString:AndroidContentIOSContext_DATABASES withInt:AndroidContentContext_MODE_PRIVATE])) list];
}

- (void)dealloc {
  RELEASE_(mSync_);
  RELEASE_(mPreferencesDir_);
  RELEASE_(sSharedPrefs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidContentSharedPreferences;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileInputStream;", 0x1, 8, 3, 9, -1, -1, -1 },
    { NULL, "LJavaIoFileOutputStream;", 0x1, 10, 7, 9, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 11, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaIoFile;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 16, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMainLooper);
  methods[2].selector = @selector(makeBackupFileWithJavaIoFile:);
  methods[3].selector = @selector(getSharedPrefsFileWithNSString:);
  methods[4].selector = @selector(makeFilenameWithJavaIoFile:withNSString:);
  methods[5].selector = @selector(getSharedPreferencesWithNSString:withInt:);
  methods[6].selector = @selector(getPreferencesDir);
  methods[7].selector = @selector(openFileInputWithNSString:);
  methods[8].selector = @selector(openFileOutputWithNSString:withInt:);
  methods[9].selector = @selector(findLocalFileWithNSString:);
  methods[10].selector = @selector(deleteFileWithNSString:);
  methods[11].selector = @selector(getFileStreamPathWithNSString:);
  methods[12].selector = @selector(getFilesDir);
  methods[13].selector = @selector(getRootDir);
  methods[14].selector = @selector(getRootDirString);
  methods[15].selector = @selector(getExternalFilesDirWithNSString:);
  methods[16].selector = @selector(getExternalFilesDirsWithNSString:);
  methods[17].selector = @selector(getCacheDir);
  methods[18].selector = @selector(fileList);
  methods[19].selector = @selector(getDirWithNSString:withInt:);
  methods[20].selector = @selector(openOrCreateDatabaseWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[21].selector = @selector(openOrCreateDatabaseWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[22].selector = @selector(deleteDatabaseWithNSString:);
  methods[23].selector = @selector(getDatabasePathWithNSString:);
  methods[24].selector = @selector(databaseList);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATABASES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "mSync_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreferencesDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sSharedPrefs_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "makeBackupFile", "LJavaIoFile;", "getSharedPrefsFile", "LNSString;", "makeFilename", "LJavaIoFile;LNSString;", "getSharedPreferences", "LNSString;I", "openFileInput", "LJavaIoFileNotFoundException;", "openFileOutput", "findLocalFile", "deleteFile", "getFileStreamPath", "getExternalFilesDir", "getExternalFilesDirs", "getDir", "openOrCreateDatabase", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "deleteDatabase", "getDatabasePath", &AndroidContentIOSContext_DATABASES, &AndroidContentIOSContext_TAG, "Ljava/util/HashMap<Ljava/lang/String;Landroid/app/SharedPreferencesImpl;>;" };
  static const J2ObjcClassInfo _AndroidContentIOSContext = { "IOSContext", "android.content", ptrTable, methods, fields, 7, 0x1, 25, 5, -1, -1, -1, -1, -1 };
  return &_AndroidContentIOSContext;
}

@end

void AndroidContentIOSContext_init(AndroidContentIOSContext *self) {
  AndroidAppApplication_init(self);
  JreStrongAssignAndConsume(&self->mSync_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->sSharedPrefs_, new_JavaUtilHashMap_init());
}

AndroidContentIOSContext *new_AndroidContentIOSContext_init() {
  J2OBJC_NEW_IMPL(AndroidContentIOSContext, init)
}

AndroidContentIOSContext *create_AndroidContentIOSContext_init() {
  J2OBJC_CREATE_IMPL(AndroidContentIOSContext, init)
}

JavaIoFile *AndroidContentIOSContext_makeBackupFileWithJavaIoFile_(JavaIoFile *prefsFile) {
  AndroidContentIOSContext_initialize();
  return create_JavaIoFile_initWithNSString_(JreStrcat("$$", [((JavaIoFile *) nil_chk(prefsFile)) getPath], @".bak"));
}

JavaIoFile *AndroidContentIOSContext_makeFilenameWithJavaIoFile_withNSString_(AndroidContentIOSContext *self, JavaIoFile *base, NSString *name) {
  if ([((NSString *) nil_chk(name)) java_indexOf:JreLoadStatic(JavaIoFile, separatorChar)] < 0) {
    return create_JavaIoFile_initWithJavaIoFile_withNSString_(base, name);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"File ", name, @" contains a path separator"));
}

JavaIoFile *AndroidContentIOSContext_getPreferencesDir(AndroidContentIOSContext *self) {
  @synchronized(self->mSync_) {
    if (self->mPreferencesDir_ == nil) {
      JreStrongAssign(&self->mPreferencesDir_, [self getDirWithNSString:@"shared_prefs" withInt:AndroidContentContext_MODE_PRIVATE]);
    }
    return JreRetainedLocalValue(self->mPreferencesDir_);
  }
}

JavaIoFile *AndroidContentIOSContext_findLocalFileWithNSString_(AndroidContentIOSContext *self, NSString *name) {
  return create_JavaIoFile_initWithJavaIoFile_withNSString_([self getFilesDir], name);
}

NSString *AndroidContentIOSContext_getRootDirString(AndroidContentIOSContext *self) {
  NSArray *paths = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDomainMask, YES);
  
  NSString *documentsDirectory = [paths firstObject];
  
  return documentsDirectory;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidContentIOSContext)

@implementation AndroidContentSharedPreferences_OnSharedPreferenceChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onSharedPreferenceChangedWithAndroidContentSharedPreferences:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSharedPreferenceChanged", "LAndroidContentSharedPreferences;LNSString;", "LAndroidContentSharedPreferences;" };
  static const J2ObjcClassInfo _AndroidContentSharedPreferences_OnSharedPreferenceChangeListener = { "OnSharedPreferenceChangeListener", "android.content", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidContentSharedPreferences_OnSharedPreferenceChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidContentSharedPreferences_OnSharedPreferenceChangeListener)

@implementation AndroidDatabaseCursor

+ (jint)FIELD_TYPE_NULL {
  return AndroidDatabaseCursor_FIELD_TYPE_NULL;
}

+ (jint)FIELD_TYPE_INTEGER {
  return AndroidDatabaseCursor_FIELD_TYPE_INTEGER;
}

+ (jint)FIELD_TYPE_FLOAT {
  return AndroidDatabaseCursor_FIELD_TYPE_FLOAT;
}

+ (jint)FIELD_TYPE_STRING {
  return AndroidDatabaseCursor_FIELD_TYPE_STRING;
}

+ (jint)FIELD_TYPE_BLOB {
  return AndroidDatabaseCursor_FIELD_TYPE_BLOB;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 5, 4, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, 8, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "S", 0x401, 12, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 13, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 14, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 15, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, 16, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 17, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 25, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x401, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCount);
  methods[1].selector = @selector(getPosition);
  methods[2].selector = @selector(moveWithInt:);
  methods[3].selector = @selector(moveToPositionWithInt:);
  methods[4].selector = @selector(moveToFirst);
  methods[5].selector = @selector(moveToLast);
  methods[6].selector = @selector(moveToNext);
  methods[7].selector = @selector(moveToPrevious);
  methods[8].selector = @selector(isFirst);
  methods[9].selector = @selector(isLast);
  methods[10].selector = @selector(isBeforeFirst);
  methods[11].selector = @selector(isAfterLast);
  methods[12].selector = @selector(getColumnIndexWithNSString:);
  methods[13].selector = @selector(getColumnIndexOrThrowWithNSString:);
  methods[14].selector = @selector(getColumnNameWithInt:);
  methods[15].selector = @selector(getColumnNames);
  methods[16].selector = @selector(getColumnCount);
  methods[17].selector = @selector(getBlobWithInt:);
  methods[18].selector = @selector(getStringWithInt:);
  methods[19].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[20].selector = @selector(getShortWithInt:);
  methods[21].selector = @selector(getIntWithInt:);
  methods[22].selector = @selector(getLongWithInt:);
  methods[23].selector = @selector(getFloatWithInt:);
  methods[24].selector = @selector(getDoubleWithInt:);
  methods[25].selector = @selector(getTypeWithInt:);
  methods[26].selector = @selector(isNullWithInt:);
  methods[27].selector = @selector(deactivate);
  methods[28].selector = @selector(requery);
  methods[29].selector = @selector(close);
  methods[30].selector = @selector(isClosed);
  methods[31].selector = @selector(registerContentObserverWithAndroidDatabaseContentObserver:);
  methods[32].selector = @selector(unregisterContentObserverWithAndroidDatabaseContentObserver:);
  methods[33].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[34].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[35].selector = @selector(getWantsAllOnMoveCalls);
  methods[36].selector = @selector(getExtras);
  methods[37].selector = @selector(respondWithAndroidOsBundle:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIELD_TYPE_NULL", "I", .constantValue.asInt = AndroidDatabaseCursor_FIELD_TYPE_NULL, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_INTEGER", "I", .constantValue.asInt = AndroidDatabaseCursor_FIELD_TYPE_INTEGER, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_FLOAT", "I", .constantValue.asInt = AndroidDatabaseCursor_FIELD_TYPE_FLOAT, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_STRING", "I", .constantValue.asInt = AndroidDatabaseCursor_FIELD_TYPE_STRING, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_BLOB", "I", .constantValue.asInt = AndroidDatabaseCursor_FIELD_TYPE_BLOB, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "move", "I", "moveToPosition", "getColumnIndex", "LNSString;", "getColumnIndexOrThrow", "LJavaLangIllegalArgumentException;", "getColumnName", "getBlob", "getString", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "getShort", "getInt", "getLong", "getFloat", "getDouble", "getType", "isNull", (void *)&AndroidDatabaseCursor__Annotations$0, "registerContentObserver", "LAndroidDatabaseContentObserver;", "unregisterContentObserver", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver", "respond", "LAndroidOsBundle;" };
  static const J2ObjcClassInfo _AndroidDatabaseCursor = { "Cursor", "android.database", ptrTable, methods, fields, 7, 0x609, 38, 5, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCursor;
}

@end

IOSObjectArray *AndroidDatabaseCursor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseCursor)

@implementation AndroidDatabaseCrossProcessCursor

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidDatabaseCursorWindow;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWindow);
  methods[1].selector = @selector(fillWindowWithInt:withAndroidDatabaseCursorWindow:);
  methods[2].selector = @selector(onMoveWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fillWindow", "ILAndroidDatabaseCursorWindow;", "onMove", "II" };
  static const J2ObjcClassInfo _AndroidDatabaseCrossProcessCursor = { "CrossProcessCursor", "android.database", ptrTable, methods, NULL, 7, 0x609, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCrossProcessCursor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseCrossProcessCursor)

@implementation AndroidDatabaseAbstractCursor

- (jint)getCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getColumnNames {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getStringWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jshort)getShortWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getIntWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getLongWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jfloat)getFloatWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getDoubleWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isNullWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getTypeWithInt:(jint)column {
  return AndroidDatabaseCursor_FIELD_TYPE_STRING;
}

- (IOSByteArray *)getBlobWithInt:(jint)column {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"getBlob is not supported");
}

- (AndroidDatabaseCursorWindow *)getWindow {
  return nil;
}

- (jint)getColumnCount {
  return ((IOSObjectArray *) nil_chk([self getColumnNames]))->size_;
}

- (void)deactivate {
  [self onDeactivateOrClose];
}

- (void)onDeactivateOrClose {
  if (mSelfObserver_ != nil) {
    mSelfObserverRegistered_ = false;
  }
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyInvalidated];
}

- (jboolean)requery {
  if (mSelfObserver_ != nil && mSelfObserverRegistered_ == false) {
    mSelfObserverRegistered_ = true;
  }
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyChanged];
  return true;
}

- (jboolean)isClosed {
  return mClosed_;
}

- (void)close {
  mClosed_ = true;
  [((AndroidDatabaseContentObservable *) nil_chk(mContentObservable_)) unregisterAll];
  [self onDeactivateOrClose];
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  return true;
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  NSString *result = [self getStringWithInt:columnIndex];
  if (result != nil) {
    IOSCharArray *data = ((AndroidDatabaseCharArrayBuffer *) nil_chk(buffer))->data_;
    if (data == nil || data->size_ < [result java_length]) {
      JreStrongAssign(&buffer->data_, [result java_toCharArray]);
    }
    else {
      [result java_getChars:0 sourceEnd:[result java_length] destination:data destinationBegin:0];
    }
    buffer->sizeCopied_ = [result java_length];
  }
  else {
    ((AndroidDatabaseCharArrayBuffer *) nil_chk(buffer))->sizeCopied_ = 0;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseAbstractCursor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getPosition {
  return mPos_;
}

- (jboolean)moveToPositionWithInt:(jint)position {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, position);
}

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(self, position, window);
}

- (jboolean)moveWithInt:(jint)offset {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, mPos_ + offset);
}

- (jboolean)moveToFirst {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, 0);
}

- (jboolean)moveToLast {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, [self getCount] - 1);
}

- (jboolean)moveToNext {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, mPos_ + 1);
}

- (jboolean)moveToPrevious {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, mPos_ - 1);
}

- (jboolean)isFirst {
  return mPos_ == 0 && [self getCount] != 0;
}

- (jboolean)isLast {
  jint cnt = [self getCount];
  return mPos_ == (cnt - 1) && cnt != 0;
}

- (jboolean)isBeforeFirst {
  if ([self getCount] == 0) {
    return true;
  }
  return mPos_ == -1;
}

- (jboolean)isAfterLast {
  if ([self getCount] == 0) {
    return true;
  }
  return mPos_ == [self getCount];
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  jint periodIndex = [((NSString *) nil_chk(columnName)) java_lastIndexOf:'.'];
  if (periodIndex != -1) {
    JavaLangException *e = create_JavaLangException_init();
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseAbstractCursor_TAG, JreStrcat("$$", @"requesting column name with table name -- ", columnName), e);
    columnName = [columnName java_substring:periodIndex + 1];
  }
  IOSObjectArray *columnNames = [self getColumnNames];
  jint length = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(columnNames, i))) java_equalsIgnoreCase:columnName]) {
      return i;
    }
  }
  return -1;
}

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName {
  jint index = [self getColumnIndexWithNSString:columnName];
  if (index < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"column '", columnName, @"' does not exist"));
  }
  return index;
}

- (NSString *)getColumnNameWithInt:(jint)columnIndex {
  return IOSObjectArray_Get(nil_chk([self getColumnNames]), columnIndex);
}

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  [((AndroidDatabaseContentObservable *) nil_chk(mContentObservable_)) registerObserverWithId:observer];
}

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  if (!mClosed_) {
    [((AndroidDatabaseContentObservable *) nil_chk(mContentObservable_)) unregisterObserverWithId:observer];
  }
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) registerObserverWithId:observer];
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) unregisterObserverWithId:observer];
}

- (void)onChangeWithBoolean:(jboolean)selfChange {
  @synchronized(mSelfObserverLock_) {
    [((AndroidDatabaseContentObservable *) nil_chk(mContentObservable_)) dispatchChangeWithBoolean:selfChange withAndroidNetUri:nil];
    if (mNotifyUri_ != nil && selfChange) {
    }
  }
}

- (AndroidNetUri *)getNotificationUri {
  @synchronized(mSelfObserverLock_) {
    return JreRetainedLocalValue(mNotifyUri_);
  }
}

- (jboolean)getWantsAllOnMoveCalls {
  return false;
}

- (void)setExtrasWithAndroidOsBundle:(AndroidOsBundle *)extras {
  JreStrongAssign(&mExtras_, (extras == nil) ? JreLoadStatic(AndroidOsBundle, EMPTY) : extras);
}

- (AndroidOsBundle *)getExtras {
  return mExtras_;
}

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras {
  return JreLoadStatic(AndroidOsBundle, EMPTY);
}

- (jboolean)isFieldUpdatedWithInt:(jint)columnIndex {
  return false;
}

- (id)getUpdatedFieldWithInt:(jint)columnIndex {
  return nil;
}

- (void)checkPosition {
  if (-1 == mPos_ || [self getCount] == mPos_) {
    @throw create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(mPos_, [self getCount]);
  }
}

- (void)java_finalize {
  @try {
    if (!mClosed_) [self close];
  }
  @catch (JavaLangException *e) {
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseAbstractCursor class]);
  RELEASE_(mUpdatedRows_);
  RELEASE_(mCurrentRowID_);
  RELEASE_(mNotifyUri_);
  RELEASE_(mSelfObserverLock_);
  RELEASE_(mSelfObserver_);
  RELEASE_(mDataSetObservable_);
  RELEASE_(mContentObservable_);
  RELEASE_(mExtras_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 4, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 5, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursorWindow;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 17, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 29, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 33, 1, -1, -1, 34, -1 },
    { NULL, "LNSObject;", 0x4, 35, 1, -1, -1, 36, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 37, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCount);
  methods[1].selector = @selector(getColumnNames);
  methods[2].selector = @selector(getStringWithInt:);
  methods[3].selector = @selector(getShortWithInt:);
  methods[4].selector = @selector(getIntWithInt:);
  methods[5].selector = @selector(getLongWithInt:);
  methods[6].selector = @selector(getFloatWithInt:);
  methods[7].selector = @selector(getDoubleWithInt:);
  methods[8].selector = @selector(isNullWithInt:);
  methods[9].selector = @selector(getTypeWithInt:);
  methods[10].selector = @selector(getBlobWithInt:);
  methods[11].selector = @selector(getWindow);
  methods[12].selector = @selector(getColumnCount);
  methods[13].selector = @selector(deactivate);
  methods[14].selector = @selector(onDeactivateOrClose);
  methods[15].selector = @selector(requery);
  methods[16].selector = @selector(isClosed);
  methods[17].selector = @selector(close);
  methods[18].selector = @selector(onMoveWithInt:withInt:);
  methods[19].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[20].selector = @selector(init);
  methods[21].selector = @selector(getPosition);
  methods[22].selector = @selector(moveToPositionWithInt:);
  methods[23].selector = @selector(fillWindowWithInt:withAndroidDatabaseCursorWindow:);
  methods[24].selector = @selector(moveWithInt:);
  methods[25].selector = @selector(moveToFirst);
  methods[26].selector = @selector(moveToLast);
  methods[27].selector = @selector(moveToNext);
  methods[28].selector = @selector(moveToPrevious);
  methods[29].selector = @selector(isFirst);
  methods[30].selector = @selector(isLast);
  methods[31].selector = @selector(isBeforeFirst);
  methods[32].selector = @selector(isAfterLast);
  methods[33].selector = @selector(getColumnIndexWithNSString:);
  methods[34].selector = @selector(getColumnIndexOrThrowWithNSString:);
  methods[35].selector = @selector(getColumnNameWithInt:);
  methods[36].selector = @selector(registerContentObserverWithAndroidDatabaseContentObserver:);
  methods[37].selector = @selector(unregisterContentObserverWithAndroidDatabaseContentObserver:);
  methods[38].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[39].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[40].selector = @selector(onChangeWithBoolean:);
  methods[41].selector = @selector(getNotificationUri);
  methods[42].selector = @selector(getWantsAllOnMoveCalls);
  methods[43].selector = @selector(setExtrasWithAndroidOsBundle:);
  methods[44].selector = @selector(getExtras);
  methods[45].selector = @selector(respondWithAndroidOsBundle:);
  methods[46].selector = @selector(isFieldUpdatedWithInt:);
  methods[47].selector = @selector(getUpdatedFieldWithInt:);
  methods[48].selector = @selector(checkPosition);
  methods[49].selector = @selector(java_finalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "mUpdatedRows_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 39, 40 },
    { "mPos_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRowIdColumnIndex_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, 41 },
    { "mCurrentRowID_", "LJavaLangLong;", .constantValue.asLong = 0, 0x4, -1, -1, -1, 42 },
    { "mClosed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNotifyUri_", "LAndroidNetUri;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelfObserverLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSelfObserver_", "LAndroidDatabaseContentObserver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelfObserverRegistered_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDataSetObservable_", "LAndroidDatabaseDataSetObservable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mContentObservable_", "LAndroidDatabaseContentObservable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mExtras_", "LAndroidOsBundle;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getString", "I", "getShort", "getInt", "getLong", "getFloat", "getDouble", "isNull", "getType", "getBlob", "onMove", "II", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "moveToPosition", "fillWindow", "ILAndroidDatabaseCursorWindow;", "move", "getColumnIndex", "LNSString;", "getColumnIndexOrThrow", "getColumnName", "registerContentObserver", "LAndroidDatabaseContentObserver;", "unregisterContentObserver", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver", "onChange", "Z", "setExtras", "LAndroidOsBundle;", "respond", "isFieldUpdated", (void *)&AndroidDatabaseAbstractCursor__Annotations$0, "getUpdatedField", (void *)&AndroidDatabaseAbstractCursor__Annotations$1, "finalize", &AndroidDatabaseAbstractCursor_TAG, "Ljava/util/HashMap<Ljava/lang/Long;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", (void *)&AndroidDatabaseAbstractCursor__Annotations$2, (void *)&AndroidDatabaseAbstractCursor__Annotations$3, (void *)&AndroidDatabaseAbstractCursor__Annotations$4, "LAndroidDatabaseAbstractCursor_SelfContentObserver;" };
  static const J2ObjcClassInfo _AndroidDatabaseAbstractCursor = { "AbstractCursor", "android.database", ptrTable, methods, fields, 7, 0x401, 50, 13, -1, 43, -1, -1, -1 };
  return &_AndroidDatabaseAbstractCursor;
}

@end

void AndroidDatabaseAbstractCursor_init(AndroidDatabaseAbstractCursor *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mSelfObserverLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->mDataSetObservable_, new_AndroidDatabaseDataSetObservable_init());
  JreStrongAssignAndConsume(&self->mContentObservable_, new_AndroidDatabaseContentObservable_init());
  JreStrongAssign(&self->mExtras_, JreLoadStatic(AndroidOsBundle, EMPTY));
  self->mPos_ = -1;
  self->mRowIdColumnIndex_ = -1;
  JreStrongAssign(&self->mCurrentRowID_, nil);
  JreStrongAssignAndConsume(&self->mUpdatedRows_, new_JavaUtilHashMap_init());
}

jboolean AndroidDatabaseAbstractCursor_moveToPositionWithInt_(AndroidDatabaseAbstractCursor *self, jint position) {
  jint count = [self getCount];
  if (position >= count) {
    self->mPos_ = count;
    return false;
  }
  if (position < 0) {
    self->mPos_ = -1;
    return false;
  }
  if (position == self->mPos_) {
    return true;
  }
  jboolean result = [self onMoveWithInt:self->mPos_ withInt:position];
  if (result == false) {
    self->mPos_ = -1;
  }
  else {
    self->mPos_ = position;
    if (self->mRowIdColumnIndex_ != -1) {
      JreStrongAssign(&self->mCurrentRowID_, JavaLangLong_valueOfWithLong_([self getLongWithInt:self->mRowIdColumnIndex_]));
    }
  }
  return result;
}

IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractCursor__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseAbstractCursor)

@implementation AndroidDatabaseContentObserver

- (instancetype __nonnull)initWithAndroidOsHandler:(AndroidOsHandler *)handler {
  AndroidDatabaseContentObserver_initWithAndroidOsHandler_(self, handler);
  return self;
}

- (jboolean)deliverSelfNotifications {
  return false;
}

- (void)onChangeWithBoolean:(jboolean)selfChange {
}

- (void)onChangeWithBoolean:(jboolean)selfChange
          withAndroidNetUri:(AndroidNetUri *)uri {
  [self onChangeWithBoolean:selfChange];
}

- (void)onChangeWithBoolean:(jboolean)selfChange
          withAndroidNetUri:(AndroidNetUri *)uri
                    withInt:(jint)userId {
  [self onChangeWithBoolean:selfChange withAndroidNetUri:uri];
}

- (void)dispatchChangeWithBoolean:(jboolean)selfChange {
  AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_(self, selfChange, nil);
}

- (void)dispatchChangeWithBoolean:(jboolean)selfChange
                withAndroidNetUri:(AndroidNetUri *)uri {
  AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_(self, selfChange, uri);
}

- (void)dispatchChangeWithBoolean:(jboolean)selfChange
                withAndroidNetUri:(AndroidNetUri *)uri
                          withInt:(jint)userId {
  AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_withInt_(self, selfChange, uri, userId);
}

- (void)dealloc {
  RELEASE_(mLock_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 2, -1, -1, 6, -1 },
    { NULL, "V", 0x11, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidOsHandler:);
  methods[1].selector = @selector(deliverSelfNotifications);
  methods[2].selector = @selector(onChangeWithBoolean:);
  methods[3].selector = @selector(onChangeWithBoolean:withAndroidNetUri:);
  methods[4].selector = @selector(onChangeWithBoolean:withAndroidNetUri:withInt:);
  methods[5].selector = @selector(dispatchChangeWithBoolean:);
  methods[6].selector = @selector(dispatchChangeWithBoolean:withAndroidNetUri:);
  methods[7].selector = @selector(dispatchChangeWithBoolean:withAndroidNetUri:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mHandler_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsHandler;", "onChange", "Z", "ZLAndroidNetUri;", "ZLAndroidNetUri;I", "dispatchChange", (void *)&AndroidDatabaseContentObserver__Annotations$0, "LAndroidDatabaseContentObserver_NotificationRunnable;" };
  static const J2ObjcClassInfo _AndroidDatabaseContentObserver = { "ContentObserver", "android.database", ptrTable, methods, fields, 7, 0x401, 8, 2, -1, 7, -1, -1, -1 };
  return &_AndroidDatabaseContentObserver;
}

@end

void AndroidDatabaseContentObserver_initWithAndroidOsHandler_(AndroidDatabaseContentObserver *self, AndroidOsHandler *handler) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
  JreStrongAssign(&self->mHandler_, handler);
}

void AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_(AndroidDatabaseContentObserver *self, jboolean selfChange, AndroidNetUri *uri) {
  AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_withInt_(self, selfChange, uri, AndroidOsUserHandle_getCallingUserId());
}

void AndroidDatabaseContentObserver_dispatchChangeWithBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver *self, jboolean selfChange, AndroidNetUri *uri, jint userId) {
  if (self->mHandler_ == nil) {
    [self onChangeWithBoolean:selfChange withAndroidNetUri:uri withInt:userId];
  }
  else {
    [self->mHandler_ postWithJavaLangRunnable:create_AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(self, selfChange, uri, userId)];
  }
}

IOSObjectArray *AndroidDatabaseContentObserver__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseContentObserver)

@implementation AndroidDatabaseAbstractCursor_SelfContentObserver

- (instancetype __nonnull)initWithAndroidDatabaseAbstractCursor:(AndroidDatabaseAbstractCursor *)cursor {
  AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(self, cursor);
  return self;
}

- (jboolean)deliverSelfNotifications {
  return false;
}

- (void)onChangeWithBoolean:(jboolean)selfChange {
  AndroidDatabaseAbstractCursor *cursor = [((JavaLangRefWeakReference *) nil_chk(mCursor_)) get];
  if (cursor != nil) {
    [cursor onChangeWithBoolean:false];
  }
}

- (void)dealloc {
  RELEASE_(mCursor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseAbstractCursor:);
  methods[1].selector = @selector(deliverSelfNotifications);
  methods[2].selector = @selector(onChangeWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCursor_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseAbstractCursor;", "onChange", "Z", "Ljava/lang/ref/WeakReference<Landroid/database/AbstractCursor;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseAbstractCursor_SelfContentObserver = { "SelfContentObserver", "android.database", ptrTable, methods, fields, 7, 0xc, 3, 1, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseAbstractCursor_SelfContentObserver;
}

@end

void AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(AndroidDatabaseAbstractCursor_SelfContentObserver *self, AndroidDatabaseAbstractCursor *cursor) {
  AndroidDatabaseContentObserver_initWithAndroidOsHandler_(self, nil);
  JreStrongAssignAndConsume(&self->mCursor_, new_JavaLangRefWeakReference_initWithId_(cursor));
}

AndroidDatabaseAbstractCursor_SelfContentObserver *new_AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(AndroidDatabaseAbstractCursor *cursor) {
  J2OBJC_NEW_IMPL(AndroidDatabaseAbstractCursor_SelfContentObserver, initWithAndroidDatabaseAbstractCursor_, cursor)
}

AndroidDatabaseAbstractCursor_SelfContentObserver *create_AndroidDatabaseAbstractCursor_SelfContentObserver_initWithAndroidDatabaseAbstractCursor_(AndroidDatabaseAbstractCursor *cursor) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseAbstractCursor_SelfContentObserver, initWithAndroidDatabaseAbstractCursor_, cursor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseAbstractCursor_SelfContentObserver)

@implementation AndroidDatabaseAbstractWindowedCursor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseAbstractWindowedCursor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getBlobWithInt:mPos_ withInt:columnIndex];
}

- (NSString *)getStringWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getStringWithInt:mPos_ withInt:columnIndex];
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  [self checkPosition];
  [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) copyStringToBufferWithInt:mPos_ withInt:columnIndex withAndroidDatabaseCharArrayBuffer:buffer];
}

- (jshort)getShortWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getShortWithInt:mPos_ withInt:columnIndex];
}

- (jint)getIntWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getIntWithInt:mPos_ withInt:columnIndex];
}

- (jlong)getLongWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getLongWithInt:mPos_ withInt:columnIndex];
}

- (jfloat)getFloatWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getFloatWithInt:mPos_ withInt:columnIndex];
}

- (jdouble)getDoubleWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getDoubleWithInt:mPos_ withInt:columnIndex];
}

- (jboolean)isNullWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getTypeWithInt:mPos_ withInt:columnIndex] == AndroidDatabaseCursor_FIELD_TYPE_NULL;
}

- (jboolean)isBlobWithInt:(jint)columnIndex {
  return [self getTypeWithInt:columnIndex] == AndroidDatabaseCursor_FIELD_TYPE_BLOB;
}

- (jboolean)isStringWithInt:(jint)columnIndex {
  return [self getTypeWithInt:columnIndex] == AndroidDatabaseCursor_FIELD_TYPE_STRING;
}

- (jboolean)isLongWithInt:(jint)columnIndex {
  return [self getTypeWithInt:columnIndex] == AndroidDatabaseCursor_FIELD_TYPE_INTEGER;
}

- (jboolean)isFloatWithInt:(jint)columnIndex {
  return [self getTypeWithInt:columnIndex] == AndroidDatabaseCursor_FIELD_TYPE_FLOAT;
}

- (jint)getTypeWithInt:(jint)columnIndex {
  [self checkPosition];
  return [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getTypeWithInt:mPos_ withInt:columnIndex];
}

- (void)checkPosition {
  [super checkPosition];
  if (mWindow_ == nil) {
    @throw create_AndroidDatabaseStaleDataException_initWithNSString_(@"Attempting to access a closed CursorWindow.Most probable cause: cursor is deactivated prior to calling this method.");
  }
}

- (AndroidDatabaseCursorWindow *)getWindow {
  return mWindow_;
}

- (void)setWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  if (window != mWindow_) {
    [self closeWindow];
    JreStrongAssign(&mWindow_, window);
  }
}

- (jboolean)hasWindow {
  return mWindow_ != nil;
}

- (void)closeWindow {
  if (mWindow_ != nil) {
    [mWindow_ close];
    JreStrongAssign(&mWindow_, nil);
  }
}

- (void)clearOrCreateWindowWithNSString:(NSString *)name {
  if (mWindow_ == nil) {
    JreStrongAssignAndConsume(&mWindow_, new_AndroidDatabaseCursorWindow_initWithNSString_(name));
  }
  else {
    [mWindow_ clear];
  }
}

- (void)onDeactivateOrClose {
  [super onDeactivateOrClose];
  [self closeWindow];
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseAbstractWindowedCursor class]);
  RELEASE_(mWindow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 1, -1, -1, 12, -1 },
    { NULL, "Z", 0x1, 13, 1, -1, -1, 14, -1 },
    { NULL, "Z", 0x1, 15, 1, -1, -1, 16, -1 },
    { NULL, "Z", 0x1, 17, 1, -1, -1, 18, -1 },
    { NULL, "I", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursorWindow;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBlobWithInt:);
  methods[2].selector = @selector(getStringWithInt:);
  methods[3].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[4].selector = @selector(getShortWithInt:);
  methods[5].selector = @selector(getIntWithInt:);
  methods[6].selector = @selector(getLongWithInt:);
  methods[7].selector = @selector(getFloatWithInt:);
  methods[8].selector = @selector(getDoubleWithInt:);
  methods[9].selector = @selector(isNullWithInt:);
  methods[10].selector = @selector(isBlobWithInt:);
  methods[11].selector = @selector(isStringWithInt:);
  methods[12].selector = @selector(isLongWithInt:);
  methods[13].selector = @selector(isFloatWithInt:);
  methods[14].selector = @selector(getTypeWithInt:);
  methods[15].selector = @selector(checkPosition);
  methods[16].selector = @selector(getWindow);
  methods[17].selector = @selector(setWindowWithAndroidDatabaseCursorWindow:);
  methods[18].selector = @selector(hasWindow);
  methods[19].selector = @selector(closeWindow);
  methods[20].selector = @selector(clearOrCreateWindowWithNSString:);
  methods[21].selector = @selector(onDeactivateOrClose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWindow_", "LAndroidDatabaseCursorWindow;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getBlob", "I", "getString", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "getShort", "getInt", "getLong", "getFloat", "getDouble", "isNull", "isBlob", (void *)&AndroidDatabaseAbstractWindowedCursor__Annotations$0, "isString", (void *)&AndroidDatabaseAbstractWindowedCursor__Annotations$1, "isLong", (void *)&AndroidDatabaseAbstractWindowedCursor__Annotations$2, "isFloat", (void *)&AndroidDatabaseAbstractWindowedCursor__Annotations$3, "getType", "setWindow", "LAndroidDatabaseCursorWindow;", "clearOrCreateWindow", "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseAbstractWindowedCursor = { "AbstractWindowedCursor", "android.database", ptrTable, methods, fields, 7, 0x401, 22, 1, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseAbstractWindowedCursor;
}

@end

void AndroidDatabaseAbstractWindowedCursor_init(AndroidDatabaseAbstractWindowedCursor *self) {
  AndroidDatabaseAbstractCursor_init(self);
}

IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseAbstractWindowedCursor__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseAbstractWindowedCursor)

@implementation AndroidDatabaseCharArrayBuffer

- (instancetype __nonnull)initWithInt:(jint)size {
  AndroidDatabaseCharArrayBuffer_initWithInt_(self, size);
  return self;
}

- (instancetype __nonnull)initWithCharArray:(IOSCharArray *)buf {
  AndroidDatabaseCharArrayBuffer_initWithCharArray_(self, buf);
  return self;
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithCharArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "[C", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sizeCopied_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[C" };
  static const J2ObjcClassInfo _AndroidDatabaseCharArrayBuffer = { "CharArrayBuffer", "android.database", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCharArrayBuffer;
}

@end

void AndroidDatabaseCharArrayBuffer_initWithInt_(AndroidDatabaseCharArrayBuffer *self, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->data_, [IOSCharArray newArrayWithLength:size]);
}

AndroidDatabaseCharArrayBuffer *new_AndroidDatabaseCharArrayBuffer_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCharArrayBuffer, initWithInt_, size)
}

AndroidDatabaseCharArrayBuffer *create_AndroidDatabaseCharArrayBuffer_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCharArrayBuffer, initWithInt_, size)
}

void AndroidDatabaseCharArrayBuffer_initWithCharArray_(AndroidDatabaseCharArrayBuffer *self, IOSCharArray *buf) {
  NSObject_init(self);
  JreStrongAssign(&self->data_, buf);
}

AndroidDatabaseCharArrayBuffer *new_AndroidDatabaseCharArrayBuffer_initWithCharArray_(IOSCharArray *buf) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCharArrayBuffer, initWithCharArray_, buf)
}

AndroidDatabaseCharArrayBuffer *create_AndroidDatabaseCharArrayBuffer_initWithCharArray_(IOSCharArray *buf) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCharArrayBuffer, initWithCharArray_, buf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCharArrayBuffer)

@implementation AndroidDatabaseObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)registerObserverWithId:(id)observer {
  if (observer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The observer is null.");
  }
  @synchronized(mObservers_) {
    if ([((JavaUtilArrayList *) nil_chk(mObservers_)) containsWithId:observer]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"Observer ", observer, @" is already registered."));
    }
    [mObservers_ addWithId:observer];
  }
}

- (void)unregisterObserverWithId:(id)observer {
  if (observer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The observer is null.");
  }
  @synchronized(mObservers_) {
    jint index = [((JavaUtilArrayList *) nil_chk(mObservers_)) indexOfWithId:observer];
    if (index == -1) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"Observer ", observer, @" was not registered."));
    }
    [mObservers_ removeWithInt:index];
  }
}

- (void)unregisterAll {
  @synchronized(mObservers_) {
    [((JavaUtilArrayList *) nil_chk(mObservers_)) clear];
  }
}

- (void)dealloc {
  RELEASE_(mObservers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(registerObserverWithId:);
  methods[2].selector = @selector(unregisterObserverWithId:);
  methods[3].selector = @selector(unregisterAll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mObservers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x14, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "registerObserver", "LNSObject;", "(TT;)V", "unregisterObserver", "Ljava/util/ArrayList<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AndroidDatabaseObservable = { "Observable", "android.database", ptrTable, methods, fields, 7, 0x401, 4, 1, -1, -1, -1, 5, -1 };
  return &_AndroidDatabaseObservable;
}

@end

void AndroidDatabaseObservable_init(AndroidDatabaseObservable *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mObservers_, new_JavaUtilArrayList_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseObservable)

@implementation AndroidDatabaseContentObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseContentObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)registerObserverWithId:(AndroidDatabaseContentObserver *)observer {
  [super registerObserverWithId:observer];
}

- (void)dispatchChangeWithBoolean:(jboolean)selfChange {
  [self dispatchChangeWithBoolean:selfChange withAndroidNetUri:nil];
}

- (void)dispatchChangeWithBoolean:(jboolean)selfChange
                withAndroidNetUri:(AndroidNetUri *)uri {
  @synchronized(mObservers_) {
    for (AndroidDatabaseContentObserver * __strong observer in nil_chk(mObservers_)) {
      if (!selfChange || [((AndroidDatabaseContentObserver *) nil_chk(observer)) deliverSelfNotifications]) {
        [((AndroidDatabaseContentObserver *) nil_chk(observer)) dispatchChangeWithBoolean:selfChange withAndroidNetUri:uri];
      }
    }
  }
}

- (void)notifyChangeWithBoolean:(jboolean)selfChange {
  @synchronized(mObservers_) {
    for (AndroidDatabaseContentObserver * __strong observer in nil_chk(mObservers_)) {
      [((AndroidDatabaseContentObserver *) nil_chk(observer)) onChangeWithBoolean:selfChange withAndroidNetUri:nil];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, 4, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, 7, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(registerObserverWithId:);
  methods[2].selector = @selector(dispatchChangeWithBoolean:);
  methods[3].selector = @selector(dispatchChangeWithBoolean:withAndroidNetUri:);
  methods[4].selector = @selector(notifyChangeWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "registerObserver", "LAndroidDatabaseContentObserver;", "dispatchChange", "Z", (void *)&AndroidDatabaseContentObservable__Annotations$0, "ZLAndroidNetUri;", "notifyChange", (void *)&AndroidDatabaseContentObservable__Annotations$1, "Landroid/database/Observable<Landroid/database/ContentObserver;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseContentObservable = { "ContentObservable", "android.database", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, 8, -1 };
  return &_AndroidDatabaseContentObservable;
}

@end

void AndroidDatabaseContentObservable_init(AndroidDatabaseContentObservable *self) {
  AndroidDatabaseObservable_init(self);
}

AndroidDatabaseContentObservable *new_AndroidDatabaseContentObservable_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseContentObservable, init)
}

AndroidDatabaseContentObservable *create_AndroidDatabaseContentObservable_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseContentObservable, init)
}

IOSObjectArray *AndroidDatabaseContentObservable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseContentObservable__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseContentObservable)

@implementation AndroidDatabaseContentObserver_NotificationRunnable

- (instancetype __nonnull)initWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)outer$
                                                     withBoolean:(jboolean)selfChange
                                               withAndroidNetUri:(AndroidNetUri *)uri
                                                         withInt:(jint)userId {
  AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(self, outer$, selfChange, uri, userId);
  return self;
}

- (void)run {
  [this$0_ onChangeWithBoolean:mSelfChange_ withAndroidNetUri:mUri_ withInt:mUserId_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mUri_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseContentObserver:withBoolean:withAndroidNetUri:withInt:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseContentObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mSelfChange_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mUri_", "LAndroidNetUri;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mUserId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLAndroidNetUri;I", "LAndroidDatabaseContentObserver;" };
  static const J2ObjcClassInfo _AndroidDatabaseContentObserver_NotificationRunnable = { "NotificationRunnable", "android.database", ptrTable, methods, fields, 7, 0x12, 2, 4, 1, -1, -1, -1, -1 };
  return &_AndroidDatabaseContentObserver_NotificationRunnable;
}

@end

void AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver_NotificationRunnable *self, AndroidDatabaseContentObserver *outer$, jboolean selfChange, AndroidNetUri *uri, jint userId) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->mSelfChange_ = selfChange;
  JreStrongAssign(&self->mUri_, uri);
  self->mUserId_ = userId;
}

AndroidDatabaseContentObserver_NotificationRunnable *new_AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver *outer$, jboolean selfChange, AndroidNetUri *uri, jint userId) {
  J2OBJC_NEW_IMPL(AndroidDatabaseContentObserver_NotificationRunnable, initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_, outer$, selfChange, uri, userId)
}

AndroidDatabaseContentObserver_NotificationRunnable *create_AndroidDatabaseContentObserver_NotificationRunnable_initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_(AndroidDatabaseContentObserver *outer$, jboolean selfChange, AndroidNetUri *uri, jint userId) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseContentObserver_NotificationRunnable, initWithAndroidDatabaseContentObserver_withBoolean_withAndroidNetUri_withInt_, outer$, selfChange, uri, userId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseContentObserver_NotificationRunnable)

@implementation AndroidDatabaseCursorWrapper

- (instancetype __nonnull)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(self, cursor);
  return self;
}

- (id<AndroidDatabaseCursor>)getWrappedCursor {
  return mCursor_;
}

- (void)close {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) close];
}

- (jboolean)isClosed {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isClosed];
}

- (jint)getCount {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getCount];
}

- (void)deactivate {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) deactivate];
}

- (jboolean)moveToFirst {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) moveToFirst];
}

- (jint)getColumnCount {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getColumnCount];
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getColumnIndexWithNSString:columnName];
}

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getColumnIndexOrThrowWithNSString:columnName];
}

- (NSString *)getColumnNameWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getColumnNameWithInt:columnIndex];
}

- (IOSObjectArray *)getColumnNames {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getColumnNames];
}

- (jdouble)getDoubleWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getDoubleWithInt:columnIndex];
}

- (AndroidOsBundle *)getExtras {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getExtras];
}

- (jfloat)getFloatWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getFloatWithInt:columnIndex];
}

- (jint)getIntWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getIntWithInt:columnIndex];
}

- (jlong)getLongWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getLongWithInt:columnIndex];
}

- (jshort)getShortWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getShortWithInt:columnIndex];
}

- (NSString *)getStringWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getStringWithInt:columnIndex];
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) copyStringToBufferWithInt:columnIndex withAndroidDatabaseCharArrayBuffer:buffer];
}

- (IOSByteArray *)getBlobWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getBlobWithInt:columnIndex];
}

- (jboolean)getWantsAllOnMoveCalls {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getWantsAllOnMoveCalls];
}

- (jboolean)isAfterLast {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isAfterLast];
}

- (jboolean)isBeforeFirst {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isBeforeFirst];
}

- (jboolean)isFirst {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isFirst];
}

- (jboolean)isLast {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isLast];
}

- (jint)getTypeWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getTypeWithInt:columnIndex];
}

- (jboolean)isNullWithInt:(jint)columnIndex {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isNullWithInt:columnIndex];
}

- (jboolean)moveToLast {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) moveToLast];
}

- (jboolean)moveWithInt:(jint)offset {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) moveWithInt:offset];
}

- (jboolean)moveToPositionWithInt:(jint)position {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) moveToPositionWithInt:position];
}

- (jboolean)moveToNext {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) moveToNext];
}

- (jint)getPosition {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getPosition];
}

- (jboolean)moveToPrevious {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) moveToPrevious];
}

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) registerContentObserverWithAndroidDatabaseContentObserver:observer];
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) registerDataSetObserverWithAndroidDatabaseDataSetObserver:observer];
}

- (jboolean)requery {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) requery];
}

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) respondWithAndroidOsBundle:extras];
}

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) unregisterContentObserverWithAndroidDatabaseContentObserver:observer];
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:observer];
}

- (void)dealloc {
  RELEASE_(mCursor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseCursor:);
  methods[1].selector = @selector(getWrappedCursor);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(isClosed);
  methods[4].selector = @selector(getCount);
  methods[5].selector = @selector(deactivate);
  methods[6].selector = @selector(moveToFirst);
  methods[7].selector = @selector(getColumnCount);
  methods[8].selector = @selector(getColumnIndexWithNSString:);
  methods[9].selector = @selector(getColumnIndexOrThrowWithNSString:);
  methods[10].selector = @selector(getColumnNameWithInt:);
  methods[11].selector = @selector(getColumnNames);
  methods[12].selector = @selector(getDoubleWithInt:);
  methods[13].selector = @selector(getExtras);
  methods[14].selector = @selector(getFloatWithInt:);
  methods[15].selector = @selector(getIntWithInt:);
  methods[16].selector = @selector(getLongWithInt:);
  methods[17].selector = @selector(getShortWithInt:);
  methods[18].selector = @selector(getStringWithInt:);
  methods[19].selector = @selector(copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:);
  methods[20].selector = @selector(getBlobWithInt:);
  methods[21].selector = @selector(getWantsAllOnMoveCalls);
  methods[22].selector = @selector(isAfterLast);
  methods[23].selector = @selector(isBeforeFirst);
  methods[24].selector = @selector(isFirst);
  methods[25].selector = @selector(isLast);
  methods[26].selector = @selector(getTypeWithInt:);
  methods[27].selector = @selector(isNullWithInt:);
  methods[28].selector = @selector(moveToLast);
  methods[29].selector = @selector(moveWithInt:);
  methods[30].selector = @selector(moveToPositionWithInt:);
  methods[31].selector = @selector(moveToNext);
  methods[32].selector = @selector(getPosition);
  methods[33].selector = @selector(moveToPrevious);
  methods[34].selector = @selector(registerContentObserverWithAndroidDatabaseContentObserver:);
  methods[35].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[36].selector = @selector(requery);
  methods[37].selector = @selector(respondWithAndroidOsBundle:);
  methods[38].selector = @selector(unregisterContentObserverWithAndroidDatabaseContentObserver:);
  methods[39].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCursor_", "LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseCursor;", "getColumnIndex", "LNSString;", "getColumnIndexOrThrow", "LJavaLangIllegalArgumentException;", "getColumnName", "I", "getDouble", "getFloat", "getInt", "getLong", "getShort", "getString", "copyStringToBuffer", "ILAndroidDatabaseCharArrayBuffer;", "getBlob", "getType", "isNull", "move", "moveToPosition", "registerContentObserver", "LAndroidDatabaseContentObserver;", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "respond", "LAndroidOsBundle;", "unregisterContentObserver", "unregisterDataSetObserver" };
  static const J2ObjcClassInfo _AndroidDatabaseCursorWrapper = { "CursorWrapper", "android.database", ptrTable, methods, fields, 7, 0x1, 40, 1, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCursorWrapper;
}

@end

void AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(AndroidDatabaseCursorWrapper *self, id<AndroidDatabaseCursor> cursor) {
  NSObject_init(self);
  JreStrongAssign(&self->mCursor_, cursor);
}

AndroidDatabaseCursorWrapper *new_AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorWrapper, initWithAndroidDatabaseCursor_, cursor)
}

AndroidDatabaseCursorWrapper *create_AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorWrapper, initWithAndroidDatabaseCursor_, cursor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCursorWrapper)

@implementation AndroidDatabaseCrossProcessCursorWrapper

- (instancetype __nonnull)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(self, cursor);
  return self;
}

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  if ([AndroidDatabaseCrossProcessCursor_class_() isInstance:mCursor_]) {
    id<AndroidDatabaseCrossProcessCursor> crossProcessCursor = (id<AndroidDatabaseCrossProcessCursor>) cast_check(mCursor_, AndroidDatabaseCrossProcessCursor_class_());
    [((id<AndroidDatabaseCrossProcessCursor>) nil_chk(crossProcessCursor)) fillWindowWithInt:position withAndroidDatabaseCursorWindow:window];
    return;
  }
  AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(mCursor_, position, window);
}

- (AndroidDatabaseCursorWindow *)getWindow {
  if ([AndroidDatabaseCrossProcessCursor_class_() isInstance:mCursor_]) {
    id<AndroidDatabaseCrossProcessCursor> crossProcessCursor = (id<AndroidDatabaseCrossProcessCursor>) cast_check(mCursor_, AndroidDatabaseCrossProcessCursor_class_());
    return [((id<AndroidDatabaseCrossProcessCursor>) nil_chk(crossProcessCursor)) getWindow];
  }
  return nil;
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  if ([AndroidDatabaseCrossProcessCursor_class_() isInstance:mCursor_]) {
    id<AndroidDatabaseCrossProcessCursor> crossProcessCursor = (id<AndroidDatabaseCrossProcessCursor>) cast_check(mCursor_, AndroidDatabaseCrossProcessCursor_class_());
    return [((id<AndroidDatabaseCrossProcessCursor>) nil_chk(crossProcessCursor)) onMoveWithInt:oldPosition withInt:newPosition];
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursorWindow;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseCursor:);
  methods[1].selector = @selector(fillWindowWithInt:withAndroidDatabaseCursorWindow:);
  methods[2].selector = @selector(getWindow);
  methods[3].selector = @selector(onMoveWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidDatabaseCursor;", "fillWindow", "ILAndroidDatabaseCursorWindow;", "onMove", "II" };
  static const J2ObjcClassInfo _AndroidDatabaseCrossProcessCursorWrapper = { "CrossProcessCursorWrapper", "android.database", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCrossProcessCursorWrapper;
}

@end

void AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(AndroidDatabaseCrossProcessCursorWrapper *self, id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseCursorWrapper_initWithAndroidDatabaseCursor_(self, cursor);
}

AndroidDatabaseCrossProcessCursorWrapper *new_AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCrossProcessCursorWrapper, initWithAndroidDatabaseCursor_, cursor)
}

AndroidDatabaseCrossProcessCursorWrapper *create_AndroidDatabaseCrossProcessCursorWrapper_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCrossProcessCursorWrapper, initWithAndroidDatabaseCursor_, cursor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCrossProcessCursorWrapper)

@implementation AndroidDatabaseCursorIndexOutOfBoundsException

- (instancetype __nonnull)initWithInt:(jint)index
                              withInt:(jint)size {
  AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(self, index, size);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)message {
  AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "II", "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseCursorIndexOutOfBoundsException = { "CursorIndexOutOfBoundsException", "android.database", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCursorIndexOutOfBoundsException;
}

@end

void AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(AndroidDatabaseCursorIndexOutOfBoundsException *self, jint index, jint size) {
  JavaLangIndexOutOfBoundsException_initWithNSString_(self, JreStrcat("$I$I", @"Index ", index, @" requested, with a size of ", size));
}

AndroidDatabaseCursorIndexOutOfBoundsException *new_AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(jint index, jint size) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorIndexOutOfBoundsException, initWithInt_withInt_, index, size)
}

AndroidDatabaseCursorIndexOutOfBoundsException *create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(jint index, jint size) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorIndexOutOfBoundsException, initWithInt_withInt_, index, size)
}

void AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(AndroidDatabaseCursorIndexOutOfBoundsException *self, NSString *message) {
  JavaLangIndexOutOfBoundsException_initWithNSString_(self, message);
}

AndroidDatabaseCursorIndexOutOfBoundsException *new_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorIndexOutOfBoundsException, initWithNSString_, message)
}

AndroidDatabaseCursorIndexOutOfBoundsException *create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorIndexOutOfBoundsException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCursorIndexOutOfBoundsException)

@implementation AndroidDatabaseCursorJoiner

- (instancetype __nonnull)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursorLeft
                                      withNSStringArray:(IOSObjectArray *)columnNamesLeft
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursorRight
                                      withNSStringArray:(IOSObjectArray *)columnNamesRight {
  AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(self, cursorLeft, columnNamesLeft, cursorRight, columnNamesRight);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return self;
}

- (IOSIntArray *)buildColumnIndiciesArrayWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                 withNSStringArray:(IOSObjectArray *)columnNames {
  return AndroidDatabaseCursorJoiner_buildColumnIndiciesArrayWithAndroidDatabaseCursor_withNSStringArray_(self, cursor, columnNames);
}

- (jboolean)hasNext {
  if (mCompareResultIsValid_) {
    switch ([mCompareResult_ ordinal]) {
      case AndroidDatabaseCursorJoiner_Result_Enum_BOTH:
      return ![((id<AndroidDatabaseCursor>) nil_chk(mCursorLeft_)) isLast] || ![((id<AndroidDatabaseCursor>) nil_chk(mCursorRight_)) isLast];
      case AndroidDatabaseCursorJoiner_Result_Enum_LEFT:
      return ![((id<AndroidDatabaseCursor>) nil_chk(mCursorLeft_)) isLast] || ![((id<AndroidDatabaseCursor>) nil_chk(mCursorRight_)) isAfterLast];
      case AndroidDatabaseCursorJoiner_Result_Enum_RIGHT:
      return ![((id<AndroidDatabaseCursor>) nil_chk(mCursorLeft_)) isAfterLast] || ![((id<AndroidDatabaseCursor>) nil_chk(mCursorRight_)) isLast];
      default:
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"bad value for mCompareResult, ", mCompareResult_));
    }
  }
  else {
    return ![((id<AndroidDatabaseCursor>) nil_chk(mCursorLeft_)) isAfterLast] || ![((id<AndroidDatabaseCursor>) nil_chk(mCursorRight_)) isAfterLast];
  }
}

- (AndroidDatabaseCursorJoiner_Result *)next {
  if (![self hasNext]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"you must only call next() when hasNext() is true");
  }
  AndroidDatabaseCursorJoiner_incrementCursors(self);
  JreAssert([self hasNext], @"android/database/CursorJoiner.java:161 condition failed: assert hasNext();");
  jboolean hasLeft = ![((id<AndroidDatabaseCursor>) nil_chk(mCursorLeft_)) isAfterLast];
  jboolean hasRight = ![((id<AndroidDatabaseCursor>) nil_chk(mCursorRight_)) isAfterLast];
  if (hasLeft && hasRight) {
    AndroidDatabaseCursorJoiner_populateValuesWithNSStringArray_withAndroidDatabaseCursor_withIntArray_withInt_(mValues_, mCursorLeft_, mColumnsLeft_, 0);
    AndroidDatabaseCursorJoiner_populateValuesWithNSStringArray_withAndroidDatabaseCursor_withIntArray_withInt_(mValues_, mCursorRight_, mColumnsRight_, 1);
    switch (AndroidDatabaseCursorJoiner_compareStringsWithNSStringArray_(mValues_)) {
      case -1:
      JreStrongAssign(&mCompareResult_, JreLoadEnum(AndroidDatabaseCursorJoiner_Result, LEFT));
      break;
      case 0:
      JreStrongAssign(&mCompareResult_, JreLoadEnum(AndroidDatabaseCursorJoiner_Result, BOTH));
      break;
      case 1:
      JreStrongAssign(&mCompareResult_, JreLoadEnum(AndroidDatabaseCursorJoiner_Result, RIGHT));
      break;
    }
  }
  else if (hasLeft) {
    JreStrongAssign(&mCompareResult_, JreLoadEnum(AndroidDatabaseCursorJoiner_Result, LEFT));
  }
  else {
    JreAssert(hasRight, @"android/database/CursorJoiner.java:183 condition failed: assert hasRight;");
    JreStrongAssign(&mCompareResult_, JreLoadEnum(AndroidDatabaseCursorJoiner_Result, RIGHT));
  }
  mCompareResultIsValid_ = true;
  return mCompareResult_;
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"not implemented");
}

+ (void)populateValuesWithNSStringArray:(IOSObjectArray *)values
              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                           withIntArray:(IOSIntArray *)columnIndicies
                                withInt:(jint)startingIndex {
  AndroidDatabaseCursorJoiner_populateValuesWithNSStringArray_withAndroidDatabaseCursor_withIntArray_withInt_(values, cursor, columnIndicies, startingIndex);
}

- (void)incrementCursors {
  AndroidDatabaseCursorJoiner_incrementCursors(self);
}

+ (jint)compareStringsWithNSStringArray:(IOSObjectArray *)values {
  return AndroidDatabaseCursorJoiner_compareStringsWithNSStringArray_(values);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(mCursorLeft_);
  RELEASE_(mCursorRight_);
  RELEASE_(mCompareResult_);
  RELEASE_(mColumnsLeft_);
  RELEASE_(mColumnsRight_);
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "[I", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursorJoiner_Result;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8a, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseCursor:withNSStringArray:withAndroidDatabaseCursor:withNSStringArray:);
  methods[1].selector = @selector(iterator);
  methods[2].selector = @selector(buildColumnIndiciesArrayWithAndroidDatabaseCursor:withNSStringArray:);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(remove);
  methods[6].selector = @selector(populateValuesWithNSStringArray:withAndroidDatabaseCursor:withIntArray:withInt:);
  methods[7].selector = @selector(incrementCursors);
  methods[8].selector = @selector(compareStringsWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCursorLeft_", "LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursorRight_", "LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCompareResultIsValid_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCompareResult_", "LAndroidDatabaseCursorJoiner_Result;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColumnsLeft_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColumnsRight_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mValues_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseCursor;[LNSString;LAndroidDatabaseCursor;[LNSString;", "()Ljava/util/Iterator<Landroid/database/CursorJoiner$Result;>;", "buildColumnIndiciesArray", "LAndroidDatabaseCursor;[LNSString;", "populateValues", "[LNSString;LAndroidDatabaseCursor;[II", "compareStrings", "[LNSString;", "LAndroidDatabaseCursorJoiner_Result;", "Ljava/lang/Object;Ljava/util/Iterator<Landroid/database/CursorJoiner$Result;>;Ljava/lang/Iterable<Landroid/database/CursorJoiner$Result;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseCursorJoiner = { "CursorJoiner", "android.database", ptrTable, methods, fields, 7, 0x11, 9, 7, -1, 8, -1, 9, -1 };
  return &_AndroidDatabaseCursorJoiner;
}

@end

void AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(AndroidDatabaseCursorJoiner *self, id<AndroidDatabaseCursor> cursorLeft, IOSObjectArray *columnNamesLeft, id<AndroidDatabaseCursor> cursorRight, IOSObjectArray *columnNamesRight) {
  NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(columnNamesLeft))->size_ != ((IOSObjectArray *) nil_chk(columnNamesRight))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"you must have the same number of columns on the left and right, ", columnNamesLeft->size_, @" != ", columnNamesRight->size_));
  }
  JreStrongAssign(&self->mCursorLeft_, cursorLeft);
  JreStrongAssign(&self->mCursorRight_, cursorRight);
  [((id<AndroidDatabaseCursor>) nil_chk(self->mCursorLeft_)) moveToFirst];
  [((id<AndroidDatabaseCursor>) nil_chk(self->mCursorRight_)) moveToFirst];
  self->mCompareResultIsValid_ = false;
  JreStrongAssign(&self->mColumnsLeft_, AndroidDatabaseCursorJoiner_buildColumnIndiciesArrayWithAndroidDatabaseCursor_withNSStringArray_(self, cursorLeft, columnNamesLeft));
  JreStrongAssign(&self->mColumnsRight_, AndroidDatabaseCursorJoiner_buildColumnIndiciesArrayWithAndroidDatabaseCursor_withNSStringArray_(self, cursorRight, columnNamesRight));
  JreStrongAssignAndConsume(&self->mValues_, [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(self->mColumnsLeft_))->size_ * 2 type:NSString_class_()]);
}

AndroidDatabaseCursorJoiner *new_AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(id<AndroidDatabaseCursor> cursorLeft, IOSObjectArray *columnNamesLeft, id<AndroidDatabaseCursor> cursorRight, IOSObjectArray *columnNamesRight) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorJoiner, initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_, cursorLeft, columnNamesLeft, cursorRight, columnNamesRight)
}

AndroidDatabaseCursorJoiner *create_AndroidDatabaseCursorJoiner_initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_(id<AndroidDatabaseCursor> cursorLeft, IOSObjectArray *columnNamesLeft, id<AndroidDatabaseCursor> cursorRight, IOSObjectArray *columnNamesRight) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorJoiner, initWithAndroidDatabaseCursor_withNSStringArray_withAndroidDatabaseCursor_withNSStringArray_, cursorLeft, columnNamesLeft, cursorRight, columnNamesRight)
}

IOSIntArray *AndroidDatabaseCursorJoiner_buildColumnIndiciesArrayWithAndroidDatabaseCursor_withNSStringArray_(AndroidDatabaseCursorJoiner *self, id<AndroidDatabaseCursor> cursor, IOSObjectArray *columnNames) {
  IOSIntArray *columns = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(columnNames))->size_];
  for (jint i = 0; i < columnNames->size_; i++) {
    *IOSIntArray_GetRef(columns, i) = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexOrThrowWithNSString:IOSObjectArray_Get(columnNames, i)];
  }
  return columns;
}

void AndroidDatabaseCursorJoiner_populateValuesWithNSStringArray_withAndroidDatabaseCursor_withIntArray_withInt_(IOSObjectArray *values, id<AndroidDatabaseCursor> cursor, IOSIntArray *columnIndicies, jint startingIndex) {
  AndroidDatabaseCursorJoiner_initialize();
  JreAssert(startingIndex == 0 || startingIndex == 1, @"android/database/CursorJoiner.java:206 condition failed: assert startingIndex == 0 || startingIndex == 1;");
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(columnIndicies))->size_; i++) {
    IOSObjectArray_Set(nil_chk(values), startingIndex + i * 2, [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getStringWithInt:IOSIntArray_Get(columnIndicies, i)]);
  }
}

void AndroidDatabaseCursorJoiner_incrementCursors(AndroidDatabaseCursorJoiner *self) {
  if (self->mCompareResultIsValid_) {
    switch ([self->mCompareResult_ ordinal]) {
      case AndroidDatabaseCursorJoiner_Result_Enum_LEFT:
      [((id<AndroidDatabaseCursor>) nil_chk(self->mCursorLeft_)) moveToNext];
      break;
      case AndroidDatabaseCursorJoiner_Result_Enum_RIGHT:
      [((id<AndroidDatabaseCursor>) nil_chk(self->mCursorRight_)) moveToNext];
      break;
      case AndroidDatabaseCursorJoiner_Result_Enum_BOTH:
      [((id<AndroidDatabaseCursor>) nil_chk(self->mCursorLeft_)) moveToNext];
      [((id<AndroidDatabaseCursor>) nil_chk(self->mCursorRight_)) moveToNext];
      break;
    }
    self->mCompareResultIsValid_ = false;
  }
}

jint AndroidDatabaseCursorJoiner_compareStringsWithNSStringArray_(IOSObjectArray *values) {
  AndroidDatabaseCursorJoiner_initialize();
  if ((((IOSObjectArray *) nil_chk(values))->size_ % 2) != 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"you must specify an even number of values");
  }
  for (jint index = 0; index < values->size_; index += 2) {
    if (IOSObjectArray_Get(values, index) == nil) {
      if (IOSObjectArray_Get(values, index + 1) == nil) continue;
      return -1;
    }
    if (IOSObjectArray_Get(values, index + 1) == nil) {
      return 1;
    }
    jint comp = [((NSString *) nil_chk(IOSObjectArray_Get(values, index))) compareToWithId:IOSObjectArray_Get(values, index + 1)];
    if (comp != 0) {
      return comp < 0 ? -1 : 1;
    }
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCursorJoiner)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseCursorJoiner_Result)

AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_values_[3];

@implementation AndroidDatabaseCursorJoiner_Result

+ (AndroidDatabaseCursorJoiner_Result *)RIGHT {
  return JreEnum(AndroidDatabaseCursorJoiner_Result, RIGHT);
}

+ (AndroidDatabaseCursorJoiner_Result *)LEFT {
  return JreEnum(AndroidDatabaseCursorJoiner_Result, LEFT);
}

+ (AndroidDatabaseCursorJoiner_Result *)BOTH {
  return JreEnum(AndroidDatabaseCursorJoiner_Result, BOTH);
}

+ (IOSObjectArray *)values {
  return AndroidDatabaseCursorJoiner_Result_values();
}

+ (AndroidDatabaseCursorJoiner_Result *)valueOfWithNSString:(NSString *)name {
  return AndroidDatabaseCursorJoiner_Result_valueOfWithNSString_(name);
}

- (AndroidDatabaseCursorJoiner_Result_Enum)toNSEnum {
  return (AndroidDatabaseCursorJoiner_Result_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidDatabaseCursorJoiner_Result;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursorJoiner_Result;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RIGHT", "LAndroidDatabaseCursorJoiner_Result;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "LEFT", "LAndroidDatabaseCursorJoiner_Result;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "BOTH", "LAndroidDatabaseCursorJoiner_Result;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidDatabaseCursorJoiner_Result, RIGHT), &JreEnum(AndroidDatabaseCursorJoiner_Result, LEFT), &JreEnum(AndroidDatabaseCursorJoiner_Result, BOTH), "LAndroidDatabaseCursorJoiner;", "Ljava/lang/Enum<Landroid/database/CursorJoiner$Result;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseCursorJoiner_Result = { "Result", "android.database", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_AndroidDatabaseCursorJoiner_Result;
}

+ (void)initialize {
  if (self == [AndroidDatabaseCursorJoiner_Result class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(AndroidDatabaseCursorJoiner_Result_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      AndroidDatabaseCursorJoiner_Result_initWithNSString_withInt_(e, JreEnumConstantName(AndroidDatabaseCursorJoiner_Result_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(AndroidDatabaseCursorJoiner_Result)
  }
}

@end

void AndroidDatabaseCursorJoiner_Result_initWithNSString_withInt_(AndroidDatabaseCursorJoiner_Result *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *AndroidDatabaseCursorJoiner_Result_values() {
  AndroidDatabaseCursorJoiner_Result_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidDatabaseCursorJoiner_Result_values_ count:3 type:AndroidDatabaseCursorJoiner_Result_class_()];
}

AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_valueOfWithNSString_(NSString *name) {
  AndroidDatabaseCursorJoiner_Result_initialize();
  for (int i = 0; i < 3; i++) {
    AndroidDatabaseCursorJoiner_Result *e = AndroidDatabaseCursorJoiner_Result_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidDatabaseCursorJoiner_Result *AndroidDatabaseCursorJoiner_Result_fromOrdinal(NSUInteger ordinal) {
  AndroidDatabaseCursorJoiner_Result_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return AndroidDatabaseCursorJoiner_Result_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCursorJoiner_Result)

@implementation AndroidDatabaseSqliteSQLiteClosable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onAllReferencesReleased {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onAllReferencesReleasedFromContainer {
  [self onAllReferencesReleased];
}

- (void)acquireReference {
  @synchronized(self) {
    if (mReferenceCount_ <= 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"attempt to re-open an already-closed object: ", self));
    }
    mReferenceCount_++;
  }
}

- (void)releaseReference {
  jboolean refCountIsZero = false;
  @synchronized(self) {
    refCountIsZero = (--mReferenceCount_ == 0);
  }
  if (refCountIsZero) {
    [self onAllReferencesReleased];
  }
}

- (void)releaseReferenceFromContainer {
  jboolean refCountIsZero = false;
  @synchronized(self) {
    refCountIsZero = (--mReferenceCount_ == 0);
  }
  if (refCountIsZero) {
    [self onAllReferencesReleasedFromContainer];
  }
}

- (void)close {
  [self releaseReference];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onAllReferencesReleased);
  methods[2].selector = @selector(onAllReferencesReleasedFromContainer);
  methods[3].selector = @selector(acquireReference);
  methods[4].selector = @selector(releaseReference);
  methods[5].selector = @selector(releaseReferenceFromContainer);
  methods[6].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mReferenceCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&AndroidDatabaseSqliteSQLiteClosable__Annotations$0, (void *)&AndroidDatabaseSqliteSQLiteClosable__Annotations$1 };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteClosable = { "SQLiteClosable", "android.database.sqlite", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteClosable;
}

@end

void AndroidDatabaseSqliteSQLiteClosable_init(AndroidDatabaseSqliteSQLiteClosable *self) {
  NSObject_init(self);
  self->mReferenceCount_ = 1;
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteClosable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteClosable__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteClosable)

@implementation AndroidDatabaseCursorWindow

+ (jlong)nativeCreateWithNSString:(NSString *)name
                          withInt:(jint)cursorWindowSize {
  return AndroidDatabaseCursorWindow_nativeCreateWithNSString_withInt_(name, cursorWindowSize);
}

+ (void)nativeDisposeWithLong:(jlong)windowPtr {
  AndroidDatabaseCursorWindow_nativeDisposeWithLong_(windowPtr);
}

+ (void)nativeClearWithLong:(jlong)windowPtr {
  AndroidDatabaseCursorWindow_nativeClearWithLong_(windowPtr);
}

+ (jint)nativeGetNumRowsWithLong:(jlong)windowPtr {
  return AndroidDatabaseCursorWindow_nativeGetNumRowsWithLong_(windowPtr);
}

+ (jboolean)nativeSetNumColumnsWithLong:(jlong)windowPtr
                                withInt:(jint)columnNum {
  return AndroidDatabaseCursorWindow_nativeSetNumColumnsWithLong_withInt_(windowPtr, columnNum);
}

+ (jboolean)nativeAllocRowWithLong:(jlong)windowPtr {
  return AndroidDatabaseCursorWindow_nativeAllocRowWithLong_(windowPtr);
}

+ (void)nativeFreeLastRowWithLong:(jlong)windowPtr {
  AndroidDatabaseCursorWindow_nativeFreeLastRowWithLong_(windowPtr);
}

+ (jint)nativeGetTypeWithLong:(jlong)windowPtr
                      withInt:(jint)row
                      withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativeGetTypeWithLong_withInt_withInt_(windowPtr, row, column);
}

+ (IOSByteArray *)nativeGetBlobWithLong:(jlong)windowPtr
                                withInt:(jint)row
                                withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativeGetBlobWithLong_withInt_withInt_(windowPtr, row, column);
}

+ (NSString *)nativeGetStringWithLong:(jlong)windowPtr
                              withInt:(jint)row
                              withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativeGetStringWithLong_withInt_withInt_(windowPtr, row, column);
}

+ (jlong)nativeGetLongWithLong:(jlong)windowPtr
                       withInt:(jint)row
                       withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativeGetLongWithLong_withInt_withInt_(windowPtr, row, column);
}

+ (jdouble)nativeGetDoubleWithLong:(jlong)windowPtr
                           withInt:(jint)row
                           withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativeGetDoubleWithLong_withInt_withInt_(windowPtr, row, column);
}

+ (void)nativeCopyStringToBufferWithLong:(jlong)windowPtr
                                 withInt:(jint)row
                                 withInt:(jint)column
      withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  AndroidDatabaseCursorWindow_nativeCopyStringToBufferWithLong_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(windowPtr, row, column, buffer);
}

+ (jboolean)nativePutBlobWithLong:(jlong)windowPtr
                    withByteArray:(IOSByteArray *)value
                          withInt:(jint)row
                          withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativePutBlobWithLong_withByteArray_withInt_withInt_(windowPtr, value, row, column);
}

+ (jboolean)nativePutStringWithLong:(jlong)windowPtr
                       withNSString:(NSString *)value
                            withInt:(jint)row
                            withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativePutStringWithLong_withNSString_withInt_withInt_(windowPtr, value, row, column);
}

+ (jboolean)nativePutLongWithLong:(jlong)windowPtr
                         withLong:(jlong)value
                          withInt:(jint)row
                          withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativePutLongWithLong_withLong_withInt_withInt_(windowPtr, value, row, column);
}

+ (jboolean)nativePutDoubleWithLong:(jlong)windowPtr
                         withDouble:(jdouble)value
                            withInt:(jint)row
                            withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativePutDoubleWithLong_withDouble_withInt_withInt_(windowPtr, value, row, column);
}

+ (jboolean)nativePutNullWithLong:(jlong)windowPtr
                          withInt:(jint)row
                          withInt:(jint)column {
  return AndroidDatabaseCursorWindow_nativePutNullWithLong_withInt_withInt_(windowPtr, row, column);
}

+ (NSString *)nativeGetNameWithLong:(jlong)windowPtr {
  return AndroidDatabaseCursorWindow_nativeGetNameWithLong_(windowPtr);
}

- (instancetype __nonnull)initWithNSString:(NSString *)name {
  AndroidDatabaseCursorWindow_initWithNSString_(self, name);
  return self;
}

- (instancetype __nonnull)initWithBoolean:(jboolean)localWindow {
  AndroidDatabaseCursorWindow_initWithBoolean_(self, localWindow);
  return self;
}

- (void)java_finalize {
  @try {
    if (mCloseGuard_ != nil) {
      [mCloseGuard_ warnIfOpen];
    }
    AndroidDatabaseCursorWindow_dispose(self);
  }
  @finally {
    [super java_finalize];
  }
}

- (void)dispose {
  AndroidDatabaseCursorWindow_dispose(self);
}

- (NSString *)getName {
  return mName_;
}

- (void)clear {
  [self acquireReference];
  @try {
    mStartPos_ = 0;
    AndroidDatabaseCursorWindow_nativeClearWithLong_(mWindowPtr_);
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)getStartPosition {
  return mStartPos_;
}

- (void)setStartPositionWithInt:(jint)pos {
  mStartPos_ = pos;
}

- (jint)getNumRows {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeGetNumRowsWithLong_(mWindowPtr_);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)setNumColumnsWithInt:(jint)columnNum {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeSetNumColumnsWithLong_withInt_(mWindowPtr_, columnNum);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)allocRow {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeAllocRowWithLong_(mWindowPtr_);
  }
  @finally {
    [self releaseReference];
  }
}

- (void)freeLastRow {
  [self acquireReference];
  @try {
    AndroidDatabaseCursorWindow_nativeFreeLastRowWithLong_(mWindowPtr_);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isNullWithInt:(jint)row
                  withInt:(jint)column {
  return [self getTypeWithInt:row withInt:column] == AndroidDatabaseCursor_FIELD_TYPE_NULL;
}

- (jboolean)isBlobWithInt:(jint)row
                  withInt:(jint)column {
  jint type = [self getTypeWithInt:row withInt:column];
  return type == AndroidDatabaseCursor_FIELD_TYPE_BLOB || type == AndroidDatabaseCursor_FIELD_TYPE_NULL;
}

- (jboolean)isLongWithInt:(jint)row
                  withInt:(jint)column {
  return [self getTypeWithInt:row withInt:column] == AndroidDatabaseCursor_FIELD_TYPE_INTEGER;
}

- (jboolean)isFloatWithInt:(jint)row
                   withInt:(jint)column {
  return [self getTypeWithInt:row withInt:column] == AndroidDatabaseCursor_FIELD_TYPE_FLOAT;
}

- (jboolean)isStringWithInt:(jint)row
                    withInt:(jint)column {
  jint type = [self getTypeWithInt:row withInt:column];
  return type == AndroidDatabaseCursor_FIELD_TYPE_STRING || type == AndroidDatabaseCursor_FIELD_TYPE_NULL;
}

- (jint)getTypeWithInt:(jint)row
               withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeGetTypeWithLong_withInt_withInt_(mWindowPtr_, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (IOSByteArray *)getBlobWithInt:(jint)row
                         withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeGetBlobWithLong_withInt_withInt_(mWindowPtr_, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)getStringWithInt:(jint)row
                       withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeGetStringWithLong_withInt_withInt_(mWindowPtr_, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (void)copyStringToBufferWithInt:(jint)row
                          withInt:(jint)column
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  if (buffer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"CharArrayBuffer should not be null");
  }
  [self acquireReference];
  @try {
    AndroidDatabaseCursorWindow_nativeCopyStringToBufferWithLong_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(mWindowPtr_, row - mStartPos_, column, buffer);
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)getLongWithInt:(jint)row
                withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeGetLongWithLong_withInt_withInt_(mWindowPtr_, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jdouble)getDoubleWithInt:(jint)row
                    withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativeGetDoubleWithLong_withInt_withInt_(mWindowPtr_, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jshort)getShortWithInt:(jint)row
                  withInt:(jint)column {
  return (jshort) [self getLongWithInt:row withInt:column];
}

- (jint)getIntWithInt:(jint)row
              withInt:(jint)column {
  return (jint) [self getLongWithInt:row withInt:column];
}

- (jfloat)getFloatWithInt:(jint)row
                  withInt:(jint)column {
  return (jfloat) [self getDoubleWithInt:row withInt:column];
}

- (jboolean)putBlobWithByteArray:(IOSByteArray *)value
                         withInt:(jint)row
                         withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativePutBlobWithLong_withByteArray_withInt_withInt_(mWindowPtr_, value, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putStringWithNSString:(NSString *)value
                          withInt:(jint)row
                          withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativePutStringWithLong_withNSString_withInt_withInt_(mWindowPtr_, value, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putLongWithLong:(jlong)value
                    withInt:(jint)row
                    withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativePutLongWithLong_withLong_withInt_withInt_(mWindowPtr_, value, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putDoubleWithDouble:(jdouble)value
                        withInt:(jint)row
                        withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativePutDoubleWithLong_withDouble_withInt_withInt_(mWindowPtr_, value, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)putNullWithInt:(jint)row
                   withInt:(jint)column {
  [self acquireReference];
  @try {
    return AndroidDatabaseCursorWindow_nativePutNullWithLong_withInt_withInt_(mWindowPtr_, row - mStartPos_, column);
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)describeContents {
  return 0;
}

- (void)onAllReferencesReleased {
  AndroidDatabaseCursorWindow_dispose(self);
}

- (NSString *)printStats {
  return AndroidDatabaseCursorWindow_printStats(self);
}

- (NSString *)description {
  return JreStrcat("$$$C", [self getName], @" {", JavaLangLong_toHexStringWithLong_(mWindowPtr_), '}');
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseCursorWindow class]);
  RELEASE_(mName_);
  RELEASE_(mCloseGuard_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x10a, 12, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 13, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 14, 11, -1, -1, -1, -1 },
    { NULL, "D", 0x10a, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 26, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 27, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 28, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 29, -1, -1, 30, -1 },
    { NULL, "V", 0x4, 31, -1, 32, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, 38, -1 },
    { NULL, "Z", 0x1, 39, 37, -1, -1, 40, -1 },
    { NULL, "Z", 0x1, 41, 37, -1, -1, 42, -1 },
    { NULL, "Z", 0x1, 43, 37, -1, -1, 44, -1 },
    { NULL, "Z", 0x1, 45, 37, -1, -1, 46, -1 },
    { NULL, "I", 0x1, 47, 37, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 48, 37, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 49, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 52, 37, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 53, 37, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 54, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 55, 37, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 56, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 61, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 62, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 64, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 65, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nativeCreateWithNSString:withInt:);
  methods[1].selector = @selector(nativeDisposeWithLong:);
  methods[2].selector = @selector(nativeClearWithLong:);
  methods[3].selector = @selector(nativeGetNumRowsWithLong:);
  methods[4].selector = @selector(nativeSetNumColumnsWithLong:withInt:);
  methods[5].selector = @selector(nativeAllocRowWithLong:);
  methods[6].selector = @selector(nativeFreeLastRowWithLong:);
  methods[7].selector = @selector(nativeGetTypeWithLong:withInt:withInt:);
  methods[8].selector = @selector(nativeGetBlobWithLong:withInt:withInt:);
  methods[9].selector = @selector(nativeGetStringWithLong:withInt:withInt:);
  methods[10].selector = @selector(nativeGetLongWithLong:withInt:withInt:);
  methods[11].selector = @selector(nativeGetDoubleWithLong:withInt:withInt:);
  methods[12].selector = @selector(nativeCopyStringToBufferWithLong:withInt:withInt:withAndroidDatabaseCharArrayBuffer:);
  methods[13].selector = @selector(nativePutBlobWithLong:withByteArray:withInt:withInt:);
  methods[14].selector = @selector(nativePutStringWithLong:withNSString:withInt:withInt:);
  methods[15].selector = @selector(nativePutLongWithLong:withLong:withInt:withInt:);
  methods[16].selector = @selector(nativePutDoubleWithLong:withDouble:withInt:withInt:);
  methods[17].selector = @selector(nativePutNullWithLong:withInt:withInt:);
  methods[18].selector = @selector(nativeGetNameWithLong:);
  methods[19].selector = @selector(initWithNSString:);
  methods[20].selector = @selector(initWithBoolean:);
  methods[21].selector = @selector(java_finalize);
  methods[22].selector = @selector(dispose);
  methods[23].selector = @selector(getName);
  methods[24].selector = @selector(clear);
  methods[25].selector = @selector(getStartPosition);
  methods[26].selector = @selector(setStartPositionWithInt:);
  methods[27].selector = @selector(getNumRows);
  methods[28].selector = @selector(setNumColumnsWithInt:);
  methods[29].selector = @selector(allocRow);
  methods[30].selector = @selector(freeLastRow);
  methods[31].selector = @selector(isNullWithInt:withInt:);
  methods[32].selector = @selector(isBlobWithInt:withInt:);
  methods[33].selector = @selector(isLongWithInt:withInt:);
  methods[34].selector = @selector(isFloatWithInt:withInt:);
  methods[35].selector = @selector(isStringWithInt:withInt:);
  methods[36].selector = @selector(getTypeWithInt:withInt:);
  methods[37].selector = @selector(getBlobWithInt:withInt:);
  methods[38].selector = @selector(getStringWithInt:withInt:);
  methods[39].selector = @selector(copyStringToBufferWithInt:withInt:withAndroidDatabaseCharArrayBuffer:);
  methods[40].selector = @selector(getLongWithInt:withInt:);
  methods[41].selector = @selector(getDoubleWithInt:withInt:);
  methods[42].selector = @selector(getShortWithInt:withInt:);
  methods[43].selector = @selector(getIntWithInt:withInt:);
  methods[44].selector = @selector(getFloatWithInt:withInt:);
  methods[45].selector = @selector(putBlobWithByteArray:withInt:withInt:);
  methods[46].selector = @selector(putStringWithNSString:withInt:withInt:);
  methods[47].selector = @selector(putLongWithLong:withInt:withInt:);
  methods[48].selector = @selector(putDoubleWithDouble:withInt:withInt:);
  methods[49].selector = @selector(putNullWithInt:withInt:);
  methods[50].selector = @selector(describeContents);
  methods[51].selector = @selector(onAllReferencesReleased);
  methods[52].selector = @selector(printStats);
  methods[53].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STATS_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 66, -1, -1 },
    { "sCursorWindowSize", "I", .constantValue.asLong = 0, 0xa, -1, 67, -1, -1 },
    { "mWindowPtr_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStartPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCloseGuard_", "LDalvikSystemCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nativeCreate", "LNSString;I", "nativeDispose", "J", "nativeClear", "nativeGetNumRows", "nativeSetNumColumns", "JI", "nativeAllocRow", "nativeFreeLastRow", "nativeGetType", "JII", "nativeGetBlob", "nativeGetString", "nativeGetLong", "nativeGetDouble", "nativeCopyStringToBuffer", "JIILAndroidDatabaseCharArrayBuffer;", "nativePutBlob", "J[BII", "nativePutString", "JLNSString;II", "nativePutLong", "JJII", "nativePutDouble", "JDII", "nativePutNull", "nativeGetName", "LNSString;", "Z", (void *)&AndroidDatabaseCursorWindow__Annotations$0, "finalize", "LJavaLangThrowable;", "setStartPosition", "I", "setNumColumns", "isNull", "II", (void *)&AndroidDatabaseCursorWindow__Annotations$1, "isBlob", (void *)&AndroidDatabaseCursorWindow__Annotations$2, "isLong", (void *)&AndroidDatabaseCursorWindow__Annotations$3, "isFloat", (void *)&AndroidDatabaseCursorWindow__Annotations$4, "isString", (void *)&AndroidDatabaseCursorWindow__Annotations$5, "getType", "getBlob", "getString", "copyStringToBuffer", "IILAndroidDatabaseCharArrayBuffer;", "getLong", "getDouble", "getShort", "getInt", "getFloat", "putBlob", "[BII", "putString", "LNSString;II", "putLong", "putDouble", "DII", "putNull", "toString", &AndroidDatabaseCursorWindow_STATS_TAG, &AndroidDatabaseCursorWindow_sCursorWindowSize };
  static const J2ObjcClassInfo _AndroidDatabaseCursorWindow = { "CursorWindow", "android.database", ptrTable, methods, fields, 7, 0x1, 54, 6, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCursorWindow;
}

@end

JNIEXPORT jlong Java_android_database_CursorWindow_nativeCreate(JNIEnv *_env_, jclass _cls_, jstring name, jint cursorWindowSize);

jlong AndroidDatabaseCursorWindow_nativeCreateWithNSString_withInt_(NSString *name, jint cursorWindowSize) {
  return Java_android_database_CursorWindow_nativeCreate(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), name, cursorWindowSize);
}

JNIEXPORT void Java_android_database_CursorWindow_nativeDispose(JNIEnv *_env_, jclass _cls_, jlong windowPtr);

void AndroidDatabaseCursorWindow_nativeDisposeWithLong_(jlong windowPtr) {
  Java_android_database_CursorWindow_nativeDispose(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr);
}

JNIEXPORT void Java_android_database_CursorWindow_nativeClear(JNIEnv *_env_, jclass _cls_, jlong windowPtr);

void AndroidDatabaseCursorWindow_nativeClearWithLong_(jlong windowPtr) {
  Java_android_database_CursorWindow_nativeClear(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr);
}

JNIEXPORT jint Java_android_database_CursorWindow_nativeGetNumRows(JNIEnv *_env_, jclass _cls_, jlong windowPtr);

jint AndroidDatabaseCursorWindow_nativeGetNumRowsWithLong_(jlong windowPtr) {
  return Java_android_database_CursorWindow_nativeGetNumRows(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativeSetNumColumns(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint columnNum);

jboolean AndroidDatabaseCursorWindow_nativeSetNumColumnsWithLong_withInt_(jlong windowPtr, jint columnNum) {
  return Java_android_database_CursorWindow_nativeSetNumColumns(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, columnNum);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativeAllocRow(JNIEnv *_env_, jclass _cls_, jlong windowPtr);

jboolean AndroidDatabaseCursorWindow_nativeAllocRowWithLong_(jlong windowPtr) {
  return Java_android_database_CursorWindow_nativeAllocRow(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr);
}

JNIEXPORT void Java_android_database_CursorWindow_nativeFreeLastRow(JNIEnv *_env_, jclass _cls_, jlong windowPtr);

void AndroidDatabaseCursorWindow_nativeFreeLastRowWithLong_(jlong windowPtr) {
  Java_android_database_CursorWindow_nativeFreeLastRow(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr);
}

JNIEXPORT jint Java_android_database_CursorWindow_nativeGetType(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column);

jint AndroidDatabaseCursorWindow_nativeGetTypeWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column) {
  return Java_android_database_CursorWindow_nativeGetType(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column);
}

JNIEXPORT jarray Java_android_database_CursorWindow_nativeGetBlob(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column);

IOSByteArray *AndroidDatabaseCursorWindow_nativeGetBlobWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column) {
  return (IOSByteArray *) Java_android_database_CursorWindow_nativeGetBlob(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column);
}

JNIEXPORT jstring Java_android_database_CursorWindow_nativeGetString(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column);

NSString *AndroidDatabaseCursorWindow_nativeGetStringWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column) {
  return (NSString *) Java_android_database_CursorWindow_nativeGetString(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column);
}

JNIEXPORT jlong Java_android_database_CursorWindow_nativeGetLong(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column);

jlong AndroidDatabaseCursorWindow_nativeGetLongWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column) {
  return Java_android_database_CursorWindow_nativeGetLong(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column);
}

JNIEXPORT jdouble Java_android_database_CursorWindow_nativeGetDouble(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column);

jdouble AndroidDatabaseCursorWindow_nativeGetDoubleWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column) {
  return Java_android_database_CursorWindow_nativeGetDouble(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column);
}

JNIEXPORT void Java_android_database_CursorWindow_nativeCopyStringToBuffer(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column, jobject buffer);

void AndroidDatabaseCursorWindow_nativeCopyStringToBufferWithLong_withInt_withInt_withAndroidDatabaseCharArrayBuffer_(jlong windowPtr, jint row, jint column, AndroidDatabaseCharArrayBuffer *buffer) {
  Java_android_database_CursorWindow_nativeCopyStringToBuffer(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column, buffer);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativePutBlob(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jarray value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutBlobWithLong_withByteArray_withInt_withInt_(jlong windowPtr, IOSByteArray *value, jint row, jint column) {
  return Java_android_database_CursorWindow_nativePutBlob(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, value, row, column);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativePutString(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jstring value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutStringWithLong_withNSString_withInt_withInt_(jlong windowPtr, NSString *value, jint row, jint column) {
  return Java_android_database_CursorWindow_nativePutString(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, value, row, column);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativePutLong(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jlong value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutLongWithLong_withLong_withInt_withInt_(jlong windowPtr, jlong value, jint row, jint column) {
  return Java_android_database_CursorWindow_nativePutLong(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, value, row, column);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativePutDouble(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jdouble value, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutDoubleWithLong_withDouble_withInt_withInt_(jlong windowPtr, jdouble value, jint row, jint column) {
  return Java_android_database_CursorWindow_nativePutDouble(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, value, row, column);
}

JNIEXPORT jboolean Java_android_database_CursorWindow_nativePutNull(JNIEnv *_env_, jclass _cls_, jlong windowPtr, jint row, jint column);

jboolean AndroidDatabaseCursorWindow_nativePutNullWithLong_withInt_withInt_(jlong windowPtr, jint row, jint column) {
  return Java_android_database_CursorWindow_nativePutNull(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr, row, column);
}

JNIEXPORT jstring Java_android_database_CursorWindow_nativeGetName(JNIEnv *_env_, jclass _cls_, jlong windowPtr);

NSString *AndroidDatabaseCursorWindow_nativeGetNameWithLong_(jlong windowPtr) {
  return (NSString *) Java_android_database_CursorWindow_nativeGetName(&J2ObjC_JNIEnv, AndroidDatabaseCursorWindow_class_(), windowPtr);
}

void AndroidDatabaseCursorWindow_initWithNSString_(AndroidDatabaseCursorWindow *self, NSString *name) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  JreStrongAssign(&self->mCloseGuard_, DalvikSystemCloseGuard_get());
  self->mStartPos_ = 0;
  JreStrongAssign(&self->mName_, name != nil && [name java_length] != 0 ? name : @"<unnamed>");
  if (AndroidDatabaseCursorWindow_sCursorWindowSize < 0) {
    AndroidDatabaseCursorWindow_sCursorWindowSize = 2048 * 1024;
  }
  self->mWindowPtr_ = AndroidDatabaseCursorWindow_nativeCreateWithNSString_withInt_(self->mName_, AndroidDatabaseCursorWindow_sCursorWindowSize);
  if (self->mWindowPtr_ == 0) {
    @throw create_AndroidDatabaseCursorWindowAllocationException_initWithNSString_(JreStrcat("$I$$", @"Cursor window allocation of ", (AndroidDatabaseCursorWindow_sCursorWindowSize / 1024), @" kb failed. ", AndroidDatabaseCursorWindow_printStats(self)));
  }
  [((DalvikSystemCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

AndroidDatabaseCursorWindow *new_AndroidDatabaseCursorWindow_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorWindow, initWithNSString_, name)
}

AndroidDatabaseCursorWindow *create_AndroidDatabaseCursorWindow_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorWindow, initWithNSString_, name)
}

void AndroidDatabaseCursorWindow_initWithBoolean_(AndroidDatabaseCursorWindow *self, jboolean localWindow) {
  AndroidDatabaseCursorWindow_initWithNSString_(self, nil);
}

AndroidDatabaseCursorWindow *new_AndroidDatabaseCursorWindow_initWithBoolean_(jboolean localWindow) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorWindow, initWithBoolean_, localWindow)
}

AndroidDatabaseCursorWindow *create_AndroidDatabaseCursorWindow_initWithBoolean_(jboolean localWindow) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorWindow, initWithBoolean_, localWindow)
}

void AndroidDatabaseCursorWindow_dispose(AndroidDatabaseCursorWindow *self) {
  if (self->mCloseGuard_ != nil) {
    [self->mCloseGuard_ close];
  }
  if (self->mWindowPtr_ != 0) {
    AndroidDatabaseCursorWindow_nativeDisposeWithLong_(self->mWindowPtr_);
    self->mWindowPtr_ = 0;
  }
}

NSString *AndroidDatabaseCursorWindow_printStats(AndroidDatabaseCursorWindow *self) {
  JavaLangStringBuilder *buff = create_JavaLangStringBuilder_init();
  jint myPid = 0;
  jint total = 0;
  AndroidUtilSparseIntArray *pidCounts = create_AndroidUtilSparseIntArray_init();
  jint numPids = [pidCounts size];
  for (jint i = 0; i < numPids; i++) {
    [buff appendWithNSString:@" (# cursors opened by "];
    jint pid = [pidCounts keyAtWithInt:i];
    if (pid == myPid) {
      [buff appendWithNSString:@"this proc="];
    }
    else {
      [buff appendWithNSString:JreStrcat("$IC", @"pid ", pid, '=')];
    }
    jint num = [pidCounts getWithInt:pid];
    [buff appendWithNSString:JreStrcat("IC", num, ')')];
    total += num;
  }
  NSString *s = ([buff java_length] > 980) ? [buff substringWithInt:0 withInt:980] : [buff description];
  return JreStrcat("$I$", @"# Open Cursors=", total, s);
}

IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseCursorWindow__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCursorWindow)

@implementation AndroidDatabaseCursorWindowAllocationException

- (instancetype __nonnull)initWithNSString:(NSString *)description_ {
  AndroidDatabaseCursorWindowAllocationException_initWithNSString_(self, description_);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseCursorWindowAllocationException = { "CursorWindowAllocationException", "android.database", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseCursorWindowAllocationException;
}

@end

void AndroidDatabaseCursorWindowAllocationException_initWithNSString_(AndroidDatabaseCursorWindowAllocationException *self, NSString *description_) {
  JavaLangRuntimeException_initWithNSString_(self, description_);
}

AndroidDatabaseCursorWindowAllocationException *new_AndroidDatabaseCursorWindowAllocationException_initWithNSString_(NSString *description_) {
  J2OBJC_NEW_IMPL(AndroidDatabaseCursorWindowAllocationException, initWithNSString_, description_)
}

AndroidDatabaseCursorWindowAllocationException *create_AndroidDatabaseCursorWindowAllocationException_initWithNSString_(NSString *description_) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseCursorWindowAllocationException, initWithNSString_, description_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseCursorWindowAllocationException)

@implementation AndroidDatabaseDataSetObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseDataSetObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)notifyChanged {
  @synchronized(mObservers_) {
    for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
      [((AndroidDatabaseDataSetObserver *) nil_chk([mObservers_ getWithInt:i])) onChanged];
    }
  }
}

- (void)notifyInvalidated {
  @synchronized(mObservers_) {
    for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
      [((AndroidDatabaseDataSetObserver *) nil_chk([mObservers_ getWithInt:i])) onInvalidated];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(notifyChanged);
  methods[2].selector = @selector(notifyInvalidated);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "Landroid/database/Observable<Landroid/database/DataSetObserver;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseDataSetObservable = { "DataSetObservable", "android.database", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, 0, -1 };
  return &_AndroidDatabaseDataSetObservable;
}

@end

void AndroidDatabaseDataSetObservable_init(AndroidDatabaseDataSetObservable *self) {
  AndroidDatabaseObservable_init(self);
}

AndroidDatabaseDataSetObservable *new_AndroidDatabaseDataSetObservable_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseDataSetObservable, init)
}

AndroidDatabaseDataSetObservable *create_AndroidDatabaseDataSetObservable_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDataSetObservable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDataSetObservable)

@implementation AndroidDatabaseDataSetObserver

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseDataSetObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onChanged {
}

- (void)onInvalidated {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onInvalidated);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidDatabaseDataSetObserver = { "DataSetObserver", "android.database", NULL, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseDataSetObserver;
}

@end

void AndroidDatabaseDataSetObserver_init(AndroidDatabaseDataSetObserver *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDataSetObserver)

@implementation AndroidDatabaseDatabaseErrorHandler

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCorruption", "LAndroidDatabaseSqliteSQLiteDatabase;" };
  static const J2ObjcClassInfo _AndroidDatabaseDatabaseErrorHandler = { "DatabaseErrorHandler", "android.database", ptrTable, methods, NULL, 7, 0x609, 1, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseDatabaseErrorHandler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseDatabaseErrorHandler)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseDatabaseUtils)

@implementation AndroidDatabaseDatabaseUtils

+ (jint)STATEMENT_SELECT {
  return AndroidDatabaseDatabaseUtils_STATEMENT_SELECT;
}

+ (jint)STATEMENT_UPDATE {
  return AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE;
}

+ (jint)STATEMENT_ATTACH {
  return AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH;
}

+ (jint)STATEMENT_BEGIN {
  return AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN;
}

+ (jint)STATEMENT_COMMIT {
  return AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT;
}

+ (jint)STATEMENT_ABORT {
  return AndroidDatabaseDatabaseUtils_STATEMENT_ABORT;
}

+ (jint)STATEMENT_PRAGMA {
  return AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA;
}

+ (jint)STATEMENT_DDL {
  return AndroidDatabaseDatabaseUtils_STATEMENT_DDL;
}

+ (jint)STATEMENT_UNPREPARED {
  return AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED;
}

+ (jint)STATEMENT_OTHER {
  return AndroidDatabaseDatabaseUtils_STATEMENT_OTHER;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseDatabaseUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram:(AndroidDatabaseSqliteSQLiteProgram *)prog
                                                          withInt:(jint)index
                                                           withId:(id)value {
  AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(prog, index, value);
}

+ (jint)getTypeOfObjectWithId:(id)obj {
  return AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(obj);
}

+ (void)cursorFillWindowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                          withInt:(jint)position
                  withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(cursor, position, window);
}

+ (void)appendEscapedSQLStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withNSString:(NSString *)sqlString {
  AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(sb, sqlString);
}

+ (NSString *)sqlEscapeStringWithNSString:(NSString *)value {
  return AndroidDatabaseDatabaseUtils_sqlEscapeStringWithNSString_(value);
}

+ (void)appendValueToSqlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                                           withId:(id)value {
  AndroidDatabaseDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(sql, value);
}

+ (NSString *)concatenateWhereWithNSString:(NSString *)a
                              withNSString:(NSString *)b {
  return AndroidDatabaseDatabaseUtils_concatenateWhereWithNSString_withNSString_(a, b);
}

+ (NSString *)getCollationKeyWithNSString:(NSString *)name {
  return AndroidDatabaseDatabaseUtils_getCollationKeyWithNSString_(name);
}

+ (jint)getKeyLenWithByteArray:(IOSByteArray *)arr {
  return AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(arr);
}

+ (IOSByteArray *)getCollationKeyInBytesWithNSString:(NSString *)name {
  return AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
}

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_(cursor);
}

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                      withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, stream);
}

+ (void)dumpCursorWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                  withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
}

+ (NSString *)dumpCursorToStringWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  return AndroidDatabaseDatabaseUtils_dumpCursorToStringWithAndroidDatabaseCursor_(cursor);
}

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_(cursor);
}

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                          withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, stream);
}

+ (void)dumpCurrentRowWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
}

+ (NSString *)dumpCurrentRowToStringWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  return AndroidDatabaseDatabaseUtils_dumpCurrentRowToStringWithAndroidDatabaseCursor_(cursor);
}

+ (void)cursorStringToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorStringToInsertHelperWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                               withNSString:(NSString *)field
              withAndroidDatabaseDatabaseUtils_InsertHelper:(AndroidDatabaseDatabaseUtils_InsertHelper *)inserter
                                                    withInt:(jint)index {
  AndroidDatabaseDatabaseUtils_cursorStringToInsertHelperWithAndroidDatabaseCursor_withNSString_withAndroidDatabaseDatabaseUtils_InsertHelper_withInt_(cursor, field, inserter, index);
}

+ (void)cursorStringToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorIntToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorIntToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                             withNSString:(NSString *)field
                          withAndroidContentContentValues:(AndroidContentContentValues *)values
                                             withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorLongToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                              withNSString:(NSString *)field
                           withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorLongToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                              withNSString:(NSString *)field
                           withAndroidContentContentValues:(AndroidContentContentValues *)values
                                              withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorDoubleToCursorValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                               withNSString:(NSString *)field
                            withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorDoubleToCursorValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(cursor, field, values);
}

+ (void)cursorDoubleToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                                withNSString:(NSString *)field
                             withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                withNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, key);
}

+ (void)cursorRowToContentValuesWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                          withAndroidContentContentValues:(AndroidContentContentValues *)values {
  AndroidDatabaseDatabaseUtils_cursorRowToContentValuesWithAndroidDatabaseCursor_withAndroidContentContentValues_(cursor, values);
}

+ (jint)cursorPickFillWindowStartPositionWithInt:(jint)cursorPosition
                                         withInt:(jint)cursorWindowCapacity {
  return AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(cursorPosition, cursorWindowCapacity);
}

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db, table);
}

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table
                                                   withNSString:(NSString *)selection {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_(db, table, selection);
}

+ (jlong)queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table
                                                   withNSString:(NSString *)selection
                                              withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(db, table, selection, selectionArgs);
}

+ (jboolean)queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)table {
  return AndroidDatabaseDatabaseUtils_queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db, table);
}

+ (jlong)longForQueryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                withNSString:(NSString *)query
                                           withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, query, selectionArgs);
}

+ (jlong)longForQueryWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)prog
                                            withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
}

+ (NSString *)stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                       withNSString:(NSString *)query
                                                  withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, query, selectionArgs);
}

+ (NSString *)stringForQueryWithAndroidDatabaseSqliteSQLiteStatement:(AndroidDatabaseSqliteSQLiteStatement *)prog
                                                   withNSStringArray:(IOSObjectArray *)selectionArgs {
  return AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
}

+ (void)cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                      withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                         withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                    withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                       withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                        withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                   withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                      withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                     withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                        withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor
                                      withAndroidContentContentValues:(AndroidContentContentValues *)values
                                                         withNSString:(NSString *)column {
  AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(cursor, values, column);
}

+ (void)createDbFromSqlStatementsWithAndroidContentContext:(AndroidContentContext *)context
                                              withNSString:(NSString *)dbName
                                                   withInt:(jint)dbVersion
                                              withNSString:(NSString *)sqlStatements {
  AndroidDatabaseDatabaseUtils_createDbFromSqlStatementsWithAndroidContentContext_withNSString_withInt_withNSString_(context, dbName, dbVersion, sqlStatements);
}

+ (jint)getSqlStatementTypeWithNSString:(NSString *)sql {
  return AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
}

+ (IOSObjectArray *)appendSelectionArgsWithNSStringArray:(IOSObjectArray *)originalValues
                                       withNSStringArray:(IOSObjectArray *)newValues {
  return AndroidDatabaseDatabaseUtils_appendSelectionArgsWithNSStringArray_withNSStringArray_(originalValues, newValues);
}

+ (jint)findRowIdColumnIndexWithNSStringArray:(IOSObjectArray *)columnNames {
  return AndroidDatabaseDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(columnNames);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 36, 37, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 38, 40, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 38, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 42, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 43, 45, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 46, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 46, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 50, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 51, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 53, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 54, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 56, 9, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 57, 58, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 59, 60, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram:withInt:withId:);
  methods[2].selector = @selector(getTypeOfObjectWithId:);
  methods[3].selector = @selector(cursorFillWindowWithAndroidDatabaseCursor:withInt:withAndroidDatabaseCursorWindow:);
  methods[4].selector = @selector(appendEscapedSQLStringWithJavaLangStringBuilder:withNSString:);
  methods[5].selector = @selector(sqlEscapeStringWithNSString:);
  methods[6].selector = @selector(appendValueToSqlWithJavaLangStringBuilder:withId:);
  methods[7].selector = @selector(concatenateWhereWithNSString:withNSString:);
  methods[8].selector = @selector(getCollationKeyWithNSString:);
  methods[9].selector = @selector(getKeyLenWithByteArray:);
  methods[10].selector = @selector(getCollationKeyInBytesWithNSString:);
  methods[11].selector = @selector(dumpCursorWithAndroidDatabaseCursor:);
  methods[12].selector = @selector(dumpCursorWithAndroidDatabaseCursor:withJavaIoPrintStream:);
  methods[13].selector = @selector(dumpCursorWithAndroidDatabaseCursor:withJavaLangStringBuilder:);
  methods[14].selector = @selector(dumpCursorToStringWithAndroidDatabaseCursor:);
  methods[15].selector = @selector(dumpCurrentRowWithAndroidDatabaseCursor:);
  methods[16].selector = @selector(dumpCurrentRowWithAndroidDatabaseCursor:withJavaIoPrintStream:);
  methods[17].selector = @selector(dumpCurrentRowWithAndroidDatabaseCursor:withJavaLangStringBuilder:);
  methods[18].selector = @selector(dumpCurrentRowToStringWithAndroidDatabaseCursor:);
  methods[19].selector = @selector(cursorStringToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[20].selector = @selector(cursorStringToInsertHelperWithAndroidDatabaseCursor:withNSString:withAndroidDatabaseDatabaseUtils_InsertHelper:withInt:);
  methods[21].selector = @selector(cursorStringToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[22].selector = @selector(cursorIntToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[23].selector = @selector(cursorIntToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[24].selector = @selector(cursorLongToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[25].selector = @selector(cursorLongToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[26].selector = @selector(cursorDoubleToCursorValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:);
  methods[27].selector = @selector(cursorDoubleToContentValuesWithAndroidDatabaseCursor:withNSString:withAndroidContentContentValues:withNSString:);
  methods[28].selector = @selector(cursorRowToContentValuesWithAndroidDatabaseCursor:withAndroidContentContentValues:);
  methods[29].selector = @selector(cursorPickFillWindowStartPositionWithInt:withInt:);
  methods[30].selector = @selector(queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  methods[31].selector = @selector(queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSString:);
  methods[32].selector = @selector(queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSString:withNSStringArray:);
  methods[33].selector = @selector(queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  methods[34].selector = @selector(longForQueryWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSStringArray:);
  methods[35].selector = @selector(longForQueryWithAndroidDatabaseSqliteSQLiteStatement:withNSStringArray:);
  methods[36].selector = @selector(stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSStringArray:);
  methods[37].selector = @selector(stringForQueryWithAndroidDatabaseSqliteSQLiteStatement:withNSStringArray:);
  methods[38].selector = @selector(cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[39].selector = @selector(cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[40].selector = @selector(cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[41].selector = @selector(cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[42].selector = @selector(cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[43].selector = @selector(cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor:withAndroidContentContentValues:withNSString:);
  methods[44].selector = @selector(createDbFromSqlStatementsWithAndroidContentContext:withNSString:withInt:withNSString:);
  methods[45].selector = @selector(getSqlStatementTypeWithNSString:);
  methods[46].selector = @selector(appendSelectionArgsWithNSStringArray:withNSStringArray:);
  methods[47].selector = @selector(findRowIdColumnIndexWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = AndroidDatabaseDatabaseUtils_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "STATEMENT_SELECT", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_SELECT, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_UPDATE", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_ATTACH", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_BEGIN", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_COMMIT", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_ABORT", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_ABORT, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_PRAGMA", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_DDL", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_DDL, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_UNPREPARED", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED, 0x19, -1, -1, -1, -1 },
    { "STATEMENT_OTHER", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_STATEMENT_OTHER, 0x19, -1, -1, -1, -1 },
    { "mColl", "LJavaTextCollator;", .constantValue.asLong = 0, 0xa, -1, 62, -1, -1 },
  };
  static const void *ptrTable[] = { "bindObjectToProgram", "LAndroidDatabaseSqliteSQLiteProgram;ILNSObject;", "getTypeOfObject", "LNSObject;", "cursorFillWindow", "LAndroidDatabaseCursor;ILAndroidDatabaseCursorWindow;", "appendEscapedSQLString", "LJavaLangStringBuilder;LNSString;", "sqlEscapeString", "LNSString;", "appendValueToSql", "LJavaLangStringBuilder;LNSObject;", "concatenateWhere", "LNSString;LNSString;", "getCollationKey", "getKeyLen", "[B", "getCollationKeyInBytes", "dumpCursor", "LAndroidDatabaseCursor;", "LAndroidDatabaseCursor;LJavaIoPrintStream;", "LAndroidDatabaseCursor;LJavaLangStringBuilder;", "dumpCursorToString", "dumpCurrentRow", "dumpCurrentRowToString", "cursorStringToContentValues", "LAndroidDatabaseCursor;LNSString;LAndroidContentContentValues;", "cursorStringToInsertHelper", "LAndroidDatabaseCursor;LNSString;LAndroidDatabaseDatabaseUtils_InsertHelper;I", "LAndroidDatabaseCursor;LNSString;LAndroidContentContentValues;LNSString;", "cursorIntToContentValues", "cursorLongToContentValues", "cursorDoubleToCursorValues", "cursorDoubleToContentValues", "cursorRowToContentValues", "LAndroidDatabaseCursor;LAndroidContentContentValues;", "cursorPickFillWindowStartPosition", "II", "queryNumEntries", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LNSString;[LNSString;", "queryIsEmpty", "longForQuery", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;[LNSString;", "LAndroidDatabaseSqliteSQLiteStatement;[LNSString;", "stringForQuery", "cursorStringToContentValuesIfPresent", "LAndroidDatabaseCursor;LAndroidContentContentValues;LNSString;", "cursorLongToContentValuesIfPresent", "cursorShortToContentValuesIfPresent", "cursorIntToContentValuesIfPresent", "cursorFloatToContentValuesIfPresent", "cursorDoubleToContentValuesIfPresent", "createDbFromSqlStatements", "LAndroidContentContext;LNSString;ILNSString;", "getSqlStatementType", "appendSelectionArgs", "[LNSString;[LNSString;", "findRowIdColumnIndex", "[LNSString;", &AndroidDatabaseDatabaseUtils_TAG, &AndroidDatabaseDatabaseUtils_mColl, "LAndroidDatabaseDatabaseUtils_InsertHelper;" };
  static const J2ObjcClassInfo _AndroidDatabaseDatabaseUtils = { "DatabaseUtils", "android.database", ptrTable, methods, fields, 7, 0x1, 48, 13, -1, 63, -1, -1, -1 };
  return &_AndroidDatabaseDatabaseUtils;
}

+ (void)initialize {
  if (self == [AndroidDatabaseDatabaseUtils class]) {
    JreStrongAssign(&AndroidDatabaseDatabaseUtils_mColl, nil);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseDatabaseUtils)
  }
}

@end

void AndroidDatabaseDatabaseUtils_init(AndroidDatabaseDatabaseUtils *self) {
  NSObject_init(self);
}

AndroidDatabaseDatabaseUtils *new_AndroidDatabaseDatabaseUtils_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseDatabaseUtils, init)
}

AndroidDatabaseDatabaseUtils *create_AndroidDatabaseDatabaseUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDatabaseUtils, init)
}

void AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(AndroidDatabaseSqliteSQLiteProgram *prog, jint index, id value) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (value == nil) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindNullWithInt:index];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]] || [value isKindOfClass:[JavaLangFloat class]]) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindDoubleWithInt:index withDouble:[((NSNumber *) cast_chk(value, [NSNumber class])) doubleValue]];
  }
  else if ([value isKindOfClass:[NSNumber class]]) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:[((NSNumber *) cast_chk(value, [NSNumber class])) longLongValue]];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
    if ([bool_ booleanValue]) {
      [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:1];
    }
    else {
      [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindLongWithInt:index withLong:0];
    }
  }
  else if ([value isKindOfClass:[IOSByteArray class]]) {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindBlobWithInt:index withByteArray:(IOSByteArray *) cast_chk(value, [IOSByteArray class])];
  }
  else {
    [((AndroidDatabaseSqliteSQLiteProgram *) nil_chk(prog)) bindStringWithInt:index withNSString:[value description]];
  }
}

jint AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(id obj) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (obj == nil) {
    return AndroidDatabaseCursor_FIELD_TYPE_NULL;
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    return AndroidDatabaseCursor_FIELD_TYPE_BLOB;
  }
  else if ([obj isKindOfClass:[JavaLangFloat class]] || [obj isKindOfClass:[JavaLangDouble class]]) {
    return AndroidDatabaseCursor_FIELD_TYPE_FLOAT;
  }
  else if ([obj isKindOfClass:[JavaLangLong class]] || [obj isKindOfClass:[JavaLangInteger class]] || [obj isKindOfClass:[JavaLangShort class]] || [obj isKindOfClass:[JavaLangByte class]]) {
    return AndroidDatabaseCursor_FIELD_TYPE_INTEGER;
  }
  else {
    return AndroidDatabaseCursor_FIELD_TYPE_STRING;
  }
}

void AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(id<AndroidDatabaseCursor> cursor, jint position, AndroidDatabaseCursorWindow *window) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (position < 0 || position >= [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getCount]) {
    return;
  }
  jint oldPos = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getPosition];
  jint numColumns = [cursor getColumnCount];
  [((AndroidDatabaseCursorWindow *) nil_chk(window)) clear];
  [window setStartPositionWithInt:position];
  [window setNumColumnsWithInt:numColumns];
  if ([cursor moveToPositionWithInt:position]) {
    do {
      if (![window allocRow]) {
        break;
      }
      for (jint i = 0; i < numColumns; i++) {
        jint type = [cursor getTypeWithInt:i];
        jboolean success;
        switch (type) {
          case AndroidDatabaseCursor_FIELD_TYPE_NULL:
          success = [window putNullWithInt:position withInt:i];
          break;
          case AndroidDatabaseCursor_FIELD_TYPE_INTEGER:
          success = [window putLongWithLong:[cursor getLongWithInt:i] withInt:position withInt:i];
          break;
          case AndroidDatabaseCursor_FIELD_TYPE_FLOAT:
          success = [window putDoubleWithDouble:[cursor getDoubleWithInt:i] withInt:position withInt:i];
          break;
          case AndroidDatabaseCursor_FIELD_TYPE_BLOB:
          {
            IOSByteArray *value = [cursor getBlobWithInt:i];
            success = value != nil ? [window putBlobWithByteArray:value withInt:position withInt:i] : [window putNullWithInt:position withInt:i];
            break;
          }
          default:
          case AndroidDatabaseCursor_FIELD_TYPE_STRING:
          {
            NSString *value = [cursor getStringWithInt:i];
            success = value != nil ? [window putStringWithNSString:value withInt:position withInt:i] : [window putNullWithInt:position withInt:i];
            break;
          }
        }
        if (!success) {
          [window freeLastRow];
          break;
        }
      }
      position += 1;
    }
    while ([cursor moveToNext]);
  }
  [cursor moveToPositionWithInt:oldPos];
}

void AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *sqlString) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\''];
  if ([((NSString *) nil_chk(sqlString)) java_indexOf:'\''] != -1) {
    jint length = [sqlString java_length];
    for (jint i = 0; i < length; i++) {
      jchar c = [sqlString charAtWithInt:i];
      if (c == '\'') {
        [sb appendWithChar:'\''];
      }
      [sb appendWithChar:c];
    }
  }
  else [sb appendWithNSString:sqlString];
  [sb appendWithChar:'\''];
}

NSString *AndroidDatabaseDatabaseUtils_sqlEscapeStringWithNSString_(NSString *value) {
  AndroidDatabaseDatabaseUtils_initialize();
  JavaLangStringBuilder *escaper = create_JavaLangStringBuilder_init();
  AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(escaper, value);
  return [escaper description];
}

void AndroidDatabaseDatabaseUtils_appendValueToSqlWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sql, id value) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (value == nil) {
    [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"NULL"];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]);
    if ([bool_ booleanValue]) {
      [((JavaLangStringBuilder *) nil_chk(sql)) appendWithChar:'1'];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sql)) appendWithChar:'0'];
    }
  }
  else {
    AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(sql, [value description]);
  }
}

NSString *AndroidDatabaseDatabaseUtils_concatenateWhereWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(a)) {
    return b;
  }
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(b)) {
    return a;
  }
  return JreStrcat("C$$$C", '(', a, @") AND (", b, ')');
}

NSString *AndroidDatabaseDatabaseUtils_getCollationKeyWithNSString_(NSString *name) {
  AndroidDatabaseDatabaseUtils_initialize();
  IOSByteArray *arr = AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(name);
  @try {
    return [NSString java_stringWithBytes:arr offset:0 length:AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(arr) charsetName:@"ISO8859_1"];
  }
  @catch (JavaLangException *ex) {
    return @"";
  }
}

jint AndroidDatabaseDatabaseUtils_getKeyLenWithByteArray_(IOSByteArray *arr) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (IOSByteArray_Get(arr, ((IOSByteArray *) nil_chk(arr))->size_ - 1) != 0) {
    return arr->size_;
  }
  else {
    return arr->size_ - 1;
  }
}

IOSByteArray *AndroidDatabaseDatabaseUtils_getCollationKeyInBytesWithNSString_(NSString *name) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (AndroidDatabaseDatabaseUtils_mColl == nil) {
    JreStrongAssign(&AndroidDatabaseDatabaseUtils_mColl, JavaTextCollator_getInstance());
    [((JavaTextCollator *) nil_chk(AndroidDatabaseDatabaseUtils_mColl)) setStrengthWithInt:JavaTextCollator_PRIMARY];
  }
  return [((JavaTextCollationKey *) nil_chk([((JavaTextCollator *) nil_chk(AndroidDatabaseDatabaseUtils_mColl)) getCollationKeyWithNSString:name])) toByteArray];
}

void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, JreLoadStatic(JavaLangSystem, out));
}

void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaIoPrintStream_(id<AndroidDatabaseCursor> cursor, JavaIoPrintStream *stream) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("$@", @">>>>> Dumping cursor ", cursor)];
  if (cursor != nil) {
    jint startPos = [cursor getPosition];
    [cursor moveToPositionWithInt:-1];
    while ([cursor moveToNext]) {
      AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, stream);
    }
    [cursor moveToPositionWithInt:startPos];
  }
  [stream printlnWithNSString:@"<<<<<"];
}

void AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(id<AndroidDatabaseCursor> cursor, JavaLangStringBuilder *sb) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$@C", @">>>>> Dumping cursor ", cursor, 0x000a)];
  if (cursor != nil) {
    jint startPos = [cursor getPosition];
    [cursor moveToPositionWithInt:-1];
    while ([cursor moveToNext]) {
      AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
    }
    [cursor moveToPositionWithInt:startPos];
  }
  [sb appendWithNSString:@"<<<<<\n"];
}

NSString *AndroidDatabaseDatabaseUtils_dumpCursorToStringWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  AndroidDatabaseDatabaseUtils_dumpCursorWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
  return [sb description];
}

void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(cursor, JreLoadStatic(JavaLangSystem, out));
}

void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaIoPrintStream_(id<AndroidDatabaseCursor> cursor, JavaIoPrintStream *stream) {
  AndroidDatabaseDatabaseUtils_initialize();
  IOSObjectArray *cols = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnNames];
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("I$", [cursor getPosition], @" {")];
  jint length = ((IOSObjectArray *) nil_chk(cols))->size_;
  for (jint i = 0; i < length; i++) {
    NSString *value;
    @try {
      value = [cursor getStringWithInt:i];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      value = @"<unprintable>";
    }
    [stream printlnWithNSString:JreStrcat("$$C$", @"   ", IOSObjectArray_Get(cols, i), '=', value)];
  }
  [stream printlnWithNSString:@"}"];
}

void AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(id<AndroidDatabaseCursor> cursor, JavaLangStringBuilder *sb) {
  AndroidDatabaseDatabaseUtils_initialize();
  IOSObjectArray *cols = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnNames];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("I$", [cursor getPosition], @" {\n")];
  jint length = ((IOSObjectArray *) nil_chk(cols))->size_;
  for (jint i = 0; i < length; i++) {
    NSString *value;
    @try {
      value = [cursor getStringWithInt:i];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      value = @"<unprintable>";
    }
    [sb appendWithNSString:JreStrcat("$$C$C", @"   ", IOSObjectArray_Get(cols, i), '=', value, 0x000a)];
  }
  [sb appendWithNSString:@"}\n"];
}

NSString *AndroidDatabaseDatabaseUtils_dumpCurrentRowToStringWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  AndroidDatabaseDatabaseUtils_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  AndroidDatabaseDatabaseUtils_dumpCurrentRowWithAndroidDatabaseCursor_withJavaLangStringBuilder_(cursor, sb);
  return [sb description];
}

void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorStringToInsertHelperWithAndroidDatabaseCursor_withNSString_withAndroidDatabaseDatabaseUtils_InsertHelper_withInt_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidDatabaseDatabaseUtils_InsertHelper *inserter, jint index) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidDatabaseDatabaseUtils_InsertHelper *) nil_chk(inserter)) bindWithInt:index withNSString:[((id<AndroidDatabaseCursor>) nil_chk(cursor)) getStringWithInt:[cursor getColumnIndexOrThrowWithNSString:field]]];
}

void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withNSString:[((id<AndroidDatabaseCursor>) nil_chk(cursor)) getStringWithInt:[cursor getColumnIndexOrThrowWithNSString:field]]];
}

void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint colIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangInteger:JavaLangInteger_valueOfWithInt_([cursor getIntWithInt:colIndex])];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangInteger:nil];
  }
}

void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint colIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    JavaLangLong *value = JavaLangLong_valueOfWithLong_([cursor getLongWithInt:colIndex]);
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangLong:value];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangLong:nil];
  }
}

void AndroidDatabaseDatabaseUtils_cursorDoubleToCursorValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(cursor, field, values, field);
}

void AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesWithAndroidDatabaseCursor_withNSString_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, NSString *field, AndroidContentContentValues *values, NSString *key) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint colIndex = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:field];
  if (![cursor isNullWithInt:colIndex]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangDouble:JavaLangDouble_valueOfWithDouble_([cursor getDoubleWithInt:colIndex])];
  }
  else {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:key withJavaLangDouble:nil];
  }
}

void AndroidDatabaseDatabaseUtils_cursorRowToContentValuesWithAndroidDatabaseCursor_withAndroidContentContentValues_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseAbstractWindowedCursor *awc = ([cursor isKindOfClass:[AndroidDatabaseAbstractWindowedCursor class]]) ? (AndroidDatabaseAbstractWindowedCursor *) cast_chk(cursor, [AndroidDatabaseAbstractWindowedCursor class]) : nil;
  IOSObjectArray *columns = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnNames];
  jint length = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < length; i++) {
    if (awc != nil && [awc isBlobWithInt:i]) {
      [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:IOSObjectArray_Get(columns, i) withByteArray:[cursor getBlobWithInt:i]];
    }
    else {
      [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:IOSObjectArray_Get(columns, i) withNSString:[cursor getStringWithInt:i]];
    }
  }
}

jint AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(jint cursorPosition, jint cursorWindowCapacity) {
  AndroidDatabaseDatabaseUtils_initialize();
  return JavaLangMath_maxWithInt_withInt_(cursorPosition - cursorWindowCapacity / 3, 0);
}

jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table) {
  AndroidDatabaseDatabaseUtils_initialize();
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(db, table, nil, nil);
}

jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table, NSString *selection) {
  AndroidDatabaseDatabaseUtils_initialize();
  return AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(db, table, selection, nil);
}

jlong AndroidDatabaseDatabaseUtils_queryNumEntriesWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table, NSString *selection, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  NSString *s = (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(selection)) ? JreStrcat("$$", @" where ", selection) : @"";
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, JreStrcat("$$$", @"select count(*) from ", table, s), selectionArgs);
}

jboolean AndroidDatabaseDatabaseUtils_queryIsEmptyWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *table) {
  AndroidDatabaseDatabaseUtils_initialize();
  jlong isEmpty = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(db, JreStrcat("$$C", @"select exists(select 1 from ", table, ')'), nil);
  return isEmpty == 0;
}

jlong AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseSqliteSQLiteStatement *prog = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) compileStatementWithNSString:query];
  @try {
    return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
  }
  @finally {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) close];
  }
}

jlong AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(AndroidDatabaseSqliteSQLiteStatement *prog, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) bindAllArgsAsStringsWithNSStringArray:selectionArgs];
  return [prog simpleQueryForLong];
}

NSString *AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseSqliteSQLiteStatement *prog = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) compileStatementWithNSString:query];
  @try {
    return AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(prog, selectionArgs);
  }
  @finally {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) close];
  }
}

NSString *AndroidDatabaseDatabaseUtils_stringForQueryWithAndroidDatabaseSqliteSQLiteStatement_withNSStringArray_(AndroidDatabaseSqliteSQLiteStatement *prog, IOSObjectArray *selectionArgs) {
  AndroidDatabaseDatabaseUtils_initialize();
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) bindAllArgsAsStringsWithNSStringArray:selectionArgs];
  return [prog simpleQueryForString];
}

void AndroidDatabaseDatabaseUtils_cursorStringToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withNSString:[cursor getStringWithInt:index]];
  }
}

void AndroidDatabaseDatabaseUtils_cursorLongToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangLong:JavaLangLong_valueOfWithLong_([cursor getLongWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorShortToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangShort:JavaLangShort_valueOfWithShort_([cursor getShortWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorIntToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangInteger:JavaLangInteger_valueOfWithInt_([cursor getIntWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorFloatToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangFloat:JavaLangFloat_valueOfWithFloat_([cursor getFloatWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_cursorDoubleToContentValuesIfPresentWithAndroidDatabaseCursor_withAndroidContentContentValues_withNSString_(id<AndroidDatabaseCursor> cursor, AndroidContentContentValues *values, NSString *column) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint index = [((id<AndroidDatabaseCursor>) nil_chk(cursor)) getColumnIndexWithNSString:column];
  if (index != -1 && ![cursor isNullWithInt:index]) {
    [((AndroidContentContentValues *) nil_chk(values)) putWithNSString:column withJavaLangDouble:JavaLangDouble_valueOfWithDouble_([cursor getDoubleWithInt:index])];
  }
}

void AndroidDatabaseDatabaseUtils_createDbFromSqlStatementsWithAndroidContentContext_withNSString_withInt_withNSString_(AndroidContentContext *context, NSString *dbName, jint dbVersion, NSString *sqlStatements) {
  AndroidDatabaseDatabaseUtils_initialize();
  AndroidDatabaseSqliteSQLiteDatabase *db = [((AndroidContentContext *) nil_chk(context)) openOrCreateDatabaseWithNSString:dbName withInt:0 withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil];
  IOSObjectArray *statements = AndroidTextTextUtils_splitWithNSString_withNSString_(sqlStatements, @";\n");
  {
    IOSObjectArray *a__ = statements;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *statement = *b__++;
      if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(statement)) continue;
      [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) execSQLWithNSString:statement];
    }
  }
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) setVersionWithInt:dbVersion];
  [db close];
}

jint AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(NSString *sql) {
  AndroidDatabaseDatabaseUtils_initialize();
  sql = [((NSString *) nil_chk(sql)) java_trim];
  if ([((NSString *) nil_chk(sql)) java_length] < 3) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_OTHER;
  }
  NSString *prefixSql = [((NSString *) nil_chk([sql java_substring:0 endIndex:3])) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  if ([((NSString *) nil_chk(prefixSql)) isEqual:@"SEL"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_SELECT;
  }
  else if ([prefixSql isEqual:@"INS"] || [prefixSql isEqual:@"UPD"] || [prefixSql isEqual:@"REP"] || [prefixSql isEqual:@"DEL"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE;
  }
  else if ([prefixSql isEqual:@"ATT"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH;
  }
  else if ([prefixSql isEqual:@"COM"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT;
  }
  else if ([prefixSql isEqual:@"END"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT;
  }
  else if ([prefixSql isEqual:@"ROL"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_ABORT;
  }
  else if ([prefixSql isEqual:@"BEG"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN;
  }
  else if ([prefixSql isEqual:@"PRA"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_PRAGMA;
  }
  else if ([prefixSql isEqual:@"CRE"] || [prefixSql isEqual:@"DRO"] || [prefixSql isEqual:@"ALT"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_DDL;
  }
  else if ([prefixSql isEqual:@"ANA"] || [prefixSql isEqual:@"DET"]) {
    return AndroidDatabaseDatabaseUtils_STATEMENT_UNPREPARED;
  }
  return AndroidDatabaseDatabaseUtils_STATEMENT_OTHER;
}

IOSObjectArray *AndroidDatabaseDatabaseUtils_appendSelectionArgsWithNSStringArray_withNSStringArray_(IOSObjectArray *originalValues, IOSObjectArray *newValues) {
  AndroidDatabaseDatabaseUtils_initialize();
  if (originalValues == nil || originalValues->size_ == 0) {
    return newValues;
  }
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:originalValues->size_ + ((IOSObjectArray *) nil_chk(newValues))->size_ type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(originalValues, 0, result, 0, originalValues->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newValues, 0, result, originalValues->size_, newValues->size_);
  return result;
}

jint AndroidDatabaseDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(IOSObjectArray *columnNames) {
  AndroidDatabaseDatabaseUtils_initialize();
  jint length = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(columnNames, i))) isEqual:@"_id"]) {
      return i;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDatabaseUtils)

@implementation AndroidDatabaseDatabaseUtils_InsertHelper

+ (jint)TABLE_INFO_PRAGMA_COLUMNNAME_INDEX {
  return AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX;
}

+ (jint)TABLE_INFO_PRAGMA_DEFAULT_INDEX {
  return AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)tableName {
  AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(self, db, tableName);
  return self;
}

- (void)buildSQL {
  AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(self);
}

- (AndroidDatabaseSqliteSQLiteStatement *)getStatementWithBoolean:(jboolean)allowReplace {
  return AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, allowReplace);
}

- (jlong)insertInternalWithAndroidContentContentValues:(AndroidContentContentValues *)values
                                           withBoolean:(jboolean)allowReplace {
  return AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, allowReplace);
}

- (jint)getColumnIndexWithNSString:(NSString *)key {
  AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, false);
  JavaLangInteger *index = [((JavaUtilHashMap *) nil_chk(mColumns_)) getWithId:key];
  if (index == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"column '", key, @"' is invalid"));
  }
  return [index intValue];
}

- (void)bindWithInt:(jint)index
         withDouble:(jdouble)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindWithInt:(jint)index
          withFloat:(jfloat)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindDoubleWithInt:index withDouble:value];
}

- (void)bindWithInt:(jint)index
           withLong:(jlong)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value];
}

- (void)bindWithInt:(jint)index
            withInt:(jint)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value];
}

- (void)bindWithInt:(jint)index
        withBoolean:(jboolean)value {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindLongWithInt:index withLong:value ? 1 : 0];
}

- (void)bindNullWithInt:(jint)index {
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
}

- (void)bindWithInt:(jint)index
      withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
  }
  else {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindBlobWithInt:index withByteArray:value];
  }
}

- (void)bindWithInt:(jint)index
       withNSString:(NSString *)value {
  if (value == nil) {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindNullWithInt:index];
  }
  else {
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) bindStringWithInt:index withNSString:value];
  }
}

- (jlong)insertWithAndroidContentContentValues:(AndroidContentContentValues *)values {
  return AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, false);
}

- (jlong)execute {
  if (mPreparedStatement_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"you must prepare this inserter before calling execute");
  }
  @try {
    return [mPreparedStatement_ executeInsert];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseDatabaseUtils_TAG, JreStrcat("$$", @"Error executing InsertHelper with table ", mTableName_), e);
    return -1;
  }
  @finally {
    JreStrongAssign(&mPreparedStatement_, nil);
  }
}

- (void)prepareForInsert {
  JreStrongAssign(&mPreparedStatement_, AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, false));
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) clearBindings];
}

- (void)prepareForReplace {
  JreStrongAssign(&mPreparedStatement_, AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, true));
  [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(mPreparedStatement_)) clearBindings];
}

- (jlong)replaceWithAndroidContentContentValues:(AndroidContentContentValues *)values {
  return AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(self, values, true);
}

- (void)close {
  if (mInsertStatement_ != nil) {
    [mInsertStatement_ close];
    JreStrongAssign(&mInsertStatement_, nil);
  }
  if (mReplaceStatement_ != nil) {
    [mReplaceStatement_ close];
    JreStrongAssign(&mReplaceStatement_, nil);
  }
  JreStrongAssign(&mInsertSQL_, nil);
  JreStrongAssign(&mColumns_, nil);
}

- (void)dealloc {
  RELEASE_(mDb_);
  RELEASE_(mTableName_);
  RELEASE_(mColumns_);
  RELEASE_(mInsertSQL_);
  RELEASE_(mInsertStatement_);
  RELEASE_(mReplaceStatement_);
  RELEASE_(mPreparedStatement_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteStatement;", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "J", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:);
  methods[1].selector = @selector(buildSQL);
  methods[2].selector = @selector(getStatementWithBoolean:);
  methods[3].selector = @selector(insertInternalWithAndroidContentContentValues:withBoolean:);
  methods[4].selector = @selector(getColumnIndexWithNSString:);
  methods[5].selector = @selector(bindWithInt:withDouble:);
  methods[6].selector = @selector(bindWithInt:withFloat:);
  methods[7].selector = @selector(bindWithInt:withLong:);
  methods[8].selector = @selector(bindWithInt:withInt:);
  methods[9].selector = @selector(bindWithInt:withBoolean:);
  methods[10].selector = @selector(bindNullWithInt:);
  methods[11].selector = @selector(bindWithInt:withByteArray:);
  methods[12].selector = @selector(bindWithInt:withNSString:);
  methods[13].selector = @selector(insertWithAndroidContentContentValues:);
  methods[14].selector = @selector(execute);
  methods[15].selector = @selector(prepareForInsert);
  methods[16].selector = @selector(prepareForReplace);
  methods[17].selector = @selector(replaceWithAndroidContentContentValues:);
  methods[18].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDb_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTableName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumns_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "mInsertSQL_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInsertStatement_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReplaceStatement_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPreparedStatement_", "LAndroidDatabaseSqliteSQLiteStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TABLE_INFO_PRAGMA_COLUMNNAME_INDEX", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX, 0x19, -1, -1, -1, -1 },
    { "TABLE_INFO_PRAGMA_DEFAULT_INDEX", "I", .constantValue.asInt = AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;", "LAndroidDatabaseSQLException;", "getStatement", "Z", "insertInternal", "LAndroidContentContentValues;Z", "getColumnIndex", "LNSString;", "bind", "ID", "IF", "IJ", "II", "IZ", "bindNull", "I", "I[B", "ILNSString;", "insert", "LAndroidContentContentValues;", "replace", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LAndroidDatabaseDatabaseUtils;", (void *)&AndroidDatabaseDatabaseUtils_InsertHelper__Annotations$0 };
  static const J2ObjcClassInfo _AndroidDatabaseDatabaseUtils_InsertHelper = { "InsertHelper", "android.database", ptrTable, methods, fields, 7, 0x9, 19, 9, 22, -1, -1, -1, 23 };
  return &_AndroidDatabaseDatabaseUtils_InsertHelper;
}

@end

void AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) {
  NSObject_init(self);
  JreStrongAssign(&self->mInsertSQL_, nil);
  JreStrongAssign(&self->mInsertStatement_, nil);
  JreStrongAssign(&self->mReplaceStatement_, nil);
  JreStrongAssign(&self->mPreparedStatement_, nil);
  JreStrongAssign(&self->mDb_, db);
  JreStrongAssign(&self->mTableName_, tableName);
}

AndroidDatabaseDatabaseUtils_InsertHelper *new_AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) {
  J2OBJC_NEW_IMPL(AndroidDatabaseDatabaseUtils_InsertHelper, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_, db, tableName)
}

AndroidDatabaseDatabaseUtils_InsertHelper *create_AndroidDatabaseDatabaseUtils_InsertHelper_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *tableName) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDatabaseUtils_InsertHelper, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_, db, tableName)
}

void AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(AndroidDatabaseDatabaseUtils_InsertHelper *self) {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(128);
  [sb appendWithNSString:@"INSERT INTO "];
  [sb appendWithNSString:self->mTableName_];
  [sb appendWithNSString:@" ("];
  JavaLangStringBuilder *sbv = create_JavaLangStringBuilder_initWithInt_(128);
  [sbv appendWithNSString:@"VALUES ("];
  jint i = 1;
  id<AndroidDatabaseCursor> cur = nil;
  @try {
    cur = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) rawQueryWithNSString:JreStrcat("$$C", @"PRAGMA table_info(", self->mTableName_, ')') withNSStringArray:nil];
    JreStrongAssignAndConsume(&self->mColumns_, new_JavaUtilHashMap_initWithInt_([((id<AndroidDatabaseCursor>) nil_chk(cur)) getCount]));
    while ([cur moveToNext]) {
      NSString *columnName = [cur getStringWithInt:AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_COLUMNNAME_INDEX];
      NSString *defaultValue = [cur getStringWithInt:AndroidDatabaseDatabaseUtils_InsertHelper_TABLE_INFO_PRAGMA_DEFAULT_INDEX];
      [((JavaUtilHashMap *) nil_chk(self->mColumns_)) putWithId:columnName withId:JavaLangInteger_valueOfWithInt_(i)];
      [sb appendWithNSString:@"'"];
      [sb appendWithNSString:columnName];
      [sb appendWithNSString:@"'"];
      if (defaultValue == nil) {
        [sbv appendWithNSString:@"?"];
      }
      else {
        [sbv appendWithNSString:@"COALESCE(?, "];
        [sbv appendWithNSString:defaultValue];
        [sbv appendWithNSString:@")"];
      }
      [sb appendWithNSString:i == [cur getCount] ? @") " : @", "];
      [sbv appendWithNSString:i == [cur getCount] ? @");" : @", "];
      ++i;
    }
  }
  @finally {
    if (cur != nil) [cur close];
  }
  [sb appendWithJavaLangCharSequence:sbv];
  JreStrongAssign(&self->mInsertSQL_, [sb description]);
}

AndroidDatabaseSqliteSQLiteStatement *AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, jboolean allowReplace) {
  if (allowReplace) {
    if (self->mReplaceStatement_ == nil) {
      if (self->mInsertSQL_ == nil) AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(self);
      NSString *replaceSQL = JreStrcat("$$", @"INSERT OR REPLACE", [((NSString *) nil_chk(self->mInsertSQL_)) java_substring:6]);
      JreStrongAssign(&self->mReplaceStatement_, [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) compileStatementWithNSString:replaceSQL]);
    }
    return self->mReplaceStatement_;
  }
  else {
    if (self->mInsertStatement_ == nil) {
      if (self->mInsertSQL_ == nil) AndroidDatabaseDatabaseUtils_InsertHelper_buildSQL(self);
      JreStrongAssign(&self->mInsertStatement_, [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) compileStatementWithNSString:self->mInsertSQL_]);
    }
    return self->mInsertStatement_;
  }
}

jlong AndroidDatabaseDatabaseUtils_InsertHelper_insertInternalWithAndroidContentContentValues_withBoolean_(AndroidDatabaseDatabaseUtils_InsertHelper *self, AndroidContentContentValues *values, jboolean allowReplace) {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDb_)) beginTransactionNonExclusive];
  @try {
    AndroidDatabaseSqliteSQLiteStatement *stmt = AndroidDatabaseDatabaseUtils_InsertHelper_getStatementWithBoolean_(self, allowReplace);
    [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(stmt)) clearBindings];
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((AndroidContentContentValues *) nil_chk(values)) valueSet])) {
      NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
      jint i = [self getColumnIndexWithNSString:key];
      AndroidDatabaseDatabaseUtils_bindObjectToProgramWithAndroidDatabaseSqliteSQLiteProgram_withInt_withId_(stmt, i, [e getValue]);
    }
    jlong result = [stmt executeInsert];
    [self->mDb_ setTransactionSuccessful];
    return result;
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseDatabaseUtils_TAG, JreStrcat("$@$$", @"Error inserting ", values, @" into table  ", self->mTableName_), e);
    return -1;
  }
  @finally {
    [self->mDb_ endTransaction];
  }
}

IOSObjectArray *AndroidDatabaseDatabaseUtils_InsertHelper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDatabaseUtils_InsertHelper)

@implementation AndroidDatabaseDefaultDatabaseErrorHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseDefaultDatabaseErrorHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)dbObj {
  AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseDefaultDatabaseErrorHandler_TAG, JreStrcat("$$", @"Corruption reported by sqlite on database: ", [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(dbObj)) getPath]));
  if (![dbObj isOpen]) {
    AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, [dbObj getPath]);
    return;
  }
  id<JavaUtilList> attachedDbs = nil;
  @try {
    @try {
      attachedDbs = [dbObj getAttachedDbs];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
    }
    @try {
      [dbObj close];
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
    }
  }
  @finally {
    if (attachedDbs != nil) {
      for (AndroidUtilPair * __strong p in attachedDbs) {
        AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, ((AndroidUtilPair *) nil_chk(p))->second_);
      }
    }
    else {
      AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, [dbObj getPath]);
    }
  }
}

- (void)deleteDatabaseFileWithNSString:(NSString *)fileName {
  AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(self, fileName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[2].selector = @selector(deleteDatabaseFileWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "onCorruption", "LAndroidDatabaseSqliteSQLiteDatabase;", "deleteDatabaseFile", "LNSString;", &AndroidDatabaseDefaultDatabaseErrorHandler_TAG };
  static const J2ObjcClassInfo _AndroidDatabaseDefaultDatabaseErrorHandler = { "DefaultDatabaseErrorHandler", "android.database", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseDefaultDatabaseErrorHandler;
}

@end

void AndroidDatabaseDefaultDatabaseErrorHandler_init(AndroidDatabaseDefaultDatabaseErrorHandler *self) {
  NSObject_init(self);
}

AndroidDatabaseDefaultDatabaseErrorHandler *new_AndroidDatabaseDefaultDatabaseErrorHandler_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseDefaultDatabaseErrorHandler, init)
}

AndroidDatabaseDefaultDatabaseErrorHandler *create_AndroidDatabaseDefaultDatabaseErrorHandler_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseDefaultDatabaseErrorHandler, init)
}

void AndroidDatabaseDefaultDatabaseErrorHandler_deleteDatabaseFileWithNSString_(AndroidDatabaseDefaultDatabaseErrorHandler *self, NSString *fileName) {
  if ([((NSString *) nil_chk(fileName)) java_equalsIgnoreCase:@":memory:"] || [((NSString *) nil_chk([fileName java_trim])) java_length] == 0) {
    return;
  }
  AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseDefaultDatabaseErrorHandler_TAG, JreStrcat("$$", @"deleting the database file: ", fileName));
  @try {
    AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(create_JavaIoFile_initWithNSString_(fileName));
  }
  @catch (JavaLangException *e) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseDefaultDatabaseErrorHandler_TAG, JreStrcat("$$", @"delete failed: ", [e getMessage]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseDefaultDatabaseErrorHandler)

@implementation AndroidDatabaseMatrixCursor

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)columnNames
                                        withInt:(jint)initialCapacity {
  AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(self, columnNames, initialCapacity);
  return self;
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)columnNames {
  AndroidDatabaseMatrixCursor_initWithNSStringArray_(self, columnNames);
  return self;
}

- (id)getWithInt:(jint)column {
  return AndroidDatabaseMatrixCursor_getWithInt_(self, column);
}

- (AndroidDatabaseMatrixCursor_RowBuilder *)newRow {
  jint row = rowCount_++;
  jint endIndex = rowCount_ * columnCount_;
  AndroidDatabaseMatrixCursor_ensureCapacityWithInt_(self, endIndex);
  return create_AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(self, row);
}

- (void)addRowWithNSObjectArray:(IOSObjectArray *)columnValues {
  if (((IOSObjectArray *) nil_chk(columnValues))->size_ != columnCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"columnNames.length = ", columnCount_, @", columnValues.length = ", columnValues->size_));
  }
  jint start = rowCount_++ * columnCount_;
  AndroidDatabaseMatrixCursor_ensureCapacityWithInt_(self, start + columnCount_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(columnValues, 0, data_, start, columnCount_);
}

- (void)addRowWithJavaLangIterable:(id<JavaLangIterable>)columnValues {
  jint start = rowCount_ * columnCount_;
  jint end = start + columnCount_;
  AndroidDatabaseMatrixCursor_ensureCapacityWithInt_(self, end);
  if ([columnValues isKindOfClass:[JavaUtilArrayList class]]) {
    AndroidDatabaseMatrixCursor_addRowWithJavaUtilArrayList_withInt_(self, (JavaUtilArrayList *) cast_chk(columnValues, [JavaUtilArrayList class]), start);
    return;
  }
  jint current = start;
  IOSObjectArray *localData = data_;
  for (id __strong columnValue in nil_chk(columnValues)) {
    if (current == end) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"columnValues.size() > columnNames.length");
    }
    IOSObjectArray_Set(nil_chk(localData), current++, columnValue);
  }
  if (current != end) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"columnValues.size() < columnNames.length");
  }
  rowCount_++;
}

- (void)addRowWithJavaUtilArrayList:(JavaUtilArrayList *)columnValues
                            withInt:(jint)start {
  AndroidDatabaseMatrixCursor_addRowWithJavaUtilArrayList_withInt_(self, columnValues, start);
}

- (void)ensureCapacityWithInt:(jint)size {
  AndroidDatabaseMatrixCursor_ensureCapacityWithInt_(self, size);
}

- (jint)getCount {
  return rowCount_;
}

- (IOSObjectArray *)getColumnNames {
  return columnNames_;
}

- (NSString *)getStringWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  if (value == nil) return nil;
  return [value description];
}

- (jshort)getShortWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  if (value == nil) return 0;
  if ([value isKindOfClass:[NSNumber class]]) return [((NSNumber *) cast_chk(value, [NSNumber class])) shortValue];
  return JavaLangShort_parseShortWithNSString_([value description]);
}

- (jint)getIntWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  if (value == nil) return 0;
  if ([value isKindOfClass:[NSNumber class]]) return [((NSNumber *) cast_chk(value, [NSNumber class])) intValue];
  return JavaLangInteger_parseIntWithNSString_([value description]);
}

- (jlong)getLongWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  if (value == nil) return 0;
  if ([value isKindOfClass:[NSNumber class]]) return [((NSNumber *) cast_chk(value, [NSNumber class])) longLongValue];
  return JavaLangLong_parseLongWithNSString_([value description]);
}

- (jfloat)getFloatWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  if (value == nil) return 0.0f;
  if ([value isKindOfClass:[NSNumber class]]) return [((NSNumber *) cast_chk(value, [NSNumber class])) floatValue];
  return JavaLangFloat_parseFloatWithNSString_([value description]);
}

- (jdouble)getDoubleWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  if (value == nil) return 0.0;
  if ([value isKindOfClass:[NSNumber class]]) return [((NSNumber *) cast_chk(value, [NSNumber class])) doubleValue];
  return JavaLangDouble_parseDoubleWithNSString_([value description]);
}

- (IOSByteArray *)getBlobWithInt:(jint)column {
  id value = AndroidDatabaseMatrixCursor_getWithInt_(self, column);
  return (IOSByteArray *) cast_chk(value, [IOSByteArray class]);
}

- (jint)getTypeWithInt:(jint)column {
  return AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(AndroidDatabaseMatrixCursor_getWithInt_(self, column));
}

- (jboolean)isNullWithInt:(jint)column {
  return AndroidDatabaseMatrixCursor_getWithInt_(self, column) == nil;
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseMatrixCursor class]);
  RELEASE_(columnNames_);
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseMatrixCursor_RowBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x2, 4, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 16, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(initWithNSStringArray:);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(newRow);
  methods[4].selector = @selector(addRowWithNSObjectArray:);
  methods[5].selector = @selector(addRowWithJavaLangIterable:);
  methods[6].selector = @selector(addRowWithJavaUtilArrayList:withInt:);
  methods[7].selector = @selector(ensureCapacityWithInt:);
  methods[8].selector = @selector(getCount);
  methods[9].selector = @selector(getColumnNames);
  methods[10].selector = @selector(getStringWithInt:);
  methods[11].selector = @selector(getShortWithInt:);
  methods[12].selector = @selector(getIntWithInt:);
  methods[13].selector = @selector(getLongWithInt:);
  methods[14].selector = @selector(getFloatWithInt:);
  methods[15].selector = @selector(getDoubleWithInt:);
  methods[16].selector = @selector(getBlobWithInt:);
  methods[17].selector = @selector(getTypeWithInt:);
  methods[18].selector = @selector(isNullWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "columnNames_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "data_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rowCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "columnCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "[LNSString;", "get", "I", "addRow", "[LNSObject;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)V", "LJavaUtilArrayList;I", "(Ljava/util/ArrayList<*>;I)V", "ensureCapacity", "getString", "getShort", "getInt", "getLong", "getFloat", "getDouble", "getBlob", "getType", "isNull", "LAndroidDatabaseMatrixCursor_RowBuilder;" };
  static const J2ObjcClassInfo _AndroidDatabaseMatrixCursor = { "MatrixCursor", "android.database", ptrTable, methods, fields, 7, 0x1, 19, 4, -1, 20, -1, -1, -1 };
  return &_AndroidDatabaseMatrixCursor;
}

@end

void AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(AndroidDatabaseMatrixCursor *self, IOSObjectArray *columnNames, jint initialCapacity) {
  AndroidDatabaseAbstractCursor_init(self);
  self->rowCount_ = 0;
  JreStrongAssign(&self->columnNames_, columnNames);
  self->columnCount_ = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  if (initialCapacity < 1) {
    initialCapacity = 1;
  }
  JreStrongAssignAndConsume(&self->data_, [IOSObjectArray newArrayWithLength:self->columnCount_ * initialCapacity type:NSObject_class_()]);
}

AndroidDatabaseMatrixCursor *new_AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(IOSObjectArray *columnNames, jint initialCapacity) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMatrixCursor, initWithNSStringArray_withInt_, columnNames, initialCapacity)
}

AndroidDatabaseMatrixCursor *create_AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(IOSObjectArray *columnNames, jint initialCapacity) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMatrixCursor, initWithNSStringArray_withInt_, columnNames, initialCapacity)
}

void AndroidDatabaseMatrixCursor_initWithNSStringArray_(AndroidDatabaseMatrixCursor *self, IOSObjectArray *columnNames) {
  AndroidDatabaseMatrixCursor_initWithNSStringArray_withInt_(self, columnNames, 16);
}

AndroidDatabaseMatrixCursor *new_AndroidDatabaseMatrixCursor_initWithNSStringArray_(IOSObjectArray *columnNames) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMatrixCursor, initWithNSStringArray_, columnNames)
}

AndroidDatabaseMatrixCursor *create_AndroidDatabaseMatrixCursor_initWithNSStringArray_(IOSObjectArray *columnNames) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMatrixCursor, initWithNSStringArray_, columnNames)
}

id AndroidDatabaseMatrixCursor_getWithInt_(AndroidDatabaseMatrixCursor *self, jint column) {
  if (column < 0 || column >= self->columnCount_) {
    @throw create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Requested column: ", column, @", # of columns: ", self->columnCount_));
  }
  if (self->mPos_ < 0) {
    @throw create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(@"Before first row.");
  }
  if (self->mPos_ >= self->rowCount_) {
    @throw create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(@"After last row.");
  }
  return IOSObjectArray_Get(nil_chk(self->data_), self->mPos_ * self->columnCount_ + column);
}

void AndroidDatabaseMatrixCursor_addRowWithJavaUtilArrayList_withInt_(AndroidDatabaseMatrixCursor *self, JavaUtilArrayList *columnValues, jint start) {
  jint size = [((JavaUtilArrayList *) nil_chk(columnValues)) size];
  if (size != self->columnCount_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"columnNames.length = ", self->columnCount_, @", columnValues.size() = ", size));
  }
  self->rowCount_++;
  IOSObjectArray *localData = self->data_;
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(nil_chk(localData), start + i, [columnValues getWithInt:i]);
  }
}

void AndroidDatabaseMatrixCursor_ensureCapacityWithInt_(AndroidDatabaseMatrixCursor *self, jint size) {
  if (size > ((IOSObjectArray *) nil_chk(self->data_))->size_) {
    IOSObjectArray *oldData = self->data_;
    jint newSize = self->data_->size_ * 2;
    if (newSize < size) {
      newSize = size;
    }
    JreStrongAssignAndConsume(&self->data_, [IOSObjectArray newArrayWithLength:newSize type:NSObject_class_()]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldData, 0, self->data_, 0, oldData->size_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseMatrixCursor)

@implementation AndroidDatabaseMatrixCursor_RowBuilder

- (instancetype __nonnull)initWithAndroidDatabaseMatrixCursor:(AndroidDatabaseMatrixCursor *)outer$
                                                      withInt:(jint)row {
  AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(self, outer$, row);
  return self;
}

- (AndroidDatabaseMatrixCursor_RowBuilder *)addWithId:(id)columnValue {
  if (index_ == endIndex_) {
    @throw create_AndroidDatabaseCursorIndexOutOfBoundsException_initWithNSString_(@"No more columns left.");
  }
  IOSObjectArray_Set(nil_chk(this$0_->data_), index_++, columnValue);
  return self;
}

- (AndroidDatabaseMatrixCursor_RowBuilder *)addWithNSString:(NSString *)columnName
                                                     withId:(id)value {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->columnNames_))->size_; i++) {
    if ([((NSString *) nil_chk(columnName)) isEqual:IOSObjectArray_Get(this$0_->columnNames_, i)]) {
      IOSObjectArray_Set(nil_chk(this$0_->data_), (row_ * this$0_->columnCount_) + i, value);
    }
  }
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseMatrixCursor_RowBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseMatrixCursor_RowBuilder;", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseMatrixCursor:withInt:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(addWithNSString:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseMatrixCursor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "row_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "endIndex_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "add", "LNSObject;", "LNSString;LNSObject;", "LAndroidDatabaseMatrixCursor;" };
  static const J2ObjcClassInfo _AndroidDatabaseMatrixCursor_RowBuilder = { "RowBuilder", "android.database", ptrTable, methods, fields, 7, 0x1, 3, 4, 4, -1, -1, -1, -1 };
  return &_AndroidDatabaseMatrixCursor_RowBuilder;
}

@end

void AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(AndroidDatabaseMatrixCursor_RowBuilder *self, AndroidDatabaseMatrixCursor *outer$, jint row) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->row_ = row;
  self->index_ = row * outer$->columnCount_;
  self->endIndex_ = self->index_ + outer$->columnCount_;
}

AndroidDatabaseMatrixCursor_RowBuilder *new_AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(AndroidDatabaseMatrixCursor *outer$, jint row) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMatrixCursor_RowBuilder, initWithAndroidDatabaseMatrixCursor_withInt_, outer$, row)
}

AndroidDatabaseMatrixCursor_RowBuilder *create_AndroidDatabaseMatrixCursor_RowBuilder_initWithAndroidDatabaseMatrixCursor_withInt_(AndroidDatabaseMatrixCursor *outer$, jint row) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMatrixCursor_RowBuilder, initWithAndroidDatabaseMatrixCursor_withInt_, outer$, row)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseMatrixCursor_RowBuilder)

@implementation AndroidDatabaseMergeCursor

- (instancetype __nonnull)initWithAndroidDatabaseCursorArray:(IOSObjectArray *)cursors {
  AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(self, cursors);
  return self;
}

- (jint)getCount {
  jint count = 0;
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      count += [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) getCount];
    }
  }
  return count;
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  JreStrongAssign(&mCursor_, nil);
  jint cursorStartPos = 0;
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) == nil) {
      continue;
    }
    if (newPosition < (cursorStartPos + [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) getCount])) {
      JreStrongAssign(&mCursor_, IOSObjectArray_Get(nil_chk(mCursors_), i));
      break;
    }
    cursorStartPos += [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(nil_chk(mCursors_), i))) getCount];
  }
  if (mCursor_ != nil) {
    jboolean ret = [mCursor_ moveToPositionWithInt:newPosition - cursorStartPos];
    return ret;
  }
  return false;
}

- (NSString *)getStringWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getStringWithInt:column];
}

- (jshort)getShortWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getShortWithInt:column];
}

- (jint)getIntWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getIntWithInt:column];
}

- (jlong)getLongWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getLongWithInt:column];
}

- (jfloat)getFloatWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getFloatWithInt:column];
}

- (jdouble)getDoubleWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getDoubleWithInt:column];
}

- (jint)getTypeWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getTypeWithInt:column];
}

- (jboolean)isNullWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) isNullWithInt:column];
}

- (IOSByteArray *)getBlobWithInt:(jint)column {
  return [((id<AndroidDatabaseCursor>) nil_chk(mCursor_)) getBlobWithInt:column];
}

- (IOSObjectArray *)getColumnNames {
  if (mCursor_ != nil) {
    return [mCursor_ getColumnNames];
  }
  else {
    return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  }
}

- (void)deactivate {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) deactivate];
    }
  }
  [super deactivate];
}

- (void)close {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) == nil) continue;
    [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) close];
  }
  [super close];
}

- (void)registerContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) registerContentObserverWithAndroidDatabaseContentObserver:observer];
    }
  }
}

- (void)unregisterContentObserverWithAndroidDatabaseContentObserver:(AndroidDatabaseContentObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) unregisterContentObserverWithAndroidDatabaseContentObserver:observer];
    }
  }
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) registerDataSetObserverWithAndroidDatabaseDataSetObserver:observer];
    }
  }
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) != nil) {
      [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:observer];
    }
  }
}

- (jboolean)requery {
  jint length = ((IOSObjectArray *) nil_chk(mCursors_))->size_;
  for (jint i = 0; i < length; i++) {
    if (IOSObjectArray_Get(nil_chk(mCursors_), i) == nil) {
      continue;
    }
    if ([((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(mCursors_, i))) requery] == false) {
      return false;
    }
  }
  return true;
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseMergeCursor class]);
  RELEASE_(mObserver_);
  RELEASE_(mCursor_);
  RELEASE_(mCursors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseCursorArray:);
  methods[1].selector = @selector(getCount);
  methods[2].selector = @selector(onMoveWithInt:withInt:);
  methods[3].selector = @selector(getStringWithInt:);
  methods[4].selector = @selector(getShortWithInt:);
  methods[5].selector = @selector(getIntWithInt:);
  methods[6].selector = @selector(getLongWithInt:);
  methods[7].selector = @selector(getFloatWithInt:);
  methods[8].selector = @selector(getDoubleWithInt:);
  methods[9].selector = @selector(getTypeWithInt:);
  methods[10].selector = @selector(isNullWithInt:);
  methods[11].selector = @selector(getBlobWithInt:);
  methods[12].selector = @selector(getColumnNames);
  methods[13].selector = @selector(deactivate);
  methods[14].selector = @selector(close);
  methods[15].selector = @selector(registerContentObserverWithAndroidDatabaseContentObserver:);
  methods[16].selector = @selector(unregisterContentObserverWithAndroidDatabaseContentObserver:);
  methods[17].selector = @selector(registerDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[18].selector = @selector(unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:);
  methods[19].selector = @selector(requery);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mObserver_", "LAndroidDatabaseDataSetObserver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursor_", "LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursors_", "[LAndroidDatabaseCursor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LAndroidDatabaseCursor;", "onMove", "II", "getString", "I", "getShort", "getInt", "getLong", "getFloat", "getDouble", "getType", "isNull", "getBlob", "registerContentObserver", "LAndroidDatabaseContentObserver;", "unregisterContentObserver", "registerDataSetObserver", "LAndroidDatabaseDataSetObserver;", "unregisterDataSetObserver" };
  static const J2ObjcClassInfo _AndroidDatabaseMergeCursor = { "MergeCursor", "android.database", ptrTable, methods, fields, 7, 0x1, 20, 3, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseMergeCursor;
}

@end

void AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(AndroidDatabaseMergeCursor *self, IOSObjectArray *cursors) {
  AndroidDatabaseAbstractCursor_init(self);
  JreStrongAssignAndConsume(&self->mObserver_, new_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(self));
  JreStrongAssign(&self->mCursors_, cursors);
  JreStrongAssign(&self->mCursor_, IOSObjectArray_Get(nil_chk(cursors), 0));
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->mCursors_))->size_; i++) {
    if (IOSObjectArray_Get(self->mCursors_, i) == nil) continue;
    [((id<AndroidDatabaseCursor>) nil_chk(IOSObjectArray_Get(self->mCursors_, i))) registerDataSetObserverWithAndroidDatabaseDataSetObserver:self->mObserver_];
  }
}

AndroidDatabaseMergeCursor *new_AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(IOSObjectArray *cursors) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMergeCursor, initWithAndroidDatabaseCursorArray_, cursors)
}

AndroidDatabaseMergeCursor *create_AndroidDatabaseMergeCursor_initWithAndroidDatabaseCursorArray_(IOSObjectArray *cursors) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMergeCursor, initWithAndroidDatabaseCursorArray_, cursors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseMergeCursor)

@implementation AndroidDatabaseMergeCursor_1

- (instancetype __nonnull)initWithAndroidDatabaseMergeCursor:(AndroidDatabaseMergeCursor *)outer$ {
  AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(self, outer$);
  return self;
}

- (void)onChanged {
  this$0_->mPos_ = -1;
}

- (void)onInvalidated {
  this$0_->mPos_ = -1;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseMergeCursor:);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onInvalidated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseMergeCursor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseMergeCursor;" };
  static const J2ObjcClassInfo _AndroidDatabaseMergeCursor_1 = { "", "android.database", ptrTable, methods, fields, 7, 0x8018, 3, 1, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseMergeCursor_1;
}

@end

void AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor_1 *self, AndroidDatabaseMergeCursor *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  AndroidDatabaseDataSetObserver_init(self);
}

AndroidDatabaseMergeCursor_1 *new_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$) {
  J2OBJC_NEW_IMPL(AndroidDatabaseMergeCursor_1, initWithAndroidDatabaseMergeCursor_, outer$)
}

AndroidDatabaseMergeCursor_1 *create_AndroidDatabaseMergeCursor_1_initWithAndroidDatabaseMergeCursor_(AndroidDatabaseMergeCursor *outer$) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseMergeCursor_1, initWithAndroidDatabaseMergeCursor_, outer$)
}

@implementation AndroidDatabaseSQLException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSQLException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSQLException_initWithNSString_(self, error);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)error
                     withJavaLangThrowable:(JavaLangThrowable *)cause {
  AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(self, error, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _AndroidDatabaseSQLException = { "SQLException", "android.database", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSQLException;
}

@end

void AndroidDatabaseSQLException_init(AndroidDatabaseSQLException *self) {
  JavaLangRuntimeException_init(self);
}

AndroidDatabaseSQLException *new_AndroidDatabaseSQLException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSQLException, init)
}

AndroidDatabaseSQLException *create_AndroidDatabaseSQLException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSQLException, init)
}

void AndroidDatabaseSQLException_initWithNSString_(AndroidDatabaseSQLException *self, NSString *error) {
  JavaLangRuntimeException_initWithNSString_(self, error);
}

AndroidDatabaseSQLException *new_AndroidDatabaseSQLException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSQLException, initWithNSString_, error)
}

AndroidDatabaseSQLException *create_AndroidDatabaseSQLException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSQLException, initWithNSString_, error)
}

void AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(AndroidDatabaseSQLException *self, NSString *error, JavaLangThrowable *cause) {
  JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, error, cause);
}

AndroidDatabaseSQLException *new_AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSQLException, initWithNSString_withJavaLangThrowable_, error, cause)
}

AndroidDatabaseSQLException *create_AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSQLException, initWithNSString_withJavaLangThrowable_, error, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSQLException)

@implementation AndroidDatabaseStaleDataException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseStaleDataException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)description_ {
  AndroidDatabaseStaleDataException_initWithNSString_(self, description_);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseStaleDataException = { "StaleDataException", "android.database", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseStaleDataException;
}

@end

void AndroidDatabaseStaleDataException_init(AndroidDatabaseStaleDataException *self) {
  JavaLangRuntimeException_init(self);
}

AndroidDatabaseStaleDataException *new_AndroidDatabaseStaleDataException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseStaleDataException, init)
}

AndroidDatabaseStaleDataException *create_AndroidDatabaseStaleDataException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseStaleDataException, init)
}

void AndroidDatabaseStaleDataException_initWithNSString_(AndroidDatabaseStaleDataException *self, NSString *description_) {
  JavaLangRuntimeException_initWithNSString_(self, description_);
}

AndroidDatabaseStaleDataException *new_AndroidDatabaseStaleDataException_initWithNSString_(NSString *description_) {
  J2OBJC_NEW_IMPL(AndroidDatabaseStaleDataException, initWithNSString_, description_)
}

AndroidDatabaseStaleDataException *create_AndroidDatabaseStaleDataException_initWithNSString_(NSString *description_) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseStaleDataException, initWithNSString_, description_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseStaleDataException)

@implementation AndroidDatabaseSqliteDatabaseObjectNotClosedException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteDatabaseObjectNotClosedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &AndroidDatabaseSqliteDatabaseObjectNotClosedException_s };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteDatabaseObjectNotClosedException = { "DatabaseObjectNotClosedException", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteDatabaseObjectNotClosedException;
}

@end

void AndroidDatabaseSqliteDatabaseObjectNotClosedException_init(AndroidDatabaseSqliteDatabaseObjectNotClosedException *self) {
  JavaLangRuntimeException_initWithNSString_(self, AndroidDatabaseSqliteDatabaseObjectNotClosedException_s);
}

AndroidDatabaseSqliteDatabaseObjectNotClosedException *new_AndroidDatabaseSqliteDatabaseObjectNotClosedException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteDatabaseObjectNotClosedException, init)
}

AndroidDatabaseSqliteDatabaseObjectNotClosedException *create_AndroidDatabaseSqliteDatabaseObjectNotClosedException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteDatabaseObjectNotClosedException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteDatabaseObjectNotClosedException)

@implementation AndroidDatabaseSqliteSQLiteException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)error
                     withJavaLangThrowable:(JavaLangThrowable *)cause {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(self, error, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteException = { "SQLiteException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteException;
}

@end

void AndroidDatabaseSqliteSQLiteException_init(AndroidDatabaseSqliteSQLiteException *self) {
  AndroidDatabaseSQLException_init(self);
}

AndroidDatabaseSqliteSQLiteException *new_AndroidDatabaseSqliteSQLiteException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteException, init)
}

AndroidDatabaseSqliteSQLiteException *create_AndroidDatabaseSqliteSQLiteException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteException, init)
}

void AndroidDatabaseSqliteSQLiteException_initWithNSString_(AndroidDatabaseSqliteSQLiteException *self, NSString *error) {
  AndroidDatabaseSQLException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteException *new_AndroidDatabaseSqliteSQLiteException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteException *create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteException, initWithNSString_, error)
}

void AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteException *self, NSString *error, JavaLangThrowable *cause) {
  AndroidDatabaseSQLException_initWithNSString_withJavaLangThrowable_(self, error, cause);
}

AndroidDatabaseSqliteSQLiteException *new_AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteException, initWithNSString_withJavaLangThrowable_, error, cause)
}

AndroidDatabaseSqliteSQLiteException *create_AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(NSString *error, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteException, initWithNSString_withJavaLangThrowable_, error, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteException)

@implementation AndroidDatabaseSqliteSQLiteAbortException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteAbortException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteAbortException = { "SQLiteAbortException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteAbortException;
}

@end

void AndroidDatabaseSqliteSQLiteAbortException_init(AndroidDatabaseSqliteSQLiteAbortException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteAbortException *new_AndroidDatabaseSqliteSQLiteAbortException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteAbortException, init)
}

AndroidDatabaseSqliteSQLiteAbortException *create_AndroidDatabaseSqliteSQLiteAbortException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteAbortException, init)
}

void AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(AndroidDatabaseSqliteSQLiteAbortException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteAbortException *new_AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteAbortException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteAbortException *create_AndroidDatabaseSqliteSQLiteAbortException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteAbortException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteAbortException)

@implementation AndroidDatabaseSqliteSQLiteAccessPermException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteAccessPermException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteAccessPermException = { "SQLiteAccessPermException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteAccessPermException;
}

@end

void AndroidDatabaseSqliteSQLiteAccessPermException_init(AndroidDatabaseSqliteSQLiteAccessPermException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteAccessPermException *new_AndroidDatabaseSqliteSQLiteAccessPermException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteAccessPermException, init)
}

AndroidDatabaseSqliteSQLiteAccessPermException *create_AndroidDatabaseSqliteSQLiteAccessPermException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteAccessPermException, init)
}

void AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(AndroidDatabaseSqliteSQLiteAccessPermException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteAccessPermException *new_AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteAccessPermException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteAccessPermException *create_AndroidDatabaseSqliteSQLiteAccessPermException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteAccessPermException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteAccessPermException)

@implementation AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException = { "SQLiteBindOrColumnIndexOutOfRangeException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException;
}

@end

void AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *new_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException, init)
}

AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *create_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException, init)
}

void AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *new_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException *create_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException)

@implementation AndroidDatabaseSqliteSQLiteBlobTooBigException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteBlobTooBigException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteBlobTooBigException = { "SQLiteBlobTooBigException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteBlobTooBigException;
}

@end

void AndroidDatabaseSqliteSQLiteBlobTooBigException_init(AndroidDatabaseSqliteSQLiteBlobTooBigException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteBlobTooBigException *new_AndroidDatabaseSqliteSQLiteBlobTooBigException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteBlobTooBigException, init)
}

AndroidDatabaseSqliteSQLiteBlobTooBigException *create_AndroidDatabaseSqliteSQLiteBlobTooBigException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteBlobTooBigException, init)
}

void AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(AndroidDatabaseSqliteSQLiteBlobTooBigException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteBlobTooBigException *new_AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteBlobTooBigException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteBlobTooBigException *create_AndroidDatabaseSqliteSQLiteBlobTooBigException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteBlobTooBigException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteBlobTooBigException)

@implementation AndroidDatabaseSqliteSQLiteCantOpenDatabaseException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteCantOpenDatabaseException = { "SQLiteCantOpenDatabaseException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException;
}

@end

void AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *new_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException, init)
}

AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *create_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException, init)
}

void AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *new_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteCantOpenDatabaseException *create_AndroidDatabaseSqliteSQLiteCantOpenDatabaseException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteCantOpenDatabaseException)

@implementation AndroidOsCancellationSignal_OnCancelListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onCancel);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidOsCancellationSignal;" };
  static const J2ObjcClassInfo _AndroidOsCancellationSignal_OnCancelListener = { "OnCancelListener", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_AndroidOsCancellationSignal_OnCancelListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsCancellationSignal_OnCancelListener)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteConnection)

@implementation AndroidDatabaseSqliteSQLiteConnection

+ (jlong)nativeOpenWithNSString:(NSString *)path
                        withInt:(jint)openFlags
                   withNSString:(NSString *)label
                    withBoolean:(jboolean)enableTrace
                    withBoolean:(jboolean)enableProfile {
  return AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(path, openFlags, label, enableTrace, enableProfile);
}

+ (void)nativeCloseWithLong:(jlong)connectionPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(connectionPtr);
}

+ (void)nativeRegisterCustomFunctionWithLong:(jlong)connectionPtr
withAndroidDatabaseSqliteSQLiteCustomFunction:(AndroidDatabaseSqliteSQLiteCustomFunction *)function {
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(connectionPtr, function);
}

+ (void)nativeRegisterLocalizedCollatorsWithLong:(jlong)connectionPtr
                                    withNSString:(NSString *)locale {
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(connectionPtr, locale);
}

+ (jlong)nativePrepareStatementWithLong:(jlong)connectionPtr
                           withNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(connectionPtr, sql);
}

+ (void)nativeFinalizeStatementWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jint)nativeGetParameterCountWithLong:(jlong)connectionPtr
                               withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jboolean)nativeIsReadOnlyWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jint)nativeGetColumnCountWithLong:(jlong)connectionPtr
                            withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(connectionPtr, statementPtr);
}

+ (NSString *)nativeGetColumnNameWithLong:(jlong)connectionPtr
                                 withLong:(jlong)statementPtr
                                  withInt:(jint)index {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindNullWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindLongWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                      withLong:(jlong)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindDoubleWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                      withDouble:(jdouble)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindStringWithLong:(jlong)connectionPtr
                        withLong:(jlong)statementPtr
                         withInt:(jint)index
                    withNSString:(NSString *)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindBlobWithLong:(jlong)connectionPtr
                      withLong:(jlong)statementPtr
                       withInt:(jint)index
                 withByteArray:(IOSByteArray *)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeResetStatementAndClearBindingsWithLong:(jlong)connectionPtr
                                            withLong:(jlong)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(connectionPtr, statementPtr);
}

+ (void)nativeExecuteWithLong:(jlong)connectionPtr
                     withLong:(jlong)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLongWithLong:(jlong)connectionPtr
                             withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(connectionPtr, statementPtr);
}

+ (NSString *)nativeExecuteForStringWithLong:(jlong)connectionPtr
                                    withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jint)nativeExecuteForChangedRowCountWithLong:(jlong)connectionPtr
                                       withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLastInsertedRowIdWithLong:(jlong)connectionPtr
                                          withLong:(jlong)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForCursorWindowWithLong:(jlong)connectionPtr
                                     withLong:(jlong)statementPtr
                                     withLong:(jlong)windowPtr
                                      withInt:(jint)startPos
                                      withInt:(jint)requiredPos
                                  withBoolean:(jboolean)countAllRows {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(connectionPtr, statementPtr, windowPtr, startPos, requiredPos, countAllRows);
}

+ (jint)nativeGetDbLookasideWithLong:(jlong)connectionPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(connectionPtr);
}

+ (void)nativeCancelWithLong:(jlong)connectionPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(connectionPtr);
}

+ (void)nativeResetCancelWithLong:(jlong)connectionPtr
                      withBoolean:(jboolean)cancelable {
  AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(connectionPtr, cancelable);
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
                       withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                    withInt:(jint)connectionId
                                                                withBoolean:(jboolean)primaryConnection {
  AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(self, pool, configuration, connectionId, primaryConnection);
  return self;
}

- (void)java_finalize {
  @try {
    if (mPool_ != nil && mConnectionPtr_ != 0) {
      [mPool_ onConnectionLeaked];
    }
    AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

+ (AndroidDatabaseSqliteSQLiteConnection *)openWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
                                        withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                     withInt:(jint)connectionId
                                                                                 withBoolean:(jboolean)primaryConnection {
  return AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
}

- (void)close {
  AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, false);
}

- (void)open {
  AndroidDatabaseSqliteSQLiteConnection_open(self);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, finalized);
}

- (void)setPageSize {
  AndroidDatabaseSqliteSQLiteConnection_setPageSize(self);
}

- (void)setAutoCheckpointInterval {
  AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(self);
}

- (void)setJournalSizeLimit {
  AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(self);
}

- (void)setForeignKeyModeFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
}

- (void)setWalModeFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
}

- (void)setSyncModeWithNSString:(NSString *)newValue {
  AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, newValue);
}

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value {
  return AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(value);
}

- (void)setJournalModeWithNSString:(NSString *)newValue {
  AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, newValue);
}

- (void)setLocaleFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
}

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration {
  mOnlyAllowReadOnlyOperations_ = false;
  jint functionCount = [((JavaUtilArrayList *) nil_chk(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    AndroidDatabaseSqliteSQLiteCustomFunction *function = [configuration->customFunctions_ getWithInt:i];
    if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->customFunctions_ containsWithId:function]) {
      AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(mConnectionPtr_, function);
    }
  }
  jboolean foreignKeyModeChanged = configuration->foreignKeyConstraintsEnabled_ != ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->foreignKeyConstraintsEnabled_;
  jboolean walModeChanged = ((configuration->openFlags_ ^ mConfiguration_->openFlags_) & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  jboolean localeChanged = ![((JavaUtilLocale *) nil_chk(configuration->locale_)) isEqual:mConfiguration_->locale_];
  [mConfiguration_ updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:configuration];
  [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) resizeWithInt:configuration->maxSqlCacheSize_];
  if (foreignKeyModeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  }
  if (walModeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
  }
  if (localeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
  }
}

- (void)setOnlyAllowReadOnlyOperationsWithBoolean:(jboolean)readOnly {
  mOnlyAllowReadOnlyOperations_ = readOnly;
}

- (jboolean)isPreparedStatementInCacheWithNSString:(NSString *)sql {
  return [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) getWithId:sql] != nil;
}

- (jint)getConnectionId {
  return mConnectionId_;
}

- (jboolean)isPrimaryConnection {
  return mIsPrimaryConnection_;
}

- (void)prepareWithNSString:(NSString *)sql
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"prepare" withNSString:sql withNSObjectArray:nil];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      if (outStatementInfo != nil) {
        outStatementInfo->numParameters_ = ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_;
        outStatementInfo->readOnly_ = statement->mReadOnly_;
        jint columnCount = AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(mConnectionPtr_, statement->mStatementPtr_);
        if (columnCount == 0) {
          JreStrongAssign(&outStatementInfo->columnNames_, AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY);
        }
        else {
          JreStrongAssignAndConsume(&outStatementInfo->columnNames_, [IOSObjectArray newArrayWithLength:columnCount type:NSString_class_()]);
          for (jint i = 0; i < columnCount; i++) {
            IOSObjectArray_Set(nil_chk(outStatementInfo->columnNames_), i, AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(mConnectionPtr_, statement->mStatementPtr_, i));
          }
        }
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"execute" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
    withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLong" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForString" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint changedRows = 0;
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForChangedRowCount" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        changedRows = AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
        return changedRows;
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
      [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$I", @"changedRows=", changedRows)];
    }
  }
}

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLastInsertedRowId" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (window == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"window must not be null.");
  }
  [window acquireReference];
  @try {
    jint actualPos = -1;
    jint countedRows = -1;
    jint filledRows = -1;
    jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForCursorWindow" withNSString:sql withNSObjectArray:bindArgs];
    @try {
      AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
      @try {
        AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
        AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
        AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
        AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
        @try {
          jlong result = AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_, window->mWindowPtr_, startPos, requiredPos, countAllRows);
          actualPos = (jint) (JreRShift64(result, 32));
          countedRows = (jint) result;
          filledRows = [window getNumRows];
          [window setStartPositionWithInt:actualPos];
          return countedRows;
        }
        @finally {
          AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
        }
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      }
    }
    @catch (JavaLangRuntimeException *ex) {
      [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
      @throw ex;
    }
    @finally {
      if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
        [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$@$I$I$I$I", @"window='", window, @"', startPos=", startPos, @", actualPos=", actualPos, @", filledRows=", filledRows, @", countedRows=", countedRows)];
      }
    }
  }
  @finally {
    [window releaseReference];
  }
}

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
}

- (void)releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)attachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
}

- (void)detachCancellationSignalWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(self, cancellationSignal);
}

- (void)onCancel {
  AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(mConnectionPtr_);
}

- (void)bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement
                                                               withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
}

- (void)throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

+ (jboolean)isCacheableWithInt:(jint)statementType {
  return AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(statementType);
}

- (void)applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  [self dumpUnsafeWithAndroidUtilPrinter:printer withBoolean:verbose];
}

- (void)dumpUnsafeWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                             withBoolean:(jboolean)verbose {
  [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:JreStrcat("$IC", @"Connection #", mConnectionId_, ':')];
  if (verbose) {
    [printer printlnWithNSString:JreStrcat("$$", @"  connectionPtr: 0x", JavaLangLong_toHexStringWithLong_(mConnectionPtr_))];
  }
  [printer printlnWithNSString:JreStrcat("$Z", @"  isPrimaryConnection: ", mIsPrimaryConnection_)];
  [printer printlnWithNSString:JreStrcat("$Z", @"  onlyAllowReadOnlyOperations: ", mOnlyAllowReadOnlyOperations_)];
  [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) dumpWithAndroidUtilPrinter:printer withBoolean:verbose];
  if (verbose) {
    [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) dumpWithAndroidUtilPrinter:printer];
  }
}

- (NSString *)describeCurrentOperationUnsafe {
  return [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) describeCurrentOperation];
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  jint lookaside = AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(mConnectionPtr_);
  jlong pageCount = 0;
  jlong pageSize = 0;
  @try {
    pageCount = [self executeForLongWithNSString:@"PRAGMA page_count;" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    pageSize = [self executeForLongWithNSString:@"PRAGMA page_size;" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
  }
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize)];
  AndroidDatabaseCursorWindow *window = create_AndroidDatabaseCursorWindow_initWithNSString_(@"collectDbStats");
  @try {
    [self executeForCursorWindowWithNSString:@"PRAGMA database_list;" withNSObjectArray:nil withAndroidDatabaseCursorWindow:window withInt:0 withInt:0 withBoolean:false withAndroidOsCancellationSignal:nil];
    for (jint i = 1; i < [window getNumRows]; i++) {
      NSString *name = [window getStringWithInt:i withInt:1];
      NSString *path = [window getStringWithInt:i withInt:2];
      pageCount = 0;
      pageSize = 0;
      @try {
        pageCount = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_count;") withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
        pageSize = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_size;") withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      }
      @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      }
      NSString *label = JreStrcat("$$", @"  (attached) ", name);
      if (![((NSString *) nil_chk(path)) java_isEmpty]) {
        JreStrAppend(&label, "$$", @": ", path);
      }
      [dbStatsList addWithId:create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, 0, 0, 0, 0)];
    }
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
  }
  @finally {
    [window close];
  }
}

- (void)collectDbStatsUnsafeWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, 0, 0, 0)];
}

- (AndroidDatabaseSqliteSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                                 withLong:(jlong)pageCount
                                                                 withLong:(jlong)pageSize {
  return AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize);
}

- (NSString *)description {
  return JreStrcat("$$$IC", @"SQLiteConnection: ", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_, @" (", mConnectionId_, ')');
}

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                                        withLong:(jlong)statementPtr
                                                                                         withInt:(jint)numParameters
                                                                                         withInt:(jint)type
                                                                                     withBoolean:(jboolean)readOnly {
  return AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
}

- (void)recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(sql);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteConnection class]);
  RELEASE_(mCloseGuard_);
  RELEASE_(mPool_);
  RELEASE_(mConfiguration_);
  RELEASE_(mPreparedStatementCache_);
  RELEASE_(mPreparedStatementPool_);
  RELEASE_(mRecentOperations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 12, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 13, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 25, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 26, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 27, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 28, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 29, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 30, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 33, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 34, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 35, 36, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 38, -1, 39, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x8, 40, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 45, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 49, 42, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 50, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 55, 54, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 56, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, 54, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 58, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", 0x2, 61, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 76, 75, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 77, 78, -1, 79, -1, -1 },
    { NULL, "V", 0x0, 80, 78, -1, 79, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDebug_DbStats;", 0x2, 81, 82, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 83, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", 0x2, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 63, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 87, 44, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nativeOpenWithNSString:withInt:withNSString:withBoolean:withBoolean:);
  methods[1].selector = @selector(nativeCloseWithLong:);
  methods[2].selector = @selector(nativeRegisterCustomFunctionWithLong:withAndroidDatabaseSqliteSQLiteCustomFunction:);
  methods[3].selector = @selector(nativeRegisterLocalizedCollatorsWithLong:withNSString:);
  methods[4].selector = @selector(nativePrepareStatementWithLong:withNSString:);
  methods[5].selector = @selector(nativeFinalizeStatementWithLong:withLong:);
  methods[6].selector = @selector(nativeGetParameterCountWithLong:withLong:);
  methods[7].selector = @selector(nativeIsReadOnlyWithLong:withLong:);
  methods[8].selector = @selector(nativeGetColumnCountWithLong:withLong:);
  methods[9].selector = @selector(nativeGetColumnNameWithLong:withLong:withInt:);
  methods[10].selector = @selector(nativeBindNullWithLong:withLong:withInt:);
  methods[11].selector = @selector(nativeBindLongWithLong:withLong:withInt:withLong:);
  methods[12].selector = @selector(nativeBindDoubleWithLong:withLong:withInt:withDouble:);
  methods[13].selector = @selector(nativeBindStringWithLong:withLong:withInt:withNSString:);
  methods[14].selector = @selector(nativeBindBlobWithLong:withLong:withInt:withByteArray:);
  methods[15].selector = @selector(nativeResetStatementAndClearBindingsWithLong:withLong:);
  methods[16].selector = @selector(nativeExecuteWithLong:withLong:);
  methods[17].selector = @selector(nativeExecuteForLongWithLong:withLong:);
  methods[18].selector = @selector(nativeExecuteForStringWithLong:withLong:);
  methods[19].selector = @selector(nativeExecuteForChangedRowCountWithLong:withLong:);
  methods[20].selector = @selector(nativeExecuteForLastInsertedRowIdWithLong:withLong:);
  methods[21].selector = @selector(nativeExecuteForCursorWindowWithLong:withLong:withLong:withInt:withInt:withBoolean:);
  methods[22].selector = @selector(nativeGetDbLookasideWithLong:);
  methods[23].selector = @selector(nativeCancelWithLong:);
  methods[24].selector = @selector(nativeResetCancelWithLong:withBoolean:);
  methods[25].selector = @selector(initWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withInt:withBoolean:);
  methods[26].selector = @selector(java_finalize);
  methods[27].selector = @selector(openWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withInt:withBoolean:);
  methods[28].selector = @selector(close);
  methods[29].selector = @selector(open);
  methods[30].selector = @selector(disposeWithBoolean:);
  methods[31].selector = @selector(setPageSize);
  methods[32].selector = @selector(setAutoCheckpointInterval);
  methods[33].selector = @selector(setJournalSizeLimit);
  methods[34].selector = @selector(setForeignKeyModeFromConfiguration);
  methods[35].selector = @selector(setWalModeFromConfiguration);
  methods[36].selector = @selector(setSyncModeWithNSString:);
  methods[37].selector = @selector(canonicalizeSyncModeWithNSString:);
  methods[38].selector = @selector(setJournalModeWithNSString:);
  methods[39].selector = @selector(setLocaleFromConfiguration);
  methods[40].selector = @selector(reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[41].selector = @selector(setOnlyAllowReadOnlyOperationsWithBoolean:);
  methods[42].selector = @selector(isPreparedStatementInCacheWithNSString:);
  methods[43].selector = @selector(getConnectionId);
  methods[44].selector = @selector(isPrimaryConnection);
  methods[45].selector = @selector(prepareWithNSString:withAndroidDatabaseSqliteSQLiteStatementInfo:);
  methods[46].selector = @selector(executeWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[47].selector = @selector(executeForLongWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[48].selector = @selector(executeForStringWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[49].selector = @selector(executeForChangedRowCountWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[50].selector = @selector(executeForLastInsertedRowIdWithNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[51].selector = @selector(executeForCursorWindowWithNSString:withNSObjectArray:withAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:withAndroidOsCancellationSignal:);
  methods[52].selector = @selector(acquirePreparedStatementWithNSString:);
  methods[53].selector = @selector(releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[54].selector = @selector(finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[55].selector = @selector(attachCancellationSignalWithAndroidOsCancellationSignal:);
  methods[56].selector = @selector(detachCancellationSignalWithAndroidOsCancellationSignal:);
  methods[57].selector = @selector(onCancel);
  methods[58].selector = @selector(bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:withNSObjectArray:);
  methods[59].selector = @selector(throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[60].selector = @selector(isCacheableWithInt:);
  methods[61].selector = @selector(applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[62].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  methods[63].selector = @selector(dumpUnsafeWithAndroidUtilPrinter:withBoolean:);
  methods[64].selector = @selector(describeCurrentOperationUnsafe);
  methods[65].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[66].selector = @selector(collectDbStatsUnsafeWithJavaUtilArrayList:);
  methods[67].selector = @selector(getMainDbStatsUnsafeWithInt:withLong:withLong:);
  methods[68].selector = @selector(description);
  methods[69].selector = @selector(obtainPreparedStatementWithNSString:withLong:withInt:withInt:withBoolean:);
  methods[70].selector = @selector(recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:);
  methods[71].selector = @selector(trimSqlForDisplayWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = AndroidDatabaseSqliteSQLiteConnection_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 89, -1, -1 },
    { "EMPTY_BYTE_ARRAY", "[B", .constantValue.asLong = 0, 0x1a, -1, 90, -1, -1 },
    { "TRIM_SQL_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 91, -1, -1 },
    { "mCloseGuard_", "LDalvikSystemCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPool_", "LAndroidDatabaseSqliteSQLiteConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfiguration_", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsPrimaryConnection_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsReadOnlyConnection_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreparedStatementCache_", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreparedStatementPool_", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRecentOperations_", "LAndroidDatabaseSqliteSQLiteConnection_OperationLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionPtr_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnlyAllowReadOnlyOperations_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCancellationSignalAttachCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nativeOpen", "LNSString;ILNSString;ZZ", "nativeClose", "J", "nativeRegisterCustomFunction", "JLAndroidDatabaseSqliteSQLiteCustomFunction;", "nativeRegisterLocalizedCollators", "JLNSString;", "nativePrepareStatement", "nativeFinalizeStatement", "JJ", "nativeGetParameterCount", "nativeIsReadOnly", "nativeGetColumnCount", "nativeGetColumnName", "JJI", "nativeBindNull", "nativeBindLong", "JJIJ", "nativeBindDouble", "JJID", "nativeBindString", "JJILNSString;", "nativeBindBlob", "JJI[B", "nativeResetStatementAndClearBindings", "nativeExecute", "nativeExecuteForLong", "nativeExecuteForString", "nativeExecuteForChangedRowCount", "nativeExecuteForLastInsertedRowId", "nativeExecuteForCursorWindow", "JJJIIZ", "nativeGetDbLookaside", "nativeCancel", "nativeResetCancel", "JZ", "LAndroidDatabaseSqliteSQLiteConnectionPool;LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;IZ", "finalize", "LJavaLangThrowable;", "open", "dispose", "Z", "setSyncMode", "LNSString;", "canonicalizeSyncMode", "setJournalMode", "reconfigure", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", "setOnlyAllowReadOnlyOperations", "isPreparedStatementInCache", "prepare", "LNSString;LAndroidDatabaseSqliteSQLiteStatementInfo;", "execute", "LNSString;[LNSObject;LAndroidOsCancellationSignal;", "executeForLong", "executeForString", "executeForChangedRowCount", "executeForLastInsertedRowId", "executeForCursorWindow", "LNSString;[LNSObject;LAndroidDatabaseCursorWindow;IIZLAndroidOsCancellationSignal;", "acquirePreparedStatement", "releasePreparedStatement", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", "finalizePreparedStatement", "attachCancellationSignal", "LAndroidOsCancellationSignal;", "detachCancellationSignal", "bindArguments", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;[LNSObject;", "throwIfStatementForbidden", "isCacheable", "I", "applyBlockGuardPolicy", "dump", "LAndroidUtilPrinter;Z", "dumpUnsafe", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V", "collectDbStatsUnsafe", "getMainDbStatsUnsafe", "IJJ", "toString", "obtainPreparedStatement", "LNSString;JIIZ", "recyclePreparedStatement", "trimSqlForDisplay", &AndroidDatabaseSqliteSQLiteConnection_TAG, &AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY, &AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY, &AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN, "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;LAndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;LAndroidDatabaseSqliteSQLiteConnection_OperationLog;LAndroidDatabaseSqliteSQLiteConnection_Operation;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection = { "SQLiteConnection", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 72, 17, -1, 92, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteConnection class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssign(&AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\s]*\\n+[\\s]*"));
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteConnection)
  }
}

@end

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeOpen(JNIEnv *_env_, jclass _cls_, jstring path, jint openFlags, jstring label, jboolean enableTrace, jboolean enableProfile);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile) {
  return Java_android_database_sqlite_SQLiteConnection_nativeOpen(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), path, openFlags, label, enableTrace, enableProfile);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeClose(JNIEnv *_env_, jclass _cls_, jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(jlong connectionPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeClose(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeRegisterCustomFunction(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jobject function);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(jlong connectionPtr, AndroidDatabaseSqliteSQLiteCustomFunction *function) {
  Java_android_database_sqlite_SQLiteConnection_nativeRegisterCustomFunction(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, function);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeRegisterLocalizedCollators(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jstring locale);

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(jlong connectionPtr, NSString *locale) {
  Java_android_database_sqlite_SQLiteConnection_nativeRegisterLocalizedCollators(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, locale);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativePrepareStatement(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jstring sql);

jlong AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(jlong connectionPtr, NSString *sql) {
  return Java_android_database_sqlite_SQLiteConnection_nativePrepareStatement(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, sql);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeFinalizeStatement(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeFinalizeStatement(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeGetParameterCount(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeGetParameterCount(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jboolean Java_android_database_sqlite_SQLiteConnection_nativeIsReadOnly(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jboolean AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeIsReadOnly(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeGetColumnCount(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeGetColumnCount(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jstring Java_android_database_sqlite_SQLiteConnection_nativeGetColumnName(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index) {
  return (NSString *) Java_android_database_sqlite_SQLiteConnection_nativeGetColumnName(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindNull(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(jlong connectionPtr, jlong statementPtr, jint index) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindNull(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindLong(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jlong value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(jlong connectionPtr, jlong statementPtr, jint index, jlong value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindLong(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindDouble(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jdouble value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(jlong connectionPtr, jlong statementPtr, jint index, jdouble value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindDouble(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindString(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jstring value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(jlong connectionPtr, jlong statementPtr, jint index, NSString *value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindString(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeBindBlob(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jint index, jarray value);

void AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(jlong connectionPtr, jlong statementPtr, jint index, IOSByteArray *value) {
  Java_android_database_sqlite_SQLiteConnection_nativeBindBlob(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, index, value);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeResetStatementAndClearBindings(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeResetStatementAndClearBindings(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeExecute(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeExecute(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLong(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLong(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jstring Java_android_database_sqlite_SQLiteConnection_nativeExecuteForString(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return (NSString *) Java_android_database_sqlite_SQLiteConnection_nativeExecuteForString(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeExecuteForChangedRowCount(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForChangedRowCount(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLastInsertedRowId(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithLong_withLong_(jlong connectionPtr, jlong statementPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForLastInsertedRowId(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr);
}

JNIEXPORT jlong Java_android_database_sqlite_SQLiteConnection_nativeExecuteForCursorWindow(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jlong statementPtr, jlong windowPtr, jint startPos, jint requiredPos, jboolean countAllRows);

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithLong_withLong_withLong_withInt_withInt_withBoolean_(jlong connectionPtr, jlong statementPtr, jlong windowPtr, jint startPos, jint requiredPos, jboolean countAllRows) {
  return Java_android_database_sqlite_SQLiteConnection_nativeExecuteForCursorWindow(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, statementPtr, windowPtr, startPos, requiredPos, countAllRows);
}

JNIEXPORT jint Java_android_database_sqlite_SQLiteConnection_nativeGetDbLookaside(JNIEnv *_env_, jclass _cls_, jlong connectionPtr);

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithLong_(jlong connectionPtr) {
  return Java_android_database_sqlite_SQLiteConnection_nativeGetDbLookaside(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeCancel(JNIEnv *_env_, jclass _cls_, jlong connectionPtr);

void AndroidDatabaseSqliteSQLiteConnection_nativeCancelWithLong_(jlong connectionPtr) {
  Java_android_database_sqlite_SQLiteConnection_nativeCancel(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr);
}

JNIEXPORT void Java_android_database_sqlite_SQLiteConnection_nativeResetCancel(JNIEnv *_env_, jclass _cls_, jlong connectionPtr, jboolean cancelable);

void AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(jlong connectionPtr, jboolean cancelable) {
  Java_android_database_sqlite_SQLiteConnection_nativeResetCancel(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteConnection_class_(), connectionPtr, cancelable);
}

void AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  NSObject_init(self);
  JreStrongAssign(&self->mCloseGuard_, DalvikSystemCloseGuard_get());
  JreStrongAssignAndConsume(&self->mRecentOperations_, new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init());
  JreStrongAssign(&self->mPool_, pool);
  JreStrongAssignAndConsume(&self->mConfiguration_, new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(configuration));
  self->mConnectionId_ = connectionId;
  self->mIsPrimaryConnection_ = primaryConnection;
  self->mIsReadOnlyConnection_ = ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY) != 0);
  JreStrongAssignAndConsume(&self->mPreparedStatementCache_, new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, self->mConfiguration_->maxSqlCacheSize_));
  [((DalvikSystemCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

AndroidDatabaseSqliteSQLiteConnection *new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection, initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_, pool, configuration, connectionId, primaryConnection)
}

AndroidDatabaseSqliteSQLiteConnection *create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection, initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_, pool, configuration, connectionId, primaryConnection)
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  AndroidDatabaseSqliteSQLiteConnection *connection = create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
  @try {
    AndroidDatabaseSqliteSQLiteConnection_open(connection);
    return connection;
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
    AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(connection, false);
    @throw ex;
  }
}

void AndroidDatabaseSqliteSQLiteConnection_open(AndroidDatabaseSqliteSQLiteConnection *self) {
  self->mConnectionPtr_ = AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_, self->mConfiguration_->openFlags_, self->mConfiguration_->label_, JreLoadStatic(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_STATEMENTS), JreLoadStatic(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_TIME));
  AndroidDatabaseSqliteSQLiteConnection_setPageSize(self);
  AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
  AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(self);
  AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(self);
  jint functionCount = [((JavaUtilArrayList *) nil_chk(self->mConfiguration_->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    AndroidDatabaseSqliteSQLiteCustomFunction *function = [self->mConfiguration_->customFunctions_ getWithInt:i];
    AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithLong_withAndroidDatabaseSqliteSQLiteCustomFunction_(self->mConnectionPtr_, function);
  }
}

void AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, jboolean finalized) {
  if (self->mCloseGuard_ != nil) {
    if (finalized) {
      [self->mCloseGuard_ warnIfOpen];
    }
    [self->mCloseGuard_ close];
  }
  if (self->mConnectionPtr_ != 0) {
    jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(self->mRecentOperations_)) beginOperationWithNSString:@"close" withNSString:nil withNSObjectArray:nil];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) evictAll];
      AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithLong_(self->mConnectionPtr_);
      self->mConnectionPtr_ = 0;
    }
    @finally {
      [self->mRecentOperations_ endOperationWithInt:cookie];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setPageSize(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getDefaultPageSize();
    jlong value = [self executeForLongWithNSString:@"PRAGMA page_size" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA page_size=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getWALAutoCheckpoint();
    jlong value = [self executeForLongWithNSString:@"PRAGMA wal_autocheckpoint" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA wal_autocheckpoint=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getJournalSizeLimit();
    jlong value = [self executeForLongWithNSString:@"PRAGMA journal_size_limit" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA journal_size_limit=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (!self->mIsReadOnlyConnection_) {
    jlong newValue = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->foreignKeyConstraintsEnabled_ ? 1 : 0;
    jlong value = [self executeForLongWithNSString:@"PRAGMA foreign_keys" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA foreign_keys=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    if ((self->mConfiguration_->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, @"WAL");
      AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getWALSyncMode());
    }
    else {
      AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getDefaultJournalMode());
      AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getDefaultSyncMode());
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA synchronous" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  if (![((NSString *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(value))) java_equalsIgnoreCase:AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(newValue)]) {
    [self executeWithNSString:JreStrcat("$$", @"PRAGMA synchronous=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  }
}

NSString *AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  if ([((NSString *) nil_chk(value)) isEqual:@"0"]) {
    return @"OFF";
  }
  else if ([value isEqual:@"1"]) {
    return @"NORMAL";
  }
  else if ([value isEqual:@"2"]) {
    return @"FULL";
  }
  return value;
}

void AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA journal_mode" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
  if (![((NSString *) nil_chk(value)) java_equalsIgnoreCase:newValue]) {
    @try {
      NSString *result = [self executeForStringWithNSString:JreStrcat("$$", @"PRAGMA journal_mode=", newValue) withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      if ([((NSString *) nil_chk(result)) java_equalsIgnoreCase:newValue]) {
        return;
      }
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseLockedException *ex) {
    }
    AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnection_TAG, JreStrcat("$$$$$$$", @"Could not change the database journal mode of '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_, @"' from '", value, @"' to '", newValue, @"' because the database is locked.  This usually means that there are other open connections to the database which prevents the database from enabling or disabling write-ahead logging mode.  Proceeding without changing the journal mode."));
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS) != 0) {
    return;
  }
  NSString *newLocale = [((JavaUtilLocale *) nil_chk(self->mConfiguration_->locale_)) description];
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterLocalizedCollatorsWithLong_withNSString_(self->mConnectionPtr_, newLocale);
  if (self->mIsReadOnlyConnection_) {
    return;
  }
  @try {
    [self executeWithNSString:@"CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    NSString *oldLocale = [self executeForStringWithNSString:@"SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    if (oldLocale != nil && [oldLocale isEqual:newLocale]) {
      return;
    }
    [self executeWithNSString:@"BEGIN" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    jboolean success = false;
    @try {
      [self executeWithNSString:@"DELETE FROM android_metadata" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      [self executeWithNSString:@"INSERT INTO android_metadata (locale) VALUES(?)" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ newLocale } count:1 type:NSObject_class_()] withAndroidOsCancellationSignal:nil];
      [self executeWithNSString:@"REINDEX LOCALIZED" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
      success = true;
    }
    @finally {
      [self executeWithNSString:success ? @"COMMIT" : @"ROLLBACK" withNSObjectArray:nil withAndroidOsCancellationSignal:nil];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$", @"Failed to change locale for db '", self->mConfiguration_->label_, @"' to '", newLocale, @"'."), ex);
  }
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) getWithId:sql];
  jboolean skipCache = false;
  if (statement != nil) {
    if (!statement->mInUse_) {
      return statement;
    }
    skipCache = true;
  }
  jlong statementPtr = AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithLong_withNSString_(self->mConnectionPtr_, sql);
  @try {
    jint numParameters = AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithLong_withLong_(self->mConnectionPtr_, statementPtr);
    jint type = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
    jboolean readOnly = AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithLong_withLong_(self->mConnectionPtr_, statementPtr);
    statement = AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
    if (!skipCache && AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(type)) {
      [self->mPreparedStatementCache_ putWithId:sql withId:statement];
      ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_ = true;
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    if (statement == nil || !statement->mInCache_) {
      AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(self->mConnectionPtr_, statementPtr);
    }
    @throw ex;
  }
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = true;
  return statement;
}

void AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = false;
  if (statement->mInCache_) {
    @try {
      AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithLong_withLong_(self->mConnectionPtr_, statement->mStatementPtr_);
    }
    @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) removeWithId:statement->mSql_];
    }
  }
  else {
    AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
  }
}

void AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithLong_withLong_(self->mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
  AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

void AndroidDatabaseSqliteSQLiteConnection_attachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
    self->mCancellationSignalAttachCount_ += 1;
    if (self->mCancellationSignalAttachCount_ == 1) {
      AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(self->mConnectionPtr_, true);
      [cancellationSignal setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:self];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_detachCancellationSignalWithAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    JreAssert(self->mCancellationSignalAttachCount_ > 0, @"android/database/sqlite/SQLiteConnection.java:908 condition failed: assert mCancellationSignalAttachCount > 0;");
    self->mCancellationSignalAttachCount_ -= 1;
    if (self->mCancellationSignalAttachCount_ == 0) {
      [cancellationSignal setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:nil];
      AndroidDatabaseSqliteSQLiteConnection_nativeResetCancelWithLong_withBoolean_(self->mConnectionPtr_, false);
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs) {
  jint count = bindArgs != nil ? bindArgs->size_ : 0;
  if (count != ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_) {
    @throw create_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(JreStrcat("$I$I$", @"Expected ", statement->mNumParameters_, @" bind arguments but ", count, @" were provided."));
  }
  if (count == 0) {
    return;
  }
  jlong statementPtr = statement->mStatementPtr_;
  for (jint i = 0; i < count; i++) {
    id arg = IOSObjectArray_Get(nil_chk(bindArgs), i);
    switch (AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(arg)) {
      case AndroidDatabaseCursor_FIELD_TYPE_NULL:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithLong_withLong_withInt_(self->mConnectionPtr_, statementPtr, i + 1);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_INTEGER:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) longLongValue]);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_FLOAT:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithLong_withLong_withInt_withDouble_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) doubleValue]);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_BLOB:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithLong_withLong_withInt_withByteArray_(self->mConnectionPtr_, statementPtr, i + 1, (IOSByteArray *) cast_chk(arg, [IOSByteArray class]));
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_STRING:
      default:
      if ([arg isKindOfClass:[JavaLangBoolean class]]) {
        AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithLong_withLong_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(arg, [JavaLangBoolean class])))) booleanValue] ? 1 : 0);
      }
      else {
        AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithLong_withLong_withInt_withNSString_(self->mConnectionPtr_, statementPtr, i + 1, [nil_chk(arg) description]);
      }
      break;
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  if (self->mOnlyAllowReadOnlyOperations_ && !((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mReadOnly_) {
    @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(@"Cannot execute this statement because it might modify the database but the connection is read-only.");
  }
}

jboolean AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(jint statementType) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  if (statementType == AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE || statementType == AndroidDatabaseDatabaseUtils_STATEMENT_SELECT) {
    return true;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteConnection_applyBlockGuardPolicyWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb]) {
    if (((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mReadOnly_) {
      [((id<DalvikSystemBlockGuard_Policy>) nil_chk(DalvikSystemBlockGuard_getThreadPolicy())) onReadFromDisk];
    }
    else {
      [((id<DalvikSystemBlockGuard_Policy>) nil_chk(DalvikSystemBlockGuard_getThreadPolicy())) onWriteToDisk];
    }
  }
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(AndroidDatabaseSqliteSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize) {
  NSString *label = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_;
  if (!self->mIsPrimaryConnection_) {
    JreStrAppend(&label, "$IC", @" (", self->mConnectionId_, ')');
  }
  return create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, lookaside, [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) hitCount], [self->mPreparedStatementCache_ missCount], [self->mPreparedStatementCache_ size]);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withLong_withInt_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql, jlong statementPtr, jint numParameters, jint type, jboolean readOnly) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = self->mPreparedStatementPool_;
  if (statement != nil) {
    JreStrongAssign(&self->mPreparedStatementPool_, statement->mPoolNext_);
    JreStrongAssign(&statement->mPoolNext_, nil);
    statement->mInCache_ = false;
  }
  else {
    statement = create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init();
  }
  JreStrongAssign(&statement->mSql_, sql);
  statement->mStatementPtr_ = statementPtr;
  statement->mNumParameters_ = numParameters;
  statement->mType_ = type;
  statement->mReadOnly_ = readOnly;
  return statement;
}

void AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  JreStrongAssign(&((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mSql_, nil);
  JreStrongAssign(&statement->mPoolNext_, self->mPreparedStatementPool_);
  JreStrongAssign(&self->mPreparedStatementPool_, statement);
}

NSString *AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_TRIM_SQL_PATTERN)) matcherWithJavaLangCharSequence:sql])) replaceAllWithNSString:@" "];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection)

@implementation AndroidDatabaseSqliteSQLiteConnection_PreparedStatement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mPoolNext_);
  RELEASE_(mSql_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPoolNext_", "LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStatementPtr_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mNumParameters_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mReadOnly_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInCache_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInUse_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteConnection;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_PreparedStatement = { "PreparedStatement", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 1, 8, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, init)
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

@implementation AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)outer$
                                                                withInt:(jint)size {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, outer$, size);
  return self;
}

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)oldValue
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)newValue {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(oldValue))->mInCache_ = false;
  if (!oldValue->mInUse_) {
    AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(this$0_, oldValue);
  }
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer {
  [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@"  Prepared statement cache:"];
  id<JavaUtilMap> cache = [self snapshot];
  if (![((id<JavaUtilMap>) nil_chk(cache)) isEmpty]) {
    jint i = 0;
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([cache entrySet])) {
      AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_) {
        NSString *sql = [entry_ getKey];
        [printer printlnWithNSString:JreStrcat("$I$$$I$I$Z$$C", @"    ", i, @": statementPtr=0x", JavaLangLong_toHexStringWithLong_(statement->mStatementPtr_), @", numParameters=", statement->mNumParameters_, @", type=", statement->mType_, @", readOnly=", statement->mReadOnly_, @", sql=\"", AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(sql), '"')];
      }
      i += 1;
    }
  }
  else {
    [printer printlnWithNSString:@"    <none>"];
  }
}

- (void)__javaClone:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteConnection:withInt:);
  methods[1].selector = @selector(entryRemovedWithBoolean:withId:withId:withId:);
  methods[2].selector = @selector(dumpWithAndroidUtilPrinter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseSqliteSQLiteConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "entryRemoved", "ZLNSString;LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;LAndroidDatabaseSqliteSQLiteConnection_PreparedStatement;", "dump", "LAndroidUtilPrinter;", "LAndroidDatabaseSqliteSQLiteConnection;", "Landroid/util/LruCache<Ljava/lang/String;Landroid/database/sqlite/SQLiteConnection$PreparedStatement;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache = { "PreparedStatementCache", "android.database.sqlite", ptrTable, methods, fields, 7, 0x12, 3, 1, 5, -1, -1, 6, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self, AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  self->this$0_ = outer$;
  AndroidUtilLruCache_initWithInt_(self, size);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache, initWithAndroidDatabaseSqliteSQLiteConnection_withInt_, outer$, size)
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache, initWithAndroidDatabaseSqliteSQLiteConnection_withInt_, outer$, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

@implementation AndroidDatabaseSqliteSQLiteConnection_OperationLog

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  @synchronized(mOperations_) {
    jint index = (mIndex_ + 1) % AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS;
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation == nil) {
      operation = create_AndroidDatabaseSqliteSQLiteConnection_Operation_init();
      IOSObjectArray_Set(mOperations_, index, operation);
    }
    else {
      operation->mFinished_ = false;
      JreStrongAssign(&operation->mException_, nil);
      if (operation->mBindArgs_ != nil) {
        [operation->mBindArgs_ clear];
      }
    }
    operation->mStartTime_ = JavaLangSystem_currentTimeMillis();
    JreStrongAssign(&operation->mKind_, kind);
    JreStrongAssign(&operation->mSql_, sql);
    if (bindArgs != nil) {
      if (operation->mBindArgs_ == nil) {
        JreStrongAssignAndConsume(&operation->mBindArgs_, new_JavaUtilArrayList_init());
      }
      else {
        [operation->mBindArgs_ clear];
      }
      for (jint i = 0; i < bindArgs->size_; i++) {
        id arg = IOSObjectArray_Get(bindArgs, i);
        if (arg != nil && [arg isKindOfClass:[IOSByteArray class]]) {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:JreLoadStatic(AndroidDatabaseSqliteSQLiteConnection, EMPTY_BYTE_ARRAY)];
        }
        else {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:arg];
        }
      }
    }
    operation->mCookie_ = AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
    mIndex_ = index;
    return operation->mCookie_;
  }
}

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
    if (operation != nil) {
      JreStrongAssign(&operation->mException_, ex);
    }
  }
}

- (void)endOperationWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    if (AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie)) {
      AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, nil);
    }
  }
}

- (jboolean)endOperationDeferLogWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    return AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
  }
}

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
  }
}

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
}

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
}

- (jint)newOperationCookieLockedWithInt:(jint)index {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
}

- (AndroidDatabaseSqliteSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
}

- (NSString *)describeCurrentOperation {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), mIndex_);
    if (operation != nil && !operation->mFinished_) {
      JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
      [operation describeWithJavaLangStringBuilder:msg withBoolean:false];
      return JreRetainedLocalValue([msg description]);
    }
    return JreRetainedLocalValue(nil);
  }
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  @synchronized(mOperations_) {
    [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@"  Most recently executed operations:"];
    jint index = mIndex_;
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation != nil) {
      jint n = 0;
      do {
        JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"    "])) appendWithInt:n])) appendWithNSString:@": ["];
        [msg appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(operation)];
        [msg appendWithNSString:@"] "];
        [operation describeWithJavaLangStringBuilder:msg withBoolean:verbose];
        [printer printlnWithNSString:[msg description]];
        if (index > 0) {
          index -= 1;
        }
        else {
          index = AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS - 1;
        }
        n += 1;
        operation = IOSObjectArray_Get(mOperations_, index);
      }
      while (operation != nil && n < AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS);
    }
    else {
      [printer printlnWithNSString:@"    <none>"];
    }
  }
}

- (void)dealloc {
  RELEASE_(mOperations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection_Operation;", 0x2, 12, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(beginOperationWithNSString:withNSString:withNSObjectArray:);
  methods[2].selector = @selector(failOperationWithInt:withJavaLangException:);
  methods[3].selector = @selector(endOperationWithInt:);
  methods[4].selector = @selector(endOperationDeferLogWithInt:);
  methods[5].selector = @selector(logOperationWithInt:withNSString:);
  methods[6].selector = @selector(endOperationDeferLogLockedWithInt:);
  methods[7].selector = @selector(logOperationLockedWithInt:withNSString:);
  methods[8].selector = @selector(newOperationCookieLockedWithInt:);
  methods[9].selector = @selector(getOperationLockedWithInt:);
  methods[10].selector = @selector(describeCurrentOperation);
  methods[11].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_RECENT_OPERATIONS", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS, 0x1a, -1, -1, -1, -1 },
    { "COOKIE_GENERATION_SHIFT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "COOKIE_INDEX_MASK", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK, 0x1a, -1, -1, -1, -1 },
    { "mOperations_", "[LAndroidDatabaseSqliteSQLiteConnection_Operation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGeneration_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "beginOperation", "LNSString;LNSString;[LNSObject;", "failOperation", "ILJavaLangException;", "endOperation", "I", "endOperationDeferLog", "logOperation", "ILNSString;", "endOperationDeferLogLocked", "logOperationLocked", "newOperationCookieLocked", "getOperationLocked", "dump", "LAndroidUtilPrinter;Z", "LAndroidDatabaseSqliteSQLiteConnection;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_OperationLog = { "OperationLog", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 12, 6, 15, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_OperationLog;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mOperations_, [IOSObjectArray newArrayWithLength:AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS type:AndroidDatabaseSqliteSQLiteConnection_Operation_class_()]);
}

AndroidDatabaseSqliteSQLiteConnection_OperationLog *new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_OperationLog, init)
}

AndroidDatabaseSqliteSQLiteConnection_OperationLog *create_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_OperationLog, init)
}

jboolean AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie) {
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  if (operation != nil) {
    operation->mEndTime_ = JavaLangSystem_currentTimeMillis();
    operation->mFinished_ = true;
    return false;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie, NSString *detail) {
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
  [((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation)) describeWithJavaLangStringBuilder:msg withBoolean:false];
  if (detail != nil) {
    [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", "])) appendWithNSString:detail];
  }
  AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnection_TAG, [msg description]);
}

jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint index) {
  jint generation = self->mGeneration_++;
  return (JreLShift32(generation, AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT)) | index;
}

AndroidDatabaseSqliteSQLiteConnection_Operation *AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie) {
  jint index = cookie & AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK;
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(self->mOperations_), index);
  return ((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation))->mCookie_ == cookie ? operation : nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteConnection_Operation)

@implementation AndroidDatabaseSqliteSQLiteConnection_Operation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteConnection_Operation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose {
  [((JavaLangStringBuilder *) nil_chk(msg)) appendWithNSString:mKind_];
  if (mFinished_) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" took "])) appendWithLong:mEndTime_ - mStartTime_])) appendWithNSString:@"ms"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" started "])) appendWithLong:JavaLangSystem_currentTimeMillis() - mStartTime_])) appendWithNSString:@"ms ago"];
  }
  [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" - "])) appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(self)];
  if (mSql_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", sql=\""])) appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(mSql_)])) appendWithNSString:@"\""];
  }
  if (verbose && mBindArgs_ != nil && [mBindArgs_ size] != 0) {
    [msg appendWithNSString:@", bindArgs=["];
    jint count = [((JavaUtilArrayList *) nil_chk(mBindArgs_)) size];
    for (jint i = 0; i < count; i++) {
      id arg = [((JavaUtilArrayList *) nil_chk(mBindArgs_)) getWithInt:i];
      if (i != 0) {
        [msg appendWithNSString:@", "];
      }
      if (arg == nil) {
        [msg appendWithNSString:@"null"];
      }
      else if ([arg isKindOfClass:[IOSByteArray class]]) {
        [msg appendWithNSString:@"<byte[]>"];
      }
      else if ([arg isKindOfClass:[NSString class]]) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"\""])) appendWithNSString:(NSString *) cast_chk(arg, [NSString class])])) appendWithNSString:@"\""];
      }
      else {
        [msg appendWithId:arg];
      }
    }
    [msg appendWithNSString:@"]"];
  }
  if (mException_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", exception=\""])) appendWithNSString:[((JavaLangException *) nil_chk(mException_)) getMessage]])) appendWithNSString:@"\""];
  }
}

- (NSString *)getStatus {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(self);
}

- (NSString *)getFormattedStartTime {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(self);
}

- (void)dealloc {
  RELEASE_(mKind_);
  RELEASE_(mSql_);
  RELEASE_(mBindArgs_);
  RELEASE_(mException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(describeWithJavaLangStringBuilder:withBoolean:);
  methods[2].selector = @selector(getStatus);
  methods[3].selector = @selector(getFormattedStartTime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sDateFormat", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "mStartTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mEndTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mKind_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBindArgs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1, -1, -1, 3, -1 },
    { "mFinished_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mException_", "LJavaLangException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCookie_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "describe", "LJavaLangStringBuilder;Z", &AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat, "Ljava/util/ArrayList<Ljava/lang/Object;>;", "LAndroidDatabaseSqliteSQLiteConnection;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_Operation = { "Operation", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 4, 9, 4, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnection_Operation;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteConnection_Operation class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat, new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd HH:mm:ss.SSS"));
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteConnection_Operation)
  }
}

@end

void AndroidDatabaseSqliteSQLiteConnection_Operation_init(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnection_Operation *new_AndroidDatabaseSqliteSQLiteConnection_Operation_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnection_Operation, init)
}

AndroidDatabaseSqliteSQLiteConnection_Operation *create_AndroidDatabaseSqliteSQLiteConnection_Operation_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnection_Operation, init)
}

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  if (!self->mFinished_) {
    return @"running";
  }
  return self->mException_ != nil ? @"failed" : @"succeeded";
}

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  return [((JavaTextSimpleDateFormat *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_Operation_sDateFormat)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(self->mStartTime_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_Operation)

@implementation AndroidDatabaseSqliteSQLiteConnectionPool

+ (jint)CONNECTION_FLAG_READ_ONLY {
  return AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY;
}

+ (jint)CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY {
  return AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
}

+ (jint)CONNECTION_FLAG_INTERACTIVE {
  return AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration {
  AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(self, configuration);
  return self;
}

- (void)java_finalize {
  @try {
    AndroidDatabaseSqliteSQLiteConnectionPool_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

+ (AndroidDatabaseSqliteSQLiteConnectionPool *)openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration {
  return AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(configuration);
}

- (void)open {
  AndroidDatabaseSqliteSQLiteConnectionPool_open(self);
}

- (void)close {
  AndroidDatabaseSqliteSQLiteConnectionPool_disposeWithBoolean_(self, false);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteConnectionPool_disposeWithBoolean_(self, finalized);
}

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration {
  if (configuration == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"configuration must not be null.");
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
    jboolean walModeChanged = ((configuration->openFlags_ ^ ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->openFlags_) & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
    if (walModeChanged) {
      if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) isEmpty]) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Write Ahead Logging (WAL) mode cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");
      }
      AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(self);
      JreAssert([((JavaUtilArrayList *) nil_chk(mAvailableNonPrimaryConnections_)) isEmpty], @"android/database/sqlite/SQLiteConnectionPool.java:277 condition failed: assert mAvailableNonPrimaryConnections.isEmpty();");
    }
    jboolean foreignKeyModeChanged = configuration->foreignKeyConstraintsEnabled_ != mConfiguration_->foreignKeyConstraintsEnabled_;
    if (foreignKeyModeChanged) {
      if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) isEmpty]) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Foreign Key Constraints cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");
      }
    }
    if (mConfiguration_->openFlags_ != configuration->openFlags_) {
      if (walModeChanged) {
        AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
      }
      AndroidDatabaseSqliteSQLiteConnection *newPrimaryConnection = AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(self, configuration, true);
      AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
      AndroidDatabaseSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(self);
      JreStrongAssign(&mAvailablePrimaryConnection_, newPrimaryConnection);
      [mConfiguration_ updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:configuration];
      AndroidDatabaseSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
    }
    else {
      [mConfiguration_ updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:configuration];
      AndroidDatabaseSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
      AndroidDatabaseSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(self);
      AndroidDatabaseSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(self);
    }
    AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
  }
}

- (AndroidDatabaseSqliteSQLiteConnection *)acquireConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags
                                         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return AndroidDatabaseSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
}

- (void)releaseConnectionWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status = [((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) removeWithId:connection];
    if (status == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");
    }
    if (!mIsOpen_) {
      AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
    }
    else if ([((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) isPrimaryConnection]) {
      if (AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, connection, status)) {
        JreAssert(mAvailablePrimaryConnection_ == nil, @"android/database/sqlite/SQLiteConnectionPool.java:376 condition failed: assert mAvailablePrimaryConnection == null;");
        JreStrongAssign(&mAvailablePrimaryConnection_, connection);
      }
      AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
    }
    else if ([((JavaUtilArrayList *) nil_chk(mAvailableNonPrimaryConnections_)) size] >= mMaxConnectionPoolSize_ - 1) {
      AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
    }
    else {
      if (AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, connection, status)) {
        [mAvailableNonPrimaryConnections_ addWithId:connection];
      }
      AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
    }
  }
}

- (jboolean)recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
      withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status {
  return AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, connection, status);
}

- (jboolean)shouldYieldConnectionWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
                                                                   withInt:(jint)connectionFlags {
  @synchronized(mLock_) {
    if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) containsKeyWithId:connection]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");
    }
    if (!mIsOpen_) {
      return false;
    }
    return AndroidDatabaseSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(self, [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) isPrimaryConnection], connectionFlags);
  }
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  @synchronized(mLock_) {
    if (mAvailablePrimaryConnection_ != nil) {
      [mAvailablePrimaryConnection_ collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
    for (AndroidDatabaseSqliteSQLiteConnection * __strong connection in nil_chk(mAvailableNonPrimaryConnections_)) {
      [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
    for (AndroidDatabaseSqliteSQLiteConnection * __strong connection in nil_chk([((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) keySet])) {
      [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) collectDbStatsUnsafeWithJavaUtilArrayList:dbStatsList];
    }
  }
}

- (AndroidDatabaseSqliteSQLiteConnection *)openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                                        withBoolean:(jboolean)primaryConnection {
  return AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(self, configuration, primaryConnection);
}

- (void)onConnectionLeaked {
  AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$$$", @"A SQLiteConnection object for database '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->label_, @"' was leaked!  Please fix your application to end transactions in progress properly and to close the database when it is no longer needed."));
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(mConnectionLeaked_)) setWithBoolean:true];
}

- (void)closeAvailableConnectionsAndLogExceptionsLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
}

- (void)closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(self);
}

- (void)closeExcessConnectionsAndLogExceptionsLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(self);
}

- (void)closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection {
  AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
}

- (void)discardAcquiredConnectionsLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(self);
}

- (void)reconfigureAllConnectionsLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(self);
}

- (void)markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status {
  AndroidDatabaseSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, status);
}

- (AndroidDatabaseSqliteSQLiteConnection *)waitForConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags
                                         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return AndroidDatabaseSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
}

- (void)cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)waiter {
  AndroidDatabaseSqliteSQLiteConnectionPool_cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(self, waiter);
}

- (void)logConnectionPoolBusyLockedWithLong:(jlong)waitMillis
                                    withInt:(jint)connectionFlags {
  AndroidDatabaseSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(self, waitMillis, connectionFlags);
}

- (void)wakeConnectionWaitersLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
}

- (AndroidDatabaseSqliteSQLiteConnection *)tryAcquirePrimaryConnectionLockedWithInt:(jint)connectionFlags {
  return AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(self, connectionFlags);
}

- (AndroidDatabaseSqliteSQLiteConnection *)tryAcquireNonPrimaryConnectionLockedWithNSString:(NSString *)sql
                                                                                    withInt:(jint)connectionFlags {
  return AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(self, sql, connectionFlags);
}

- (void)finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)connection
                                                                       withInt:(jint)connectionFlags {
  AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
}

- (jboolean)isSessionBlockingImportantConnectionWaitersLockedWithBoolean:(jboolean)holdingPrimaryConnection
                                                                 withInt:(jint)connectionFlags {
  return AndroidDatabaseSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(self, holdingPrimaryConnection, connectionFlags);
}

+ (jint)getPriorityWithInt:(jint)connectionFlags {
  return AndroidDatabaseSqliteSQLiteConnectionPool_getPriorityWithInt_(connectionFlags);
}

- (void)setMaxConnectionPoolSizeLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
}

- (void)throwIfClosedLocked {
  AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
}

- (AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)obtainConnectionWaiterLockedWithJavaLangThread:(JavaLangThread *)thread
                                                                                                      withLong:(jlong)startTime
                                                                                                       withInt:(jint)priority
                                                                                                   withBoolean:(jboolean)wantPrimaryConnection
                                                                                                  withNSString:(NSString *)sql
                                                                                                       withInt:(jint)connectionFlags {
  return AndroidDatabaseSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(self, thread, startTime, priority, wantPrimaryConnection, sql, connectionFlags);
}

- (void)recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)waiter {
  AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(self, waiter);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  id<AndroidUtilPrinter> indentedPrinter = AndroidUtilPrefixPrinter_createWithAndroidUtilPrinter_withNSString_(printer, @"    ");
  @synchronized(mLock_) {
    [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:JreStrcat("$$C", @"Connection pool for ", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_, ':')];
    [printer printlnWithNSString:JreStrcat("$Z", @"  Open: ", mIsOpen_)];
    [printer printlnWithNSString:JreStrcat("$I", @"  Max connections: ", mMaxConnectionPoolSize_)];
    [printer printlnWithNSString:@"  Available primary connection:"];
    if (mAvailablePrimaryConnection_ != nil) {
      [mAvailablePrimaryConnection_ dumpWithAndroidUtilPrinter:indentedPrinter withBoolean:verbose];
    }
    else {
      [((id<AndroidUtilPrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
    [printer printlnWithNSString:@"  Available non-primary connections:"];
    if (![((JavaUtilArrayList *) nil_chk(mAvailableNonPrimaryConnections_)) isEmpty]) {
      jint count = [mAvailableNonPrimaryConnections_ size];
      for (jint i = 0; i < count; i++) {
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk([mAvailableNonPrimaryConnections_ getWithInt:i])) dumpWithAndroidUtilPrinter:indentedPrinter withBoolean:verbose];
      }
    }
    else {
      [((id<AndroidUtilPrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
    [printer printlnWithNSString:@"  Acquired connections:"];
    if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) isEmpty]) {
      for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([mAcquiredConnections_ entrySet])) {
        AndroidDatabaseSqliteSQLiteConnection *connection = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) dumpUnsafeWithAndroidUtilPrinter:indentedPrinter withBoolean:verbose];
        [((id<AndroidUtilPrinter>) nil_chk(indentedPrinter)) printlnWithNSString:JreStrcat("$@", @"  Status: ", [entry_ getValue])];
      }
    }
    else {
      [((id<AndroidUtilPrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
    [printer printlnWithNSString:@"  Connection waiters:"];
    if (mConnectionWaiterQueue_ != nil) {
      jint i = 0;
      jlong now = AndroidOsSystemClock_uptimeMillis();
      for (AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = mConnectionWaiterQueue_; waiter != nil; waiter = waiter->mNext_, i++) {
        [((id<AndroidUtilPrinter>) nil_chk(indentedPrinter)) printlnWithNSString:JreStrcat("I$F$@$I$$C", i, @": waited for ", ((now - waiter->mStartTime_) * 0.001f), @" ms - thread=", waiter->mThread_, @", priority=", waiter->mPriority_, @", sql='", waiter->mSql_, '\'')];
      }
    }
    else {
      [((id<AndroidUtilPrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteConnectionPool: ", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteConnectionPool class]);
  RELEASE_(mCloseGuard_);
  RELEASE_(mLock_);
  RELEASE_(mConnectionLeaked_);
  RELEASE_(mConfiguration_);
  RELEASE_(mConnectionWaiterPool_);
  RELEASE_(mConnectionWaiterQueue_);
  RELEASE_(mAvailableNonPrimaryConnections_);
  RELEASE_(mAvailablePrimaryConnection_);
  RELEASE_(mAcquiredConnections_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnectionPool;", 0x9, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x2, 23, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnection;", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 35, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 41, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[1].selector = @selector(java_finalize);
  methods[2].selector = @selector(openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[3].selector = @selector(open);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(disposeWithBoolean:);
  methods[6].selector = @selector(reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[7].selector = @selector(acquireConnectionWithNSString:withInt:withAndroidOsCancellationSignal:);
  methods[8].selector = @selector(releaseConnectionWithAndroidDatabaseSqliteSQLiteConnection:);
  methods[9].selector = @selector(recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection:withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus:);
  methods[10].selector = @selector(shouldYieldConnectionWithAndroidDatabaseSqliteSQLiteConnection:withInt:);
  methods[11].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[12].selector = @selector(openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withBoolean:);
  methods[13].selector = @selector(onConnectionLeaked);
  methods[14].selector = @selector(closeAvailableConnectionsAndLogExceptionsLocked);
  methods[15].selector = @selector(closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked);
  methods[16].selector = @selector(closeExcessConnectionsAndLogExceptionsLocked);
  methods[17].selector = @selector(closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection:);
  methods[18].selector = @selector(discardAcquiredConnectionsLocked);
  methods[19].selector = @selector(reconfigureAllConnectionsLocked);
  methods[20].selector = @selector(markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus:);
  methods[21].selector = @selector(waitForConnectionWithNSString:withInt:withAndroidOsCancellationSignal:);
  methods[22].selector = @selector(cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:);
  methods[23].selector = @selector(logConnectionPoolBusyLockedWithLong:withInt:);
  methods[24].selector = @selector(wakeConnectionWaitersLocked);
  methods[25].selector = @selector(tryAcquirePrimaryConnectionLockedWithInt:);
  methods[26].selector = @selector(tryAcquireNonPrimaryConnectionLockedWithNSString:withInt:);
  methods[27].selector = @selector(finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection:withInt:);
  methods[28].selector = @selector(isSessionBlockingImportantConnectionWaitersLockedWithBoolean:withInt:);
  methods[29].selector = @selector(getPriorityWithInt:);
  methods[30].selector = @selector(setMaxConnectionPoolSizeLocked);
  methods[31].selector = @selector(throwIfClosedLocked);
  methods[32].selector = @selector(obtainConnectionWaiterLockedWithJavaLangThread:withLong:withInt:withBoolean:withNSString:withInt:);
  methods[33].selector = @selector(recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:);
  methods[34].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  methods[35].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "CONNECTION_POOL_BUSY_MILLIS", "J", .constantValue.asLong = AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS, 0x1a, -1, -1, -1, -1 },
    { "mCloseGuard_", "LDalvikSystemCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionLeaked_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfiguration_", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMaxConnectionPoolSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsOpen_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNextConnectionId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConnectionWaiterPool_", "LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConnectionWaiterQueue_", "LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAvailableNonPrimaryConnections_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 43, -1 },
    { "mAvailablePrimaryConnection_", "LAndroidDatabaseSqliteSQLiteConnection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAcquiredConnections_", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 44, -1 },
    { "CONNECTION_FLAG_READ_ONLY", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY, 0x19, -1, -1, -1, -1 },
    { "CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY, 0x19, -1, -1, -1, -1 },
    { "CONNECTION_FLAG_INTERACTIVE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", "finalize", "LJavaLangThrowable;", "open", "dispose", "Z", "reconfigure", "acquireConnection", "LNSString;ILAndroidOsCancellationSignal;", "releaseConnection", "LAndroidDatabaseSqliteSQLiteConnection;", "recycleConnectionLocked", "LAndroidDatabaseSqliteSQLiteConnection;LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", "shouldYieldConnection", "LAndroidDatabaseSqliteSQLiteConnection;I", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V", "openConnectionLocked", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;Z", "closeConnectionAndLogExceptionsLocked", "markAcquiredConnectionsLocked", "LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", "waitForConnection", "cancelConnectionWaiterLocked", "LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;", "logConnectionPoolBusyLocked", "JI", "tryAcquirePrimaryConnectionLocked", "I", "tryAcquireNonPrimaryConnectionLocked", "LNSString;I", "finishAcquireConnectionLocked", "isSessionBlockingImportantConnectionWaitersLocked", "ZI", "getPriority", "obtainConnectionWaiterLocked", "LJavaLangThread;JIZLNSString;I", "recycleConnectionWaiterLocked", "dump", "LAndroidUtilPrinter;Z", "toString", &AndroidDatabaseSqliteSQLiteConnectionPool_TAG, "Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteConnection;>;", "Ljava/util/WeakHashMap<Landroid/database/sqlite/SQLiteConnection;Landroid/database/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus;>;", "LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnectionPool = { "SQLiteConnectionPool", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 36, 17, -1, 45, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnectionPool;
}

@end

void AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration) {
  NSObject_init(self);
  JreStrongAssign(&self->mCloseGuard_, DalvikSystemCloseGuard_get());
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->mConnectionLeaked_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->mAvailableNonPrimaryConnections_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mAcquiredConnections_, new_JavaUtilWeakHashMap_init());
  JreStrongAssignAndConsume(&self->mConfiguration_, new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(configuration));
  AndroidDatabaseSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
}

AndroidDatabaseSqliteSQLiteConnectionPool *new_AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnectionPool, initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_, configuration)
}

AndroidDatabaseSqliteSQLiteConnectionPool *create_AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnectionPool, initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_, configuration)
}

AndroidDatabaseSqliteSQLiteConnectionPool *AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration) {
  AndroidDatabaseSqliteSQLiteConnectionPool_initialize();
  if (configuration == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"configuration must not be null.");
  }
  AndroidDatabaseSqliteSQLiteConnectionPool *pool = create_AndroidDatabaseSqliteSQLiteConnectionPool_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(configuration);
  AndroidDatabaseSqliteSQLiteConnectionPool_open(pool);
  return pool;
}

void AndroidDatabaseSqliteSQLiteConnectionPool_open(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  JreStrongAssign(&self->mAvailablePrimaryConnection_, AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(self, self->mConfiguration_, true));
  self->mIsOpen_ = true;
  [((DalvikSystemCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

void AndroidDatabaseSqliteSQLiteConnectionPool_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jboolean finalized) {
  if (self->mCloseGuard_ != nil) {
    if (finalized) {
      [self->mCloseGuard_ warnIfOpen];
    }
    [self->mCloseGuard_ close];
  }
  if (!finalized) {
    @synchronized(self->mLock_) {
      AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
      self->mIsOpen_ = false;
      AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
      jint pendingCount = [((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) size];
      if (pendingCount != 0) {
        AndroidUtilLog_iWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$$$I$", @"The connection pool for ", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_, @" has been closed but there are still ", pendingCount, @" connections in use.  They will be closed as they are released back to the pool."));
      }
      AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
    }
  }
}

jboolean AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnection *connection, AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status) {
  if (status == JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE)) {
    @try {
      [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:self->mConfiguration_];
    }
    @catch (JavaLangRuntimeException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to reconfigure released connection, closing it: ", connection), ex);
      status = JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD);
    }
  }
  if (status == JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD)) {
    AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
    return false;
  }
  return true;
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jboolean primaryConnection) {
  jint connectionId = self->mNextConnectionId_++;
  return AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(self, configuration, connectionId, primaryConnection);
}

void AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(self);
  if (self->mAvailablePrimaryConnection_ != nil) {
    AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, self->mAvailablePrimaryConnection_);
    JreStrongAssign(&self->mAvailablePrimaryConnection_, nil);
  }
}

void AndroidDatabaseSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  jint count = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  for (jint i = 0; i < count; i++) {
    AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, [self->mAvailableNonPrimaryConnections_ getWithInt:i]);
  }
  [self->mAvailableNonPrimaryConnections_ clear];
}

void AndroidDatabaseSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  jint availableCount = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  while (availableCount-- > self->mMaxConnectionPoolSize_ - 1) {
    AndroidDatabaseSqliteSQLiteConnection *connection = [self->mAvailableNonPrimaryConnections_ removeWithInt:availableCount];
    AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
  }
}

void AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnection *connection) {
  @try {
    [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) close];
  }
  @catch (JavaLangRuntimeException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to close connection, its fate is now in the hands of the merciful GC: ", connection), ex);
  }
}

void AndroidDatabaseSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  AndroidDatabaseSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD));
}

void AndroidDatabaseSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  if (self->mAvailablePrimaryConnection_ != nil) {
    @try {
      [self->mAvailablePrimaryConnection_ reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:self->mConfiguration_];
    }
    @catch (JavaLangRuntimeException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to reconfigure available primary connection, closing it: ", self->mAvailablePrimaryConnection_), ex);
      AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, self->mAvailablePrimaryConnection_);
      JreStrongAssign(&self->mAvailablePrimaryConnection_, nil);
    }
  }
  jint count = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  for (jint i = 0; i < count; i++) {
    AndroidDatabaseSqliteSQLiteConnection *connection = [self->mAvailableNonPrimaryConnections_ getWithInt:i];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:self->mConfiguration_];
    }
    @catch (JavaLangRuntimeException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to reconfigure available non-primary connection, closing it: ", connection), ex);
      AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
      [self->mAvailableNonPrimaryConnections_ removeWithInt:i--];
      count -= 1;
    }
  }
  AndroidDatabaseSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE));
}

void AndroidDatabaseSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status) {
  if (![((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) isEmpty]) {
    JavaUtilArrayList *keysToUpdate = create_JavaUtilArrayList_initWithInt_([self->mAcquiredConnections_ size]);
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([self->mAcquiredConnections_ entrySet])) {
      AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *oldStatus = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (status != oldStatus && oldStatus != JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD)) {
        [keysToUpdate addWithId:[entry_ getKey]];
      }
    }
    jint updateCount = [keysToUpdate size];
    for (jint i = 0; i < updateCount; i++) {
      [self->mAcquiredConnections_ putWithId:[keysToUpdate getWithInt:i] withId:status];
    }
  }
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal) {
  jboolean wantPrimaryConnection = (connectionFlags & AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY) != 0;
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter;
  jint nonce;
  @synchronized(self->mLock_) {
    AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
    if (cancellationSignal != nil) {
      [cancellationSignal throwIfCanceled];
    }
    AndroidDatabaseSqliteSQLiteConnection *connection = nil;
    if (!wantPrimaryConnection) {
      connection = AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(self, sql, connectionFlags);
    }
    if (connection == nil) {
      connection = AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(self, connectionFlags);
    }
    if (connection != nil) {
      return JreRetainedLocalValue(connection);
    }
    jint priority = AndroidDatabaseSqliteSQLiteConnectionPool_getPriorityWithInt_(connectionFlags);
    jlong startTime = AndroidOsSystemClock_uptimeMillis();
    waiter = JreRetainedLocalValue(AndroidDatabaseSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(self, JavaLangThread_currentThread(), startTime, priority, wantPrimaryConnection, sql, connectionFlags));
    AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *predecessor = nil;
    AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *successor = self->mConnectionWaiterQueue_;
    while (successor != nil) {
      if (priority > successor->mPriority_) {
        JreStrongAssign(&((AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNext_, successor);
        break;
      }
      predecessor = successor;
      successor = successor->mNext_;
    }
    if (predecessor != nil) {
      JreStrongAssign(&predecessor->mNext_, waiter);
    }
    else {
      JreStrongAssign(&self->mConnectionWaiterQueue_, waiter);
    }
    nonce = ((AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNonce_;
  }
  if (cancellationSignal != nil) {
    [cancellationSignal setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:create_AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(self, waiter, nonce)];
  }
  @try {
    jlong busyTimeoutMillis = AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS;
    jlong nextBusyTimeoutTime = waiter->mStartTime_ + busyTimeoutMillis;
    for (; ; ) {
      if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->mConnectionLeaked_)) compareAndSetWithBoolean:true withBoolean:false]) {
        @synchronized(self->mLock_) {
          AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
        }
      }
      JavaUtilConcurrentLocksLockSupport_parkNanosWithId_withLong_(self, busyTimeoutMillis * 1000000LL);
      JavaLangThread_interrupted();
      @synchronized(self->mLock_) {
        AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
        AndroidDatabaseSqliteSQLiteConnection *connection = waiter->mAssignedConnection_;
        JavaLangRuntimeException *ex = waiter->mException_;
        if (connection != nil || ex != nil) {
          AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(self, waiter);
          if (connection != nil) {
            return JreRetainedLocalValue(connection);
          }
          @throw nil_chk(ex);
        }
        jlong now = AndroidOsSystemClock_uptimeMillis();
        if (now < nextBusyTimeoutTime) {
          busyTimeoutMillis = now - nextBusyTimeoutTime;
        }
        else {
          AndroidDatabaseSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(self, now - waiter->mStartTime_, connectionFlags);
          busyTimeoutMillis = AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS;
          nextBusyTimeoutTime = now + busyTimeoutMillis;
        }
      }
    }
  }
  @finally {
    if (cancellationSignal != nil) {
      [cancellationSignal setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnectionPool_cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter) {
  if (((AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mAssignedConnection_ != nil || waiter->mException_ != nil) {
    return;
  }
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *predecessor = nil;
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *current = self->mConnectionWaiterQueue_;
  while (current != waiter) {
    JreAssert(current != nil, @"android/database/sqlite/SQLiteConnectionPool.java:718 condition failed: assert current != null;");
    predecessor = current;
    current = ((AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(current))->mNext_;
  }
  if (predecessor != nil) {
    JreStrongAssign(&predecessor->mNext_, waiter->mNext_);
  }
  else {
    JreStrongAssign(&self->mConnectionWaiterQueue_, waiter->mNext_);
  }
  JreStrongAssignAndConsume(&waiter->mException_, new_AndroidOsOperationCanceledException_init());
  JavaUtilConcurrentLocksLockSupport_unparkWithJavaLangThread_(waiter->mThread_);
  AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
}

void AndroidDatabaseSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jlong waitMillis, jint connectionFlags) {
  JavaLangThread *thread = JavaLangThread_currentThread();
  JavaLangStringBuilder *msg = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"The connection pool for database '"])) appendWithNSString:((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_];
  [msg appendWithNSString:@"' has been unable to grant a connection to thread "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithLong:[((JavaLangThread *) nil_chk(thread)) getId]])) appendWithNSString:@" ("])) appendWithNSString:[thread getName]])) appendWithNSString:@") "];
  [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"with flags 0x"])) appendWithNSString:JavaLangInteger_toHexStringWithInt_(connectionFlags)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" for "])) appendWithFloat:waitMillis * 0.001f])) appendWithNSString:@" seconds.\n"];
  JavaUtilArrayList *requests = create_JavaUtilArrayList_init();
  jint activeConnections = 0;
  jint idleConnections = 0;
  if (![((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) isEmpty]) {
    for (AndroidDatabaseSqliteSQLiteConnection * __strong connection in nil_chk([self->mAcquiredConnections_ keySet])) {
      NSString *description_ = [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) describeCurrentOperationUnsafe];
      if (description_ != nil) {
        [requests addWithId:description_];
        activeConnections += 1;
      }
      else {
        idleConnections += 1;
      }
    }
  }
  jint availableConnections = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  if (self->mAvailablePrimaryConnection_ != nil) {
    availableConnections += 1;
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"Connections: "])) appendWithInt:activeConnections])) appendWithNSString:@" active, "];
  [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:idleConnections])) appendWithNSString:@" idle, "];
  [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:availableConnections])) appendWithNSString:@" available.\n"];
  if (![requests isEmpty]) {
    [msg appendWithNSString:@"\nRequests in progress:\n"];
    for (NSString * __strong request in requests) {
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"  "])) appendWithNSString:request])) appendWithNSString:@"\n"];
    }
  }
  AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, [msg description]);
}

void AndroidDatabaseSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *predecessor = nil;
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = self->mConnectionWaiterQueue_;
  jboolean primaryConnectionNotAvailable = false;
  jboolean nonPrimaryConnectionNotAvailable = false;
  while (waiter != nil) {
    jboolean unpark = false;
    if (!self->mIsOpen_) {
      unpark = true;
    }
    else {
      @try {
        AndroidDatabaseSqliteSQLiteConnection *connection = nil;
        if (!waiter->mWantPrimaryConnection_ && !nonPrimaryConnectionNotAvailable) {
          connection = AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(self, waiter->mSql_, waiter->mConnectionFlags_);
          if (connection == nil) {
            nonPrimaryConnectionNotAvailable = true;
          }
        }
        if (connection == nil && !primaryConnectionNotAvailable) {
          connection = AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(self, waiter->mConnectionFlags_);
          if (connection == nil) {
            primaryConnectionNotAvailable = true;
          }
        }
        if (connection != nil) {
          JreStrongAssign(&waiter->mAssignedConnection_, connection);
          unpark = true;
        }
        else if (nonPrimaryConnectionNotAvailable && primaryConnectionNotAvailable) {
          break;
        }
      }
      @catch (JavaLangRuntimeException *ex) {
        JreStrongAssign(&waiter->mException_, ex);
        unpark = true;
      }
    }
    AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *successor = waiter->mNext_;
    if (unpark) {
      if (predecessor != nil) {
        JreStrongAssign(&predecessor->mNext_, successor);
      }
      else {
        JreStrongAssign(&self->mConnectionWaiterQueue_, successor);
      }
      JreStrongAssign(&waiter->mNext_, nil);
      JavaUtilConcurrentLocksLockSupport_unparkWithJavaLangThread_(waiter->mThread_);
    }
    else {
      predecessor = waiter;
    }
    waiter = successor;
  }
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jint connectionFlags) {
  AndroidDatabaseSqliteSQLiteConnection *connection = self->mAvailablePrimaryConnection_;
  if (connection != nil) {
    JreStrongAssign(&self->mAvailablePrimaryConnection_, nil);
    AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
    return connection;
  }
  for (AndroidDatabaseSqliteSQLiteConnection * __strong acquiredConnection in nil_chk([((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) keySet])) {
    if ([((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(acquiredConnection)) isPrimaryConnection]) {
      return nil;
    }
  }
  connection = AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(self, self->mConfiguration_, true);
  AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
  return connection;
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags) {
  AndroidDatabaseSqliteSQLiteConnection *connection;
  jint availableCount = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  if (availableCount > 1 && sql != nil) {
    for (jint i = 0; i < availableCount; i++) {
      connection = [self->mAvailableNonPrimaryConnections_ getWithInt:i];
      if ([((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) isPreparedStatementInCacheWithNSString:sql]) {
        [self->mAvailableNonPrimaryConnections_ removeWithInt:i];
        AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
        return connection;
      }
    }
  }
  if (availableCount > 0) {
    connection = [self->mAvailableNonPrimaryConnections_ removeWithInt:availableCount - 1];
    AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
    return connection;
  }
  jint openConnections = [((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) size];
  if (self->mAvailablePrimaryConnection_ != nil) {
    openConnections += 1;
  }
  if (openConnections >= self->mMaxConnectionPoolSize_) {
    return nil;
  }
  connection = AndroidDatabaseSqliteSQLiteConnectionPool_openConnectionLockedWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withBoolean_(self, self->mConfiguration_, false);
  AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
  return connection;
}

void AndroidDatabaseSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnection *connection, jint connectionFlags) {
  @try {
    jboolean readOnly = (connectionFlags & AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY) != 0;
    [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(connection)) setOnlyAllowReadOnlyOperationsWithBoolean:readOnly];
    [((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) putWithId:connection withId:JreLoadEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL)];
  }
  @catch (JavaLangRuntimeException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnectionPool_TAG, JreStrcat("$@$I", @"Failed to prepare acquired connection for session, closing it: ", connection, @", connectionFlags=", connectionFlags));
    AndroidDatabaseSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithAndroidDatabaseSqliteSQLiteConnection_(self, connection);
    @throw ex;
  }
}

jboolean AndroidDatabaseSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, jboolean holdingPrimaryConnection, jint connectionFlags) {
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = self->mConnectionWaiterQueue_;
  if (waiter != nil) {
    jint priority = AndroidDatabaseSqliteSQLiteConnectionPool_getPriorityWithInt_(connectionFlags);
    do {
      if (priority > waiter->mPriority_) {
        break;
      }
      if (holdingPrimaryConnection || !waiter->mWantPrimaryConnection_) {
        return true;
      }
      waiter = waiter->mNext_;
    }
    while (waiter != nil);
  }
  return false;
}

jint AndroidDatabaseSqliteSQLiteConnectionPool_getPriorityWithInt_(jint connectionFlags) {
  AndroidDatabaseSqliteSQLiteConnectionPool_initialize();
  return (connectionFlags & AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE) != 0 ? 1 : 0;
}

void AndroidDatabaseSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
    self->mMaxConnectionPoolSize_ = AndroidDatabaseSqliteSQLiteGlobal_getWALConnectionPoolSize();
  }
  else {
    self->mMaxConnectionPoolSize_ = 1;
  }
}

void AndroidDatabaseSqliteSQLiteConnectionPool_throwIfClosedLocked(AndroidDatabaseSqliteSQLiteConnectionPool *self) {
  if (!self->mIsOpen_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the connection pool has been closed.");
  }
}

AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *AndroidDatabaseSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *self, JavaLangThread *thread, jlong startTime, jint priority, jboolean wantPrimaryConnection, NSString *sql, jint connectionFlags) {
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = self->mConnectionWaiterPool_;
  if (waiter != nil) {
    JreStrongAssign(&self->mConnectionWaiterPool_, waiter->mNext_);
    JreStrongAssign(&waiter->mNext_, nil);
  }
  else {
    waiter = create_AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init();
  }
  JreStrongAssign(&waiter->mThread_, thread);
  waiter->mStartTime_ = startTime;
  waiter->mPriority_ = priority;
  waiter->mWantPrimaryConnection_ = wantPrimaryConnection;
  JreStrongAssign(&waiter->mSql_, sql);
  waiter->mConnectionFlags_ = connectionFlags;
  return waiter;
}

void AndroidDatabaseSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(AndroidDatabaseSqliteSQLiteConnectionPool *self, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *waiter) {
  JreStrongAssign(&((AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNext_, self->mConnectionWaiterPool_);
  JreStrongAssign(&waiter->mThread_, nil);
  JreStrongAssign(&waiter->mSql_, nil);
  JreStrongAssign(&waiter->mAssignedConnection_, nil);
  JreStrongAssign(&waiter->mException_, nil);
  waiter->mNonce_ += 1;
  JreStrongAssign(&self->mConnectionWaiterPool_, waiter);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnectionPool)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[3];

@implementation AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)NORMAL {
  return JreEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL);
}

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)RECONFIGURE {
  return JreEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE);
}

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)DISCARD {
  return JreEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD);
}

+ (IOSObjectArray *)values {
  return AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values();
}

+ (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)valueOfWithNSString:(NSString *)name {
  return AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_valueOfWithNSString_(name);
}

- (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum)toNSEnum {
  return (AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "RECONFIGURE", "LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DISCARD", "LAndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL), &JreEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE), &JreEnum(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD), "LAndroidDatabaseSqliteSQLiteConnectionPool;", "Ljava/lang/Enum<Landroid/database/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus = { "AcquiredConnectionStatus", "android.database.sqlite", ptrTable, methods, fields, 7, 0x4018, 2, 3, 5, -1, -1, 6, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(e, JreEnumConstantName(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)
  }
}

@end

void AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values() {
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_ count:3 type:AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_class_()];
}

AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_valueOfWithNSString_(NSString *name) {
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initialize();
  for (int i = 0; i < 3; i++) {
    AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *e = AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus *AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_fromOrdinal(NSUInteger ordinal) {
  AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

@implementation AndroidDatabaseSqliteSQLiteConnectionPool_1

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)outer$
             withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *)capture$0
                                                                    withInt:(jint)capture$1 {
  AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onCancel {
  @synchronized(this$0_->mLock_) {
    if (((AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(val$waiter_))->mNonce_ == val$nonce_) {
      AndroidDatabaseSqliteSQLiteConnectionPool_cancelConnectionWaiterLockedWithAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_(this$0_, val$waiter_);
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$waiter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter:withInt:);
  methods[1].selector = @selector(onCancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseSqliteSQLiteConnectionPool;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$waiter_", "LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$nonce_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteConnectionPool;", "waitForConnectionWithNSString:withInt:withAndroidOsCancellationSignal:" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnectionPool_1 = { "", "android.database.sqlite", ptrTable, methods, fields, 7, 0x8018, 2, 3, 0, -1, 1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnectionPool_1;
}

@end

void AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool_1 *self, AndroidDatabaseSqliteSQLiteConnectionPool *outer$, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *capture$0, jint capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$waiter_, capture$0);
  self->val$nonce_ = capture$1;
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnectionPool_1 *new_AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *outer$, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnectionPool_1, initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_, outer$, capture$0, capture$1)
}

AndroidDatabaseSqliteSQLiteConnectionPool_1 *create_AndroidDatabaseSqliteSQLiteConnectionPool_1_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_(AndroidDatabaseSqliteSQLiteConnectionPool *outer$, AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnectionPool_1, initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_withInt_, outer$, capture$0, capture$1)
}

@implementation AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mNext_);
  RELEASE_(mThread_);
  RELEASE_(mSql_);
  RELEASE_(mAssignedConnection_);
  RELEASE_(mException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNext_", "LAndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStartTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPriority_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWantPrimaryConnection_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mConnectionFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAssignedConnection_", "LAndroidDatabaseSqliteSQLiteConnection;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mException_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mNonce_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteConnectionPool;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter = { "ConnectionWaiter", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 1, 10, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter;
}

@end

void AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *new_AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, init)
}

AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter *create_AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnectionPool_ConnectionWaiter)

@implementation AndroidDatabaseSqliteSQLiteConstraintException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteConstraintException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConstraintException = { "SQLiteConstraintException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteConstraintException;
}

@end

void AndroidDatabaseSqliteSQLiteConstraintException_init(AndroidDatabaseSqliteSQLiteConstraintException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteConstraintException *new_AndroidDatabaseSqliteSQLiteConstraintException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConstraintException, init)
}

AndroidDatabaseSqliteSQLiteConstraintException *create_AndroidDatabaseSqliteSQLiteConstraintException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConstraintException, init)
}

void AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(AndroidDatabaseSqliteSQLiteConstraintException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteConstraintException *new_AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteConstraintException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteConstraintException *create_AndroidDatabaseSqliteSQLiteConstraintException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteConstraintException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConstraintException)

NSString *AndroidDatabaseSqliteSQLiteCursor_TAG = @"SQLiteCursor";

@implementation AndroidDatabaseSqliteSQLiteCursor

+ (NSString *)TAG {
  return AndroidDatabaseSqliteSQLiteCursor_TAG;
}

+ (jint)NO_COUNT {
  return AndroidDatabaseSqliteSQLiteCursor_NO_COUNT;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                          withAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)driver
                                                         withNSString:(NSString *)editTable
                                 withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(self, db, driver, editTable, query);
  return self;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteCursorDriver:(id<AndroidDatabaseSqliteSQLiteCursorDriver>)driver
                                                             withNSString:(NSString *)editTable
                                     withAndroidDatabaseSqliteSQLiteQuery:(AndroidDatabaseSqliteSQLiteQuery *)query {
  AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(self, driver, editTable, query);
  return self;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabase {
  return [((AndroidDatabaseSqliteSQLiteQuery *) nil_chk(mQuery_)) getDatabase];
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  if (mWindow_ == nil || newPosition < [mWindow_ getStartPosition] || newPosition >= ([((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getStartPosition] + [((AndroidDatabaseCursorWindow *) nil_chk(mWindow_)) getNumRows])) {
    AndroidDatabaseSqliteSQLiteCursor_fillWindowWithInt_(self, newPosition);
  }
  return true;
}

- (jint)getCount {
  if (mCount_ == AndroidDatabaseSqliteSQLiteCursor_NO_COUNT) {
    AndroidDatabaseSqliteSQLiteCursor_fillWindowWithInt_(self, 0);
  }
  return mCount_;
}

- (void)fillWindowWithInt:(jint)requiredPos {
  AndroidDatabaseSqliteSQLiteCursor_fillWindowWithInt_(self, requiredPos);
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  if (mColumnNameMap_ == nil) {
    IOSObjectArray *columns = mColumns_;
    jint columnCount = ((IOSObjectArray *) nil_chk(columns))->size_;
    JavaUtilHashMap *map = create_JavaUtilHashMap_initWithInt_withFloat_(columnCount, 1);
    for (jint i = 0; i < columnCount; i++) {
      [map putWithId:IOSObjectArray_Get(columns, i) withId:JavaLangInteger_valueOfWithInt_(i)];
    }
    JreStrongAssign(&mColumnNameMap_, map);
  }
  jint periodIndex = [((NSString *) nil_chk(columnName)) java_lastIndexOf:'.'];
  if (periodIndex != -1) {
    JavaLangException *e = create_JavaLangException_init();
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteCursor_TAG, JreStrcat("$$", @"requesting column name with table name -- ", columnName), e);
    columnName = [columnName java_substring:periodIndex + 1];
  }
  JavaLangInteger *i = [((id<JavaUtilMap>) nil_chk(mColumnNameMap_)) getWithId:columnName];
  if (i != nil) {
    return [i intValue];
  }
  else {
    return -1;
  }
}

- (IOSObjectArray *)getColumnNames {
  return mColumns_;
}

- (void)deactivate {
  [super deactivate];
  [((id<AndroidDatabaseSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) cursorDeactivated];
}

- (void)close {
  [super close];
  @synchronized(self) {
    [((AndroidDatabaseSqliteSQLiteQuery *) nil_chk(mQuery_)) close];
    [((id<AndroidDatabaseSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) cursorClosed];
  }
}

- (jboolean)requery {
  if ([self isClosed]) {
    return false;
  }
  @synchronized(self) {
    if (![((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk([((AndroidDatabaseSqliteSQLiteQuery *) nil_chk(mQuery_)) getDatabase])) isOpen]) {
      return false;
    }
    if (mWindow_ != nil) {
      [mWindow_ clear];
    }
    mPos_ = -1;
    mCount_ = AndroidDatabaseSqliteSQLiteCursor_NO_COUNT;
    [((id<AndroidDatabaseSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) cursorRequeriedWithAndroidDatabaseCursor:self];
  }
  @try {
    return [super requery];
  }
  @catch (JavaLangIllegalStateException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteCursor_TAG, JreStrcat("$$", @"requery() failed ", [e getMessage]), e);
    return false;
  }
}

- (void)setWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  [super setWindowWithAndroidDatabaseCursorWindow:window];
  mCount_ = AndroidDatabaseSqliteSQLiteCursor_NO_COUNT;
}

- (void)setSelectionArgumentsWithNSStringArray:(IOSObjectArray *)selectionArgs {
  [((id<AndroidDatabaseSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) setBindArgumentsWithNSStringArray:selectionArgs];
}

- (void)java_finalize {
  @try {
    if (mWindow_ != nil) {
      [self close];
    }
  }
  @finally {
    [super java_finalize];
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteCursor class]);
  RELEASE_(mEditTable_);
  RELEASE_(mColumns_);
  RELEASE_(mQuery_);
  RELEASE_(mDriver_);
  RELEASE_(mColumnNameMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  methods[1].selector = @selector(initWithAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  methods[2].selector = @selector(getDatabase);
  methods[3].selector = @selector(onMoveWithInt:withInt:);
  methods[4].selector = @selector(getCount);
  methods[5].selector = @selector(fillWindowWithInt:);
  methods[6].selector = @selector(getColumnIndexWithNSString:);
  methods[7].selector = @selector(getColumnNames);
  methods[8].selector = @selector(deactivate);
  methods[9].selector = @selector(close);
  methods[10].selector = @selector(requery);
  methods[11].selector = @selector(setWindowWithAndroidDatabaseCursorWindow:);
  methods[12].selector = @selector(setSelectionArgumentsWithNSStringArray:);
  methods[13].selector = @selector(java_finalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "NO_COUNT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteCursor_NO_COUNT, 0x18, -1, -1, -1, -1 },
    { "mEditTable_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumns_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mQuery_", "LAndroidDatabaseSqliteSQLiteQuery;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDriver_", "LAndroidDatabaseSqliteSQLiteCursorDriver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCursorWindowCapacity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColumnNameMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", (void *)&AndroidDatabaseSqliteSQLiteCursor__Annotations$0, "LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "onMove", "II", "fillWindow", "I", "getColumnIndex", "LNSString;", "setWindow", "LAndroidDatabaseCursorWindow;", "setSelectionArguments", "[LNSString;", "finalize", &AndroidDatabaseSqliteSQLiteCursor_TAG, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteCursor = { "SQLiteCursor", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteCursor;
}

@end

void AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteCursor *self, AndroidDatabaseSqliteSQLiteDatabase *db, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) {
  AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(self, driver, editTable, query);
}

AndroidDatabaseSqliteSQLiteCursor *new_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteDatabase *db, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteCursor, initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_, db, driver, editTable, query)
}

AndroidDatabaseSqliteSQLiteCursor *create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteDatabase *db, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteCursor, initWithAndroidDatabaseSqliteSQLiteDatabase_withAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_, db, driver, editTable, query)
}

void AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(AndroidDatabaseSqliteSQLiteCursor *self, id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) {
  AndroidDatabaseAbstractWindowedCursor_init(self);
  self->mCount_ = AndroidDatabaseSqliteSQLiteCursor_NO_COUNT;
  if (query == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"query object cannot be null");
  }
  JreStrongAssign(&self->mDriver_, driver);
  JreStrongAssign(&self->mEditTable_, editTable);
  JreStrongAssign(&self->mColumnNameMap_, nil);
  JreStrongAssign(&self->mQuery_, query);
  JreStrongAssign(&self->mColumns_, [query getColumnNames]);
  self->mRowIdColumnIndex_ = AndroidDatabaseDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(self->mColumns_);
}

AndroidDatabaseSqliteSQLiteCursor *new_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteCursor, initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_, driver, editTable, query)
}

AndroidDatabaseSqliteSQLiteCursor *create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(id<AndroidDatabaseSqliteSQLiteCursorDriver> driver, NSString *editTable, AndroidDatabaseSqliteSQLiteQuery *query) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteCursor, initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_, driver, editTable, query)
}

void AndroidDatabaseSqliteSQLiteCursor_fillWindowWithInt_(AndroidDatabaseSqliteSQLiteCursor *self, jint requiredPos) {
  [self clearOrCreateWindowWithNSString:[((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk([self getDatabase])) getPath]];
  @try {
    if (self->mCount_ == AndroidDatabaseSqliteSQLiteCursor_NO_COUNT) {
      jint startPos = AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(requiredPos, 0);
      self->mCount_ = [((AndroidDatabaseSqliteSQLiteQuery *) nil_chk(self->mQuery_)) fillWindowWithAndroidDatabaseCursorWindow:self->mWindow_ withInt:startPos withInt:requiredPos withBoolean:true];
      self->mCursorWindowCapacity_ = [((AndroidDatabaseCursorWindow *) nil_chk(self->mWindow_)) getNumRows];
    }
    else {
      jint startPos = AndroidDatabaseDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(requiredPos, self->mCursorWindowCapacity_);
      [((AndroidDatabaseSqliteSQLiteQuery *) nil_chk(self->mQuery_)) fillWindowWithAndroidDatabaseCursorWindow:self->mWindow_ withInt:startPos withInt:requiredPos withBoolean:false];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [self closeWindow];
    @throw ex;
  }
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteCursor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteCursor)

@implementation AndroidDatabaseSqliteSQLiteCursorDriver

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidDatabaseCursor;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSStringArray:);
  methods[1].selector = @selector(cursorDeactivated);
  methods[2].selector = @selector(cursorRequeriedWithAndroidDatabaseCursor:);
  methods[3].selector = @selector(cursorClosed);
  methods[4].selector = @selector(setBindArgumentsWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "query", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;[LNSString;", "cursorRequeried", "LAndroidDatabaseCursor;", "setBindArguments", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteCursorDriver = { "SQLiteCursorDriver", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x609, 5, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteCursorDriver;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteCursorDriver)

@implementation AndroidDatabaseSqliteSQLiteCustomFunction

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)numArgs
withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:(id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)callback {
  AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(self, name, numArgs, callback);
  return self;
}

- (void)dispatchCallbackWithNSStringArray:(IOSObjectArray *)args {
  AndroidDatabaseSqliteSQLiteCustomFunction_dispatchCallbackWithNSStringArray_(self, args);
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:);
  methods[1].selector = @selector(dispatchCallbackWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "numArgs_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "callback_", "LAndroidDatabaseSqliteSQLiteDatabase_CustomFunction;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CustomFunction;", "dispatchCallback", "[LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteCustomFunction = { "SQLiteCustomFunction", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteCustomFunction;
}

@end

void AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(AndroidDatabaseSqliteSQLiteCustomFunction *self, NSString *name, jint numArgs, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback) {
  NSObject_init(self);
  if (name == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"name must not be null.");
  }
  JreStrongAssign(&self->name_, name);
  self->numArgs_ = numArgs;
  JreStrongAssign(&self->callback_, callback);
}

AndroidDatabaseSqliteSQLiteCustomFunction *new_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(NSString *name, jint numArgs, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteCustomFunction, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_, name, numArgs, callback)
}

AndroidDatabaseSqliteSQLiteCustomFunction *create_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(NSString *name, jint numArgs, id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction> callback) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteCustomFunction, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_, name, numArgs, callback)
}

void AndroidDatabaseSqliteSQLiteCustomFunction_dispatchCallbackWithNSStringArray_(AndroidDatabaseSqliteSQLiteCustomFunction *self, IOSObjectArray *args) {
  [((id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>) nil_chk(self->callback_)) callbackWithNSStringArray:args];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteCustomFunction)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteDatabase)

@implementation AndroidDatabaseSqliteSQLiteDatabase

+ (jint)CONFLICT_ROLLBACK {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ROLLBACK;
}

+ (jint)CONFLICT_ABORT {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ABORT;
}

+ (jint)CONFLICT_FAIL {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_FAIL;
}

+ (jint)CONFLICT_IGNORE {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_IGNORE;
}

+ (jint)CONFLICT_REPLACE {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE;
}

+ (jint)CONFLICT_NONE {
  return AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE;
}

+ (jint)SQLITE_MAX_LIKE_PATTERN_LENGTH {
  return AndroidDatabaseSqliteSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH;
}

+ (jint)OPEN_READWRITE {
  return AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE;
}

+ (jint)OPEN_READONLY {
  return AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY;
}

+ (jint)NO_LOCALIZED_COLLATORS {
  return AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS;
}

+ (jint)CREATE_IF_NECESSARY {
  return AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY;
}

+ (jint)ENABLE_WRITE_AHEAD_LOGGING {
  return AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
}

+ (jint)MAX_SQL_CACHE_SIZE {
  return AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE;
}

- (instancetype __nonnull)initWithNSString:(NSString *)path
                                   withInt:(jint)openFlags
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
   withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(self, path, openFlags, cursorFactory, errorHandler);
  return self;
}

- (void)java_finalize {
  @try {
    AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

- (void)onAllReferencesReleased {
  AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, false);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, finalized);
}

+ (jint)releaseMemory {
  return AndroidDatabaseSqliteSQLiteDatabase_releaseMemory();
}

- (void)setLockingEnabledWithBoolean:(jboolean)lockingEnabled {
}

- (NSString *)getLabel {
  @synchronized(mLock_) {
    return JreRetainedLocalValue(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->label_);
  }
}

- (void)onCorruption {
  [((id<AndroidDatabaseDatabaseErrorHandler>) nil_chk(mErrorHandler_)) onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:self];
}

- (AndroidDatabaseSqliteSQLiteSession *)getThreadSession {
  return [((JavaLangThreadLocal *) nil_chk(mThreadSession_)) get];
}

- (AndroidDatabaseSqliteSQLiteSession *)createSession {
  AndroidDatabaseSqliteSQLiteConnectionPool *pool;
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    pool = JreRetainedLocalValue(mConnectionPoolLocked_);
  }
  return create_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(pool);
}

- (jint)getThreadDefaultConnectionFlagsWithBoolean:(jboolean)readOnly {
  jint flags = readOnly ? AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY : AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
  if (AndroidDatabaseSqliteSQLiteDatabase_isMainThread()) {
    flags |= AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE;
  }
  return flags;
}

+ (jboolean)isMainThread {
  return AndroidDatabaseSqliteSQLiteDatabase_isMainThread();
}

- (void)beginTransaction {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, nil, true);
}

- (void)beginTransactionNonExclusive {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, nil, false);
}

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, true);
}

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, false);
}

- (void)beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                                               withBoolean:(jboolean)exclusive {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, exclusive);
}

- (void)endTransaction {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) endTransactionWithAndroidOsCancellationSignal:nil];
  }
  @finally {
    [self releaseReference];
  }
}

- (void)setTransactionSuccessful {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) setTransactionSuccessful];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)inTransaction {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) hasTransaction];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByCurrentThread {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) hasConnection];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByOtherThreads {
  return false;
}

- (jboolean)yieldIfContended {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, false, -1);
}

- (jboolean)yieldIfContendedSafely {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, -1);
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, sleepAfterYieldDelay);
}

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, throwIfUnsafe, sleepAfterYieldDelay);
}

- (id<JavaUtilMap>)getSyncedTables {
  return create_JavaUtilHashMap_initWithInt_(0);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags {
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(path, factory, flags);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags
                          withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, flags, errorHandler);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                      withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(file, factory);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(path, factory);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(path, factory, errorHandler);
}

+ (jboolean)deleteDatabaseWithJavaIoFile:(JavaIoFile *)file {
  return AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(file);
}

- (void)reopenReadWrite {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if (!AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self)) {
      return;
    }
    jint oldOpenFlags = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_;
    mConfigurationLocked_->openFlags_ = (mConfigurationLocked_->openFlags_ & ~AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK) | AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ = oldOpenFlags;
      @throw ex;
    }
  }
}

- (void)open {
  AndroidDatabaseSqliteSQLiteDatabase_open(self);
}

- (void)openInner {
  AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(factory);
}

- (void)addCustomFunctionWithNSString:(NSString *)name
                              withInt:(jint)numArgs
withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:(id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)function {
  AndroidDatabaseSqliteSQLiteCustomFunction *wrapper = create_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(name, numArgs, function);
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    [((JavaUtilArrayList *) nil_chk(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->customFunctions_)) addWithId:wrapper];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      [mConfigurationLocked_->customFunctions_ removeWithId:wrapper];
      @throw ex;
    }
  }
}

- (jint)getVersion {
  return [JavaLangLong_valueOfWithLong_(AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA user_version;", nil)) intValue];
}

- (void)setVersionWithInt:(jint)version_ {
  [self execSQLWithNSString:JreStrcat("$I", @"PRAGMA user_version = ", version_)];
}

- (jlong)getMaximumSize {
  jlong pageCount = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA max_page_count;", nil);
  return pageCount * [self getPageSize];
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  jlong pageSize = [self getPageSize];
  jlong numPages = numBytes / pageSize;
  if ((numBytes % pageSize) != 0) {
    numPages++;
  }
  jlong newPageCount = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, JreStrcat("$J", @"PRAGMA max_page_count = ", numPages), nil);
  return newPageCount * pageSize;
}

- (jlong)getPageSize {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA page_size;", nil);
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [self execSQLWithNSString:JreStrcat("$J", @"PRAGMA page_size = ", numBytes)];
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)deletedTable {
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable {
}

+ (NSString *)findEditTableWithNSString:(NSString *)tables {
  return AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(tables);
}

- (AndroidDatabaseSqliteSQLiteStatement *)compileStatementWithNSString:(NSString *)sql {
  [self acquireReference];
  @try {
    return create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, nil);
  }
  @finally {
    [self releaseReference];
  }
}

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit withAndroidOsCancellationSignal:cancellationSignal];
}

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit
                                                                   withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  [self acquireReference];
  @try {
    NSString *sql = AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, table, columns, selection, groupBy, having, orderBy, limit);
    return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(table) withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    [self releaseReference];
  }
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:nil];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy
                                  withNSString:(NSString *)limit {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs
                  withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil withAndroidOsCancellationSignal:cancellationSignal];
}

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:editTable withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable
                                                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  [self acquireReference];
  @try {
    id<AndroidDatabaseSqliteSQLiteCursorDriver> driver = create_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(self, sql, editTable, cancellationSignal);
    return [driver queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory != nil ? cursorFactory : mCursorFactory_ withNSStringArray:selectionArgs];
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)values {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", values), e);
    return -1;
  }
}

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
}

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", initialValues), e);
    return -1;
  }
}

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
    withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE];
}

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
          withAndroidContentContentValues:(AndroidContentContentValues *)initialValues
                                  withInt:(jint)conflictAlgorithm {
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = create_JavaLangStringBuilder_init();
    [sql appendWithNSString:@"INSERT"];
    [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    [sql appendWithNSString:@" INTO "];
    [sql appendWithNSString:table];
    [sql appendWithChar:'('];
    IOSObjectArray *bindArgs = nil;
    jint size = (initialValues != nil && [initialValues size] > 0) ? [((AndroidContentContentValues *) nil_chk(initialValues)) size] : 0;
    if (size > 0) {
      bindArgs = [IOSObjectArray arrayWithLength:size type:NSObject_class_()];
      jint i = 0;
      for (NSString * __strong colName in nil_chk([((AndroidContentContentValues *) nil_chk(initialValues)) keySet])) {
        [sql appendWithNSString:(i > 0) ? @"," : @""];
        [sql appendWithNSString:colName];
        IOSObjectArray_Set(bindArgs, i++, [initialValues getWithNSString:colName]);
      }
      [sql appendWithChar:')'];
      [sql appendWithNSString:@" VALUES ("];
      for (i = 0; i < size; i++) {
        [sql appendWithNSString:(i > 0) ? @",?" : @"?"];
      }
    }
    else {
      [sql appendWithNSString:JreStrcat("$$", nullColumnHack, @") VALUES (NULL")];
    }
    [sql appendWithChar:')'];
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeInsert];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  [self acquireReference];
  @try {
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, JreStrcat("$$$", @"DELETE FROM ", table, (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause) ? JreStrcat("$$", @" WHERE ", whereClause) : @"")), whereArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)updateWithNSString:(NSString *)table
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [self updateWithOnConflictWithNSString:table withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
}

- (jint)updateWithOnConflictWithNSString:(NSString *)table
         withAndroidContentContentValues:(AndroidContentContentValues *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm {
  if (values == nil || [values size] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty values");
  }
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = create_JavaLangStringBuilder_initWithInt_(120);
    [sql appendWithNSString:@"UPDATE "];
    [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    [sql appendWithNSString:table];
    [sql appendWithNSString:@" SET "];
    jint setValuesSize = [values size];
    jint bindArgsSize = (whereArgs == nil) ? setValuesSize : (setValuesSize + ((IOSObjectArray *) nil_chk(whereArgs))->size_);
    IOSObjectArray *bindArgs = [IOSObjectArray arrayWithLength:bindArgsSize type:NSObject_class_()];
    jint i = 0;
    for (NSString * __strong colName in nil_chk([values keySet])) {
      [sql appendWithNSString:(i > 0) ? @"," : @""];
      [sql appendWithNSString:colName];
      IOSObjectArray_Set(bindArgs, i++, [values getWithNSString:colName]);
      [sql appendWithNSString:@"=?"];
    }
    if (whereArgs != nil) {
      for (i = setValuesSize; i < bindArgsSize; i++) {
        IOSObjectArray_Set(bindArgs, i, IOSObjectArray_Get(whereArgs, i - setValuesSize));
      }
    }
    if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause)) {
      [sql appendWithNSString:@" WHERE "];
      [sql appendWithNSString:whereClause];
    }
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (void)execSQLWithNSString:(NSString *)sql {
  AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, nil);
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (bindArgs == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Empty bindArgs");
  }
  AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs {
  return AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jboolean)isReadOnly {
  @synchronized(mLock_) {
    return AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self);
  }
}

- (jboolean)isReadOnlyLocked {
  return AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self);
}

- (jboolean)isInMemoryDatabase {
  @synchronized(mLock_) {
    return [((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_)) isInMemoryDb];
  }
}

- (jboolean)isOpen {
  @synchronized(mLock_) {
    return mConnectionPoolLocked_ != nil;
  }
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return newVersion > [self getVersion];
}

- (NSString *)getPath {
  return AndroidDatabaseSqliteSQLiteDatabase_getPath(self);
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"locale must not be null.");
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    JavaUtilLocale *oldLocale = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->locale_;
    JreStrongAssign(&mConfigurationLocked_->locale_, locale);
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      JreStrongAssign(&mConfigurationLocked_->locale_, oldLocale);
      @throw ex;
    }
  }
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  if (cacheSize > AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE || cacheSize < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"expected value between 0 and ", AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE));
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    jint oldMaxSqlCacheSize = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->maxSqlCacheSize_;
    mConfigurationLocked_->maxSqlCacheSize_ = cacheSize;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->maxSqlCacheSize_ = oldMaxSqlCacheSize;
      @throw ex;
    }
  }
}

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->foreignKeyConstraintsEnabled_ == enable) {
      return;
    }
    mConfigurationLocked_->foreignKeyConstraintsEnabled_ = enable;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->foreignKeyConstraintsEnabled_ = !enable;
      @throw ex;
    }
  }
}

- (jboolean)enableWriteAheadLogging {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      return true;
    }
    if (AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self)) {
      return false;
    }
    if ([mConfigurationLocked_ isInMemoryDb]) {
      AndroidUtilLog_iWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, @"can't enable WAL for memory databases.");
      return false;
    }
    if (mHasAttachedDbsLocked_) {
      if (AndroidUtilLog_isLoggableWithNSString_withInt_(AndroidDatabaseSqliteSQLiteDatabase_TAG, AndroidUtilLog_DEBUG)) {
        AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$", @"this database: ", mConfigurationLocked_->label_, @" has attached databases. can't  enable WAL."));
      }
      return false;
    }
    mConfigurationLocked_->openFlags_ |= AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ &= ~AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
  return true;
}

- (void)disableWriteAheadLogging {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) == 0) {
      return;
    }
    mConfigurationLocked_->openFlags_ &= ~AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ |= AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
}

- (jboolean)isWriteAheadLoggingEnabled {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    return (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  }
}

+ (JavaUtilArrayList *)getDbStats {
  return AndroidDatabaseSqliteSQLiteDatabase_getDbStats();
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(self, dbStatsList);
}

+ (JavaUtilArrayList *)getActiveDatabases {
  return AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases();
}

+ (void)dumpAllWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                          withBoolean:(jboolean)verbose {
  AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(printer, verbose);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(self, printer, verbose);
}

- (id<JavaUtilList>)getAttachedDbs {
  JavaUtilArrayList *attachedDbs = create_JavaUtilArrayList_init();
  @synchronized(mLock_) {
    if (mConnectionPoolLocked_ == nil) {
      return JreRetainedLocalValue(nil);
    }
    if (!mHasAttachedDbsLocked_) {
      [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_(@"main", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->path_)];
      return JreRetainedLocalValue(attachedDbs);
    }
    [self acquireReference];
  }
  @try {
    id<AndroidDatabaseCursor> c = nil;
    @try {
      c = [self rawQueryWithNSString:@"pragma database_list;" withNSStringArray:nil];
      while ([((id<AndroidDatabaseCursor>) nil_chk(c)) moveToNext]) {
        [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_([c getStringWithInt:1], [c getStringWithInt:2])];
      }
    }
    @finally {
      if (c != nil) {
        [c close];
      }
    }
    return attachedDbs;
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDatabaseIntegrityOk {
  [self acquireReference];
  @try {
    id<JavaUtilList> attachedDbs = nil;
    @try {
      attachedDbs = [self getAttachedDbs];
      if (attachedDbs == nil) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"databaselist for: ", AndroidDatabaseSqliteSQLiteDatabase_getPath(self), @" couldn't be retrieved. probably because the database is closed"));
      }
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      attachedDbs = create_JavaUtilArrayList_init();
      [attachedDbs addWithId:create_AndroidUtilPair_initWithId_withId_(@"main", AndroidDatabaseSqliteSQLiteDatabase_getPath(self))];
    }
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(attachedDbs)) size]; i++) {
      AndroidUtilPair *p = [attachedDbs getWithInt:i];
      AndroidDatabaseSqliteSQLiteStatement *prog = nil;
      @try {
        prog = [self compileStatementWithNSString:JreStrcat("$$$", @"PRAGMA ", ((AndroidUtilPair *) nil_chk(p))->first_, @".integrity_check(1);")];
        NSString *rslt = [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) simpleQueryForString];
        if (![((NSString *) nil_chk(rslt)) java_equalsIgnoreCase:@"ok"]) {
          AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$$", @"PRAGMA integrity_check on ", p->second_, @" returned: ", rslt));
          return false;
        }
      }
      @finally {
        if (prog != nil) [prog close];
      }
    }
  }
  @finally {
    [self releaseReference];
  }
  return true;
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDatabase: ", AndroidDatabaseSqliteSQLiteDatabase_getPath(self));
}

- (void)throwIfNotOpenLocked {
  AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteDatabase class]);
  RELEASE_(mThreadSession_);
  RELEASE_(mCursorFactory_);
  RELEASE_(mErrorHandler_);
  RELEASE_(mLock_);
  RELEASE_(mCloseGuardLocked_);
  RELEASE_(mConfigurationLocked_);
  RELEASE_(mConnectionPoolLocked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, 6, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 19, 20, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 21, 23, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 24, 26, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 24, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 36, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, 40, -1 },
    { NULL, "V", 0x1, 38, 41, -1, -1, 42, -1 },
    { NULL, "LNSString;", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteStatement;", 0x1, 45, 44, 46, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 49, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 50, 52, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 53, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 47, 54, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 55, 57, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 58, 59, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 58, 60, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 63, 62, 46, -1, -1, -1 },
    { NULL, "J", 0x1, 64, 62, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 65, 62, 46, -1, -1, -1 },
    { NULL, "J", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 70, 71, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 44, 46, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, 46, -1, -1, -1 },
    { NULL, "I", 0x2, 76, 75, 46, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 77, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x8, -1, -1, -1, 82, -1, -1 },
    { NULL, "V", 0x2, 83, 84, -1, 85, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, -1, -1, -1, 86, -1, -1 },
    { NULL, "V", 0x8, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 88, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 90, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 91, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[1].selector = @selector(java_finalize);
  methods[2].selector = @selector(onAllReferencesReleased);
  methods[3].selector = @selector(disposeWithBoolean:);
  methods[4].selector = @selector(releaseMemory);
  methods[5].selector = @selector(setLockingEnabledWithBoolean:);
  methods[6].selector = @selector(getLabel);
  methods[7].selector = @selector(onCorruption);
  methods[8].selector = @selector(getThreadSession);
  methods[9].selector = @selector(createSession);
  methods[10].selector = @selector(getThreadDefaultConnectionFlagsWithBoolean:);
  methods[11].selector = @selector(isMainThread);
  methods[12].selector = @selector(beginTransaction);
  methods[13].selector = @selector(beginTransactionNonExclusive);
  methods[14].selector = @selector(beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[15].selector = @selector(beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[16].selector = @selector(beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:withBoolean:);
  methods[17].selector = @selector(endTransaction);
  methods[18].selector = @selector(setTransactionSuccessful);
  methods[19].selector = @selector(inTransaction);
  methods[20].selector = @selector(isDbLockedByCurrentThread);
  methods[21].selector = @selector(isDbLockedByOtherThreads);
  methods[22].selector = @selector(yieldIfContended);
  methods[23].selector = @selector(yieldIfContendedSafely);
  methods[24].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[25].selector = @selector(yieldIfContendedHelperWithBoolean:withLong:);
  methods[26].selector = @selector(getSyncedTables);
  methods[27].selector = @selector(openDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:);
  methods[28].selector = @selector(openDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:);
  methods[29].selector = @selector(openOrCreateDatabaseWithJavaIoFile:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[30].selector = @selector(openOrCreateDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[31].selector = @selector(openOrCreateDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:);
  methods[32].selector = @selector(deleteDatabaseWithJavaIoFile:);
  methods[33].selector = @selector(reopenReadWrite);
  methods[34].selector = @selector(open);
  methods[35].selector = @selector(openInner);
  methods[36].selector = @selector(createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[37].selector = @selector(addCustomFunctionWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:);
  methods[38].selector = @selector(getVersion);
  methods[39].selector = @selector(setVersionWithInt:);
  methods[40].selector = @selector(getMaximumSize);
  methods[41].selector = @selector(setMaximumSizeWithLong:);
  methods[42].selector = @selector(getPageSize);
  methods[43].selector = @selector(setPageSizeWithLong:);
  methods[44].selector = @selector(markTableSyncableWithNSString:withNSString:);
  methods[45].selector = @selector(markTableSyncableWithNSString:withNSString:withNSString:);
  methods[46].selector = @selector(findEditTableWithNSString:);
  methods[47].selector = @selector(compileStatementWithNSString:);
  methods[48].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[49].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withAndroidOsCancellationSignal:);
  methods[50].selector = @selector(queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[51].selector = @selector(queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withAndroidOsCancellationSignal:);
  methods[52].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:);
  methods[53].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[54].selector = @selector(rawQueryWithNSString:withNSStringArray:);
  methods[55].selector = @selector(rawQueryWithNSString:withNSStringArray:withAndroidOsCancellationSignal:);
  methods[56].selector = @selector(rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:);
  methods[57].selector = @selector(rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:withAndroidOsCancellationSignal:);
  methods[58].selector = @selector(insertWithNSString:withNSString:withAndroidContentContentValues:);
  methods[59].selector = @selector(insertOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[60].selector = @selector(replaceWithNSString:withNSString:withAndroidContentContentValues:);
  methods[61].selector = @selector(replaceOrThrowWithNSString:withNSString:withAndroidContentContentValues:);
  methods[62].selector = @selector(insertWithOnConflictWithNSString:withNSString:withAndroidContentContentValues:withInt:);
  methods[63].selector = @selector(delete__WithNSString:withNSString:withNSStringArray:);
  methods[64].selector = @selector(updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:);
  methods[65].selector = @selector(updateWithOnConflictWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:withInt:);
  methods[66].selector = @selector(execSQLWithNSString:);
  methods[67].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[68].selector = @selector(executeSqlWithNSString:withNSObjectArray:);
  methods[69].selector = @selector(isReadOnly);
  methods[70].selector = @selector(isReadOnlyLocked);
  methods[71].selector = @selector(isInMemoryDatabase);
  methods[72].selector = @selector(isOpen);
  methods[73].selector = @selector(needUpgradeWithInt:);
  methods[74].selector = @selector(getPath);
  methods[75].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[76].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[77].selector = @selector(setForeignKeyConstraintsEnabledWithBoolean:);
  methods[78].selector = @selector(enableWriteAheadLogging);
  methods[79].selector = @selector(disableWriteAheadLogging);
  methods[80].selector = @selector(isWriteAheadLoggingEnabled);
  methods[81].selector = @selector(getDbStats);
  methods[82].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[83].selector = @selector(getActiveDatabases);
  methods[84].selector = @selector(dumpAllWithAndroidUtilPrinter:withBoolean:);
  methods[85].selector = @selector(dumpWithAndroidUtilPrinter:withBoolean:);
  methods[86].selector = @selector(getAttachedDbs);
  methods[87].selector = @selector(isDatabaseIntegrityOk);
  methods[88].selector = @selector(description);
  methods[89].selector = @selector(throwIfNotOpenLocked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 92, -1, -1 },
    { "EVENT_DB_CORRUPT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_EVENT_DB_CORRUPT, 0x1a, -1, -1, -1, -1 },
    { "sActiveDatabases", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0xa, -1, 93, 94, -1 },
    { "mThreadSession_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 95, -1 },
    { "mCursorFactory_", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mErrorHandler_", "LAndroidDatabaseDatabaseErrorHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCloseGuardLocked_", "LDalvikSystemCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfigurationLocked_", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionPoolLocked_", "LAndroidDatabaseSqliteSQLiteConnectionPool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasAttachedDbsLocked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CONFLICT_ROLLBACK", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ROLLBACK, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_ABORT", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ABORT, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_FAIL", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_FAIL, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_IGNORE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_IGNORE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_REPLACE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_NONE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_VALUES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 96, -1, -1 },
    { "SQLITE_MAX_LIKE_PATTERN_LENGTH", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH, 0x19, -1, -1, -1, -1 },
    { "OPEN_READWRITE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE, 0x19, -1, -1, -1, -1 },
    { "OPEN_READONLY", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY, 0x19, -1, -1, -1, -1 },
    { "OPEN_READ_MASK", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK, 0x1a, -1, -1, -1, -1 },
    { "NO_LOCALIZED_COLLATORS", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS, 0x19, -1, -1, -1, -1 },
    { "CREATE_IF_NECESSARY", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, 0x19, -1, -1, -1, -1 },
    { "ENABLE_WRITE_AHEAD_LOGGING", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING, 0x19, -1, -1, -1, -1 },
    { "MAX_SQL_CACHE_SIZE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "finalize", "LJavaLangThrowable;", "dispose", "Z", "setLockingEnabled", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$0, "getThreadDefaultConnectionFlags", "beginTransactionWithListener", "LAndroidDatabaseSqliteSQLiteTransactionListener;", "beginTransactionWithListenerNonExclusive", "beginTransaction", "LAndroidDatabaseSqliteSQLiteTransactionListener;Z", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$1, (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$2, "yieldIfContendedSafely", "J", "yieldIfContendedHelper", "ZJ", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$3, "openDatabase", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;I", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;", "openOrCreateDatabase", "LJavaIoFile;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseDatabaseErrorHandler;", "deleteDatabase", "LJavaIoFile;", "create", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "addCustomFunction", "LNSString;ILAndroidDatabaseSqliteSQLiteDatabase_CustomFunction;", "setVersion", "I", "setMaximumSize", "setPageSize", "markTableSyncable", "LNSString;LNSString;", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$4, "LNSString;LNSString;LNSString;", (void *)&AndroidDatabaseSqliteSQLiteDatabase__Annotations$5, "findEditTable", "LNSString;", "compileStatement", "LAndroidDatabaseSQLException;", "query", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;LAndroidOsCancellationSignal;", "queryWithFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;LAndroidOsCancellationSignal;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "rawQuery", "LNSString;[LNSString;", "LNSString;[LNSString;LAndroidOsCancellationSignal;", "rawQueryWithFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;LAndroidOsCancellationSignal;", "insert", "LNSString;LNSString;LAndroidContentContentValues;", "insertOrThrow", "replace", "replaceOrThrow", "insertWithOnConflict", "LNSString;LNSString;LAndroidContentContentValues;I", "delete", "LNSString;LNSString;[LNSString;", "update", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;", "updateWithOnConflict", "LNSString;LAndroidContentContentValues;LNSString;[LNSString;I", "execSQL", "LNSString;[LNSObject;", "executeSql", "needUpgrade", "setLocale", "LJavaUtilLocale;", "setMaxSqlCacheSize", "setForeignKeyConstraintsEnabled", "()Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V", "()Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDatabase;>;", "dumpAll", "LAndroidUtilPrinter;Z", "dump", "()Ljava/util/List<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;", "toString", &AndroidDatabaseSqliteSQLiteDatabase_TAG, &AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases, "Ljava/util/WeakHashMap<Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/Object;>;", "Ljava/lang/ThreadLocal<Landroid/database/sqlite/SQLiteSession;>;", &AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES, "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;LAndroidDatabaseSqliteSQLiteDatabase_CustomFunction;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase = { "SQLiteDatabase", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 90, 26, -1, 97, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteDatabase class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases, new_JavaUtilWeakHashMap_init());
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" OR ROLLBACK ", @" OR ABORT ", @" OR FAIL ", @" OR IGNORE ", @" OR REPLACE " } count:6 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteDatabase)
  }
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  JreStrongAssignAndConsume(&self->mThreadSession_, new_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(self));
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
  JreStrongAssign(&self->mCloseGuardLocked_, DalvikSystemCloseGuard_get());
  JreStrongAssign(&self->mCursorFactory_, cursorFactory);
  JreStrongAssign(&self->mErrorHandler_, errorHandler != nil ? errorHandler : create_AndroidDatabaseDefaultDatabaseErrorHandler_init());
  JreStrongAssignAndConsume(&self->mConfigurationLocked_, new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(path, openFlags));
}

AndroidDatabaseSqliteSQLiteDatabase *new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

AndroidDatabaseSqliteSQLiteDatabase *create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

void AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean finalized) {
  AndroidDatabaseSqliteSQLiteConnectionPool *pool;
  @synchronized(self->mLock_) {
    if (self->mCloseGuardLocked_ != nil) {
      if (finalized) {
        [self->mCloseGuardLocked_ warnIfOpen];
      }
      [self->mCloseGuardLocked_ close];
    }
    pool = JreRetainedLocalValue(self->mConnectionPoolLocked_);
    JreStrongAssign(&self->mConnectionPoolLocked_, nil);
  }
  if (!finalized) {
    @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
      [((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) removeWithId:self];
    }
    if (pool != nil) {
      [pool close];
    }
  }
}

jint AndroidDatabaseSqliteSQLiteDatabase_releaseMemory() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteGlobal_releaseMemory();
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_isMainThread() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  AndroidOsLooper *looper = AndroidOsLooper_myLooper();
  return looper != nil && looper == AndroidOsLooper_getMainLooper();
}

void AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jboolean exclusive) {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) beginTransactionWithInt:exclusive ? AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE : AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE withAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener withInt:[self getThreadDefaultConnectionFlagsWithBoolean:false] withAndroidOsCancellationSignal:nil];
  }
  @finally {
    [self releaseReference];
  }
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay) {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) yieldTransactionWithLong:sleepAfterYieldDelay withBoolean:throwIfUnsafe withAndroidOsCancellationSignal:nil];
  }
  @finally {
    [self releaseReference];
  }
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, flags, nil);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  AndroidDatabaseSqliteSQLiteDatabase *db = create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(path, flags, factory, errorHandler);
  AndroidDatabaseSqliteSQLiteDatabase_open(db);
  return db;
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(JavaIoFile *file, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_([((JavaIoFile *) nil_chk(file)) getPath], factory);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, nil);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, errorHandler);
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(JavaIoFile *file) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  if (file == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"file must not be null");
  }
  jboolean deleted = false;
  deleted |= [file delete__];
  deleted |= [create_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-journal")) delete__];
  deleted |= [create_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-shm")) delete__];
  deleted |= [create_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-wal")) delete__];
  JavaIoFile *dir = [file getParentFile];
  if (dir != nil) {
    NSString *prefix = JreStrcat("$$", [file getName], @"-mj");
    IOSObjectArray *files = [dir listFilesWithJavaIoFileFilter:create_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(prefix)];
    if (files != nil) {
      {
        IOSObjectArray *a__ = files;
        JavaIoFile * const *b__ = a__->buffer_;
        JavaIoFile * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaIoFile *masterJournal = *b__++;
          deleted |= [((JavaIoFile *) nil_chk(masterJournal)) delete__];
        }
      }
    }
  }
  return deleted;
}

void AndroidDatabaseSqliteSQLiteDatabase_open(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @try {
    @try {
      AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
    }
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$", @"Failed to open database '", [self getLabel], @"'."), ex);
    [self close];
    @throw ex;
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_openInner(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    JreAssert(self->mConnectionPoolLocked_ == nil, @"android/database/sqlite/SQLiteDatabase.java:803 condition failed: assert mConnectionPoolLocked == null;");
    JreStrongAssign(&self->mConnectionPoolLocked_, AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(self->mConfigurationLocked_));
    [((DalvikSystemCloseGuard *) nil_chk(self->mCloseGuardLocked_)) openWithNSString:@"close"];
  }
  @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
    [((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) putWithId:self withId:nil];
  }
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY);
}

NSString *AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(NSString *tables) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(tables)) {
    jint spacepos = [((NSString *) nil_chk(tables)) java_indexOf:' '];
    jint commapos = [tables java_indexOf:','];
    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
      return [tables java_substring:0 endIndex:spacepos];
    }
    else if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {
      return [tables java_substring:0 endIndex:commapos];
    }
    return tables;
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Invalid tables");
  }
}

jint AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs) {
  [self acquireReference];
  @try {
    if (AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql) == AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH) {
      jboolean disableWal = false;
      @synchronized(self->mLock_) {
        if (!self->mHasAttachedDbsLocked_) {
          self->mHasAttachedDbsLocked_ = true;
          disableWal = true;
        }
      }
      if (disableWal) {
        [self disableWriteAheadLogging];
      }
    }
    AndroidDatabaseSqliteSQLiteStatement *statement = create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(AndroidDatabaseSqliteSQLiteDatabase *self) {
  return (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK) == AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY;
}

NSString *AndroidDatabaseSqliteSQLiteDatabase_getPath(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    return JreRetainedLocalValue(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->path_);
  }
}

JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getDbStats() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  JavaUtilArrayList *dbStatsList = create_JavaUtilArrayList_init();
  for (AndroidDatabaseSqliteSQLiteDatabase * __strong db in nil_chk(AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases())) {
    AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(nil_chk(db), dbStatsList);
  }
  return dbStatsList;
}

void AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(AndroidDatabaseSqliteSQLiteDatabase *self, JavaUtilArrayList *dbStatsList) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [self->mConnectionPoolLocked_ collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
  }
}

JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  JavaUtilArrayList *databases = create_JavaUtilArrayList_init();
  @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
    [databases addAllWithJavaUtilCollection:[((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) keySet]];
  }
  return databases;
}

void AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(id<AndroidUtilPrinter> printer, jboolean verbose) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  for (AndroidDatabaseSqliteSQLiteDatabase * __strong db in nil_chk(AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases())) {
    AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(nil_chk(db), printer, verbose);
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidUtilPrinter> printer, jboolean verbose) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@""];
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPoolLocked_)) dumpWithAndroidUtilPrinter:printer withBoolean:verbose];
    }
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(AndroidDatabaseSqliteSQLiteDatabase *self) {
  if (self->mConnectionPoolLocked_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"The database '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->label_, @"' is not open."));
  }
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase)

@implementation AndroidDatabaseSqliteSQLiteDatabase_1

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)outer$ {
  AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, outer$);
  return self;
}

- (AndroidDatabaseSqliteSQLiteSession *)initialValue {
  return [this$0_ createSession];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;", "Ljava/lang/ThreadLocal<Landroid/database/sqlite/SQLiteSession;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_1 = { "", "android.database.sqlite", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, -1, 1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_1;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase_1 *self, AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThreadLocal_init(self);
}

AndroidDatabaseSqliteSQLiteDatabase_1 *new_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase_1, initWithAndroidDatabaseSqliteSQLiteDatabase_, outer$)
}

AndroidDatabaseSqliteSQLiteDatabase_1 *create_AndroidDatabaseSqliteSQLiteDatabase_1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase_1, initWithAndroidDatabaseSqliteSQLiteDatabase_, outer$)
}

@implementation AndroidDatabaseSqliteSQLiteDatabase_2

- (instancetype __nonnull)initWithNSString:(NSString *)capture$0 {
  AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate {
  return [((NSString *) nil_chk([((JavaIoFile *) nil_chk(candidate)) getName])) java_hasPrefix:val$prefix_];
}

- (void)dealloc {
  RELEASE_(val$prefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(acceptWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$prefix_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaIoFile;", "LAndroidDatabaseSqliteSQLiteDatabase;", "deleteDatabaseWithJavaIoFile:" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_2 = { "", "android.database.sqlite", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_2;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabase_2 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$prefix_, capture$0);
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteDatabase_2 *new_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase_2, initWithNSString_, capture$0)
}

AndroidDatabaseSqliteSQLiteDatabase_2 *create_AndroidDatabaseSqliteSQLiteDatabase_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase_2, initWithNSString_, capture$0)
}

@implementation AndroidDatabaseSqliteSQLiteDatabase_CursorFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidDatabaseCursor;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newCursor", "LAndroidDatabaseSqliteSQLiteDatabase;LAndroidDatabaseSqliteSQLiteCursorDriver;LNSString;LAndroidDatabaseSqliteSQLiteQuery;", "LAndroidDatabaseSqliteSQLiteDatabase;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_CursorFactory = { "CursorFactory", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_CursorFactory)

@implementation AndroidDatabaseSqliteSQLiteDatabase_CustomFunction

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(callbackWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "callback", "[LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_CustomFunction = { "CustomFunction", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabase_CustomFunction;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_CustomFunction)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)

NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH = @":memory:";

@implementation AndroidDatabaseSqliteSQLiteDatabaseConfiguration

+ (NSString *)MEMORY_DB_PATH {
  return AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH;
}

- (instancetype __nonnull)initWithNSString:(NSString *)path
                                   withInt:(jint)openFlags {
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(self, path, openFlags);
  return self;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)other {
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(self, other);
  return self;
}

- (void)updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)other {
  if (other == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"other must not be null.");
  }
  if (![((NSString *) nil_chk(path_)) isEqual:other->path_]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"other configuration must refer to the same database.");
  }
  openFlags_ = other->openFlags_;
  maxSqlCacheSize_ = other->maxSqlCacheSize_;
  JreStrongAssign(&locale_, other->locale_);
  foreignKeyConstraintsEnabled_ = other->foreignKeyConstraintsEnabled_;
  [((JavaUtilArrayList *) nil_chk(customFunctions_)) clear];
  [customFunctions_ addAllWithJavaUtilCollection:other->customFunctions_];
}

- (jboolean)isInMemoryDb {
  return [((NSString *) nil_chk(path_)) java_equalsIgnoreCase:AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH];
}

+ (NSString *)stripPathForLogsWithNSString:(NSString *)path {
  return AndroidDatabaseSqliteSQLiteDatabaseConfiguration_stripPathForLogsWithNSString_(path);
}

- (void)dealloc {
  RELEASE_(path_);
  RELEASE_(label_);
  RELEASE_(locale_);
  RELEASE_(customFunctions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[2].selector = @selector(updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:);
  methods[3].selector = @selector(isInMemoryDb);
  methods[4].selector = @selector(stripPathForLogsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMAIL_IN_DB_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "MEMORY_DB_PATH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "label_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "openFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxSqlCacheSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "foreignKeyConstraintsEnabled_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "customFunctions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "LAndroidDatabaseSqliteSQLiteDatabaseConfiguration;", "updateParametersFrom", "stripPathForLogs", "LNSString;", &AndroidDatabaseSqliteSQLiteDatabaseConfiguration_EMAIL_IN_DB_PATTERN, &AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH, "Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteCustomFunction;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabaseConfiguration = { "SQLiteDatabaseConfiguration", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 5, 9, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabaseConfiguration;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteDatabaseConfiguration class]) {
    JreStrongAssign(&AndroidDatabaseSqliteSQLiteDatabaseConfiguration_EMAIL_IN_DB_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\w\\.\\-]+@[\\w\\.\\-]+"));
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)
  }
}

@end

void AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *self, NSString *path, jint openFlags) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->customFunctions_, new_JavaUtilArrayList_init());
  if (path == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"path must not be null.");
  }
  JreStrongAssign(&self->path_, path);
  JreStrongAssign(&self->label_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration_stripPathForLogsWithNSString_(path));
  self->openFlags_ = openFlags;
  self->maxSqlCacheSize_ = 25;
  JreStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
}

AndroidDatabaseSqliteSQLiteDatabaseConfiguration *new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, initWithNSString_withInt_, path, openFlags)
}

AndroidDatabaseSqliteSQLiteDatabaseConfiguration *create_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, initWithNSString_withInt_, path, openFlags)
}

void AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *self, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->customFunctions_, new_JavaUtilArrayList_init());
  if (other == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"other must not be null.");
  }
  JreStrongAssign(&self->path_, other->path_);
  JreStrongAssign(&self->label_, other->label_);
  [self updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:other];
}

AndroidDatabaseSqliteSQLiteDatabaseConfiguration *new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_, other)
}

AndroidDatabaseSqliteSQLiteDatabaseConfiguration *create_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *other) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabaseConfiguration, initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_, other)
}

NSString *AndroidDatabaseSqliteSQLiteDatabaseConfiguration_stripPathForLogsWithNSString_(NSString *path) {
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initialize();
  if ([((NSString *) nil_chk(path)) java_indexOf:'@'] == -1) {
    return path;
  }
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidDatabaseSqliteSQLiteDatabaseConfiguration_EMAIL_IN_DB_PATTERN)) matcherWithJavaLangCharSequence:path])) replaceAllWithNSString:@"XX@YY"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabaseConfiguration)

@implementation AndroidDatabaseSqliteSQLiteDatabaseCorruptException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabaseCorruptException = { "SQLiteDatabaseCorruptException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabaseCorruptException;
}

@end

void AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init(AndroidDatabaseSqliteSQLiteDatabaseCorruptException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteDatabaseCorruptException *new_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabaseCorruptException, init)
}

AndroidDatabaseSqliteSQLiteDatabaseCorruptException *create_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabaseCorruptException, init)
}

void AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabaseCorruptException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteDatabaseCorruptException *new_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabaseCorruptException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteDatabaseCorruptException *create_AndroidDatabaseSqliteSQLiteDatabaseCorruptException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabaseCorruptException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabaseCorruptException)

@implementation AndroidDatabaseSqliteSQLiteDatabaseLockedException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteDatabaseLockedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabaseLockedException = { "SQLiteDatabaseLockedException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatabaseLockedException;
}

@end

void AndroidDatabaseSqliteSQLiteDatabaseLockedException_init(AndroidDatabaseSqliteSQLiteDatabaseLockedException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteDatabaseLockedException *new_AndroidDatabaseSqliteSQLiteDatabaseLockedException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabaseLockedException, init)
}

AndroidDatabaseSqliteSQLiteDatabaseLockedException *create_AndroidDatabaseSqliteSQLiteDatabaseLockedException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabaseLockedException, init)
}

void AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabaseLockedException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteDatabaseLockedException *new_AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabaseLockedException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteDatabaseLockedException *create_AndroidDatabaseSqliteSQLiteDatabaseLockedException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabaseLockedException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabaseLockedException)

@implementation AndroidDatabaseSqliteSQLiteDatatypeMismatchException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatatypeMismatchException = { "SQLiteDatatypeMismatchException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDatatypeMismatchException;
}

@end

void AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init(AndroidDatabaseSqliteSQLiteDatatypeMismatchException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteDatatypeMismatchException *new_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatatypeMismatchException, init)
}

AndroidDatabaseSqliteSQLiteDatatypeMismatchException *create_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatatypeMismatchException, init)
}

void AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(AndroidDatabaseSqliteSQLiteDatatypeMismatchException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteDatatypeMismatchException *new_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatatypeMismatchException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteDatatypeMismatchException *create_AndroidDatabaseSqliteSQLiteDatatypeMismatchException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatatypeMismatchException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatatypeMismatchException)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteDebug)

jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG;
jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS;
jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME;

@implementation AndroidDatabaseSqliteSQLiteDebug

+ (jboolean)DEBUG_SQL_LOG {
  return AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG;
}

+ (jboolean)DEBUG_SQL_STATEMENTS {
  return AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS;
}

+ (jboolean)DEBUG_SQL_TIME {
  return AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME;
}

+ (jboolean)DEBUG_LOG_SLOW_QUERIES {
  return AndroidDatabaseSqliteSQLiteDebug_DEBUG_LOG_SLOW_QUERIES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteDebug_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)shouldLogSlowQueryWithLong:(jlong)elapsedTimeMillis {
  return AndroidDatabaseSqliteSQLiteDebug_shouldLogSlowQueryWithLong_(elapsedTimeMillis);
}

+ (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                 withNSStringArray:(IOSObjectArray *)args {
  AndroidDatabaseSqliteSQLiteDebug_dumpWithAndroidUtilPrinter_withNSStringArray_(printer, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(shouldLogSlowQueryWithLong:);
  methods[2].selector = @selector(dumpWithAndroidUtilPrinter:withNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG_SQL_LOG", "Z", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "DEBUG_SQL_STATEMENTS", "Z", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "DEBUG_SQL_TIME", "Z", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "DEBUG_LOG_SLOW_QUERIES", "Z", .constantValue.asBOOL = AndroidDatabaseSqliteSQLiteDebug_DEBUG_LOG_SLOW_QUERIES, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "shouldLogSlowQuery", "J", "dump", "LAndroidUtilPrinter;[LNSString;", &AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG, &AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS, &AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME, "LAndroidDatabaseSqliteSQLiteDebug_DbStats;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDebug = { "SQLiteDebug", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, 7, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDebug;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteDebug class]) {
    AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteLog", AndroidUtilLog_VERBOSE);
    AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteStatements", AndroidUtilLog_VERBOSE);
    AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteTime", AndroidUtilLog_VERBOSE);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteDebug)
  }
}

@end

void AndroidDatabaseSqliteSQLiteDebug_init(AndroidDatabaseSqliteSQLiteDebug *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteDebug *new_AndroidDatabaseSqliteSQLiteDebug_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDebug, init)
}

AndroidDatabaseSqliteSQLiteDebug *create_AndroidDatabaseSqliteSQLiteDebug_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDebug, init)
}

jboolean AndroidDatabaseSqliteSQLiteDebug_shouldLogSlowQueryWithLong_(jlong elapsedTimeMillis) {
  AndroidDatabaseSqliteSQLiteDebug_initialize();
  return false;
}

void AndroidDatabaseSqliteSQLiteDebug_dumpWithAndroidUtilPrinter_withNSStringArray_(id<AndroidUtilPrinter> printer, IOSObjectArray *args) {
  AndroidDatabaseSqliteSQLiteDebug_initialize();
  jboolean verbose = false;
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      if ([((NSString *) nil_chk(arg)) isEqual:@"-v"]) {
        verbose = true;
      }
    }
  }
  AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(printer, verbose);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDebug)

@implementation AndroidDatabaseSqliteSQLiteDebug_DbStats

- (instancetype __nonnull)initWithNSString:(NSString *)dbName
                                  withLong:(jlong)pageCount
                                  withLong:(jlong)pageSize
                                   withInt:(jint)lookaside
                                   withInt:(jint)hits
                                   withInt:(jint)misses
                                   withInt:(jint)cachesize {
  AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(self, dbName, pageCount, pageSize, lookaside, hits, misses, cachesize);
  return self;
}

- (void)dealloc {
  RELEASE_(dbName_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLong:withLong:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dbName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pageSize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dbSize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lookaside_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "cache_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;JJIIII", "LAndroidDatabaseSqliteSQLiteDebug;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDebug_DbStats = { "DbStats", "android.database.sqlite", ptrTable, methods, fields, 7, 0x9, 1, 5, 1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDebug_DbStats;
}

@end

void AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(AndroidDatabaseSqliteSQLiteDebug_DbStats *self, NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) {
  NSObject_init(self);
  JreStrongAssign(&self->dbName_, dbName);
  self->pageSize_ = pageSize / 1024;
  self->dbSize_ = (pageCount * pageSize) / 1024;
  self->lookaside_ = lookaside;
  JreStrongAssign(&self->cache_, JreStrcat("ICICI", hits, '/', misses, '/', cachesize));
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *new_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDebug_DbStats, initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_, dbName, pageCount, pageSize, lookaside, hits, misses, cachesize)
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDebug_DbStats, initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_, dbName, pageCount, pageSize, lookaside, hits, misses, cachesize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDebug_DbStats)

@implementation AndroidDatabaseSqliteSQLiteDirectCursorDriver

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)sql
                                                         withNSString:(NSString *)editTable
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(self, db, sql, editTable, cancellationSignal);
  return self;
}

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                                      withNSStringArray:(IOSObjectArray *)selectionArgs {
  AndroidDatabaseSqliteSQLiteQuery *query = create_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(mDatabase_, mSql_, mCancellationSignal_);
  id<AndroidDatabaseCursor> cursor;
  @try {
    [query bindAllArgsAsStringsWithNSStringArray:selectionArgs];
    if (factory == nil) {
      cursor = create_AndroidDatabaseSqliteSQLiteCursor_initWithAndroidDatabaseSqliteSQLiteCursorDriver_withNSString_withAndroidDatabaseSqliteSQLiteQuery_(self, mEditTable_, query);
    }
    else {
      cursor = [factory newCursorWithAndroidDatabaseSqliteSQLiteDatabase:mDatabase_ withAndroidDatabaseSqliteSQLiteCursorDriver:self withNSString:mEditTable_ withAndroidDatabaseSqliteSQLiteQuery:query];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [query close];
    @throw ex;
  }
  JreStrongAssign(&mQuery_, query);
  return cursor;
}

- (void)cursorClosed {
}

- (void)setBindArgumentsWithNSStringArray:(IOSObjectArray *)bindArgs {
  [((AndroidDatabaseSqliteSQLiteQuery *) nil_chk(mQuery_)) bindAllArgsAsStringsWithNSStringArray:bindArgs];
}

- (void)cursorDeactivated {
}

- (void)cursorRequeriedWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDirectCursorDriver: ", mSql_);
}

- (void)dealloc {
  RELEASE_(mDatabase_);
  RELEASE_(mEditTable_);
  RELEASE_(mSql_);
  RELEASE_(mCancellationSignal_);
  RELEASE_(mQuery_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSString:withAndroidOsCancellationSignal:);
  methods[1].selector = @selector(queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSStringArray:);
  methods[2].selector = @selector(cursorClosed);
  methods[3].selector = @selector(setBindArgumentsWithNSStringArray:);
  methods[4].selector = @selector(cursorDeactivated);
  methods[5].selector = @selector(cursorRequeriedWithAndroidDatabaseCursor:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDatabase_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mEditTable_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCancellationSignal_", "LAndroidOsCancellationSignal;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mQuery_", "LAndroidDatabaseSqliteSQLiteQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LNSString;LAndroidOsCancellationSignal;", "query", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;[LNSString;", "setBindArguments", "[LNSString;", "cursorRequeried", "LAndroidDatabaseCursor;", "toString" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDirectCursorDriver = { "SQLiteDirectCursorDriver", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 7, 5, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDirectCursorDriver;
}

@end

void AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDirectCursorDriver *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, NSString *editTable, AndroidOsCancellationSignal *cancellationSignal) {
  NSObject_init(self);
  JreStrongAssign(&self->mDatabase_, db);
  JreStrongAssign(&self->mEditTable_, editTable);
  JreStrongAssign(&self->mSql_, sql);
  JreStrongAssign(&self->mCancellationSignal_, cancellationSignal);
}

AndroidDatabaseSqliteSQLiteDirectCursorDriver *new_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, NSString *editTable, AndroidOsCancellationSignal *cancellationSignal) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDirectCursorDriver, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_, db, sql, editTable, cancellationSignal)
}

AndroidDatabaseSqliteSQLiteDirectCursorDriver *create_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, NSString *editTable, AndroidOsCancellationSignal *cancellationSignal) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDirectCursorDriver, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_withAndroidOsCancellationSignal_, db, sql, editTable, cancellationSignal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDirectCursorDriver)

@implementation AndroidDatabaseSqliteSQLiteDiskIOException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteDiskIOException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDiskIOException = { "SQLiteDiskIOException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDiskIOException;
}

@end

void AndroidDatabaseSqliteSQLiteDiskIOException_init(AndroidDatabaseSqliteSQLiteDiskIOException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteDiskIOException *new_AndroidDatabaseSqliteSQLiteDiskIOException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDiskIOException, init)
}

AndroidDatabaseSqliteSQLiteDiskIOException *create_AndroidDatabaseSqliteSQLiteDiskIOException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDiskIOException, init)
}

void AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(AndroidDatabaseSqliteSQLiteDiskIOException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteDiskIOException *new_AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDiskIOException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteDiskIOException *create_AndroidDatabaseSqliteSQLiteDiskIOException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDiskIOException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDiskIOException)

@implementation AndroidDatabaseSqliteSQLiteDoneException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteDoneException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDoneException = { "SQLiteDoneException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteDoneException;
}

@end

void AndroidDatabaseSqliteSQLiteDoneException_init(AndroidDatabaseSqliteSQLiteDoneException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteDoneException *new_AndroidDatabaseSqliteSQLiteDoneException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDoneException, init)
}

AndroidDatabaseSqliteSQLiteDoneException *create_AndroidDatabaseSqliteSQLiteDoneException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDoneException, init)
}

void AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(AndroidDatabaseSqliteSQLiteDoneException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteDoneException *new_AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDoneException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteDoneException *create_AndroidDatabaseSqliteSQLiteDoneException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDoneException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDoneException)

@implementation AndroidDatabaseSqliteSQLiteFullException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteFullException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteFullException = { "SQLiteFullException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteFullException;
}

@end

void AndroidDatabaseSqliteSQLiteFullException_init(AndroidDatabaseSqliteSQLiteFullException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteFullException *new_AndroidDatabaseSqliteSQLiteFullException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteFullException, init)
}

AndroidDatabaseSqliteSQLiteFullException *create_AndroidDatabaseSqliteSQLiteFullException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteFullException, init)
}

void AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(AndroidDatabaseSqliteSQLiteFullException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteFullException *new_AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteFullException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteFullException *create_AndroidDatabaseSqliteSQLiteFullException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteFullException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteFullException)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteGlobal)

@implementation AndroidDatabaseSqliteSQLiteGlobal

+ (jint)nativeReleaseMemory {
  return AndroidDatabaseSqliteSQLiteGlobal_nativeReleaseMemory();
}

+ (void)initStatics {
  AndroidDatabaseSqliteSQLiteGlobal_initStatics();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteGlobal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)releaseMemory {
  return AndroidDatabaseSqliteSQLiteGlobal_releaseMemory();
}

+ (jint)getDefaultPageSize {
  return AndroidDatabaseSqliteSQLiteGlobal_getDefaultPageSize();
}

+ (NSString *)getDefaultJournalMode {
  return AndroidDatabaseSqliteSQLiteGlobal_getDefaultJournalMode();
}

+ (jint)getJournalSizeLimit {
  return AndroidDatabaseSqliteSQLiteGlobal_getJournalSizeLimit();
}

+ (NSString *)getDefaultSyncMode {
  return AndroidDatabaseSqliteSQLiteGlobal_getDefaultSyncMode();
}

+ (NSString *)getWALSyncMode {
  return AndroidDatabaseSqliteSQLiteGlobal_getWALSyncMode();
}

+ (jint)getWALAutoCheckpoint {
  return AndroidDatabaseSqliteSQLiteGlobal_getWALAutoCheckpoint();
}

+ (jint)getWALConnectionPoolSize {
  return AndroidDatabaseSqliteSQLiteGlobal_getWALConnectionPoolSize();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nativeReleaseMemory);
  methods[1].selector = @selector(initStatics);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(releaseMemory);
  methods[4].selector = @selector(getDefaultPageSize);
  methods[5].selector = @selector(getDefaultJournalMode);
  methods[6].selector = @selector(getJournalSizeLimit);
  methods[7].selector = @selector(getDefaultSyncMode);
  methods[8].selector = @selector(getWALSyncMode);
  methods[9].selector = @selector(getWALAutoCheckpoint);
  methods[10].selector = @selector(getWALConnectionPoolSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
    { "sLock", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "sDefaultPageSize", "I", .constantValue.asLong = 0, 0xa, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { &AndroidDatabaseSqliteSQLiteGlobal_TAG, &AndroidDatabaseSqliteSQLiteGlobal_sLock, &AndroidDatabaseSqliteSQLiteGlobal_sDefaultPageSize };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteGlobal = { "SQLiteGlobal", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 11, 3, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteGlobal;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteGlobal class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteGlobal_sLock, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteGlobal)
  }
}

@end

JNIEXPORT jint Java_android_database_sqlite_SQLiteGlobal_nativeReleaseMemory(JNIEnv *_env_, jclass _cls_);

jint AndroidDatabaseSqliteSQLiteGlobal_nativeReleaseMemory() {
  return Java_android_database_sqlite_SQLiteGlobal_nativeReleaseMemory(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteGlobal_class_());
}

JNIEXPORT void Java_android_database_sqlite_SQLiteGlobal_initStatics(JNIEnv *_env_, jclass _cls_);

void AndroidDatabaseSqliteSQLiteGlobal_initStatics() {
  Java_android_database_sqlite_SQLiteGlobal_initStatics(&J2ObjC_JNIEnv, AndroidDatabaseSqliteSQLiteGlobal_class_());
}

void AndroidDatabaseSqliteSQLiteGlobal_init(AndroidDatabaseSqliteSQLiteGlobal *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteGlobal *new_AndroidDatabaseSqliteSQLiteGlobal_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteGlobal, init)
}

AndroidDatabaseSqliteSQLiteGlobal *create_AndroidDatabaseSqliteSQLiteGlobal_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteGlobal, init)
}

jint AndroidDatabaseSqliteSQLiteGlobal_releaseMemory() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  return AndroidDatabaseSqliteSQLiteGlobal_nativeReleaseMemory();
}

jint AndroidDatabaseSqliteSQLiteGlobal_getDefaultPageSize() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  return 1024;
}

NSString *AndroidDatabaseSqliteSQLiteGlobal_getDefaultJournalMode() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  return @"delete";
}

jint AndroidDatabaseSqliteSQLiteGlobal_getJournalSizeLimit() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  return 10000;
}

NSString *AndroidDatabaseSqliteSQLiteGlobal_getDefaultSyncMode() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  return @"normal";
}

NSString *AndroidDatabaseSqliteSQLiteGlobal_getWALSyncMode() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  return @"normal";
}

jint AndroidDatabaseSqliteSQLiteGlobal_getWALAutoCheckpoint() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  jint value = 1000;
  return JavaLangMath_maxWithInt_withInt_(1, value);
}

jint AndroidDatabaseSqliteSQLiteGlobal_getWALConnectionPoolSize() {
  AndroidDatabaseSqliteSQLiteGlobal_initialize();
  jint value = 10;
  return JavaLangMath_maxWithInt_withInt_(2, value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteGlobal)

@implementation AndroidDatabaseSqliteSQLiteMisuseException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteMisuseException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteMisuseException = { "SQLiteMisuseException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteMisuseException;
}

@end

void AndroidDatabaseSqliteSQLiteMisuseException_init(AndroidDatabaseSqliteSQLiteMisuseException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteMisuseException *new_AndroidDatabaseSqliteSQLiteMisuseException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteMisuseException, init)
}

AndroidDatabaseSqliteSQLiteMisuseException *create_AndroidDatabaseSqliteSQLiteMisuseException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteMisuseException, init)
}

void AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(AndroidDatabaseSqliteSQLiteMisuseException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteMisuseException *new_AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteMisuseException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteMisuseException *create_AndroidDatabaseSqliteSQLiteMisuseException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteMisuseException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteMisuseException)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteOpenHelper)

@implementation AndroidDatabaseSqliteSQLiteOpenHelper

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext *)context
                                           withNSString:(NSString *)name
  withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                withInt:(jint)version_ {
  AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(self, context, name, factory, version_);
  return self;
}

- (instancetype __nonnull)initWithAndroidContentContext:(AndroidContentContext *)context
                                           withNSString:(NSString *)name
  withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                withInt:(jint)version_
                withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(self, context, name, factory, version_, errorHandler);
  return self;
}

- (NSString *)getDatabaseName {
  return mName_;
}

- (void)setWriteAheadLoggingEnabledWithBoolean:(jboolean)enabled {
  @synchronized(self) {
    if (mEnableWriteAheadLogging_ != enabled) {
      if (mDatabase_ != nil && [mDatabase_ isOpen] && ![((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) isReadOnly]) {
        if (enabled) {
          [mDatabase_ enableWriteAheadLogging];
        }
        else {
          [mDatabase_ disableWriteAheadLogging];
        }
      }
      mEnableWriteAheadLogging_ = enabled;
    }
  }
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getWritableDatabase {
  @synchronized(self) {
    return JreRetainedLocalValue(AndroidDatabaseSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(self, true));
  }
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getReadableDatabase {
  @synchronized(self) {
    return JreRetainedLocalValue(AndroidDatabaseSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(self, false));
  }
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabaseLockedWithBoolean:(jboolean)writable {
  return AndroidDatabaseSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(self, writable);
}

- (void)close {
  @synchronized(self) {
    if (mIsInitializing_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Closed during initialization");
    if (mDatabase_ != nil && [mDatabase_ isOpen]) {
      [mDatabase_ close];
      JreStrongAssign(&mDatabase_, nil);
    }
  }
}

- (void)onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
}

- (void)onCreateWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withInt:(jint)oldVersion
                                                   withInt:(jint)newVersion {
  @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(JreStrcat("$I$I", @"Can't downgrade database from version ", oldVersion, @" to ", newVersion));
}

- (void)onOpenWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
}

- (void)dealloc {
  RELEASE_(mContext_);
  RELEASE_(mName_);
  RELEASE_(mFactory_);
  RELEASE_(mDatabase_);
  RELEASE_(mErrorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:);
  methods[1].selector = @selector(initWithAndroidContentContext:withNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:);
  methods[2].selector = @selector(getDatabaseName);
  methods[3].selector = @selector(setWriteAheadLoggingEnabledWithBoolean:);
  methods[4].selector = @selector(getWritableDatabase);
  methods[5].selector = @selector(getReadableDatabase);
  methods[6].selector = @selector(getDatabaseLockedWithBoolean:);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[9].selector = @selector(onCreateWithAndroidDatabaseSqliteSQLiteDatabase:);
  methods[10].selector = @selector(onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:withInt:withInt:);
  methods[11].selector = @selector(onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:withInt:withInt:);
  methods[12].selector = @selector(onOpenWithAndroidDatabaseSqliteSQLiteDatabase:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "DEBUG_STRICT_READONLY", "Z", .constantValue.asBOOL = AndroidDatabaseSqliteSQLiteOpenHelper_DEBUG_STRICT_READONLY, 0x1a, -1, -1, -1, -1 },
    { "mContext_", "LAndroidContentContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mFactory_", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNewVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDatabase_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsInitializing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEnableWriteAheadLogging_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mErrorHandler_", "LAndroidDatabaseDatabaseErrorHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidContentContext;LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;I", "LAndroidContentContext;LNSString;LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;ILAndroidDatabaseDatabaseErrorHandler;", "setWriteAheadLoggingEnabled", "Z", "getDatabaseLocked", "onConfigure", "LAndroidDatabaseSqliteSQLiteDatabase;", "onCreate", "onUpgrade", "LAndroidDatabaseSqliteSQLiteDatabase;II", "onDowngrade", "onOpen", &AndroidDatabaseSqliteSQLiteOpenHelper_TAG };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteOpenHelper = { "SQLiteOpenHelper", "android.database.sqlite", ptrTable, methods, fields, 7, 0x401, 13, 10, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteOpenHelper;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteOpenHelper class]) {
    JreStrongAssign(&AndroidDatabaseSqliteSQLiteOpenHelper_TAG, [AndroidDatabaseSqliteSQLiteOpenHelper_class_() getSimpleName]);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteOpenHelper)
  }
}

@end

void AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(AndroidDatabaseSqliteSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_) {
  AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(self, context, name, factory, version_, nil);
}

void AndroidDatabaseSqliteSQLiteOpenHelper_initWithAndroidContentContext_withNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteOpenHelper *self, AndroidContentContext *context, NSString *name, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  NSObject_init(self);
  if (version_ < 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Version must be >= 1, was ", version_));
  JreStrongAssign(&self->mContext_, context);
  JreStrongAssign(&self->mName_, name);
  JreStrongAssign(&self->mFactory_, factory);
  self->mNewVersion_ = version_;
  JreStrongAssign(&self->mErrorHandler_, errorHandler);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(AndroidDatabaseSqliteSQLiteOpenHelper *self, jboolean writable) {
  if (self->mDatabase_ != nil) {
    if (![self->mDatabase_ isOpen]) {
      JreStrongAssign(&self->mDatabase_, nil);
    }
    else if (!writable || ![((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(self->mDatabase_)) isReadOnly]) {
      return self->mDatabase_;
    }
  }
  if (self->mIsInitializing_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"getDatabase called recursively");
  }
  AndroidDatabaseSqliteSQLiteDatabase *db = self->mDatabase_;
  @try {
    self->mIsInitializing_ = true;
    if (db != nil) {
      if (writable && [db isReadOnly]) {
        [db reopenReadWrite];
      }
    }
    else if (self->mName_ == nil) {
      db = AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(nil);
    }
    else {
      @try {
        {
          db = [((AndroidContentContext *) nil_chk(self->mContext_)) openOrCreateDatabaseWithNSString:self->mName_ withInt:self->mEnableWriteAheadLogging_ ? AndroidContentContext_MODE_ENABLE_WRITE_AHEAD_LOGGING : 0 withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:self->mFactory_ withAndroidDatabaseDatabaseErrorHandler:self->mErrorHandler_];
        }
      }
      @catch (AndroidDatabaseSqliteSQLiteException *ex) {
        if (writable) {
          @throw ex;
        }
        AndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(AndroidDatabaseSqliteSQLiteOpenHelper_TAG, JreStrcat("$$$", @"Couldn't open ", self->mName_, @" for writing (will try read-only):"), ex);
        NSString *path = [((JavaIoFile *) nil_chk([self->mContext_ getDatabasePathWithNSString:self->mName_])) getPath];
        db = AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, self->mFactory_, AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY, self->mErrorHandler_);
      }
    }
    [self onConfigureWithAndroidDatabaseSqliteSQLiteDatabase:db];
    jint version_ = [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) getVersion];
    if (version_ != self->mNewVersion_) {
      if ([db isReadOnly]) {
        @throw create_AndroidDatabaseSqliteSQLiteException_initWithNSString_(JreStrcat("$I$I$$", @"Can't upgrade read-only database from version ", [db getVersion], @" to ", self->mNewVersion_, @": ", self->mName_));
      }
      [db beginTransaction];
      @try {
        if (version_ == 0) {
          [self onCreateWithAndroidDatabaseSqliteSQLiteDatabase:db];
        }
        else {
          if (version_ > self->mNewVersion_) {
            [self onDowngradeWithAndroidDatabaseSqliteSQLiteDatabase:db withInt:version_ withInt:self->mNewVersion_];
          }
          else {
            [self onUpgradeWithAndroidDatabaseSqliteSQLiteDatabase:db withInt:version_ withInt:self->mNewVersion_];
          }
        }
        [db setVersionWithInt:self->mNewVersion_];
        [db setTransactionSuccessful];
      }
      @finally {
        [db endTransaction];
      }
    }
    [self onOpenWithAndroidDatabaseSqliteSQLiteDatabase:db];
    if ([db isReadOnly]) {
      AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteOpenHelper_TAG, JreStrcat("$$$", @"Opened ", self->mName_, @" in read-only mode"));
    }
    JreStrongAssign(&self->mDatabase_, db);
    return db;
  }
  @finally {
    self->mIsInitializing_ = false;
    if (db != nil && db != self->mDatabase_) {
      [db close];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteOpenHelper)

@implementation AndroidDatabaseSqliteSQLiteOutOfMemoryException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteOutOfMemoryException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteOutOfMemoryException = { "SQLiteOutOfMemoryException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteOutOfMemoryException;
}

@end

void AndroidDatabaseSqliteSQLiteOutOfMemoryException_init(AndroidDatabaseSqliteSQLiteOutOfMemoryException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteOutOfMemoryException *new_AndroidDatabaseSqliteSQLiteOutOfMemoryException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteOutOfMemoryException, init)
}

AndroidDatabaseSqliteSQLiteOutOfMemoryException *create_AndroidDatabaseSqliteSQLiteOutOfMemoryException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteOutOfMemoryException, init)
}

void AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(AndroidDatabaseSqliteSQLiteOutOfMemoryException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteOutOfMemoryException *new_AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteOutOfMemoryException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteOutOfMemoryException *create_AndroidDatabaseSqliteSQLiteOutOfMemoryException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteOutOfMemoryException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteOutOfMemoryException)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteProgram)

@implementation AndroidDatabaseSqliteSQLiteProgram

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)sql
                                                    withNSObjectArray:(IOSObjectArray *)bindArgs
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignalForPrepare {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(self, db, sql, bindArgs, cancellationSignalForPrepare);
  return self;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabase {
  return mDatabase_;
}

- (NSString *)getSql {
  return mSql_;
}

- (IOSObjectArray *)getBindArgs {
  return mBindArgs_;
}

- (IOSObjectArray *)getColumnNames {
  return mColumnNames_;
}

- (AndroidDatabaseSqliteSQLiteSession *)getSession {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) getThreadSession];
}

- (jint)getConnectionFlags {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) getThreadDefaultConnectionFlagsWithBoolean:mReadOnly_];
}

- (void)onCorruption {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) onCorruption];
}

- (jint)getUniqueId {
  return -1;
}

- (void)bindNullWithInt:(jint)index {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, nil);
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, JavaLangLong_valueOfWithLong_(value));
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, JavaLangDouble_valueOfWithDouble_(value));
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"the bind value at index ", index, @" is null"));
  }
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"the bind value at index ", index, @" is null"));
  }
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)clearBindings {
  if (mBindArgs_ != nil) {
    JavaUtilArrays_fillWithNSObjectArray_withId_(mBindArgs_, nil);
  }
}

- (void)bindAllArgsAsStringsWithNSStringArray:(IOSObjectArray *)bindArgs {
  if (bindArgs != nil) {
    for (jint i = bindArgs->size_; i != 0; i--) {
      [self bindStringWithInt:i withNSString:IOSObjectArray_Get(bindArgs, i - 1)];
    }
  }
}

- (void)onAllReferencesReleased {
  [self clearBindings];
}

- (void)bindWithInt:(jint)index
             withId:(id)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)dealloc {
  RELEASE_(mDatabase_);
  RELEASE_(mSql_);
  RELEASE_(mColumnNames_);
  RELEASE_(mBindArgs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteDatabase;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSObjectArray:withAndroidOsCancellationSignal:);
  methods[1].selector = @selector(getDatabase);
  methods[2].selector = @selector(getSql);
  methods[3].selector = @selector(getBindArgs);
  methods[4].selector = @selector(getColumnNames);
  methods[5].selector = @selector(getSession);
  methods[6].selector = @selector(getConnectionFlags);
  methods[7].selector = @selector(onCorruption);
  methods[8].selector = @selector(getUniqueId);
  methods[9].selector = @selector(bindNullWithInt:);
  methods[10].selector = @selector(bindLongWithInt:withLong:);
  methods[11].selector = @selector(bindDoubleWithInt:withDouble:);
  methods[12].selector = @selector(bindStringWithInt:withNSString:);
  methods[13].selector = @selector(bindBlobWithInt:withByteArray:);
  methods[14].selector = @selector(clearBindings);
  methods[15].selector = @selector(bindAllArgsAsStringsWithNSStringArray:);
  methods[16].selector = @selector(onAllReferencesReleased);
  methods[17].selector = @selector(bindWithInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "mDatabase_", "LAndroidDatabaseSqliteSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mReadOnly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mColumnNames_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNumParameters_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mBindArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;[LNSObject;LAndroidOsCancellationSignal;", (void *)&AndroidDatabaseSqliteSQLiteProgram__Annotations$0, "bindNull", "I", "bindLong", "IJ", "bindDouble", "ID", "bindString", "ILNSString;", "bindBlob", "I[B", "bindAllArgsAsStrings", "[LNSString;", "bind", "ILNSObject;", &AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteProgram = { "SQLiteProgram", "android.database.sqlite", ptrTable, methods, fields, 7, 0x401, 18, 7, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteProgram;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteProgram class]) {
    JreStrongAssignAndConsume(&AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteProgram)
  }
}

@end

void AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteProgram *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs, AndroidOsCancellationSignal *cancellationSignalForPrepare) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  JreStrongAssign(&self->mDatabase_, db);
  JreStrongAssign(&self->mSql_, [((NSString *) nil_chk(sql)) java_trim]);
  jint n = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(self->mSql_);
  {
    jboolean assumeReadOnly;
    AndroidDatabaseSqliteSQLiteStatementInfo *info;
    switch (n) {
      case AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN:
      case AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT:
      case AndroidDatabaseDatabaseUtils_STATEMENT_ABORT:
      self->mReadOnly_ = false;
      JreStrongAssign(&self->mColumnNames_, AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY);
      self->mNumParameters_ = 0;
      break;
      default:
      assumeReadOnly = (n == AndroidDatabaseDatabaseUtils_STATEMENT_SELECT);
      info = create_AndroidDatabaseSqliteSQLiteStatementInfo_init();
      [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) getThreadSession])) prepareWithNSString:self->mSql_ withInt:[db getThreadDefaultConnectionFlagsWithBoolean:assumeReadOnly] withAndroidOsCancellationSignal:cancellationSignalForPrepare withAndroidDatabaseSqliteSQLiteStatementInfo:info];
      self->mReadOnly_ = info->readOnly_;
      JreStrongAssign(&self->mColumnNames_, info->columnNames_);
      self->mNumParameters_ = info->numParameters_;
      break;
    }
  }
  if (bindArgs != nil && bindArgs->size_ > self->mNumParameters_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Too many bind arguments.  ", bindArgs->size_, @" arguments were provided but the statement needs ", self->mNumParameters_, @" arguments."));
  }
  if (self->mNumParameters_ != 0) {
    JreStrongAssignAndConsume(&self->mBindArgs_, [IOSObjectArray newArrayWithLength:self->mNumParameters_ type:NSObject_class_()]);
    if (bindArgs != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bindArgs, 0, self->mBindArgs_, 0, bindArgs->size_);
    }
  }
  else {
    JreStrongAssign(&self->mBindArgs_, nil);
  }
}

void AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(AndroidDatabaseSqliteSQLiteProgram *self, jint index, id value) {
  if (index < 1 || index > self->mNumParameters_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Cannot bind argument at index ", index, @" because the index is out of range.  The statement has ", self->mNumParameters_, @" parameters."));
  }
  IOSObjectArray_Set(nil_chk(self->mBindArgs_), index - 1, value);
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteProgram)

@implementation AndroidDatabaseSqliteSQLiteQuery

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)query
                                      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(self, db, query, cancellationSignal);
  return self;
}

- (jint)fillWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                          withInt:(jint)startPos
                                          withInt:(jint)requiredPos
                                      withBoolean:(jboolean)countAllRows {
  [self acquireReference];
  @try {
    [((AndroidDatabaseCursorWindow *) nil_chk(window)) acquireReference];
    @try {
      jint numRows = [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForCursorWindowWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withAndroidDatabaseCursorWindow:window withInt:startPos withInt:requiredPos withBoolean:countAllRows withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:mCancellationSignal_];
      return numRows;
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      @throw ex;
    }
    @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteQuery_TAG, JreStrcat("$$$$", @"exception: ", [ex getMessage], @"; query: ", [self getSql]));
      @throw ex;
    }
    @finally {
      [window releaseReference];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteQuery: ", [self getSql]);
}

- (void)dealloc {
  RELEASE_(mCancellationSignal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withAndroidOsCancellationSignal:);
  methods[1].selector = @selector(fillWindowWithAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "mCancellationSignal_", "LAndroidOsCancellationSignal;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LAndroidOsCancellationSignal;", "fillWindow", "LAndroidDatabaseCursorWindow;IIZ", "toString", &AndroidDatabaseSqliteSQLiteQuery_TAG };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteQuery = { "SQLiteQuery", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteQuery;
}

@end

void AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteQuery *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, AndroidOsCancellationSignal *cancellationSignal) {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(self, db, query, nil, cancellationSignal);
  JreStrongAssign(&self->mCancellationSignal_, cancellationSignal);
}

AndroidDatabaseSqliteSQLiteQuery *new_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, AndroidOsCancellationSignal *cancellationSignal) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteQuery, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_, db, query, cancellationSignal)
}

AndroidDatabaseSqliteSQLiteQuery *create_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query, AndroidOsCancellationSignal *cancellationSignal) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteQuery, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_, db, query, cancellationSignal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteQuery)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteQueryBuilder)

@implementation AndroidDatabaseSqliteSQLiteQueryBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteQueryBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDistinctWithBoolean:(jboolean)distinct {
  mDistinct_ = distinct;
}

- (NSString *)getTables {
  return mTables_;
}

- (void)setTablesWithNSString:(NSString *)inTables {
  JreStrongAssign(&mTables_, inTables);
}

- (void)appendWhereWithJavaLangCharSequence:(id<JavaLangCharSequence>)inWhere {
  if (mWhereClause_ == nil) {
    JreStrongAssignAndConsume(&mWhereClause_, new_JavaLangStringBuilder_initWithInt_([((id<JavaLangCharSequence>) nil_chk(inWhere)) java_length] + 16));
  }
  if ([mWhereClause_ java_length] == 0) {
    [((JavaLangStringBuilder *) nil_chk(mWhereClause_)) appendWithChar:'('];
  }
  [((JavaLangStringBuilder *) nil_chk(mWhereClause_)) appendWithJavaLangCharSequence:inWhere];
}

- (void)appendWhereEscapeStringWithNSString:(NSString *)inWhere {
  if (mWhereClause_ == nil) {
    JreStrongAssignAndConsume(&mWhereClause_, new_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(inWhere)) java_length] + 16));
  }
  if ([mWhereClause_ java_length] == 0) {
    [((JavaLangStringBuilder *) nil_chk(mWhereClause_)) appendWithChar:'('];
  }
  AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(mWhereClause_, inWhere);
}

- (void)setProjectionMapWithJavaUtilMap:(id<JavaUtilMap>)columnMap {
  JreStrongAssign(&mProjectionMap_, columnMap);
}

- (void)setCursorFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  JreStrongAssign(&mFactory_, factory);
}

- (void)setStrictWithBoolean:(jboolean)flag {
  mStrict_ = flag;
}

+ (NSString *)buildQueryStringWithBoolean:(jboolean)distinct
                             withNSString:(NSString *)tables
                        withNSStringArray:(IOSObjectArray *)columns
                             withNSString:(NSString *)where
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)orderBy
                             withNSString:(NSString *)limit {
  return AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, tables, columns, where, groupBy, having, orderBy, limit);
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause {
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(s, name, clause);
}

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns {
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(s, columns);
}

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder {
  return [self queryWithAndroidDatabaseSqliteSQLiteDatabase:db withNSStringArray:projectionIn withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:nil withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder
                                                             withNSString:(NSString *)limit {
  return [self queryWithAndroidDatabaseSqliteSQLiteDatabase:db withNSStringArray:projectionIn withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit withAndroidOsCancellationSignal:nil];
}

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder
                                                             withNSString:(NSString *)limit
                                          withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (mTables_ == nil) {
    return nil;
  }
  if (mStrict_ && selection != nil && [selection java_length] > 0) {
    NSString *sqlForValidation = [self buildQueryWithNSStringArray:projectionIn withNSString:JreStrcat("C$C", '(', selection, ')') withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit];
    AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(self, db, sqlForValidation, cancellationSignal);
  }
  NSString *sql = [self buildQueryWithNSStringArray:projectionIn withNSString:selection withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit];
  if (AndroidUtilLog_isLoggableWithNSString_withInt_(AndroidDatabaseSqliteSQLiteQueryBuilder_TAG, AndroidUtilLog_DEBUG)) {
    AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteQueryBuilder_TAG, JreStrcat("$$", @"Performing query: ", sql));
  }
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:mFactory_ withNSString:sql withNSStringArray:selectionArgs withNSString:AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(mTables_) withAndroidOsCancellationSignal:cancellationSignal];
}

- (void)validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)sql
                                withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(self, db, sql, cancellationSignal);
}

- (NSString *)buildQueryWithNSStringArray:(IOSObjectArray *)projectionIn
                             withNSString:(NSString *)selection
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)sortOrder
                             withNSString:(NSString *)limit {
  IOSObjectArray *projection = AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(self, projectionIn);
  JavaLangStringBuilder *where = create_JavaLangStringBuilder_init();
  jboolean hasBaseWhereClause = mWhereClause_ != nil && [mWhereClause_ java_length] > 0;
  if (hasBaseWhereClause) {
    [where appendWithNSString:[((JavaLangStringBuilder *) nil_chk(mWhereClause_)) description]];
    [where appendWithChar:')'];
  }
  if (selection != nil && [selection java_length] > 0) {
    if (hasBaseWhereClause) {
      [where appendWithNSString:@" AND "];
    }
    [where appendWithChar:'('];
    [where appendWithNSString:selection];
    [where appendWithChar:')'];
  }
  return AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(mDistinct_, mTables_, projection, [where description], groupBy, having, sortOrder, limit);
}

- (NSString *)buildQueryWithNSStringArray:(IOSObjectArray *)projectionIn
                             withNSString:(NSString *)selection
                        withNSStringArray:(IOSObjectArray *)selectionArgs
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)sortOrder
                             withNSString:(NSString *)limit {
  return [self buildQueryWithNSStringArray:projectionIn withNSString:selection withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit];
}

- (NSString *)buildUnionSubQueryWithNSString:(NSString *)typeDiscriminatorColumn
                           withNSStringArray:(IOSObjectArray *)unionColumns
                             withJavaUtilSet:(id<JavaUtilSet>)columnsPresentInTable
                                     withInt:(jint)computedColumnsOffset
                                withNSString:(NSString *)typeDiscriminatorValue
                                withNSString:(NSString *)selection
                                withNSString:(NSString *)groupBy
                                withNSString:(NSString *)having {
  jint unionColumnsCount = ((IOSObjectArray *) nil_chk(unionColumns))->size_;
  IOSObjectArray *projectionIn = [IOSObjectArray arrayWithLength:unionColumnsCount type:NSString_class_()];
  for (jint i = 0; i < unionColumnsCount; i++) {
    NSString *unionColumn = IOSObjectArray_Get(unionColumns, i);
    if ([((NSString *) nil_chk(unionColumn)) isEqual:typeDiscriminatorColumn]) {
      IOSObjectArray_Set(projectionIn, i, JreStrcat("C$$$", '\'', typeDiscriminatorValue, @"' AS ", typeDiscriminatorColumn));
    }
    else if (i <= computedColumnsOffset || [((id<JavaUtilSet>) nil_chk(columnsPresentInTable)) containsWithId:unionColumn]) {
      IOSObjectArray_Set(projectionIn, i, unionColumn);
    }
    else {
      IOSObjectArray_Set(projectionIn, i, JreStrcat("$$", @"NULL AS ", unionColumn));
    }
  }
  return [self buildQueryWithNSStringArray:projectionIn withNSString:selection withNSString:groupBy withNSString:having withNSString:nil withNSString:nil];
}

- (NSString *)buildUnionSubQueryWithNSString:(NSString *)typeDiscriminatorColumn
                           withNSStringArray:(IOSObjectArray *)unionColumns
                             withJavaUtilSet:(id<JavaUtilSet>)columnsPresentInTable
                                     withInt:(jint)computedColumnsOffset
                                withNSString:(NSString *)typeDiscriminatorValue
                                withNSString:(NSString *)selection
                           withNSStringArray:(IOSObjectArray *)selectionArgs
                                withNSString:(NSString *)groupBy
                                withNSString:(NSString *)having {
  return [self buildUnionSubQueryWithNSString:typeDiscriminatorColumn withNSStringArray:unionColumns withJavaUtilSet:columnsPresentInTable withInt:computedColumnsOffset withNSString:typeDiscriminatorValue withNSString:selection withNSString:groupBy withNSString:having];
}

- (NSString *)buildUnionQueryWithNSStringArray:(IOSObjectArray *)subQueries
                                  withNSString:(NSString *)sortOrder
                                  withNSString:(NSString *)limit {
  JavaLangStringBuilder *query = create_JavaLangStringBuilder_initWithInt_(128);
  jint subQueryCount = ((IOSObjectArray *) nil_chk(subQueries))->size_;
  NSString *unionOperator = mDistinct_ ? @" UNION " : @" UNION ALL ";
  for (jint i = 0; i < subQueryCount; i++) {
    if (i > 0) {
      [query appendWithNSString:unionOperator];
    }
    [query appendWithNSString:IOSObjectArray_Get(subQueries, i)];
  }
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", sortOrder);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", limit);
  return [query description];
}

- (IOSObjectArray *)computeProjectionWithNSStringArray:(IOSObjectArray *)projectionIn {
  return AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(self, projectionIn);
}

- (void)dealloc {
  RELEASE_(mProjectionMap_);
  RELEASE_(mTables_);
  RELEASE_(mWhereClause_);
  RELEASE_(mFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseCursor;", 0x1, 19, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 27, -1, -1, 28, -1 },
    { NULL, "LNSString;", 0x1, 29, 30, -1, 31, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 32, -1, 33, 34, -1 },
    { NULL, "LNSString;", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 37, 38, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDistinctWithBoolean:);
  methods[2].selector = @selector(getTables);
  methods[3].selector = @selector(setTablesWithNSString:);
  methods[4].selector = @selector(appendWhereWithJavaLangCharSequence:);
  methods[5].selector = @selector(appendWhereEscapeStringWithNSString:);
  methods[6].selector = @selector(setProjectionMapWithJavaUtilMap:);
  methods[7].selector = @selector(setCursorFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:);
  methods[8].selector = @selector(setStrictWithBoolean:);
  methods[9].selector = @selector(buildQueryStringWithBoolean:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[10].selector = @selector(appendClauseWithJavaLangStringBuilder:withNSString:withNSString:);
  methods[11].selector = @selector(appendColumnsWithJavaLangStringBuilder:withNSStringArray:);
  methods[12].selector = @selector(queryWithAndroidDatabaseSqliteSQLiteDatabase:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:);
  methods[13].selector = @selector(queryWithAndroidDatabaseSqliteSQLiteDatabase:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[14].selector = @selector(queryWithAndroidDatabaseSqliteSQLiteDatabase:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withAndroidOsCancellationSignal:);
  methods[15].selector = @selector(validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withAndroidOsCancellationSignal:);
  methods[16].selector = @selector(buildQueryWithNSStringArray:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[17].selector = @selector(buildQueryWithNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[18].selector = @selector(buildUnionSubQueryWithNSString:withNSStringArray:withJavaUtilSet:withInt:withNSString:withNSString:withNSString:withNSString:);
  methods[19].selector = @selector(buildUnionSubQueryWithNSString:withNSStringArray:withJavaUtilSet:withInt:withNSString:withNSString:withNSStringArray:withNSString:withNSString:);
  methods[20].selector = @selector(buildUnionQueryWithNSStringArray:withNSString:withNSString:);
  methods[21].selector = @selector(computeProjectionWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "sLimitPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "mProjectionMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 41, -1 },
    { "mTables_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWhereClause_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDistinct_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFactory_", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStrict_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDistinct", "Z", "setTables", "LNSString;", "appendWhere", "LJavaLangCharSequence;", "appendWhereEscapeString", "setProjectionMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "setCursorFactory", "LAndroidDatabaseSqliteSQLiteDatabase_CursorFactory;", "setStrict", "buildQueryString", "ZLNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;", "appendClause", "LJavaLangStringBuilder;LNSString;LNSString;", "appendColumns", "LJavaLangStringBuilder;[LNSString;", "query", "LAndroidDatabaseSqliteSQLiteDatabase;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "LAndroidDatabaseSqliteSQLiteDatabase;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;LAndroidOsCancellationSignal;", "validateQuerySql", "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;LAndroidOsCancellationSignal;", "buildQuery", "[LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;", "[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", (void *)&AndroidDatabaseSqliteSQLiteQueryBuilder__Annotations$0, "buildUnionSubQuery", "LNSString;[LNSString;LJavaUtilSet;ILNSString;LNSString;LNSString;LNSString;", "(Ljava/lang/String;[Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "LNSString;[LNSString;LJavaUtilSet;ILNSString;LNSString;[LNSString;LNSString;LNSString;", "(Ljava/lang/String;[Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", (void *)&AndroidDatabaseSqliteSQLiteQueryBuilder__Annotations$1, "buildUnionQuery", "[LNSString;LNSString;LNSString;", "computeProjection", "[LNSString;", &AndroidDatabaseSqliteSQLiteQueryBuilder_TAG, &AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteQueryBuilder = { "SQLiteQueryBuilder", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1, 22, 8, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteQueryBuilder;
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteQueryBuilder class]) {
    JreStrongAssign(&AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern, JavaUtilRegexPattern_compileWithNSString_(@"\\s*\\d+\\s*(,\\s*\\d+\\s*)?"));
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteQueryBuilder)
  }
}

@end

void AndroidDatabaseSqliteSQLiteQueryBuilder_init(AndroidDatabaseSqliteSQLiteQueryBuilder *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mProjectionMap_, nil);
  JreStrongAssign(&self->mTables_, @"");
  JreStrongAssign(&self->mWhereClause_, nil);
  self->mDistinct_ = false;
  JreStrongAssign(&self->mFactory_, nil);
}

AndroidDatabaseSqliteSQLiteQueryBuilder *new_AndroidDatabaseSqliteSQLiteQueryBuilder_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteQueryBuilder, init)
}

AndroidDatabaseSqliteSQLiteQueryBuilder *create_AndroidDatabaseSqliteSQLiteQueryBuilder_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteQueryBuilder, init)
}

NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(jboolean distinct, NSString *tables, IOSObjectArray *columns, NSString *where, NSString *groupBy, NSString *having, NSString *orderBy, NSString *limit) {
  AndroidDatabaseSqliteSQLiteQueryBuilder_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(groupBy) && !AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(having)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"HAVING clauses are only permitted when using a groupBy clause");
  }
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(limit) && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern)) matcherWithJavaLangCharSequence:limit])) matches]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid LIMIT clauses:", limit));
  }
  JavaLangStringBuilder *query = create_JavaLangStringBuilder_initWithInt_(120);
  [query appendWithNSString:@"SELECT "];
  if (distinct) {
    [query appendWithNSString:@"DISTINCT "];
  }
  if (columns != nil && columns->size_ != 0) {
    AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(query, columns);
  }
  else {
    [query appendWithNSString:@"* "];
  }
  [query appendWithNSString:@"FROM "];
  [query appendWithNSString:tables];
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" WHERE ", where);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" GROUP BY ", groupBy);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" HAVING ", having);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", orderBy);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", limit);
  return [query description];
}

void AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause) {
  AndroidDatabaseSqliteSQLiteQueryBuilder_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(clause)) {
    [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:name];
    [s appendWithNSString:clause];
  }
}

void AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns) {
  AndroidDatabaseSqliteSQLiteQueryBuilder_initialize();
  jint n = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < n; i++) {
    NSString *column = IOSObjectArray_Get(columns, i);
    if (column != nil) {
      if (i > 0) {
        [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:@", "];
      }
      [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:column];
    }
  }
  [((JavaLangStringBuilder *) nil_chk(s)) appendWithChar:' '];
}

void AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, AndroidOsCancellationSignal *cancellationSignal) {
  [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) getThreadSession])) prepareWithNSString:sql withInt:[db getThreadDefaultConnectionFlagsWithBoolean:true] withAndroidOsCancellationSignal:cancellationSignal withAndroidDatabaseSqliteSQLiteStatementInfo:nil];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, IOSObjectArray *projectionIn) {
  if (projectionIn != nil && projectionIn->size_ > 0) {
    if (self->mProjectionMap_ != nil) {
      IOSObjectArray *projection = [IOSObjectArray arrayWithLength:projectionIn->size_ type:NSString_class_()];
      jint length = projectionIn->size_;
      for (jint i = 0; i < length; i++) {
        NSString *userColumn = IOSObjectArray_Get(projectionIn, i);
        NSString *column = [((id<JavaUtilMap>) nil_chk(self->mProjectionMap_)) getWithId:userColumn];
        if (column != nil) {
          IOSObjectArray_Set(projection, i, column);
          continue;
        }
        if (!self->mStrict_ && ([((NSString *) nil_chk(userColumn)) java_contains:@" AS "] || [userColumn java_contains:@" as "])) {
          IOSObjectArray_Set(projection, i, userColumn);
          continue;
        }
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid column ", IOSObjectArray_Get(projectionIn, i)));
      }
      return projection;
    }
    else {
      return projectionIn;
    }
  }
  else if (self->mProjectionMap_ != nil) {
    id<JavaUtilSet> entrySet = [self->mProjectionMap_ entrySet];
    IOSObjectArray *projection = [IOSObjectArray arrayWithLength:[((id<JavaUtilSet>) nil_chk(entrySet)) size] type:NSString_class_()];
    id<JavaUtilIterator> entryIter = [entrySet iterator];
    jint i = 0;
    while ([((id<JavaUtilIterator>) nil_chk(entryIter)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = [entryIter next];
      if ([((NSString *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) isEqual:AndroidProviderBaseColumns__COUNT]) {
        continue;
      }
      IOSObjectArray_Set(projection, i++, [entry_ getValue]);
    }
    return projection;
  }
  return nil;
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteQueryBuilder)

@implementation AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException = { "SQLiteReadOnlyDatabaseException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException;
}

@end

void AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *new_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException, init)
}

AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *create_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException, init)
}

void AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *new_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException *create_AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteReadOnlyDatabaseException)

@implementation AndroidDatabaseSqliteSQLiteSession

+ (jint)TRANSACTION_MODE_DEFERRED {
  return AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_DEFERRED;
}

+ (jint)TRANSACTION_MODE_IMMEDIATE {
  return AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE;
}

+ (jint)TRANSACTION_MODE_EXCLUSIVE {
  return AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE;
}

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)connectionPool {
  AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(self, connectionPool);
  return self;
}

- (jboolean)hasTransaction {
  return mTransactionStack_ != nil;
}

- (jboolean)hasNestedTransaction {
  return mTransactionStack_ != nil && mTransactionStack_->mParent_ != nil;
}

- (jboolean)hasConnection {
  return mConnection_ != nil;
}

- (void)beginTransactionWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                        withInt:(jint)connectionFlags
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
  AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_withAndroidOsCancellationSignal_(self, transactionMode, transactionListener, connectionFlags, cancellationSignal);
}

- (void)beginTransactionUncheckedWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                 withInt:(jint)connectionFlags
         withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_withAndroidOsCancellationSignal_(self, transactionMode, transactionListener, connectionFlags, cancellationSignal);
}

- (void)setTransactionSuccessful {
  AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
  AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
  ((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(mTransactionStack_))->mMarkedSuccessful_ = true;
}

- (void)endTransactionWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
  JreAssert(mConnection_ != nil, @"android/database/sqlite/SQLiteSession.java:399 condition failed: assert mConnection != null;");
  AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithAndroidOsCancellationSignal_withBoolean_(self, cancellationSignal, false);
}

- (void)endTransactionUncheckedWithAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal
                                                   withBoolean:(jboolean)yielding {
  AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithAndroidOsCancellationSignal_withBoolean_(self, cancellationSignal, yielding);
}

- (jboolean)yieldTransactionWithLong:(jlong)sleepAfterYieldDelayMillis
                         withBoolean:(jboolean)throwIfUnsafe
     withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (throwIfUnsafe) {
    AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
    AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
    AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(self);
  }
  else {
    if (mTransactionStack_ == nil || mTransactionStack_->mMarkedSuccessful_ || mTransactionStack_->mParent_ != nil) {
      return false;
    }
  }
  JreAssert(mConnection_ != nil, @"android/database/sqlite/SQLiteSession.java:514 condition failed: assert mConnection != null;");
  if (((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(mTransactionStack_))->mChildFailed_) {
    return false;
  }
  return AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_withAndroidOsCancellationSignal_(self, sleepAfterYieldDelayMillis, cancellationSignal);
}

- (jboolean)yieldTransactionUncheckedWithLong:(jlong)sleepAfterYieldDelayMillis
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_withAndroidOsCancellationSignal_(self, sleepAfterYieldDelayMillis, cancellationSignal);
}

- (void)prepareWithNSString:(NSString *)sql
                    withInt:(jint)connectionFlags
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) prepareWithNSString:sql withAndroidDatabaseSqliteSQLiteStatementInfo:outStatementInfo];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
                    withInt:(jint)connectionFlags
withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal)) {
    return;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeWithNSString:sql withNSObjectArray:bindArgs withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
                            withInt:(jint)connectionFlags
    withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal)) {
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForLongWithNSString:sql withNSObjectArray:bindArgs withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
                                   withInt:(jint)connectionFlags
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal)) {
    return nil;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForStringWithNSString:sql withNSObjectArray:bindArgs withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
                                      withInt:(jint)connectionFlags
              withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal)) {
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForChangedRowCountWithNSString:sql withNSObjectArray:bindArgs withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                                         withInt:(jint)connectionFlags
                 withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal)) {
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForLastInsertedRowIdWithNSString:sql withNSObjectArray:bindArgs withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
                                   withInt:(jint)connectionFlags
           withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  if (sql == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (window == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"window must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal)) {
    [window clear];
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForCursorWindowWithNSString:sql withNSObjectArray:bindArgs withAndroidDatabaseCursorWindow:window withInt:startPos withInt:requiredPos withBoolean:countAllRows withAndroidOsCancellationSignal:cancellationSignal];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jboolean)executeSpecialWithNSString:(NSString *)sql
                     withNSObjectArray:(IOSObjectArray *)bindArgs
                               withInt:(jint)connectionFlags
       withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  return AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(self, sql, bindArgs, connectionFlags, cancellationSignal);
}

- (void)acquireConnectionWithNSString:(NSString *)sql
                              withInt:(jint)connectionFlags
      withAndroidOsCancellationSignal:(AndroidOsCancellationSignal *)cancellationSignal {
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, sql, connectionFlags, cancellationSignal);
}

- (void)releaseConnection {
  AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
}

- (void)throwIfNoTransaction {
  AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
}

- (void)throwIfTransactionMarkedSuccessful {
  AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
}

- (void)throwIfNestedTransaction {
  AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(self);
}

- (AndroidDatabaseSqliteSQLiteSession_Transaction *)obtainTransactionWithInt:(jint)mode
                          withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)listener {
  return AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(self, mode, listener);
}

- (void)recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction:(AndroidDatabaseSqliteSQLiteSession_Transaction *)transaction {
  AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(self, transaction);
}

- (void)dealloc {
  RELEASE_(mConnectionPool_);
  RELEASE_(mConnection_);
  RELEASE_(mTransactionPool_);
  RELEASE_(mTransactionStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 19, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 22, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidDatabaseSqliteSQLiteSession_Transaction;", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteConnectionPool:);
  methods[1].selector = @selector(hasTransaction);
  methods[2].selector = @selector(hasNestedTransaction);
  methods[3].selector = @selector(hasConnection);
  methods[4].selector = @selector(beginTransactionWithInt:withAndroidDatabaseSqliteSQLiteTransactionListener:withInt:withAndroidOsCancellationSignal:);
  methods[5].selector = @selector(beginTransactionUncheckedWithInt:withAndroidDatabaseSqliteSQLiteTransactionListener:withInt:withAndroidOsCancellationSignal:);
  methods[6].selector = @selector(setTransactionSuccessful);
  methods[7].selector = @selector(endTransactionWithAndroidOsCancellationSignal:);
  methods[8].selector = @selector(endTransactionUncheckedWithAndroidOsCancellationSignal:withBoolean:);
  methods[9].selector = @selector(yieldTransactionWithLong:withBoolean:withAndroidOsCancellationSignal:);
  methods[10].selector = @selector(yieldTransactionUncheckedWithLong:withAndroidOsCancellationSignal:);
  methods[11].selector = @selector(prepareWithNSString:withInt:withAndroidOsCancellationSignal:withAndroidDatabaseSqliteSQLiteStatementInfo:);
  methods[12].selector = @selector(executeWithNSString:withNSObjectArray:withInt:withAndroidOsCancellationSignal:);
  methods[13].selector = @selector(executeForLongWithNSString:withNSObjectArray:withInt:withAndroidOsCancellationSignal:);
  methods[14].selector = @selector(executeForStringWithNSString:withNSObjectArray:withInt:withAndroidOsCancellationSignal:);
  methods[15].selector = @selector(executeForChangedRowCountWithNSString:withNSObjectArray:withInt:withAndroidOsCancellationSignal:);
  methods[16].selector = @selector(executeForLastInsertedRowIdWithNSString:withNSObjectArray:withInt:withAndroidOsCancellationSignal:);
  methods[17].selector = @selector(executeForCursorWindowWithNSString:withNSObjectArray:withAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:withInt:withAndroidOsCancellationSignal:);
  methods[18].selector = @selector(executeSpecialWithNSString:withNSObjectArray:withInt:withAndroidOsCancellationSignal:);
  methods[19].selector = @selector(acquireConnectionWithNSString:withInt:withAndroidOsCancellationSignal:);
  methods[20].selector = @selector(releaseConnection);
  methods[21].selector = @selector(throwIfNoTransaction);
  methods[22].selector = @selector(throwIfTransactionMarkedSuccessful);
  methods[23].selector = @selector(throwIfNestedTransaction);
  methods[24].selector = @selector(obtainTransactionWithInt:withAndroidDatabaseSqliteSQLiteTransactionListener:);
  methods[25].selector = @selector(recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mConnectionPool_", "LAndroidDatabaseSqliteSQLiteConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnection_", "LAndroidDatabaseSqliteSQLiteConnection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConnectionFlags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConnectionUseCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransactionPool_", "LAndroidDatabaseSqliteSQLiteSession_Transaction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransactionStack_", "LAndroidDatabaseSqliteSQLiteSession_Transaction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TRANSACTION_MODE_DEFERRED", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_DEFERRED, 0x19, -1, -1, -1, -1 },
    { "TRANSACTION_MODE_IMMEDIATE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE, 0x19, -1, -1, -1, -1 },
    { "TRANSACTION_MODE_EXCLUSIVE", "I", .constantValue.asInt = AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteConnectionPool;", "beginTransaction", "ILAndroidDatabaseSqliteSQLiteTransactionListener;ILAndroidOsCancellationSignal;", "beginTransactionUnchecked", "endTransaction", "LAndroidOsCancellationSignal;", "endTransactionUnchecked", "LAndroidOsCancellationSignal;Z", "yieldTransaction", "JZLAndroidOsCancellationSignal;", "yieldTransactionUnchecked", "JLAndroidOsCancellationSignal;", "prepare", "LNSString;ILAndroidOsCancellationSignal;LAndroidDatabaseSqliteSQLiteStatementInfo;", "execute", "LNSString;[LNSObject;ILAndroidOsCancellationSignal;", "executeForLong", "executeForString", "executeForChangedRowCount", "executeForLastInsertedRowId", "executeForCursorWindow", "LNSString;[LNSObject;LAndroidDatabaseCursorWindow;IIZILAndroidOsCancellationSignal;", "executeSpecial", "acquireConnection", "LNSString;ILAndroidOsCancellationSignal;", "obtainTransaction", "ILAndroidDatabaseSqliteSQLiteTransactionListener;", "recycleTransaction", "LAndroidDatabaseSqliteSQLiteSession_Transaction;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteSession = { "SQLiteSession", "android.database.sqlite", ptrTable, methods, fields, 7, 0x11, 26, 9, -1, 28, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteSession;
}

@end

void AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) {
  NSObject_init(self);
  if (connectionPool == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"connectionPool must not be null");
  }
  JreStrongAssign(&self->mConnectionPool_, connectionPool);
}

AndroidDatabaseSqliteSQLiteSession *new_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteSession, initWithAndroidDatabaseSqliteSQLiteConnectionPool_, connectionPool)
}

AndroidDatabaseSqliteSQLiteSession *create_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteSession, initWithAndroidDatabaseSqliteSQLiteConnectionPool_, connectionPool)
}

void AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, jint transactionMode, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
  }
  if (self->mTransactionStack_ == nil) {
    AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(self, nil, connectionFlags, cancellationSignal);
  }
  @try {
    if (self->mTransactionStack_ == nil) {
      switch (transactionMode) {
        case AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE:
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"BEGIN IMMEDIATE;" withNSObjectArray:nil withAndroidOsCancellationSignal:cancellationSignal];
        break;
        case AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE:
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"BEGIN EXCLUSIVE;" withNSObjectArray:nil withAndroidOsCancellationSignal:cancellationSignal];
        break;
        default:
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"BEGIN;" withNSObjectArray:nil withAndroidOsCancellationSignal:cancellationSignal];
        break;
      }
    }
    if (transactionListener != nil) {
      @try {
        [transactionListener onBegin];
      }
      @catch (JavaLangRuntimeException *ex) {
        if (self->mTransactionStack_ == nil) {
          [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"ROLLBACK;" withNSObjectArray:nil withAndroidOsCancellationSignal:cancellationSignal];
        }
        @throw ex;
      }
    }
    AndroidDatabaseSqliteSQLiteSession_Transaction *transaction = AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(self, transactionMode, transactionListener);
    JreStrongAssign(&((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(transaction))->mParent_, self->mTransactionStack_);
    JreStrongAssign(&self->mTransactionStack_, transaction);
  }
  @finally {
    if (self->mTransactionStack_ == nil) {
      AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
    }
  }
}

void AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithAndroidOsCancellationSignal_withBoolean_(AndroidDatabaseSqliteSQLiteSession *self, AndroidOsCancellationSignal *cancellationSignal, jboolean yielding) {
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
  }
  AndroidDatabaseSqliteSQLiteSession_Transaction *top = self->mTransactionStack_;
  jboolean successful = (((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(top))->mMarkedSuccessful_ || yielding) && !top->mChildFailed_;
  JavaLangRuntimeException *listenerException = nil;
  id<AndroidDatabaseSqliteSQLiteTransactionListener> listener = top->mListener_;
  if (listener != nil) {
    @try {
      if (successful) {
        [listener onCommit];
      }
      else {
        [listener onRollback];
      }
    }
    @catch (JavaLangRuntimeException *ex) {
      listenerException = ex;
      successful = false;
    }
  }
  JreStrongAssign(&self->mTransactionStack_, top->mParent_);
  AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(self, top);
  if (self->mTransactionStack_ != nil) {
    if (!successful) {
      self->mTransactionStack_->mChildFailed_ = true;
    }
  }
  else {
    @try {
      if (successful) {
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"COMMIT;" withNSObjectArray:nil withAndroidOsCancellationSignal:cancellationSignal];
      }
      else {
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"ROLLBACK;" withNSObjectArray:nil withAndroidOsCancellationSignal:cancellationSignal];
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
    }
  }
  if (listenerException != nil) {
    @throw listenerException;
  }
}

jboolean AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, jlong sleepAfterYieldDelayMillis, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
  }
  if (![((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPool_)) shouldYieldConnectionWithAndroidDatabaseSqliteSQLiteConnection:self->mConnection_ withInt:self->mConnectionFlags_]) {
    return false;
  }
  jint transactionMode = ((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(self->mTransactionStack_))->mMode_;
  id<AndroidDatabaseSqliteSQLiteTransactionListener> listener = self->mTransactionStack_->mListener_;
  jint connectionFlags = self->mConnectionFlags_;
  AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithAndroidOsCancellationSignal_withBoolean_(self, cancellationSignal, true);
  if (sleepAfterYieldDelayMillis > 0) {
    @try {
      JavaLangThread_sleepWithLong_(sleepAfterYieldDelayMillis);
    }
    @catch (JavaLangInterruptedException *ex) {
    }
  }
  AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_withAndroidOsCancellationSignal_(self, transactionMode, listener, connectionFlags, cancellationSignal);
  return true;
}

jboolean AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, IOSObjectArray *bindArgs, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal) {
  if (cancellationSignal != nil) {
    [cancellationSignal throwIfCanceled];
  }
  jint type = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
  switch (type) {
    case AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN:
    [self beginTransactionWithInt:AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE withAndroidDatabaseSqliteSQLiteTransactionListener:nil withInt:connectionFlags withAndroidOsCancellationSignal:cancellationSignal];
    return true;
    case AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT:
    [self setTransactionSuccessful];
    [self endTransactionWithAndroidOsCancellationSignal:cancellationSignal];
    return true;
    case AndroidDatabaseDatabaseUtils_STATEMENT_ABORT:
    [self endTransactionWithAndroidOsCancellationSignal:cancellationSignal];
    return true;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_withAndroidOsCancellationSignal_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, jint connectionFlags, AndroidOsCancellationSignal *cancellationSignal) {
  if (self->mConnection_ == nil) {
    JreAssert(self->mConnectionUseCount_ == 0, @"android/database/sqlite/SQLiteSession.java:858 condition failed: assert mConnectionUseCount == 0;");
    JreStrongAssign(&self->mConnection_, [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPool_)) acquireConnectionWithNSString:sql withInt:connectionFlags withAndroidOsCancellationSignal:cancellationSignal]);
    self->mConnectionFlags_ = connectionFlags;
  }
  self->mConnectionUseCount_ += 1;
}

void AndroidDatabaseSqliteSQLiteSession_releaseConnection(AndroidDatabaseSqliteSQLiteSession *self) {
  JreAssert(self->mConnection_ != nil, @"android/database/sqlite/SQLiteSession.java:867 condition failed: assert mConnection != null;");
  JreAssert(self->mConnectionUseCount_ > 0, @"android/database/sqlite/SQLiteSession.java:868 condition failed: assert mConnectionUseCount > 0;");
  if (--self->mConnectionUseCount_ == 0) {
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPool_)) releaseConnectionWithAndroidDatabaseSqliteSQLiteConnection:self->mConnection_];
    }
    @finally {
      JreStrongAssign(&self->mConnection_, nil);
    }
  }
}

void AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(AndroidDatabaseSqliteSQLiteSession *self) {
  if (self->mTransactionStack_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because there is no current transaction.");
  }
}

void AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(AndroidDatabaseSqliteSQLiteSession *self) {
  if (self->mTransactionStack_ != nil && self->mTransactionStack_->mMarkedSuccessful_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the transaction has already been marked successful.  The only thing you can do now is call endTransaction().");
  }
}

void AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(AndroidDatabaseSqliteSQLiteSession *self) {
  if ([self hasNestedTransaction]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because a nested transaction is in progress.");
  }
}

AndroidDatabaseSqliteSQLiteSession_Transaction *AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(AndroidDatabaseSqliteSQLiteSession *self, jint mode, id<AndroidDatabaseSqliteSQLiteTransactionListener> listener) {
  AndroidDatabaseSqliteSQLiteSession_Transaction *transaction = self->mTransactionPool_;
  if (transaction != nil) {
    JreStrongAssign(&self->mTransactionPool_, transaction->mParent_);
    JreStrongAssign(&transaction->mParent_, nil);
    transaction->mMarkedSuccessful_ = false;
    transaction->mChildFailed_ = false;
  }
  else {
    transaction = create_AndroidDatabaseSqliteSQLiteSession_Transaction_init();
  }
  transaction->mMode_ = mode;
  JreStrongAssign(&transaction->mListener_, listener);
  return transaction;
}

void AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteSession_Transaction *transaction) {
  JreStrongAssign(&((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(transaction))->mParent_, self->mTransactionPool_);
  JreStrongAssign(&transaction->mListener_, nil);
  JreStrongAssign(&self->mTransactionPool_, transaction);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteSession)

@implementation AndroidDatabaseSqliteSQLiteSession_Transaction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteSession_Transaction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mParent_);
  RELEASE_(mListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mParent_", "LAndroidDatabaseSqliteSQLiteSession_Transaction;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMode_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mListener_", "LAndroidDatabaseSqliteSQLiteTransactionListener;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMarkedSuccessful_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mChildFailed_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteSession;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteSession_Transaction = { "Transaction", "android.database.sqlite", ptrTable, methods, fields, 7, 0x1a, 1, 5, 0, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteSession_Transaction;
}

@end

void AndroidDatabaseSqliteSQLiteSession_Transaction_init(AndroidDatabaseSqliteSQLiteSession_Transaction *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteSession_Transaction *new_AndroidDatabaseSqliteSQLiteSession_Transaction_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteSession_Transaction, init)
}

AndroidDatabaseSqliteSQLiteSession_Transaction *create_AndroidDatabaseSqliteSQLiteSession_Transaction_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteSession_Transaction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteSession_Transaction)

@implementation AndroidDatabaseSqliteSQLiteStatement

- (instancetype __nonnull)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                         withNSString:(NSString *)sql
                                                    withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, db, sql, bindArgs);
  return self;
}

- (void)execute {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)executeUpdateDelete {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForChangedRowCountWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)executeInsert {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForLastInsertedRowIdWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)simpleQueryForLong {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForLongWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)simpleQueryForString {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForStringWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withInt:[self getConnectionFlags] withAndroidOsCancellationSignal:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
    [self onCorruption];
    @throw ex;
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteProgram: ", [self getSql]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  methods[2].selector = @selector(executeUpdateDelete);
  methods[3].selector = @selector(executeInsert);
  methods[4].selector = @selector(simpleQueryForLong);
  methods[5].selector = @selector(simpleQueryForString);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidDatabaseSqliteSQLiteDatabase;LNSString;[LNSObject;", "toString" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteStatement = { "SQLiteStatement", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteStatement;
}

@end

void AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteStatement *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_withAndroidOsCancellationSignal_(self, db, sql, bindArgs, nil);
}

AndroidDatabaseSqliteSQLiteStatement *new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteStatement, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_, db, sql, bindArgs)
}

AndroidDatabaseSqliteSQLiteStatement *create_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteStatement, initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_, db, sql, bindArgs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteStatement)

@implementation AndroidDatabaseSqliteSQLiteStatementInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteStatementInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(columnNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numParameters_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "columnNames_", "[LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "readOnly_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteStatementInfo = { "SQLiteStatementInfo", "android.database.sqlite", NULL, methods, fields, 7, 0x11, 1, 3, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteStatementInfo;
}

@end

void AndroidDatabaseSqliteSQLiteStatementInfo_init(AndroidDatabaseSqliteSQLiteStatementInfo *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteStatementInfo *new_AndroidDatabaseSqliteSQLiteStatementInfo_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteStatementInfo, init)
}

AndroidDatabaseSqliteSQLiteStatementInfo *create_AndroidDatabaseSqliteSQLiteStatementInfo_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteStatementInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteStatementInfo)

@implementation AndroidDatabaseSqliteSQLiteTableLockedException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidDatabaseSqliteSQLiteTableLockedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)error {
  AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(self, error);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteTableLockedException = { "SQLiteTableLockedException", "android.database.sqlite", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteTableLockedException;
}

@end

void AndroidDatabaseSqliteSQLiteTableLockedException_init(AndroidDatabaseSqliteSQLiteTableLockedException *self) {
  AndroidDatabaseSqliteSQLiteException_init(self);
}

AndroidDatabaseSqliteSQLiteTableLockedException *new_AndroidDatabaseSqliteSQLiteTableLockedException_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteTableLockedException, init)
}

AndroidDatabaseSqliteSQLiteTableLockedException *create_AndroidDatabaseSqliteSQLiteTableLockedException_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteTableLockedException, init)
}

void AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(AndroidDatabaseSqliteSQLiteTableLockedException *self, NSString *error) {
  AndroidDatabaseSqliteSQLiteException_initWithNSString_(self, error);
}

AndroidDatabaseSqliteSQLiteTableLockedException *new_AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(NSString *error) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteTableLockedException, initWithNSString_, error)
}

AndroidDatabaseSqliteSQLiteTableLockedException *create_AndroidDatabaseSqliteSQLiteTableLockedException_initWithNSString_(NSString *error) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteTableLockedException, initWithNSString_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteTableLockedException)

@implementation AndroidDatabaseSqliteSQLiteTransactionListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onBegin);
  methods[1].selector = @selector(onCommit);
  methods[2].selector = @selector(onRollback);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteTransactionListener = { "SQLiteTransactionListener", "android.database.sqlite", NULL, methods, NULL, 7, 0x609, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidDatabaseSqliteSQLiteTransactionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteTransactionListener)

J2OBJC_INITIALIZED_DEFN(AndroidInternalUtilFastXmlSerializer)

@implementation AndroidInternalUtilFastXmlSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidInternalUtilFastXmlSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)appendWithChar:(jchar)c {
  AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, c);
}

- (void)appendWithNSString:(NSString *)str
                   withInt:(jint)i
                   withInt:(jint)length {
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(self, str, i, length);
}

- (void)appendWithCharArray:(IOSCharArray *)buf
                    withInt:(jint)i
                    withInt:(jint)length {
  AndroidInternalUtilFastXmlSerializer_appendWithCharArray_withInt_withInt_(self, buf, i, length);
}

- (void)appendWithNSString:(NSString *)str {
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, str);
}

- (void)escapeAndAppendStringWithNSString:(NSString *)string {
  AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithNSString_(self, string);
}

- (void)escapeAndAppendStringWithCharArray:(IOSCharArray *)buf
                                   withInt:(jint)start
                                   withInt:(jint)len {
  AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithCharArray_withInt_withInt_(self, buf, start, len);
}

- (id<OrgXmlpullV1XmlSerializer>)attributeWithNSString:(NSString *)namespace_
                                          withNSString:(NSString *)name
                                          withNSString:(NSString *)value {
  AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, ' ');
  if (namespace_ != nil) {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, namespace_);
    AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, ':');
  }
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, name);
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @"=\"");
  AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithNSString_(self, value);
  AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, '"');
  return self;
}

- (void)cdsectWithNSString:(NSString *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)commentWithNSString:(NSString *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)docdeclWithNSString:(NSString *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)endDocument {
  [self flush];
}

- (id<OrgXmlpullV1XmlSerializer>)endTagWithNSString:(NSString *)namespace_
                                       withNSString:(NSString *)name {
  if (mInTag_) {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @" />\n");
  }
  else {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @"</");
    if (namespace_ != nil) {
      AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, namespace_);
      AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, ':');
    }
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, name);
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @">\n");
  }
  mInTag_ = false;
  return self;
}

- (void)entityRefWithNSString:(NSString *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)flushBytes {
  AndroidInternalUtilFastXmlSerializer_flushBytes(self);
}

- (void)flush {
  if (mPos_ > 0) {
    if (mOutputStream_ != nil) {
      JavaNioCharBuffer *charBuffer = JavaNioCharBuffer_wrapWithCharArray_withInt_withInt_(mText_, 0, mPos_);
      JavaNioCharsetCoderResult *result = [((JavaNioCharsetCharsetEncoder *) nil_chk(mCharset_)) encodeWithJavaNioCharBuffer:charBuffer withJavaNioByteBuffer:mBytes_ withBoolean:true];
      while (true) {
        if ([((JavaNioCharsetCoderResult *) nil_chk(result)) isError]) {
          @throw create_JavaIoIOException_initWithNSString_([result description]);
        }
        else if ([result isOverflow]) {
          AndroidInternalUtilFastXmlSerializer_flushBytes(self);
          result = [((JavaNioCharsetCharsetEncoder *) nil_chk(mCharset_)) encodeWithJavaNioCharBuffer:charBuffer withJavaNioByteBuffer:mBytes_ withBoolean:true];
          continue;
        }
        break;
      }
      AndroidInternalUtilFastXmlSerializer_flushBytes(self);
      [((JavaIoOutputStream *) nil_chk(mOutputStream_)) flush];
    }
    else {
      [((JavaIoWriter *) nil_chk(mWriter_)) writeWithCharArray:mText_ withInt:0 withInt:mPos_];
      [((JavaIoWriter *) nil_chk(mWriter_)) flush];
    }
    mPos_ = 0;
  }
}

- (jint)getDepth {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getName {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getNamespace {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                        withBoolean:(jboolean)generatePrefix {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id)getPropertyWithNSString:(NSString *)name {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)ignorableWhitespaceWithNSString:(NSString *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)processingInstructionWithNSString:(NSString *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)state {
  if ([((NSString *) nil_chk(name)) isEqual:@"http://xmlpull.org/v1/doc/features.html#indent-output"]) {
    return;
  }
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)os
                           withNSString:(NSString *)encoding {
  if (os == nil) @throw create_JavaLangIllegalArgumentException_init();
  {
    @try {
      JreStrongAssign(&mCharset_, [((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_forNameWithNSString_(encoding))) newEncoder]);
    }
    @catch (JavaNioCharsetIllegalCharsetNameException *e) {
      @throw nil_chk((JavaIoUnsupportedEncodingException *) cast_chk(([create_JavaIoUnsupportedEncodingException_initWithNSString_(encoding) initCauseWithJavaLangThrowable:e]), [JavaIoUnsupportedEncodingException class]));
    }
    @catch (JavaNioCharsetUnsupportedCharsetException *e) {
      @throw nil_chk((JavaIoUnsupportedEncodingException *) cast_chk(([create_JavaIoUnsupportedEncodingException_initWithNSString_(encoding) initCauseWithJavaLangThrowable:e]), [JavaIoUnsupportedEncodingException class]));
    }
    JreStrongAssign(&mOutputStream_, os);
  }
}

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer {
  JreStrongAssign(&mWriter_, writer);
}

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)namespace_ {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)startDocumentWithNSString:(NSString *)encoding
              withJavaLangBoolean:(JavaLangBoolean *)standalone {
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, JreStrcat("$$$", @"<?xml version='1.0' encoding='utf-8' standalone='", ([((JavaLangBoolean *) nil_chk(standalone)) booleanValue] ? @"yes" : @"no"), @"' ?>\n"));
}

- (id<OrgXmlpullV1XmlSerializer>)startTagWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name {
  if (mInTag_) {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @">\n");
  }
  AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, '<');
  if (namespace_ != nil) {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, namespace_);
    AndroidInternalUtilFastXmlSerializer_appendWithChar_(self, ':');
  }
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, name);
  mInTag_ = true;
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithCharArray:(IOSCharArray *)buf
                                           withInt:(jint)start
                                           withInt:(jint)len {
  if (mInTag_) {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @">");
    mInTag_ = false;
  }
  AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithCharArray_withInt_withInt_(self, buf, start, len);
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithNSString:(NSString *)text {
  if (mInTag_) {
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, @">");
    mInTag_ = false;
  }
  AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithNSString_(self, text);
  return self;
}

- (void)dealloc {
  RELEASE_(mText_);
  RELEASE_(mWriter_);
  RELEASE_(mOutputStream_);
  RELEASE_(mCharset_);
  RELEASE_(mBytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 4, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 13, 14, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 20, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 18, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 27, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 14, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, 9, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 33, 14, 9, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 34, 4, 9, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 34, 5, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(appendWithChar:);
  methods[2].selector = @selector(appendWithNSString:withInt:withInt:);
  methods[3].selector = @selector(appendWithCharArray:withInt:withInt:);
  methods[4].selector = @selector(appendWithNSString:);
  methods[5].selector = @selector(escapeAndAppendStringWithNSString:);
  methods[6].selector = @selector(escapeAndAppendStringWithCharArray:withInt:withInt:);
  methods[7].selector = @selector(attributeWithNSString:withNSString:withNSString:);
  methods[8].selector = @selector(cdsectWithNSString:);
  methods[9].selector = @selector(commentWithNSString:);
  methods[10].selector = @selector(docdeclWithNSString:);
  methods[11].selector = @selector(endDocument);
  methods[12].selector = @selector(endTagWithNSString:withNSString:);
  methods[13].selector = @selector(entityRefWithNSString:);
  methods[14].selector = @selector(flushBytes);
  methods[15].selector = @selector(flush);
  methods[16].selector = @selector(getDepth);
  methods[17].selector = @selector(getFeatureWithNSString:);
  methods[18].selector = @selector(getName);
  methods[19].selector = @selector(getNamespace);
  methods[20].selector = @selector(getPrefixWithNSString:withBoolean:);
  methods[21].selector = @selector(getPropertyWithNSString:);
  methods[22].selector = @selector(ignorableWhitespaceWithNSString:);
  methods[23].selector = @selector(processingInstructionWithNSString:);
  methods[24].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[25].selector = @selector(setOutputWithJavaIoOutputStream:withNSString:);
  methods[26].selector = @selector(setOutputWithJavaIoWriter:);
  methods[27].selector = @selector(setPrefixWithNSString:withNSString:);
  methods[28].selector = @selector(setPropertyWithNSString:withId:);
  methods[29].selector = @selector(startDocumentWithNSString:withJavaLangBoolean:);
  methods[30].selector = @selector(startTagWithNSString:withNSString:);
  methods[31].selector = @selector(textWithCharArray:withInt:withInt:);
  methods[32].selector = @selector(textWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ESCAPE_TABLE", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "BUFFER_LEN", "I", .constantValue.asInt = AndroidInternalUtilFastXmlSerializer_BUFFER_LEN, 0x1a, -1, -1, -1, -1 },
    { "mText_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWriter_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOutputStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCharset_", "LJavaNioCharsetCharsetEncoder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBytes_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInTag_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "append", "C", "LJavaIoIOException;", "LNSString;II", "[CII", "LNSString;", "escapeAndAppendString", "attribute", "LNSString;LNSString;LNSString;", "LJavaIoIOException;LJavaLangIllegalArgumentException;LJavaLangIllegalStateException;", "cdsect", "comment", "docdecl", "endTag", "LNSString;LNSString;", "entityRef", "getFeature", "getPrefix", "LNSString;Z", "LJavaLangIllegalArgumentException;", "getProperty", "ignorableWhitespace", "processingInstruction", "setFeature", "LJavaLangIllegalArgumentException;LJavaLangIllegalStateException;", "setOutput", "LJavaIoOutputStream;LNSString;", "LJavaIoWriter;", "setPrefix", "setProperty", "LNSString;LNSObject;", "startDocument", "LNSString;LJavaLangBoolean;", "startTag", "text", &AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE };
  static const J2ObjcClassInfo _AndroidInternalUtilFastXmlSerializer = { "FastXmlSerializer", "android.internal.util", ptrTable, methods, fields, 7, 0x1, 33, 9, -1, -1, -1, -1, -1 };
  return &_AndroidInternalUtilFastXmlSerializer;
}

+ (void)initialize {
  if (self == [AndroidInternalUtilFastXmlSerializer class]) {
    JreStrongAssignAndConsume(&AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, @"&quot;", nil, nil, nil, @"&amp;", nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, @"&lt;", nil, @"&gt;", nil } count:64 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidInternalUtilFastXmlSerializer)
  }
}

@end

void AndroidInternalUtilFastXmlSerializer_init(AndroidInternalUtilFastXmlSerializer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mText_, [IOSCharArray newArrayWithLength:AndroidInternalUtilFastXmlSerializer_BUFFER_LEN]);
  JreStrongAssign(&self->mBytes_, JavaNioByteBuffer_allocateWithInt_(AndroidInternalUtilFastXmlSerializer_BUFFER_LEN));
}

AndroidInternalUtilFastXmlSerializer *new_AndroidInternalUtilFastXmlSerializer_init() {
  J2OBJC_NEW_IMPL(AndroidInternalUtilFastXmlSerializer, init)
}

AndroidInternalUtilFastXmlSerializer *create_AndroidInternalUtilFastXmlSerializer_init() {
  J2OBJC_CREATE_IMPL(AndroidInternalUtilFastXmlSerializer, init)
}

void AndroidInternalUtilFastXmlSerializer_appendWithChar_(AndroidInternalUtilFastXmlSerializer *self, jchar c) {
  jint pos = self->mPos_;
  if (pos >= (AndroidInternalUtilFastXmlSerializer_BUFFER_LEN - 1)) {
    [self flush];
    pos = self->mPos_;
  }
  *IOSCharArray_GetRef(nil_chk(self->mText_), pos) = c;
  self->mPos_ = pos + 1;
}

void AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(AndroidInternalUtilFastXmlSerializer *self, NSString *str, jint i, jint length) {
  if (length > AndroidInternalUtilFastXmlSerializer_BUFFER_LEN) {
    jint end = i + length;
    while (i < end) {
      jint next = i + AndroidInternalUtilFastXmlSerializer_BUFFER_LEN;
      AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(self, str, i, next < end ? AndroidInternalUtilFastXmlSerializer_BUFFER_LEN : (end - i));
      i = next;
    }
    return;
  }
  jint pos = self->mPos_;
  if ((pos + length) > AndroidInternalUtilFastXmlSerializer_BUFFER_LEN) {
    [self flush];
    pos = self->mPos_;
  }
  [((NSString *) nil_chk(str)) java_getChars:i sourceEnd:i + length destination:self->mText_ destinationBegin:pos];
  self->mPos_ = pos + length;
}

void AndroidInternalUtilFastXmlSerializer_appendWithCharArray_withInt_withInt_(AndroidInternalUtilFastXmlSerializer *self, IOSCharArray *buf, jint i, jint length) {
  if (length > AndroidInternalUtilFastXmlSerializer_BUFFER_LEN) {
    jint end = i + length;
    while (i < end) {
      jint next = i + AndroidInternalUtilFastXmlSerializer_BUFFER_LEN;
      AndroidInternalUtilFastXmlSerializer_appendWithCharArray_withInt_withInt_(self, buf, i, next < end ? AndroidInternalUtilFastXmlSerializer_BUFFER_LEN : (end - i));
      i = next;
    }
    return;
  }
  jint pos = self->mPos_;
  if ((pos + length) > AndroidInternalUtilFastXmlSerializer_BUFFER_LEN) {
    [self flush];
    pos = self->mPos_;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, i, self->mText_, pos, length);
  self->mPos_ = pos + length;
}

void AndroidInternalUtilFastXmlSerializer_appendWithNSString_(AndroidInternalUtilFastXmlSerializer *self, NSString *str) {
  AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(self, str, 0, [((NSString *) nil_chk(str)) java_length]);
}

void AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithNSString_(AndroidInternalUtilFastXmlSerializer *self, NSString *string) {
  jint N = [((NSString *) nil_chk(string)) java_length];
  jchar NE = (jchar) ((IOSObjectArray *) nil_chk(AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE))->size_;
  IOSObjectArray *escapes = AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE;
  jint lastPos = 0;
  jint pos;
  for (pos = 0; pos < N; pos++) {
    jchar c = [string charAtWithInt:pos];
    if (c >= NE) continue;
    NSString *escape = IOSObjectArray_Get(escapes, c);
    if (escape == nil) continue;
    if (lastPos < pos) AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(self, string, lastPos, pos - lastPos);
    lastPos = pos + 1;
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, escape);
  }
  if (lastPos < pos) AndroidInternalUtilFastXmlSerializer_appendWithNSString_withInt_withInt_(self, string, lastPos, pos - lastPos);
}

void AndroidInternalUtilFastXmlSerializer_escapeAndAppendStringWithCharArray_withInt_withInt_(AndroidInternalUtilFastXmlSerializer *self, IOSCharArray *buf, jint start, jint len) {
  jchar NE = (jchar) ((IOSObjectArray *) nil_chk(AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE))->size_;
  IOSObjectArray *escapes = AndroidInternalUtilFastXmlSerializer_ESCAPE_TABLE;
  jint end = start + len;
  jint lastPos = start;
  jint pos;
  for (pos = start; pos < end; pos++) {
    jchar c = IOSCharArray_Get(nil_chk(buf), pos);
    if (c >= NE) continue;
    NSString *escape = IOSObjectArray_Get(escapes, c);
    if (escape == nil) continue;
    if (lastPos < pos) AndroidInternalUtilFastXmlSerializer_appendWithCharArray_withInt_withInt_(self, buf, lastPos, pos - lastPos);
    lastPos = pos + 1;
    AndroidInternalUtilFastXmlSerializer_appendWithNSString_(self, escape);
  }
  if (lastPos < pos) AndroidInternalUtilFastXmlSerializer_appendWithCharArray_withInt_withInt_(self, buf, lastPos, pos - lastPos);
}

void AndroidInternalUtilFastXmlSerializer_flushBytes(AndroidInternalUtilFastXmlSerializer *self) {
  jint position;
  if ((position = [((JavaNioByteBuffer *) nil_chk(self->mBytes_)) position]) > 0) {
    [((JavaNioByteBuffer *) nil_chk(self->mBytes_)) flip];
    [((JavaIoOutputStream *) nil_chk(self->mOutputStream_)) writeWithByteArray:[((JavaNioByteBuffer *) nil_chk(self->mBytes_)) array] withInt:0 withInt:position];
    [((JavaNioByteBuffer *) nil_chk(self->mBytes_)) clear];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidInternalUtilFastXmlSerializer)

J2OBJC_INITIALIZED_DEFN(AndroidInternalUtilXmlUtils)

@implementation AndroidInternalUtilXmlUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidInternalUtilXmlUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)skipCurrentTagWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  AndroidInternalUtilXmlUtils_skipCurrentTagWithOrgXmlpullV1XmlPullParser_(parser);
}

+ (jint)convertValueToListWithJavaLangCharSequence:(id<JavaLangCharSequence>)value
                                 withNSStringArray:(IOSObjectArray *)options
                                           withInt:(jint)defaultValue {
  return AndroidInternalUtilXmlUtils_convertValueToListWithJavaLangCharSequence_withNSStringArray_withInt_(value, options, defaultValue);
}

+ (jboolean)convertValueToBooleanWithJavaLangCharSequence:(id<JavaLangCharSequence>)value
                                              withBoolean:(jboolean)defaultValue {
  return AndroidInternalUtilXmlUtils_convertValueToBooleanWithJavaLangCharSequence_withBoolean_(value, defaultValue);
}

+ (jint)convertValueToIntWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSeq
                                          withInt:(jint)defaultValue {
  return AndroidInternalUtilXmlUtils_convertValueToIntWithJavaLangCharSequence_withInt_(charSeq, defaultValue);
}

+ (jint)convertValueToUnsignedIntWithNSString:(NSString *)value
                                      withInt:(jint)defaultValue {
  return AndroidInternalUtilXmlUtils_convertValueToUnsignedIntWithNSString_withInt_(value, defaultValue);
}

+ (jint)parseUnsignedIntAttributeWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSeq {
  return AndroidInternalUtilXmlUtils_parseUnsignedIntAttributeWithJavaLangCharSequence_(charSeq);
}

+ (void)writeMapXmlWithJavaUtilMap:(id<JavaUtilMap>)val
            withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withJavaIoOutputStream_(val, outArg);
}

+ (void)writeListXmlWithJavaUtilList:(id<JavaUtilList>)val
              withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withJavaIoOutputStream_(val, outArg);
}

+ (void)writeMapXmlWithJavaUtilMap:(id<JavaUtilMap>)val
                      withNSString:(NSString *)name
     withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg {
  AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withNSString_withOrgXmlpullV1XmlSerializer_(val, name, outArg);
}

+ (void)writeListXmlWithJavaUtilList:(id<JavaUtilList>)val
                        withNSString:(NSString *)name
       withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg {
  AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withNSString_withOrgXmlpullV1XmlSerializer_(val, name, outArg);
}

+ (void)writeByteArrayXmlWithByteArray:(IOSByteArray *)val
                          withNSString:(NSString *)name
         withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg {
  AndroidInternalUtilXmlUtils_writeByteArrayXmlWithByteArray_withNSString_withOrgXmlpullV1XmlSerializer_(val, name, outArg);
}

+ (void)writeIntArrayXmlWithIntArray:(IOSIntArray *)val
                        withNSString:(NSString *)name
       withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg {
  AndroidInternalUtilXmlUtils_writeIntArrayXmlWithIntArray_withNSString_withOrgXmlpullV1XmlSerializer_(val, name, outArg);
}

+ (void)writeValueXmlWithId:(id)v
               withNSString:(NSString *)name
withOrgXmlpullV1XmlSerializer:(id<OrgXmlpullV1XmlSerializer>)outArg {
  AndroidInternalUtilXmlUtils_writeValueXmlWithId_withNSString_withOrgXmlpullV1XmlSerializer_(v, name, outArg);
}

+ (JavaUtilHashMap *)readMapXmlWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return AndroidInternalUtilXmlUtils_readMapXmlWithJavaIoInputStream_(inArg);
}

+ (JavaUtilArrayList *)readListXmlWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return AndroidInternalUtilXmlUtils_readListXmlWithJavaIoInputStream_(inArg);
}

+ (JavaUtilHashMap *)readThisMapXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                                    withNSString:(NSString *)endTag
                                               withNSStringArray:(IOSObjectArray *)name {
  return AndroidInternalUtilXmlUtils_readThisMapXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(parser, endTag, name);
}

+ (JavaUtilArrayList *)readThisListXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                                       withNSString:(NSString *)endTag
                                                  withNSStringArray:(IOSObjectArray *)name {
  return AndroidInternalUtilXmlUtils_readThisListXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(parser, endTag, name);
}

+ (IOSIntArray *)readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                                     withNSString:(NSString *)endTag
                                                withNSStringArray:(IOSObjectArray *)name {
  return AndroidInternalUtilXmlUtils_readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(parser, endTag, name);
}

+ (id)readValueXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                              withNSStringArray:(IOSObjectArray *)name {
  return AndroidInternalUtilXmlUtils_readValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, name);
}

+ (id)readThisValueXmlWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                  withNSStringArray:(IOSObjectArray *)name {
  return AndroidInternalUtilXmlUtils_readThisValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, name);
}

+ (void)beginDocumentWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                                      withNSString:(NSString *)firstElementName {
  AndroidInternalUtilXmlUtils_beginDocumentWithOrgXmlpullV1XmlPullParser_withNSString_(parser, firstElementName);
}

+ (void)nextElementWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  AndroidInternalUtilXmlUtils_nextElementWithOrgXmlpullV1XmlPullParser_(parser);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x19, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 13, 14, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 15, 16, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 13, 17, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 15, 18, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 19, 20, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 21, 22, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 23, 24, 2, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x19, 25, 26, 2, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x19, 27, 26, 2, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x19, 28, 29, 2, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x19, 30, 29, 2, -1, -1, -1 },
    { NULL, "[I", 0x19, 31, 29, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x19, 32, 33, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1a, 34, 33, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 35, 36, 2, -1, -1, -1 },
    { NULL, "V", 0x19, 37, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(skipCurrentTagWithOrgXmlpullV1XmlPullParser:);
  methods[2].selector = @selector(convertValueToListWithJavaLangCharSequence:withNSStringArray:withInt:);
  methods[3].selector = @selector(convertValueToBooleanWithJavaLangCharSequence:withBoolean:);
  methods[4].selector = @selector(convertValueToIntWithJavaLangCharSequence:withInt:);
  methods[5].selector = @selector(convertValueToUnsignedIntWithNSString:withInt:);
  methods[6].selector = @selector(parseUnsignedIntAttributeWithJavaLangCharSequence:);
  methods[7].selector = @selector(writeMapXmlWithJavaUtilMap:withJavaIoOutputStream:);
  methods[8].selector = @selector(writeListXmlWithJavaUtilList:withJavaIoOutputStream:);
  methods[9].selector = @selector(writeMapXmlWithJavaUtilMap:withNSString:withOrgXmlpullV1XmlSerializer:);
  methods[10].selector = @selector(writeListXmlWithJavaUtilList:withNSString:withOrgXmlpullV1XmlSerializer:);
  methods[11].selector = @selector(writeByteArrayXmlWithByteArray:withNSString:withOrgXmlpullV1XmlSerializer:);
  methods[12].selector = @selector(writeIntArrayXmlWithIntArray:withNSString:withOrgXmlpullV1XmlSerializer:);
  methods[13].selector = @selector(writeValueXmlWithId:withNSString:withOrgXmlpullV1XmlSerializer:);
  methods[14].selector = @selector(readMapXmlWithJavaIoInputStream:);
  methods[15].selector = @selector(readListXmlWithJavaIoInputStream:);
  methods[16].selector = @selector(readThisMapXmlWithOrgXmlpullV1XmlPullParser:withNSString:withNSStringArray:);
  methods[17].selector = @selector(readThisListXmlWithOrgXmlpullV1XmlPullParser:withNSString:withNSStringArray:);
  methods[18].selector = @selector(readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser:withNSString:withNSStringArray:);
  methods[19].selector = @selector(readValueXmlWithOrgXmlpullV1XmlPullParser:withNSStringArray:);
  methods[20].selector = @selector(readThisValueXmlWithOrgXmlpullV1XmlPullParser:withNSStringArray:);
  methods[21].selector = @selector(beginDocumentWithOrgXmlpullV1XmlPullParser:withNSString:);
  methods[22].selector = @selector(nextElementWithOrgXmlpullV1XmlPullParser:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hardref", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 38, -1, -1 },
  };
  static const void *ptrTable[] = { "skipCurrentTag", "LOrgXmlpullV1XmlPullParser;", "LOrgXmlpullV1XmlPullParserException;LJavaIoIOException;", "convertValueToList", "LJavaLangCharSequence;[LNSString;I", "convertValueToBoolean", "LJavaLangCharSequence;Z", "convertValueToInt", "LJavaLangCharSequence;I", "convertValueToUnsignedInt", "LNSString;I", "parseUnsignedIntAttribute", "LJavaLangCharSequence;", "writeMapXml", "LJavaUtilMap;LJavaIoOutputStream;", "writeListXml", "LJavaUtilList;LJavaIoOutputStream;", "LJavaUtilMap;LNSString;LOrgXmlpullV1XmlSerializer;", "LJavaUtilList;LNSString;LOrgXmlpullV1XmlSerializer;", "writeByteArrayXml", "[BLNSString;LOrgXmlpullV1XmlSerializer;", "writeIntArrayXml", "[ILNSString;LOrgXmlpullV1XmlSerializer;", "writeValueXml", "LNSObject;LNSString;LOrgXmlpullV1XmlSerializer;", "readMapXml", "LJavaIoInputStream;", "readListXml", "readThisMapXml", "LOrgXmlpullV1XmlPullParser;LNSString;[LNSString;", "readThisListXml", "readThisIntArrayXml", "readValueXml", "LOrgXmlpullV1XmlPullParser;[LNSString;", "readThisValueXml", "beginDocument", "LOrgXmlpullV1XmlPullParser;LNSString;", "nextElement", &AndroidInternalUtilXmlUtils_hardref };
  static const J2ObjcClassInfo _AndroidInternalUtilXmlUtils = { "XmlUtils", "android.internal.util", ptrTable, methods, fields, 7, 0x1, 23, 1, -1, -1, -1, -1, -1 };
  return &_AndroidInternalUtilXmlUtils;
}

+ (void)initialize {
  if (self == [AndroidInternalUtilXmlUtils class]) {
    JreStrongAssignAndConsume(&AndroidInternalUtilXmlUtils_hardref, [IOSObjectArray newArrayWithObjects:(id[]){ OrgKxml2IoKXmlParser_class_(), OrgKxml2IoKXmlSerializer_class_() } count:2 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidInternalUtilXmlUtils)
  }
}

@end

void AndroidInternalUtilXmlUtils_init(AndroidInternalUtilXmlUtils *self) {
  NSObject_init(self);
}

AndroidInternalUtilXmlUtils *new_AndroidInternalUtilXmlUtils_init() {
  J2OBJC_NEW_IMPL(AndroidInternalUtilXmlUtils, init)
}

AndroidInternalUtilXmlUtils *create_AndroidInternalUtilXmlUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidInternalUtilXmlUtils, init)
}

void AndroidInternalUtilXmlUtils_skipCurrentTagWithOrgXmlpullV1XmlPullParser_(id<OrgXmlpullV1XmlPullParser> parser) {
  AndroidInternalUtilXmlUtils_initialize();
  jint outerDepth = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getDepth];
  jint type;
  while ((type = [parser next]) != OrgXmlpullV1XmlPullParser_END_DOCUMENT && (type != OrgXmlpullV1XmlPullParser_END_TAG || [parser getDepth] > outerDepth)) {
  }
}

jint AndroidInternalUtilXmlUtils_convertValueToListWithJavaLangCharSequence_withNSStringArray_withInt_(id<JavaLangCharSequence> value, IOSObjectArray *options, jint defaultValue) {
  AndroidInternalUtilXmlUtils_initialize();
  if (nil != value) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(options))->size_; i++) {
      if ([value isEqual:IOSObjectArray_Get(options, i)]) return i;
    }
  }
  return defaultValue;
}

jboolean AndroidInternalUtilXmlUtils_convertValueToBooleanWithJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> value, jboolean defaultValue) {
  AndroidInternalUtilXmlUtils_initialize();
  jboolean result = false;
  if (nil == value) return defaultValue;
  if ([value isEqual:@"1"] || [value isEqual:@"true"] || [value isEqual:@"TRUE"]) result = true;
  return result;
}

jint AndroidInternalUtilXmlUtils_convertValueToIntWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> charSeq, jint defaultValue) {
  AndroidInternalUtilXmlUtils_initialize();
  if (nil == charSeq) return defaultValue;
  NSString *nm = [charSeq description];
  jint sign = 1;
  jint index = 0;
  jint len = [((NSString *) nil_chk(nm)) java_length];
  jint base = 10;
  if ('-' == [nm charAtWithInt:0]) {
    sign = -1;
    index++;
  }
  if ('0' == [nm charAtWithInt:index]) {
    if (index == (len - 1)) return 0;
    jchar c = [nm charAtWithInt:index + 1];
    if ('x' == c || 'X' == c) {
      index += 2;
      base = 16;
    }
    else {
      index++;
      base = 8;
    }
  }
  else if ('#' == [nm charAtWithInt:index]) {
    index++;
    base = 16;
  }
  return JavaLangInteger_parseIntWithNSString_withInt_([nm java_substring:index], base) * sign;
}

jint AndroidInternalUtilXmlUtils_convertValueToUnsignedIntWithNSString_withInt_(NSString *value, jint defaultValue) {
  AndroidInternalUtilXmlUtils_initialize();
  if (nil == value) return defaultValue;
  return AndroidInternalUtilXmlUtils_parseUnsignedIntAttributeWithJavaLangCharSequence_(value);
}

jint AndroidInternalUtilXmlUtils_parseUnsignedIntAttributeWithJavaLangCharSequence_(id<JavaLangCharSequence> charSeq) {
  AndroidInternalUtilXmlUtils_initialize();
  NSString *value = [((id<JavaLangCharSequence>) nil_chk(charSeq)) description];
  jint index = 0;
  jint len = [((NSString *) nil_chk(value)) java_length];
  jint base = 10;
  if ('0' == [value charAtWithInt:index]) {
    if (index == (len - 1)) return 0;
    jchar c = [value charAtWithInt:index + 1];
    if ('x' == c || 'X' == c) {
      index += 2;
      base = 16;
    }
    else {
      index++;
      base = 8;
    }
  }
  else if ('#' == [value charAtWithInt:index]) {
    index++;
    base = 16;
  }
  return (jint) JavaLangLong_parseLongWithNSString_withInt_([value java_substring:index], base);
}

void AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withJavaIoOutputStream_(id<JavaUtilMap> val, JavaIoOutputStream *outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  id<OrgXmlpullV1XmlSerializer> serializer = create_AndroidInternalUtilFastXmlSerializer_init();
  [serializer setOutputWithJavaIoOutputStream:outArg withNSString:@"utf-8"];
  [serializer startDocumentWithNSString:nil withJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_(true)];
  [serializer setFeatureWithNSString:@"http://xmlpull.org/v1/doc/features.html#indent-output" withBoolean:true];
  AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withNSString_withOrgXmlpullV1XmlSerializer_(val, nil, serializer);
  [serializer endDocument];
}

void AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withJavaIoOutputStream_(id<JavaUtilList> val, JavaIoOutputStream *outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  id<OrgXmlpullV1XmlSerializer> serializer = AndroidUtilXml_newSerializer();
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(serializer)) setOutputWithJavaIoOutputStream:outArg withNSString:@"utf-8"];
  [serializer startDocumentWithNSString:nil withJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_(true)];
  [serializer setFeatureWithNSString:@"http://xmlpull.org/v1/doc/features.html#indent-output" withBoolean:true];
  AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withNSString_withOrgXmlpullV1XmlSerializer_(val, nil, serializer);
  [serializer endDocument];
}

void AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withNSString_withOrgXmlpullV1XmlSerializer_(id<JavaUtilMap> val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  if (val == nil) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"null"];
    [outArg endTagWithNSString:nil withNSString:@"null"];
    return;
  }
  id<JavaUtilSet> s = [val entrySet];
  id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk(s)) iterator];
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"map"];
  if (name != nil) {
    [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
  }
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check([i next], JavaUtilMap_Entry_class_());
    AndroidInternalUtilXmlUtils_writeValueXmlWithId_withNSString_withOrgXmlpullV1XmlSerializer_([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue], (NSString *) cast_chk([e getKey], [NSString class]), outArg);
  }
  [outArg endTagWithNSString:nil withNSString:@"map"];
}

void AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withNSString_withOrgXmlpullV1XmlSerializer_(id<JavaUtilList> val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  if (val == nil) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"null"];
    [outArg endTagWithNSString:nil withNSString:@"null"];
    return;
  }
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"list"];
  if (name != nil) {
    [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
  }
  jint N = [val size];
  jint i = 0;
  while (i < N) {
    AndroidInternalUtilXmlUtils_writeValueXmlWithId_withNSString_withOrgXmlpullV1XmlSerializer_([val getWithInt:i], nil, outArg);
    i++;
  }
  [outArg endTagWithNSString:nil withNSString:@"list"];
}

void AndroidInternalUtilXmlUtils_writeByteArrayXmlWithByteArray_withNSString_withOrgXmlpullV1XmlSerializer_(IOSByteArray *val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  if (val == nil) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"null"];
    [outArg endTagWithNSString:nil withNSString:@"null"];
    return;
  }
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"byte-array"];
  if (name != nil) {
    [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
  }
  jint N = val->size_;
  [outArg attributeWithNSString:nil withNSString:@"num" withNSString:JavaLangInteger_toStringWithInt_(N)];
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(val->size_ * 2);
  for (jint i = 0; i < N; i++) {
    jint b = IOSByteArray_Get(val, i);
    jint h = JreRShift32(b, 4);
    [sb appendWithInt:h >= 10 ? ('a' + h - 10) : ('0' + h)];
    h = b & (jint) 0xff;
    [sb appendWithInt:h >= 10 ? ('a' + h - 10) : ('0' + h)];
  }
  [outArg textWithNSString:[sb description]];
  [outArg endTagWithNSString:nil withNSString:@"byte-array"];
}

void AndroidInternalUtilXmlUtils_writeIntArrayXmlWithIntArray_withNSString_withOrgXmlpullV1XmlSerializer_(IOSIntArray *val, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  if (val == nil) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"null"];
    [outArg endTagWithNSString:nil withNSString:@"null"];
    return;
  }
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"int-array"];
  if (name != nil) {
    [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
  }
  jint N = val->size_;
  [outArg attributeWithNSString:nil withNSString:@"num" withNSString:JavaLangInteger_toStringWithInt_(N)];
  for (jint i = 0; i < N; i++) {
    [outArg startTagWithNSString:nil withNSString:@"item"];
    [outArg attributeWithNSString:nil withNSString:@"value" withNSString:JavaLangInteger_toStringWithInt_(IOSIntArray_Get(val, i))];
    [outArg endTagWithNSString:nil withNSString:@"item"];
  }
  [outArg endTagWithNSString:nil withNSString:@"int-array"];
}

void AndroidInternalUtilXmlUtils_writeValueXmlWithId_withNSString_withOrgXmlpullV1XmlSerializer_(id v, NSString *name, id<OrgXmlpullV1XmlSerializer> outArg) {
  AndroidInternalUtilXmlUtils_initialize();
  NSString *typeStr;
  if (v == nil) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"null"];
    if (name != nil) {
      [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
    }
    [outArg endTagWithNSString:nil withNSString:@"null"];
    return;
  }
  else if ([v isKindOfClass:[NSString class]]) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"string"];
    if (name != nil) {
      [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
    }
    [outArg textWithNSString:[v description]];
    [outArg endTagWithNSString:nil withNSString:@"string"];
    return;
  }
  else if ([v isKindOfClass:[JavaLangInteger class]]) {
    typeStr = @"int";
  }
  else if ([v isKindOfClass:[JavaLangLong class]]) {
    typeStr = @"long";
  }
  else if ([v isKindOfClass:[JavaLangFloat class]]) {
    typeStr = @"float";
  }
  else if ([v isKindOfClass:[JavaLangDouble class]]) {
    typeStr = @"double";
  }
  else if ([v isKindOfClass:[JavaLangBoolean class]]) {
    typeStr = @"boolean";
  }
  else if ([v isKindOfClass:[IOSByteArray class]]) {
    AndroidInternalUtilXmlUtils_writeByteArrayXmlWithByteArray_withNSString_withOrgXmlpullV1XmlSerializer_((IOSByteArray *) cast_chk(v, [IOSByteArray class]), name, outArg);
    return;
  }
  else if ([v isKindOfClass:[IOSIntArray class]]) {
    AndroidInternalUtilXmlUtils_writeIntArrayXmlWithIntArray_withNSString_withOrgXmlpullV1XmlSerializer_((IOSIntArray *) cast_chk(v, [IOSIntArray class]), name, outArg);
    return;
  }
  else if ([JavaUtilMap_class_() isInstance:v]) {
    AndroidInternalUtilXmlUtils_writeMapXmlWithJavaUtilMap_withNSString_withOrgXmlpullV1XmlSerializer_((id<JavaUtilMap>) cast_check(v, JavaUtilMap_class_()), name, outArg);
    return;
  }
  else if ([JavaUtilList_class_() isInstance:v]) {
    AndroidInternalUtilXmlUtils_writeListXmlWithJavaUtilList_withNSString_withOrgXmlpullV1XmlSerializer_((id<JavaUtilList>) cast_check(v, JavaUtilList_class_()), name, outArg);
    return;
  }
  else if ([JavaLangCharSequence_class_() isInstance:v]) {
    [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:@"string"];
    if (name != nil) {
      [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
    }
    [outArg textWithNSString:[v description]];
    [outArg endTagWithNSString:nil withNSString:@"string"];
    return;
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"writeValueXml: unable to write value ", v));
  }
  [((id<OrgXmlpullV1XmlSerializer>) nil_chk(outArg)) startTagWithNSString:nil withNSString:typeStr];
  if (name != nil) {
    [outArg attributeWithNSString:nil withNSString:@"name" withNSString:name];
  }
  [outArg attributeWithNSString:nil withNSString:@"value" withNSString:[v description]];
  [outArg endTagWithNSString:nil withNSString:typeStr];
}

JavaUtilHashMap *AndroidInternalUtilXmlUtils_readMapXmlWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  AndroidInternalUtilXmlUtils_initialize();
  id<OrgXmlpullV1XmlPullParser> parser = [((OrgXmlpullV1XmlPullParserFactory *) nil_chk(OrgXmlpullV1XmlPullParserFactory_newInstance())) newPullParser];
  [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) setInputWithJavaIoInputStream:inArg withNSString:nil];
  return (JavaUtilHashMap *) cast_chk(AndroidInternalUtilXmlUtils_readValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, [IOSObjectArray arrayWithLength:1 type:NSString_class_()]), [JavaUtilHashMap class]);
}

JavaUtilArrayList *AndroidInternalUtilXmlUtils_readListXmlWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  AndroidInternalUtilXmlUtils_initialize();
  id<OrgXmlpullV1XmlPullParser> parser = AndroidUtilXml_newPullParser();
  [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) setInputWithJavaIoInputStream:inArg withNSString:nil];
  return (JavaUtilArrayList *) cast_chk(AndroidInternalUtilXmlUtils_readValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, [IOSObjectArray arrayWithLength:1 type:NSString_class_()]), [JavaUtilArrayList class]);
}

JavaUtilHashMap *AndroidInternalUtilXmlUtils_readThisMapXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, NSString *endTag, IOSObjectArray *name) {
  AndroidInternalUtilXmlUtils_initialize();
  JavaUtilHashMap *map = create_JavaUtilHashMap_init();
  jint eventType = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getEventType];
  do {
    if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      id val = AndroidInternalUtilXmlUtils_readThisValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, name);
      if (IOSObjectArray_Get(nil_chk(name), 0) != nil) {
        [map putWithId:IOSObjectArray_Get(name, 0) withId:val];
      }
      else {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Map value without name attribute: ", [parser getName]));
      }
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      if ([((NSString *) nil_chk([parser getName])) isEqual:endTag]) {
        return map;
      }
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Expected ", endTag, @" end tag at: ", [parser getName]));
    }
    eventType = [parser next];
  }
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT);
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$", @"Document ended before ", endTag, @" end tag"));
}

JavaUtilArrayList *AndroidInternalUtilXmlUtils_readThisListXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, NSString *endTag, IOSObjectArray *name) {
  AndroidInternalUtilXmlUtils_initialize();
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  jint eventType = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getEventType];
  do {
    if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      id val = AndroidInternalUtilXmlUtils_readThisValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, name);
      [list addWithId:val];
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      if ([((NSString *) nil_chk([parser getName])) isEqual:endTag]) {
        return list;
      }
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Expected ", endTag, @" end tag at: ", [parser getName]));
    }
    eventType = [parser next];
  }
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT);
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$", @"Document ended before ", endTag, @" end tag"));
}

IOSIntArray *AndroidInternalUtilXmlUtils_readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, NSString *endTag, IOSObjectArray *name) {
  AndroidInternalUtilXmlUtils_initialize();
  jint num;
  @try {
    num = JavaLangInteger_parseIntWithNSString_([((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getAttributeValueWithNSString:nil withNSString:@"num"]);
  }
  @catch (JavaLangNullPointerException *e) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"Need num attribute in byte-array");
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"Not a number in num attribute in byte-array");
  }
  IOSIntArray *array = [IOSIntArray arrayWithLength:num];
  jint i = 0;
  jint eventType = [parser getEventType];
  do {
    if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      if ([((NSString *) nil_chk([parser getName])) isEqual:@"item"]) {
        @try {
          *IOSIntArray_GetRef(array, i) = JavaLangInteger_parseIntWithNSString_([parser getAttributeValueWithNSString:nil withNSString:@"value"]);
        }
        @catch (JavaLangNullPointerException *e) {
          @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"Need value attribute in item");
        }
        @catch (JavaLangNumberFormatException *e) {
          @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"Not a number in value attribute in item");
        }
      }
      else {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Expected item tag at: ", [parser getName]));
      }
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      if ([((NSString *) nil_chk([parser getName])) isEqual:endTag]) {
        return array;
      }
      else if ([((NSString *) nil_chk([parser getName])) isEqual:@"item"]) {
        i++;
      }
      else {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Expected ", endTag, @" end tag at: ", [parser getName]));
      }
    }
    eventType = [parser next];
  }
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT);
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$", @"Document ended before ", endTag, @" end tag"));
}

id AndroidInternalUtilXmlUtils_readValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, IOSObjectArray *name) {
  AndroidInternalUtilXmlUtils_initialize();
  jint eventType = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getEventType];
  do {
    if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      return AndroidInternalUtilXmlUtils_readThisValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(parser, name);
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Unexpected end tag at: ", [parser getName]));
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_TEXT) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Unexpected text: ", [parser getText]));
    }
    eventType = [parser next];
  }
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT);
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"Unexpected end of document");
}

id AndroidInternalUtilXmlUtils_readThisValueXmlWithOrgXmlpullV1XmlPullParser_withNSStringArray_(id<OrgXmlpullV1XmlPullParser> parser, IOSObjectArray *name) {
  AndroidInternalUtilXmlUtils_initialize();
  NSString *valueName = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getAttributeValueWithNSString:nil withNSString:@"name"];
  NSString *tagName = [parser getName];
  id res;
  if ([((NSString *) nil_chk(tagName)) isEqual:@"null"]) {
    res = nil;
  }
  else if ([tagName isEqual:@"string"]) {
    NSString *value = @"";
    jint eventType;
    while ((eventType = [parser next]) != OrgXmlpullV1XmlPullParser_END_DOCUMENT) {
      if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
        if ([((NSString *) nil_chk([parser getName])) isEqual:@"string"]) {
          IOSObjectArray_Set(nil_chk(name), 0, valueName);
          return value;
        }
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Unexpected end tag in <string>: ", [parser getName]));
      }
      else if (eventType == OrgXmlpullV1XmlPullParser_TEXT) {
        JreStrAppend(&value, "$", [parser getText]);
      }
      else if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Unexpected start tag in <string>: ", [parser getName]));
      }
    }
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"Unexpected end of document in <string>");
  }
  else if ([tagName isEqual:@"int"]) {
    res = JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_([parser getAttributeValueWithNSString:nil withNSString:@"value"]));
  }
  else if ([tagName isEqual:@"long"]) {
    res = JavaLangLong_valueOfWithNSString_([parser getAttributeValueWithNSString:nil withNSString:@"value"]);
  }
  else if ([tagName isEqual:@"float"]) {
    res = create_JavaLangFloat_initWithNSString_([parser getAttributeValueWithNSString:nil withNSString:@"value"]);
  }
  else if ([tagName isEqual:@"double"]) {
    res = create_JavaLangDouble_initWithNSString_([parser getAttributeValueWithNSString:nil withNSString:@"value"]);
  }
  else if ([tagName isEqual:@"boolean"]) {
    res = JavaLangBoolean_valueOfWithNSString_([parser getAttributeValueWithNSString:nil withNSString:@"value"]);
  }
  else if ([tagName isEqual:@"int-array"]) {
    [parser next];
    res = AndroidInternalUtilXmlUtils_readThisIntArrayXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(parser, @"int-array", name);
    IOSObjectArray_Set(nil_chk(name), 0, valueName);
    return res;
  }
  else if ([tagName isEqual:@"map"]) {
    [parser next];
    res = AndroidInternalUtilXmlUtils_readThisMapXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(parser, @"map", name);
    IOSObjectArray_Set(nil_chk(name), 0, valueName);
    return res;
  }
  else if ([tagName isEqual:@"list"]) {
    [parser next];
    res = AndroidInternalUtilXmlUtils_readThisListXmlWithOrgXmlpullV1XmlPullParser_withNSString_withNSStringArray_(parser, @"list", name);
    IOSObjectArray_Set(nil_chk(name), 0, valueName);
    return res;
  }
  else {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Unknown tag: ", tagName));
  }
  jint eventType;
  while ((eventType = [parser next]) != OrgXmlpullV1XmlPullParser_END_DOCUMENT) {
    if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      if ([((NSString *) nil_chk([parser getName])) isEqual:tagName]) {
        IOSObjectArray_Set(nil_chk(name), 0, valueName);
        return res;
      }
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Unexpected end tag in <", tagName, @">: ", [parser getName]));
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_TEXT) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Unexpected text in <", tagName, @">: ", [parser getName]));
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Unexpected start tag in <", tagName, @">: ", [parser getName]));
    }
  }
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$C", @"Unexpected end of document in <", tagName, '>'));
}

void AndroidInternalUtilXmlUtils_beginDocumentWithOrgXmlpullV1XmlPullParser_withNSString_(id<OrgXmlpullV1XmlPullParser> parser, NSString *firstElementName) {
  AndroidInternalUtilXmlUtils_initialize();
  jint type;
  while ((type = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) next]) != OrgXmlpullV1XmlPullParser_START_TAG && type != OrgXmlpullV1XmlPullParser_END_DOCUMENT) {
    
    ;
  }
  if (type != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(@"No start tag found");
  }
  if (![((NSString *) nil_chk([parser getName])) isEqual:firstElementName]) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"Unexpected start tag: found ", [parser getName], @", expected ", firstElementName));
  }
}

void AndroidInternalUtilXmlUtils_nextElementWithOrgXmlpullV1XmlPullParser_(id<OrgXmlpullV1XmlPullParser> parser) {
  AndroidInternalUtilXmlUtils_initialize();
  jint type;
  while ((type = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) next]) != OrgXmlpullV1XmlPullParser_START_TAG && type != OrgXmlpullV1XmlPullParser_END_DOCUMENT) {
    
    ;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidInternalUtilXmlUtils)

@implementation AndroidOsParcelable

+ (jint)PARCELABLE_WRITE_RETURN_VALUE {
  return AndroidOsParcelable_PARCELABLE_WRITE_RETURN_VALUE;
}

+ (jint)CONTENTS_FILE_DESCRIPTOR {
  return AndroidOsParcelable_CONTENTS_FILE_DESCRIPTOR;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(describeContents);
  methods[1].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PARCELABLE_WRITE_RETURN_VALUE", "I", .constantValue.asInt = AndroidOsParcelable_PARCELABLE_WRITE_RETURN_VALUE, 0x19, -1, -1, -1, -1 },
    { "CONTENTS_FILE_DESCRIPTOR", "I", .constantValue.asInt = AndroidOsParcelable_CONTENTS_FILE_DESCRIPTOR, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeToParcel", "LAndroidOsParcel;I", "LAndroidOsParcelable_Creator;" };
  static const J2ObjcClassInfo _AndroidOsParcelable = { "Parcelable", "android.os", ptrTable, methods, fields, 7, 0x609, 2, 2, -1, 2, -1, -1, -1 };
  return &_AndroidOsParcelable;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsParcelable)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri)

AndroidNetUri *AndroidNetUri_EMPTY;
id<AndroidOsParcelable_Creator> AndroidNetUri_CREATOR;

@implementation AndroidNetUri

+ (AndroidNetUri *)EMPTY {
  return AndroidNetUri_EMPTY;
}

+ (id<AndroidOsParcelable_Creator>)CREATOR {
  return AndroidNetUri_CREATOR;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidNetUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isHierarchical {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isOpaque {
  return ![self isHierarchical];
}

- (jboolean)isRelative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isAbsolute {
  return ![self isRelative];
}

- (NSString *)getScheme {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getSchemeSpecificPart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedSchemeSpecificPart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getAuthority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedAuthority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getUserInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedUserInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getHost {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getPort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getFragment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedFragment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)getPathSegments {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getLastPathSegment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[AndroidNetUri class]])) {
    return false;
  }
  AndroidNetUri *other = (AndroidNetUri *) cast_chk(o, [AndroidNetUri class]);
  return [((NSString *) nil_chk([self description])) isEqual:[((AndroidNetUri *) nil_chk(other)) description]];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

- (jint)compareToWithId:(AndroidNetUri *)other {
  cast_chk(other, [AndroidNetUri class]);
  return [((NSString *) nil_chk([self description])) compareToWithId:[((AndroidNetUri *) nil_chk(other)) description]];
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toSafeString {
  NSString *scheme = [self getScheme];
  NSString *ssp = [self getSchemeSpecificPart];
  if (scheme != nil) {
    if ([scheme java_equalsIgnoreCase:@"tel"] || [scheme java_equalsIgnoreCase:@"sip"] || [scheme java_equalsIgnoreCase:@"sms"] || [scheme java_equalsIgnoreCase:@"smsto"] || [scheme java_equalsIgnoreCase:@"mailto"]) {
      JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(64);
      [builder appendWithNSString:scheme];
      [builder appendWithChar:':'];
      if (ssp != nil) {
        for (jint i = 0; i < [ssp java_length]; i++) {
          jchar c = [ssp charAtWithInt:i];
          if (c == '-' || c == '@' || c == '.') {
            [builder appendWithChar:c];
          }
          else {
            [builder appendWithChar:'x'];
          }
        }
      }
      return [builder description];
    }
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(64);
  if (scheme != nil) {
    [builder appendWithNSString:scheme];
    [builder appendWithChar:':'];
  }
  if (ssp != nil) {
    [builder appendWithNSString:ssp];
  }
  return [builder description];
}

- (AndroidNetUri_Builder *)buildUpon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (AndroidNetUri *)parseWithNSString:(NSString *)uriString {
  return AndroidNetUri_parseWithNSString_(uriString);
}

+ (AndroidNetUri *)fromFileWithJavaIoFile:(JavaIoFile *)file {
  return AndroidNetUri_fromFileWithJavaIoFile_(file);
}

+ (AndroidNetUri *)fromPartsWithNSString:(NSString *)scheme
                            withNSString:(NSString *)ssp
                            withNSString:(NSString *)fragment {
  return AndroidNetUri_fromPartsWithNSString_withNSString_withNSString_(scheme, ssp, fragment);
}

- (id<JavaUtilSet>)getQueryParameterNames {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(AndroidNetUri_NOT_HIERARCHICAL);
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return JavaUtilCollections_emptySet();
  }
  id<JavaUtilSet> names = create_JavaUtilLinkedHashSet_init();
  jint start = 0;
  do {
    jint next = [query java_indexOf:'&' fromIndex:start];
    jint end = (next == -1) ? [query java_length] : next;
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    NSString *name = [query java_substring:start endIndex:separator];
    [names addWithId:AndroidNetUri_decodeWithNSString_(name)];
    start = end + 1;
  }
  while (start < [query java_length]);
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(names);
}

- (id<JavaUtilList>)getQueryParametersWithNSString:(NSString *)key {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(AndroidNetUri_NOT_HIERARCHICAL);
  }
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"key");
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return JavaUtilCollections_emptyList();
  }
  NSString *encodedKey;
  @try {
    encodedKey = JavaNetURLEncoder_encodeWithNSString_withNSString_(key, AndroidNetUri_DEFAULT_ENCODING);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
  JavaUtilArrayList *values = create_JavaUtilArrayList_init();
  jint start = 0;
  do {
    jint nextAmpersand = [query java_indexOf:'&' fromIndex:start];
    jint end = nextAmpersand != -1 ? nextAmpersand : [query java_length];
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    if (separator - start == [((NSString *) nil_chk(encodedKey)) java_length] && [query java_regionMatches:start aString:encodedKey otherOffset:0 count:[encodedKey java_length]]) {
      if (separator == end) {
        [values addWithId:@""];
      }
      else {
        [values addWithId:AndroidNetUri_decodeWithNSString_([query java_substring:separator + 1 endIndex:end])];
      }
    }
    if (nextAmpersand != -1) {
      start = nextAmpersand + 1;
    }
    else {
      break;
    }
  }
  while (true);
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(values);
}

- (NSString *)getQueryParameterWithNSString:(NSString *)key {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(AndroidNetUri_NOT_HIERARCHICAL);
  }
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"key");
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return nil;
  }
  NSString *encodedKey = AndroidNetUri_encodeWithNSString_withNSString_(key, nil);
  jint length = [query java_length];
  jint start = 0;
  do {
    jint nextAmpersand = [query java_indexOf:'&' fromIndex:start];
    jint end = nextAmpersand != -1 ? nextAmpersand : length;
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    if (separator - start == [((NSString *) nil_chk(encodedKey)) java_length] && [query java_regionMatches:start aString:encodedKey otherOffset:0 count:[encodedKey java_length]]) {
      if (separator == end) {
        return @"";
      }
      else {
        @throw create_JavaLangUnsupportedOperationException_init();
      }
    }
    if (nextAmpersand != -1) {
      start = nextAmpersand + 1;
    }
    else {
      break;
    }
  }
  while (true);
  return nil;
}

- (jboolean)getBooleanQueryParameterWithNSString:(NSString *)key
                                     withBoolean:(jboolean)defaultValue {
  NSString *flag = [self getQueryParameterWithNSString:key];
  if (flag == nil) {
    return defaultValue;
  }
  flag = [flag java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  return (![@"false" isEqual:flag] && ![@"0" isEqual:flag]);
}

- (AndroidNetUri *)normalizeScheme {
  NSString *scheme = [self getScheme];
  if (scheme == nil) return self;
  NSString *lowerScheme = [scheme java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  if ([scheme isEqual:lowerScheme]) return self;
  return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([self buildUpon])) schemeWithNSString:lowerScheme])) build];
}

+ (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)outArg
                       withAndroidNetUri:(AndroidNetUri *)uri {
  AndroidNetUri_writeToParcelWithAndroidOsParcel_withAndroidNetUri_(outArg, uri);
}

+ (NSString *)encodeWithNSString:(NSString *)s {
  return AndroidNetUri_encodeWithNSString_(s);
}

+ (NSString *)encodeWithNSString:(NSString *)s
                    withNSString:(NSString *)allow {
  return AndroidNetUri_encodeWithNSString_withNSString_(s, allow);
}

+ (jboolean)isAllowedWithChar:(jchar)c
                 withNSString:(NSString *)allow {
  return AndroidNetUri_isAllowedWithChar_withNSString_(c, allow);
}

+ (NSString *)decodeWithNSString:(NSString *)s {
  return AndroidNetUri_decodeWithNSString_(s);
}

+ (AndroidNetUri *)withAppendedPathWithAndroidNetUri:(AndroidNetUri *)baseUri
                                        withNSString:(NSString *)pathSegment {
  return AndroidNetUri_withAppendedPathWithAndroidNetUri_withNSString_(baseUri, pathSegment);
}

- (AndroidNetUri *)getCanonicalUri {
  if ([@"file" isEqual:[self getScheme]]) {
    NSString *canonicalPath;
    @try {
      canonicalPath = [create_JavaIoFile_initWithNSString_([self getPath]) getCanonicalPath];
    }
    @catch (JavaIoIOException *e) {
      return self;
    }
    return AndroidNetUri_fromFileWithJavaIoFile_(create_JavaIoFile_initWithNSString_(canonicalPath));
  }
  else {
    return self;
  }
}

- (void)checkFileUriExposedWithNSString:(NSString *)location {
}

- (jboolean)isPathPrefixMatchWithAndroidNetUri:(AndroidNetUri *)prefix {
  if (!JavaUtilObjects_equalsWithId_withId_([self getScheme], [((AndroidNetUri *) nil_chk(prefix)) getScheme])) return false;
  if (!JavaUtilObjects_equalsWithId_withId_([self getAuthority], [prefix getAuthority])) return false;
  id<JavaUtilList> seg = [self getPathSegments];
  id<JavaUtilList> prefixSeg = [prefix getPathSegments];
  jint prefixSize = [((id<JavaUtilList>) nil_chk(prefixSeg)) size];
  if ([((id<JavaUtilList>) nil_chk(seg)) size] < prefixSize) return false;
  for (jint i = 0; i < prefixSize; i++) {
    if (!JavaUtilObjects_equalsWithId_withId_([seg getWithInt:i], [prefixSeg getWithInt:i])) {
      return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 14, 8, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isHierarchical);
  methods[2].selector = @selector(isOpaque);
  methods[3].selector = @selector(isRelative);
  methods[4].selector = @selector(isAbsolute);
  methods[5].selector = @selector(getScheme);
  methods[6].selector = @selector(getSchemeSpecificPart);
  methods[7].selector = @selector(getEncodedSchemeSpecificPart);
  methods[8].selector = @selector(getAuthority);
  methods[9].selector = @selector(getEncodedAuthority);
  methods[10].selector = @selector(getUserInfo);
  methods[11].selector = @selector(getEncodedUserInfo);
  methods[12].selector = @selector(getHost);
  methods[13].selector = @selector(getPort);
  methods[14].selector = @selector(getPath);
  methods[15].selector = @selector(getEncodedPath);
  methods[16].selector = @selector(getQuery);
  methods[17].selector = @selector(getEncodedQuery);
  methods[18].selector = @selector(getFragment);
  methods[19].selector = @selector(getEncodedFragment);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(getLastPathSegment);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  methods[24].selector = @selector(compareToWithId:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(toSafeString);
  methods[27].selector = @selector(buildUpon);
  methods[28].selector = @selector(parseWithNSString:);
  methods[29].selector = @selector(fromFileWithJavaIoFile:);
  methods[30].selector = @selector(fromPartsWithNSString:withNSString:withNSString:);
  methods[31].selector = @selector(getQueryParameterNames);
  methods[32].selector = @selector(getQueryParametersWithNSString:);
  methods[33].selector = @selector(getQueryParameterWithNSString:);
  methods[34].selector = @selector(getBooleanQueryParameterWithNSString:withBoolean:);
  methods[35].selector = @selector(normalizeScheme);
  methods[36].selector = @selector(writeToParcelWithAndroidOsParcel:withAndroidNetUri:);
  methods[37].selector = @selector(encodeWithNSString:);
  methods[38].selector = @selector(encodeWithNSString:withNSString:);
  methods[39].selector = @selector(isAllowedWithChar:withNSString:);
  methods[40].selector = @selector(decodeWithNSString:);
  methods[41].selector = @selector(withAppendedPathWithAndroidNetUri:withNSString:);
  methods[42].selector = @selector(getCanonicalUri);
  methods[43].selector = @selector(checkFileUriExposedWithNSString:);
  methods[44].selector = @selector(isPathPrefixMatchWithAndroidNetUri:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "NOT_CACHED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "EMPTY", "LAndroidNetUri;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "NOT_FOUND", "I", .constantValue.asInt = AndroidNetUri_NOT_FOUND, 0x1a, -1, -1, -1, -1 },
    { "NOT_CALCULATED", "I", .constantValue.asInt = AndroidNetUri_NOT_CALCULATED, 0x1a, -1, -1, -1, -1 },
    { "NOT_HIERARCHICAL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "DEFAULT_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "NULL_TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_NULL_TYPE_ID, 0x1a, -1, -1, -1, -1 },
    { "CREATOR", "LAndroidOsParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 35, 36, -1 },
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/String;>;", "equals", "LNSObject;", "hashCode", "compareTo", "LAndroidNetUri;", "toString", "parse", "LNSString;", "fromFile", "LJavaIoFile;", "fromParts", "LNSString;LNSString;LNSString;", "()Ljava/util/Set<Ljava/lang/String;>;", "getQueryParameters", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "getQueryParameter", "getBooleanQueryParameter", "LNSString;Z", "writeToParcel", "LAndroidOsParcel;LAndroidNetUri;", "encode", "LNSString;LNSString;", "isAllowed", "CLNSString;", "decode", "withAppendedPath", "LAndroidNetUri;LNSString;", "checkFileUriExposed", "isPathPrefixMatch", &AndroidNetUri_LOG, &AndroidNetUri_NOT_CACHED, &AndroidNetUri_EMPTY, &AndroidNetUri_NOT_HIERARCHICAL, &AndroidNetUri_DEFAULT_ENCODING, &AndroidNetUri_CREATOR, "Landroid/os/Parcelable$Creator<Landroid/net/Uri;>;", &AndroidNetUri_HEX_DIGITS, "LAndroidNetUri_StringUri;LAndroidNetUri_OpaqueUri;LAndroidNetUri_PathSegments;LAndroidNetUri_PathSegmentsBuilder;LAndroidNetUri_AbstractHierarchicalUri;LAndroidNetUri_HierarchicalUri;LAndroidNetUri_Builder;LAndroidNetUri_AbstractPart;LAndroidNetUri_Part;LAndroidNetUri_PathPart;", "Ljava/lang/Object;Landroid/os/Parcelable;Ljava/lang/Comparable<Landroid/net/Uri;>;" };
  static const J2ObjcClassInfo _AndroidNetUri = { "Uri", "android.net", ptrTable, methods, fields, 7, 0x401, 45, 10, -1, 38, -1, 39, -1 };
  return &_AndroidNetUri;
}

+ (void)initialize {
  if (self == [AndroidNetUri class]) {
    JreStrongAssign(&AndroidNetUri_LOG, [AndroidNetUri_class_() getSimpleName]);
    JreStrongAssign(&AndroidNetUri_NOT_CACHED, @"NOT CACHED");
    JreStrongAssignAndConsume(&AndroidNetUri_EMPTY, new_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(nil, JreLoadStatic(AndroidNetUri_Part, NULL), JreLoadStatic(AndroidNetUri_PathPart, EMPTY), JreLoadStatic(AndroidNetUri_Part, NULL), JreLoadStatic(AndroidNetUri_Part, NULL)));
    JreStrongAssignAndConsume(&AndroidNetUri_CREATOR, new_AndroidNetUri_1_init());
    JreStrongAssign(&AndroidNetUri_HEX_DIGITS, [@"0123456789ABCDEF" java_toCharArray]);
    J2OBJC_SET_INITIALIZED(AndroidNetUri)
  }
}

@end

void AndroidNetUri_init(AndroidNetUri *self) {
  NSObject_init(self);
}

AndroidNetUri *AndroidNetUri_parseWithNSString_(NSString *uriString) {
  AndroidNetUri_initialize();
  return create_AndroidNetUri_StringUri_initWithNSString_(uriString);
}

AndroidNetUri *AndroidNetUri_fromFileWithJavaIoFile_(JavaIoFile *file) {
  AndroidNetUri_initialize();
  if (file == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"file");
  }
  AndroidNetUri_PathPart *path = AndroidNetUri_PathPart_fromDecodedWithNSString_([file getAbsolutePath]);
  return create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(@"file", JreLoadStatic(AndroidNetUri_Part, EMPTY), path, JreLoadStatic(AndroidNetUri_Part, NULL), JreLoadStatic(AndroidNetUri_Part, NULL));
}

AndroidNetUri *AndroidNetUri_fromPartsWithNSString_withNSString_withNSString_(NSString *scheme, NSString *ssp, NSString *fragment) {
  AndroidNetUri_initialize();
  if (scheme == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"scheme");
  }
  if (ssp == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"ssp");
  }
  return create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(scheme, AndroidNetUri_Part_fromDecodedWithNSString_(ssp), AndroidNetUri_Part_fromDecodedWithNSString_(fragment));
}

void AndroidNetUri_writeToParcelWithAndroidOsParcel_withAndroidNetUri_(AndroidOsParcel *outArg, AndroidNetUri *uri) {
  AndroidNetUri_initialize();
  if (uri == nil) {
    [((AndroidOsParcel *) nil_chk(outArg)) writeIntWithInt:AndroidNetUri_NULL_TYPE_ID];
  }
  else {
    [uri writeToParcelWithAndroidOsParcel:outArg withInt:0];
  }
}

NSString *AndroidNetUri_encodeWithNSString_(NSString *s) {
  AndroidNetUri_initialize();
  return AndroidNetUri_encodeWithNSString_withNSString_(s, nil);
}

NSString *AndroidNetUri_encodeWithNSString_withNSString_(NSString *s, NSString *allow) {
  AndroidNetUri_initialize();
  if (s == nil) {
    return nil;
  }
  JavaLangStringBuilder *encoded = nil;
  jint oldLength = [s java_length];
  jint current = 0;
  while (current < oldLength) {
    jint nextToEncode = current;
    while (nextToEncode < oldLength && AndroidNetUri_isAllowedWithChar_withNSString_([s charAtWithInt:nextToEncode], allow)) {
      nextToEncode++;
    }
    if (nextToEncode == oldLength) {
      if (current == 0) {
        return s;
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(encoded)) appendWithJavaLangCharSequence:s withInt:current withInt:oldLength];
        return [encoded description];
      }
    }
    if (encoded == nil) {
      encoded = create_JavaLangStringBuilder_init();
    }
    if (nextToEncode > current) {
      [encoded appendWithJavaLangCharSequence:s withInt:current withInt:nextToEncode];
    }
    else {
    }
    current = nextToEncode;
    jint nextAllowed = current + 1;
    while (nextAllowed < oldLength && !AndroidNetUri_isAllowedWithChar_withNSString_([s charAtWithInt:nextAllowed], allow)) {
      nextAllowed++;
    }
    NSString *toEncode = [s java_substring:current endIndex:nextAllowed];
    @try {
      IOSByteArray *bytes = [((NSString *) nil_chk(toEncode)) java_getBytesWithCharsetName:AndroidNetUri_DEFAULT_ENCODING];
      jint bytesLength = ((IOSByteArray *) nil_chk(bytes))->size_;
      for (jint i = 0; i < bytesLength; i++) {
        [encoded appendWithChar:'%'];
        [encoded appendWithChar:IOSCharArray_Get(nil_chk(AndroidNetUri_HEX_DIGITS), JreRShift32((IOSByteArray_Get(bytes, i) & (jint) 0xf0), 4))];
        [encoded appendWithChar:IOSCharArray_Get(AndroidNetUri_HEX_DIGITS, IOSByteArray_Get(bytes, i) & (jint) 0xf)];
      }
    }
    @catch (JavaIoUnsupportedEncodingException *e) {
      @throw create_JavaLangAssertionError_initWithId_(e);
    }
    current = nextAllowed;
  }
  return encoded == nil ? s : [encoded description];
}

jboolean AndroidNetUri_isAllowedWithChar_withNSString_(jchar c, NSString *allow) {
  AndroidNetUri_initialize();
  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || [@"_-!.~'()*" java_indexOf:c] != AndroidNetUri_NOT_FOUND || (allow != nil && [allow java_indexOf:c] != AndroidNetUri_NOT_FOUND);
}

NSString *AndroidNetUri_decodeWithNSString_(NSString *s) {
  AndroidNetUri_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

AndroidNetUri *AndroidNetUri_withAppendedPathWithAndroidNetUri_withNSString_(AndroidNetUri *baseUri, NSString *pathSegment) {
  AndroidNetUri_initialize();
  AndroidNetUri_Builder *builder = [((AndroidNetUri *) nil_chk(baseUri)) buildUpon];
  builder = [((AndroidNetUri_Builder *) nil_chk(builder)) appendEncodedPathWithNSString:pathSegment];
  return [((AndroidNetUri_Builder *) nil_chk(builder)) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri)

@implementation AndroidNetUri_AbstractHierarchicalUri

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidNetUri_AbstractHierarchicalUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getLastPathSegment {
  id<JavaUtilList> segments = [self getPathSegments];
  jint size = [((id<JavaUtilList>) nil_chk(segments)) size];
  if (size == 0) {
    return nil;
  }
  return [segments getWithInt:size - 1];
}

- (AndroidNetUri_Part *)getUserInfoPart {
  return AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(self);
}

- (NSString *)getEncodedUserInfo {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(self))) getEncoded];
}

- (NSString *)parseUserInfo {
  return AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(self);
}

- (NSString *)getUserInfo {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(self)));
}

- (NSString *)getHost {
  jboolean cached = (JreLoadVolatileId(&host_) != JreLoadStatic(AndroidNetUri, NOT_CACHED));
  return cached ? JreLoadVolatileId(&host_) : (JreVolatileStrongAssign(&host_, AndroidNetUri_AbstractHierarchicalUri_parseHost(self)));
}

- (NSString *)parseHost {
  return AndroidNetUri_AbstractHierarchicalUri_parseHost(self);
}

- (jint)getPort {
  return JreLoadVolatileInt(&port_) == AndroidNetUri_NOT_CALCULATED ? JreAssignVolatileInt(&port_, AndroidNetUri_AbstractHierarchicalUri_parsePort(self)) : JreLoadVolatileInt(&port_);
}

- (jint)parsePort {
  return AndroidNetUri_AbstractHierarchicalUri_parsePort(self);
}

- (void)__javaClone:(AndroidNetUri_AbstractHierarchicalUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&host_, &original->host_);
}

- (void)dealloc {
  RELEASE_(userInfo_);
  JreReleaseVolatile(&host_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLastPathSegment);
  methods[2].selector = @selector(getUserInfoPart);
  methods[3].selector = @selector(getEncodedUserInfo);
  methods[4].selector = @selector(parseUserInfo);
  methods[5].selector = @selector(getUserInfo);
  methods[6].selector = @selector(getHost);
  methods[7].selector = @selector(parseHost);
  methods[8].selector = @selector(getPort);
  methods[9].selector = @selector(parsePort);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "userInfo_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_AbstractHierarchicalUri = { "AbstractHierarchicalUri", "android.net", ptrTable, methods, fields, 7, 0x40a, 10, 3, 0, -1, -1, -1, -1 };
  return &_AndroidNetUri_AbstractHierarchicalUri;
}

@end

void AndroidNetUri_AbstractHierarchicalUri_init(AndroidNetUri_AbstractHierarchicalUri *self) {
  AndroidNetUri_init(self);
  JreVolatileStrongAssign(&self->host_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  JreAssignVolatileInt(&self->port_, AndroidNetUri_NOT_CALCULATED);
}

AndroidNetUri_Part *AndroidNetUri_AbstractHierarchicalUri_getUserInfoPart(AndroidNetUri_AbstractHierarchicalUri *self) {
  return self->userInfo_ == nil ? JreStrongAssign(&self->userInfo_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(self))) : self->userInfo_;
}

NSString *AndroidNetUri_AbstractHierarchicalUri_parseUserInfo(AndroidNetUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return nil;
  }
  jint end = [authority java_indexOf:'@'];
  return end == AndroidNetUri_NOT_FOUND ? nil : [authority java_substring:0 endIndex:end];
}

NSString *AndroidNetUri_AbstractHierarchicalUri_parseHost(AndroidNetUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return nil;
  }
  jint userInfoSeparator = [authority java_indexOf:'@'];
  jint portSeparator = [authority java_indexOf:':' fromIndex:userInfoSeparator];
  NSString *encodedHost = portSeparator == AndroidNetUri_NOT_FOUND ? [authority java_substring:userInfoSeparator + 1] : [authority java_substring:userInfoSeparator + 1 endIndex:portSeparator];
  return AndroidNetUri_decodeWithNSString_(encodedHost);
}

jint AndroidNetUri_AbstractHierarchicalUri_parsePort(AndroidNetUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return -1;
  }
  jint userInfoSeparator = [authority java_indexOf:'@'];
  jint portSeparator = [authority java_indexOf:':' fromIndex:userInfoSeparator];
  if (portSeparator == AndroidNetUri_NOT_FOUND) {
    return -1;
  }
  NSString *portString = AndroidNetUri_decodeWithNSString_([authority java_substring:portSeparator + 1]);
  @try {
    return JavaLangInteger_parseIntWithNSString_(portString);
  }
  @catch (JavaLangNumberFormatException *e) {
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(JreLoadStatic(AndroidNetUri, LOG), @"Error parsing port string.", e);
    return -1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_AbstractHierarchicalUri)

@implementation AndroidNetUri_StringUri

- (instancetype __nonnull)initWithNSString:(NSString *)uriString {
  AndroidNetUri_StringUri_initWithNSString_(self, uriString);
  return self;
}

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_StringUri_TYPE_ID];
  [parcel writeStringWithNSString:uriString_];
}

- (jint)findSchemeSeparator {
  return AndroidNetUri_StringUri_findSchemeSeparator(self);
}

- (jint)findFragmentSeparator {
  return AndroidNetUri_StringUri_findFragmentSeparator(self);
}

- (jboolean)isHierarchical {
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  if (ssi == AndroidNetUri_NOT_FOUND) {
    return true;
  }
  if ([((NSString *) nil_chk(uriString_)) java_length] == ssi + 1) {
    return false;
  }
  return [uriString_ charAtWithInt:ssi + 1] == '/';
}

- (jboolean)isRelative {
  return AndroidNetUri_StringUri_findSchemeSeparator(self) == AndroidNetUri_NOT_FOUND;
}

- (NSString *)getScheme {
  jboolean cached = (JreLoadVolatileId(&scheme_) != JreLoadStatic(AndroidNetUri, NOT_CACHED));
  return cached ? JreLoadVolatileId(&scheme_) : (JreVolatileStrongAssign(&scheme_, AndroidNetUri_StringUri_parseScheme(self)));
}

- (NSString *)parseScheme {
  return AndroidNetUri_StringUri_parseScheme(self);
}

- (AndroidNetUri_Part *)getSsp {
  return AndroidNetUri_StringUri_getSsp(self);
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getSsp(self))) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getSsp(self)));
}

- (NSString *)parseSsp {
  return AndroidNetUri_StringUri_parseSsp(self);
}

- (AndroidNetUri_Part *)getAuthorityPart {
  return AndroidNetUri_StringUri_getAuthorityPart(self);
}

- (NSString *)getEncodedAuthority {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getAuthorityPart(self))) getEncoded];
}

- (NSString *)getAuthority {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getAuthorityPart(self)));
}

- (AndroidNetUri_PathPart *)getPathPart {
  return AndroidNetUri_StringUri_getPathPart(self);
}

- (NSString *)getPath {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getPathPart(self)));
}

- (NSString *)getEncodedPath {
  return [((AndroidNetUri_PathPart *) nil_chk(AndroidNetUri_StringUri_getPathPart(self))) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return [((AndroidNetUri_PathPart *) nil_chk(AndroidNetUri_StringUri_getPathPart(self))) getPathSegments];
}

- (NSString *)parsePath {
  return AndroidNetUri_StringUri_parsePath(self);
}

- (AndroidNetUri_Part *)getQueryPart {
  return AndroidNetUri_StringUri_getQueryPart(self);
}

- (NSString *)getEncodedQuery {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getQueryPart(self))) getEncoded];
}

- (NSString *)parseQuery {
  return AndroidNetUri_StringUri_parseQuery(self);
}

- (NSString *)getQuery {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getQueryPart(self)));
}

- (AndroidNetUri_Part *)getFragmentPart {
  return AndroidNetUri_StringUri_getFragmentPart(self);
}

- (NSString *)getEncodedFragment {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_StringUri_getFragmentPart(self))) getEncoded];
}

- (NSString *)parseFragment {
  return AndroidNetUri_StringUri_parseFragment(self);
}

- (NSString *)getFragment {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_StringUri_getFragmentPart(self)));
}

- (NSString *)description {
  return uriString_;
}

+ (NSString *)parseAuthorityWithNSString:(NSString *)uriString
                                 withInt:(jint)ssi {
  return AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(uriString, ssi);
}

+ (NSString *)parsePathWithNSString:(NSString *)uriString
                            withInt:(jint)ssi {
  return AndroidNetUri_StringUri_parsePathWithNSString_withInt_(uriString, ssi);
}

- (AndroidNetUri_Builder *)buildUpon {
  if ([self isHierarchical]) {
    return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:[self getScheme]])) authorityWithAndroidNetUri_Part:AndroidNetUri_StringUri_getAuthorityPart(self)])) pathWithAndroidNetUri_PathPart:AndroidNetUri_StringUri_getPathPart(self)])) queryWithAndroidNetUri_Part:AndroidNetUri_StringUri_getQueryPart(self)])) fragmentWithAndroidNetUri_Part:AndroidNetUri_StringUri_getFragmentPart(self)];
  }
  else {
    return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:[self getScheme]])) opaquePartWithAndroidNetUri_Part:AndroidNetUri_StringUri_getSsp(self)])) fragmentWithAndroidNetUri_Part:AndroidNetUri_StringUri_getFragmentPart(self)];
  }
}

- (void)__javaClone:(AndroidNetUri_StringUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&scheme_, &original->scheme_);
}

- (void)dealloc {
  RELEASE_(uriString_);
  JreReleaseVolatile(&scheme_);
  RELEASE_(ssp_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 9, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(readFromWithAndroidOsParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[4].selector = @selector(findSchemeSeparator);
  methods[5].selector = @selector(findFragmentSeparator);
  methods[6].selector = @selector(isHierarchical);
  methods[7].selector = @selector(isRelative);
  methods[8].selector = @selector(getScheme);
  methods[9].selector = @selector(parseScheme);
  methods[10].selector = @selector(getSsp);
  methods[11].selector = @selector(getEncodedSchemeSpecificPart);
  methods[12].selector = @selector(getSchemeSpecificPart);
  methods[13].selector = @selector(parseSsp);
  methods[14].selector = @selector(getAuthorityPart);
  methods[15].selector = @selector(getEncodedAuthority);
  methods[16].selector = @selector(getAuthority);
  methods[17].selector = @selector(getPathPart);
  methods[18].selector = @selector(getPath);
  methods[19].selector = @selector(getEncodedPath);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(parsePath);
  methods[22].selector = @selector(getQueryPart);
  methods[23].selector = @selector(getEncodedQuery);
  methods[24].selector = @selector(parseQuery);
  methods[25].selector = @selector(getQuery);
  methods[26].selector = @selector(getFragmentPart);
  methods[27].selector = @selector(getEncodedFragment);
  methods[28].selector = @selector(parseFragment);
  methods[29].selector = @selector(getFragment);
  methods[30].selector = @selector(description);
  methods[31].selector = @selector(parseAuthorityWithNSString:withInt:);
  methods[32].selector = @selector(parsePathWithNSString:withInt:);
  methods[33].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_StringUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "uriString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedSsi_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cachedFsi_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ssp_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authority_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "path_", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "readFrom", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "parseAuthority", "LNSString;I", "parsePath", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_StringUri = { "StringUri", "android.net", ptrTable, methods, fields, 7, 0xa, 34, 10, 10, -1, -1, -1, -1 };
  return &_AndroidNetUri_StringUri;
}

@end

void AndroidNetUri_StringUri_initWithNSString_(AndroidNetUri_StringUri *self, NSString *uriString) {
  AndroidNetUri_AbstractHierarchicalUri_init(self);
  JreAssignVolatileInt(&self->cachedSsi_, AndroidNetUri_NOT_CALCULATED);
  JreAssignVolatileInt(&self->cachedFsi_, AndroidNetUri_NOT_CALCULATED);
  JreVolatileStrongAssign(&self->scheme_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  if (uriString == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"uriString");
  }
  JreStrongAssign(&self->uriString_, uriString);
}

AndroidNetUri_StringUri *new_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString) {
  J2OBJC_NEW_IMPL(AndroidNetUri_StringUri, initWithNSString_, uriString)
}

AndroidNetUri_StringUri *create_AndroidNetUri_StringUri_initWithNSString_(NSString *uriString) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_StringUri, initWithNSString_, uriString)
}

AndroidNetUri *AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_StringUri_initialize();
  return create_AndroidNetUri_StringUri_initWithNSString_([((AndroidOsParcel *) nil_chk(parcel)) readString]);
}

jint AndroidNetUri_StringUri_findSchemeSeparator(AndroidNetUri_StringUri *self) {
  return JreLoadVolatileInt(&self->cachedSsi_) == AndroidNetUri_NOT_CALCULATED ? JreAssignVolatileInt(&self->cachedSsi_, [((NSString *) nil_chk(self->uriString_)) java_indexOf:':']) : JreLoadVolatileInt(&self->cachedSsi_);
}

jint AndroidNetUri_StringUri_findFragmentSeparator(AndroidNetUri_StringUri *self) {
  return JreLoadVolatileInt(&self->cachedFsi_) == AndroidNetUri_NOT_CALCULATED ? JreAssignVolatileInt(&self->cachedFsi_, [((NSString *) nil_chk(self->uriString_)) java_indexOf:'#' fromIndex:AndroidNetUri_StringUri_findSchemeSeparator(self)]) : JreLoadVolatileInt(&self->cachedFsi_);
}

NSString *AndroidNetUri_StringUri_parseScheme(AndroidNetUri_StringUri *self) {
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  return ssi == AndroidNetUri_NOT_FOUND ? nil : [((NSString *) nil_chk(self->uriString_)) java_substring:0 endIndex:ssi];
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getSsp(AndroidNetUri_StringUri *self) {
  return self->ssp_ == nil ? JreStrongAssign(&self->ssp_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_StringUri_parseSsp(self))) : self->ssp_;
}

NSString *AndroidNetUri_StringUri_parseSsp(AndroidNetUri_StringUri *self) {
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  jint fsi = AndroidNetUri_StringUri_findFragmentSeparator(self);
  return fsi == AndroidNetUri_NOT_FOUND ? [((NSString *) nil_chk(self->uriString_)) java_substring:ssi + 1] : [((NSString *) nil_chk(self->uriString_)) java_substring:ssi + 1 endIndex:fsi];
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getAuthorityPart(AndroidNetUri_StringUri *self) {
  if (self->authority_ == nil) {
    NSString *encodedAuthority = AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(self->uriString_, AndroidNetUri_StringUri_findSchemeSeparator(self));
    return JreStrongAssign(&self->authority_, AndroidNetUri_Part_fromEncodedWithNSString_(encodedAuthority));
  }
  return self->authority_;
}

AndroidNetUri_PathPart *AndroidNetUri_StringUri_getPathPart(AndroidNetUri_StringUri *self) {
  return self->path_ == nil ? JreStrongAssign(&self->path_, AndroidNetUri_PathPart_fromEncodedWithNSString_(AndroidNetUri_StringUri_parsePath(self))) : self->path_;
}

NSString *AndroidNetUri_StringUri_parsePath(AndroidNetUri_StringUri *self) {
  NSString *uriString = self->uriString_;
  jint ssi = AndroidNetUri_StringUri_findSchemeSeparator(self);
  if (ssi > -1) {
    jboolean schemeOnly = ssi + 1 == [((NSString *) nil_chk(uriString)) java_length];
    if (schemeOnly) {
      return nil;
    }
    if ([uriString charAtWithInt:ssi + 1] != '/') {
      return nil;
    }
  }
  else {
  }
  return AndroidNetUri_StringUri_parsePathWithNSString_withInt_(uriString, ssi);
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getQueryPart(AndroidNetUri_StringUri *self) {
  return self->query_ == nil ? JreStrongAssign(&self->query_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_StringUri_parseQuery(self))) : self->query_;
}

NSString *AndroidNetUri_StringUri_parseQuery(AndroidNetUri_StringUri *self) {
  jint qsi = [((NSString *) nil_chk(self->uriString_)) java_indexOf:'?' fromIndex:AndroidNetUri_StringUri_findSchemeSeparator(self)];
  if (qsi == AndroidNetUri_NOT_FOUND) {
    return nil;
  }
  jint fsi = AndroidNetUri_StringUri_findFragmentSeparator(self);
  if (fsi == AndroidNetUri_NOT_FOUND) {
    return [self->uriString_ java_substring:qsi + 1];
  }
  if (fsi < qsi) {
    return nil;
  }
  return [self->uriString_ java_substring:qsi + 1 endIndex:fsi];
}

AndroidNetUri_Part *AndroidNetUri_StringUri_getFragmentPart(AndroidNetUri_StringUri *self) {
  return self->fragment_ == nil ? JreStrongAssign(&self->fragment_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_StringUri_parseFragment(self))) : self->fragment_;
}

NSString *AndroidNetUri_StringUri_parseFragment(AndroidNetUri_StringUri *self) {
  jint fsi = AndroidNetUri_StringUri_findFragmentSeparator(self);
  return fsi == AndroidNetUri_NOT_FOUND ? nil : [((NSString *) nil_chk(self->uriString_)) java_substring:fsi + 1];
}

NSString *AndroidNetUri_StringUri_parseAuthorityWithNSString_withInt_(NSString *uriString, jint ssi) {
  AndroidNetUri_StringUri_initialize();
  jint length = [((NSString *) nil_chk(uriString)) java_length];
  if (length > ssi + 2 && [uriString charAtWithInt:ssi + 1] == '/' && [uriString charAtWithInt:ssi + 2] == '/') {
    jint end = ssi + 3;
    while (end < length) {
      switch ([uriString charAtWithInt:end]) {
        case '/':
        case '?':
        case '#':
        goto break_LOOP;
      }
      end++;
    }
    break_LOOP: ;
    return [uriString java_substring:ssi + 3 endIndex:end];
  }
  else {
    return nil;
  }
}

NSString *AndroidNetUri_StringUri_parsePathWithNSString_withInt_(NSString *uriString, jint ssi) {
  AndroidNetUri_StringUri_initialize();
  jint length = [((NSString *) nil_chk(uriString)) java_length];
  jint pathStart;
  if (length > ssi + 2 && [uriString charAtWithInt:ssi + 1] == '/' && [uriString charAtWithInt:ssi + 2] == '/') {
    pathStart = ssi + 3;
    while (pathStart < length) {
      switch ([uriString charAtWithInt:pathStart]) {
        case '?':
        case '#':
        return @"";
        case '/':
        goto break_LOOP;
      }
      pathStart++;
    }
    break_LOOP: ;
  }
  else {
    pathStart = ssi + 1;
  }
  jint pathEnd = pathStart;
  while (pathEnd < length) {
    switch ([uriString charAtWithInt:pathEnd]) {
      case '?':
      case '#':
      goto break_LOOP_2;
    }
    pathEnd++;
  }
  break_LOOP_2: ;
  return [uriString java_substring:pathStart endIndex:pathEnd];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_StringUri)

@implementation AndroidNetUri_OpaqueUri

- (instancetype __nonnull)initWithNSString:(NSString *)scheme
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)ssp
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment {
  AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(self, scheme, ssp, fragment);
  return self;
}

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_OpaqueUri_TYPE_ID];
  [parcel writeStringWithNSString:scheme_];
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(ssp_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(fragment_), parcel);
}

- (jboolean)isHierarchical {
  return false;
}

- (jboolean)isRelative {
  return scheme_ == nil;
}

- (NSString *)getScheme {
  return self->scheme_;
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((AndroidNetUri_Part *) nil_chk(ssp_)) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(ssp_));
}

- (NSString *)getAuthority {
  return nil;
}

- (NSString *)getEncodedAuthority {
  return nil;
}

- (NSString *)getPath {
  return nil;
}

- (NSString *)getEncodedPath {
  return nil;
}

- (NSString *)getQuery {
  return nil;
}

- (NSString *)getEncodedQuery {
  return nil;
}

- (NSString *)getFragment {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(fragment_));
}

- (NSString *)getEncodedFragment {
  return [((AndroidNetUri_Part *) nil_chk(fragment_)) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return JavaUtilCollections_emptyList();
}

- (NSString *)getLastPathSegment {
  return nil;
}

- (NSString *)getUserInfo {
  return nil;
}

- (NSString *)getEncodedUserInfo {
  return nil;
}

- (NSString *)getHost {
  return nil;
}

- (jint)getPort {
  return -1;
}

- (NSString *)description {
  jboolean cached = JreLoadVolatileId(&cachedString_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  if (cached) {
    return JreLoadVolatileId(&cachedString_);
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:scheme_])) appendWithChar:':'];
  [sb appendWithNSString:[self getEncodedSchemeSpecificPart]];
  if (![((AndroidNetUri_Part *) nil_chk(fragment_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'#'])) appendWithNSString:[fragment_ getEncoded]];
  }
  return JreVolatileStrongAssign(&cachedString_, [sb description]);
}

- (AndroidNetUri_Builder *)buildUpon {
  return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:self->scheme_])) opaquePartWithAndroidNetUri_Part:self->ssp_])) fragmentWithAndroidNetUri_Part:self->fragment_];
}

- (void)__javaClone:(AndroidNetUri_OpaqueUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&cachedString_, &original->cachedString_);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(ssp_);
  RELEASE_(fragment_);
  JreReleaseVolatile(&cachedString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withAndroidNetUri_Part:withAndroidNetUri_Part:);
  methods[1].selector = @selector(readFromWithAndroidOsParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[4].selector = @selector(isHierarchical);
  methods[5].selector = @selector(isRelative);
  methods[6].selector = @selector(getScheme);
  methods[7].selector = @selector(getEncodedSchemeSpecificPart);
  methods[8].selector = @selector(getSchemeSpecificPart);
  methods[9].selector = @selector(getAuthority);
  methods[10].selector = @selector(getEncodedAuthority);
  methods[11].selector = @selector(getPath);
  methods[12].selector = @selector(getEncodedPath);
  methods[13].selector = @selector(getQuery);
  methods[14].selector = @selector(getEncodedQuery);
  methods[15].selector = @selector(getFragment);
  methods[16].selector = @selector(getEncodedFragment);
  methods[17].selector = @selector(getPathSegments);
  methods[18].selector = @selector(getLastPathSegment);
  methods[19].selector = @selector(getUserInfo);
  methods[20].selector = @selector(getEncodedUserInfo);
  methods[21].selector = @selector(getHost);
  methods[22].selector = @selector(getPort);
  methods[23].selector = @selector(description);
  methods[24].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_OpaqueUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ssp_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedString_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LAndroidNetUri_Part;LAndroidNetUri_Part;", "readFrom", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_OpaqueUri = { "OpaqueUri", "android.net", ptrTable, methods, fields, 7, 0xa, 25, 5, 7, -1, -1, -1, -1 };
  return &_AndroidNetUri_OpaqueUri;
}

@end

void AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_OpaqueUri *self, NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) {
  AndroidNetUri_init(self);
  JreVolatileStrongAssign(&self->cachedString_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->ssp_, ssp);
  JreStrongAssign(&self->fragment_, fragment == nil ? JreLoadStatic(AndroidNetUri_Part, NULL) : fragment);
}

AndroidNetUri_OpaqueUri *new_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) {
  J2OBJC_NEW_IMPL(AndroidNetUri_OpaqueUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, ssp, fragment)
}

AndroidNetUri_OpaqueUri *create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *ssp, AndroidNetUri_Part *fragment) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_OpaqueUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, ssp, fragment)
}

AndroidNetUri *AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_OpaqueUri_initialize();
  return create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_([((AndroidOsParcel *) nil_chk(parcel)) readString], AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_OpaqueUri)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri_PathSegments)

AndroidNetUri_PathSegments *AndroidNetUri_PathSegments_EMPTY;

@implementation AndroidNetUri_PathSegments

+ (AndroidNetUri_PathSegments *)EMPTY {
  return AndroidNetUri_PathSegments_EMPTY;
}

- (instancetype __nonnull)initWithNSStringArray:(IOSObjectArray *)segments
                                        withInt:(jint)size {
  AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(self, segments, size);
  return self;
}

- (NSString *)getWithInt:(jint)index {
  if (index >= size_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(segments_), index);
}

- (jint)size {
  return self->size_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "LAndroidNetUri_PathSegments;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "segments_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "get", "I", &AndroidNetUri_PathSegments_EMPTY, "LAndroidNetUri;", "Ljava/util/AbstractList<Ljava/lang/String;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _AndroidNetUri_PathSegments = { "PathSegments", "android.net", ptrTable, methods, fields, 7, 0x8, 3, 3, 4, -1, -1, 5, -1 };
  return &_AndroidNetUri_PathSegments;
}

+ (void)initialize {
  if (self == [AndroidNetUri_PathSegments class]) {
    JreStrongAssignAndConsume(&AndroidNetUri_PathSegments_EMPTY, new_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(nil, 0));
    J2OBJC_SET_INITIALIZED(AndroidNetUri_PathSegments)
  }
}

@end

void AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(AndroidNetUri_PathSegments *self, IOSObjectArray *segments, jint size) {
  JavaUtilAbstractList_init(self);
  JreStrongAssign(&self->segments_, segments);
  self->size_ = size;
}

AndroidNetUri_PathSegments *new_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) {
  J2OBJC_NEW_IMPL(AndroidNetUri_PathSegments, initWithNSStringArray_withInt_, segments, size)
}

AndroidNetUri_PathSegments *create_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_PathSegments, initWithNSStringArray_withInt_, segments, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_PathSegments)

@implementation AndroidNetUri_PathSegmentsBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidNetUri_PathSegmentsBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithNSString:(NSString *)segment {
  if (segments_ == nil) {
    JreStrongAssignAndConsume(&segments_, [IOSObjectArray newArrayWithLength:4 type:NSString_class_()]);
  }
  else if (size_ + 1 == segments_->size_) {
    IOSObjectArray *expanded = [IOSObjectArray arrayWithLength:segments_->size_ * 2 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(segments_, 0, expanded, 0, segments_->size_);
    JreStrongAssign(&segments_, expanded);
  }
  IOSObjectArray_Set(segments_, size_++, segment);
}

- (AndroidNetUri_PathSegments *)build {
  if (segments_ == nil) {
    return JreLoadStatic(AndroidNetUri_PathSegments, EMPTY);
  }
  @try {
    return create_AndroidNetUri_PathSegments_initWithNSStringArray_withInt_(segments_, size_);
  }
  @finally {
    JreStrongAssign(&segments_, nil);
  }
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathSegments;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithNSString:);
  methods[2].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "segments_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LNSString;", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_PathSegmentsBuilder = { "PathSegmentsBuilder", "android.net", ptrTable, methods, fields, 7, 0x8, 3, 2, 2, -1, -1, -1, -1 };
  return &_AndroidNetUri_PathSegmentsBuilder;
}

@end

void AndroidNetUri_PathSegmentsBuilder_init(AndroidNetUri_PathSegmentsBuilder *self) {
  NSObject_init(self);
  self->size_ = 0;
}

AndroidNetUri_PathSegmentsBuilder *new_AndroidNetUri_PathSegmentsBuilder_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_PathSegmentsBuilder, init)
}

AndroidNetUri_PathSegmentsBuilder *create_AndroidNetUri_PathSegmentsBuilder_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_PathSegmentsBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_PathSegmentsBuilder)

@implementation AndroidNetUri_HierarchicalUri

- (instancetype __nonnull)initWithNSString:(NSString *)scheme
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)authority
                withAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)query
                    withAndroidNetUri_Part:(AndroidNetUri_Part *)fragment {
  AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(self, scheme, authority, path, query, fragment);
  return self;
}

+ (AndroidNetUri *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)parcel
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_HierarchicalUri_TYPE_ID];
  [parcel writeStringWithNSString:scheme_];
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(authority_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(path_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(query_), parcel);
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(nil_chk(fragment_), parcel);
}

- (jboolean)isHierarchical {
  return true;
}

- (jboolean)isRelative {
  return scheme_ == nil;
}

- (NSString *)getScheme {
  return scheme_;
}

- (AndroidNetUri_Part *)getSsp {
  return AndroidNetUri_HierarchicalUri_getSsp(self);
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((AndroidNetUri_Part *) nil_chk(AndroidNetUri_HierarchicalUri_getSsp(self))) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(AndroidNetUri_HierarchicalUri_getSsp(self)));
}

- (NSString *)makeSchemeSpecificPart {
  return AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(self);
}

- (void)appendSspToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder {
  AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
}

- (NSString *)getAuthority {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->authority_));
}

- (NSString *)getEncodedAuthority {
  return [((AndroidNetUri_Part *) nil_chk(self->authority_)) getEncoded];
}

- (NSString *)getEncodedPath {
  return [((AndroidNetUri_PathPart *) nil_chk(self->path_)) getEncoded];
}

- (NSString *)getPath {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->path_));
}

- (NSString *)getQuery {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->query_));
}

- (NSString *)getEncodedQuery {
  return [((AndroidNetUri_Part *) nil_chk(self->query_)) getEncoded];
}

- (NSString *)getFragment {
  return AndroidNetUri_AbstractPart_getDecoded(nil_chk(self->fragment_));
}

- (NSString *)getEncodedFragment {
  return [((AndroidNetUri_Part *) nil_chk(self->fragment_)) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return [((AndroidNetUri_PathPart *) nil_chk(self->path_)) getPathSegments];
}

- (NSString *)description {
  jboolean cached = (JreLoadVolatileId(&uriString_) != JreLoadStatic(AndroidNetUri, NOT_CACHED));
  return cached ? JreLoadVolatileId(&uriString_) : (JreVolatileStrongAssign(&uriString_, AndroidNetUri_HierarchicalUri_makeUriString(self)));
}

- (NSString *)makeUriString {
  return AndroidNetUri_HierarchicalUri_makeUriString(self);
}

- (AndroidNetUri_Builder *)buildUpon {
  return [((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([((AndroidNetUri_Builder *) nil_chk([create_AndroidNetUri_Builder_init() schemeWithNSString:scheme_])) authorityWithAndroidNetUri_Part:authority_])) pathWithAndroidNetUri_PathPart:path_])) queryWithAndroidNetUri_Part:query_])) fragmentWithAndroidNetUri_Part:fragment_];
}

- (void)__javaClone:(AndroidNetUri_HierarchicalUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&uriString_, &original->uriString_);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  RELEASE_(ssp_);
  JreReleaseVolatile(&uriString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withAndroidNetUri_Part:withAndroidNetUri_PathPart:withAndroidNetUri_Part:withAndroidNetUri_Part:);
  methods[1].selector = @selector(readFromWithAndroidOsParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  methods[4].selector = @selector(isHierarchical);
  methods[5].selector = @selector(isRelative);
  methods[6].selector = @selector(getScheme);
  methods[7].selector = @selector(getSsp);
  methods[8].selector = @selector(getEncodedSchemeSpecificPart);
  methods[9].selector = @selector(getSchemeSpecificPart);
  methods[10].selector = @selector(makeSchemeSpecificPart);
  methods[11].selector = @selector(appendSspToWithJavaLangStringBuilder:);
  methods[12].selector = @selector(getAuthority);
  methods[13].selector = @selector(getEncodedAuthority);
  methods[14].selector = @selector(getEncodedPath);
  methods[15].selector = @selector(getPath);
  methods[16].selector = @selector(getQuery);
  methods[17].selector = @selector(getEncodedQuery);
  methods[18].selector = @selector(getFragment);
  methods[19].selector = @selector(getEncodedFragment);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(makeUriString);
  methods[23].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = AndroidNetUri_HierarchicalUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "authority_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "path_", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "query_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ssp_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uriString_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LAndroidNetUri_Part;LAndroidNetUri_PathPart;LAndroidNetUri_Part;LAndroidNetUri_Part;", "readFrom", "LAndroidOsParcel;", "writeToParcel", "LAndroidOsParcel;I", "appendSspTo", "LJavaLangStringBuilder;", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_HierarchicalUri = { "HierarchicalUri", "android.net", ptrTable, methods, fields, 7, 0xa, 24, 8, 9, -1, -1, -1, -1 };
  return &_AndroidNetUri_HierarchicalUri;
}

@end

void AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(AndroidNetUri_HierarchicalUri *self, NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) {
  AndroidNetUri_AbstractHierarchicalUri_init(self);
  JreVolatileStrongAssign(&self->uriString_, JreLoadStatic(AndroidNetUri, NOT_CACHED));
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->authority_, AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(authority));
  JreStrongAssign(&self->path_, path == nil ? JreLoadStatic(AndroidNetUri_PathPart, NULL) : path);
  JreStrongAssign(&self->query_, AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(query));
  JreStrongAssign(&self->fragment_, AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(fragment));
}

AndroidNetUri_HierarchicalUri *new_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) {
  J2OBJC_NEW_IMPL(AndroidNetUri_HierarchicalUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, authority, path, query, fragment)
}

AndroidNetUri_HierarchicalUri *create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(NSString *scheme, AndroidNetUri_Part *authority, AndroidNetUri_PathPart *path, AndroidNetUri_Part *query, AndroidNetUri_Part *fragment) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_HierarchicalUri, initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_, scheme, authority, path, query, fragment)
}

AndroidNetUri *AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_HierarchicalUri_initialize();
  return create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_([((AndroidOsParcel *) nil_chk(parcel)) readString], AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel), AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel));
}

AndroidNetUri_Part *AndroidNetUri_HierarchicalUri_getSsp(AndroidNetUri_HierarchicalUri *self) {
  return self->ssp_ == nil ? JreStrongAssign(&self->ssp_, AndroidNetUri_Part_fromEncodedWithNSString_(AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(self))) : self->ssp_;
}

NSString *AndroidNetUri_HierarchicalUri_makeSchemeSpecificPart(AndroidNetUri_HierarchicalUri *self) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
  return [builder description];
}

void AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(AndroidNetUri_HierarchicalUri *self, JavaLangStringBuilder *builder) {
  NSString *encodedAuthority = [((AndroidNetUri_Part *) nil_chk(self->authority_)) getEncoded];
  if (encodedAuthority != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"//"])) appendWithNSString:encodedAuthority];
  }
  NSString *encodedPath = [((AndroidNetUri_PathPart *) nil_chk(self->path_)) getEncoded];
  if (encodedPath != nil) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:encodedPath];
  }
  if (![((AndroidNetUri_Part *) nil_chk(self->query_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'?'])) appendWithNSString:[self->query_ getEncoded]];
  }
}

NSString *AndroidNetUri_HierarchicalUri_makeUriString(AndroidNetUri_HierarchicalUri *self) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  if (self->scheme_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:self->scheme_])) appendWithChar:':'];
  }
  AndroidNetUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
  if (![((AndroidNetUri_Part *) nil_chk(self->fragment_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'#'])) appendWithNSString:[self->fragment_ getEncoded]];
  }
  return [builder description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_HierarchicalUri)

@implementation AndroidNetUri_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidNetUri_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidNetUri_Builder *)schemeWithNSString:(NSString *)scheme {
  JreStrongAssign(&self->scheme_, scheme);
  return self;
}

- (AndroidNetUri_Builder *)opaquePartWithAndroidNetUri_Part:(AndroidNetUri_Part *)opaquePart {
  JreStrongAssign(&self->opaquePart_, opaquePart);
  return self;
}

- (AndroidNetUri_Builder *)opaquePartWithNSString:(NSString *)opaquePart {
  return [self opaquePartWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(opaquePart)];
}

- (AndroidNetUri_Builder *)encodedOpaquePartWithNSString:(NSString *)opaquePart {
  return [self opaquePartWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(opaquePart)];
}

- (AndroidNetUri_Builder *)authorityWithAndroidNetUri_Part:(AndroidNetUri_Part *)authority {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->authority_, authority);
  return self;
}

- (AndroidNetUri_Builder *)authorityWithNSString:(NSString *)authority {
  return [self authorityWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(authority)];
}

- (AndroidNetUri_Builder *)encodedAuthorityWithNSString:(NSString *)authority {
  return [self authorityWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(authority)];
}

- (AndroidNetUri_Builder *)pathWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)path {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->path_, path);
  return self;
}

- (AndroidNetUri_Builder *)pathWithNSString:(NSString *)path {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_fromDecodedWithNSString_(path)];
}

- (AndroidNetUri_Builder *)encodedPathWithNSString:(NSString *)path {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_fromEncodedWithNSString_(path)];
}

- (AndroidNetUri_Builder *)appendPathWithNSString:(NSString *)newSegment {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(path_, newSegment)];
}

- (AndroidNetUri_Builder *)appendEncodedPathWithNSString:(NSString *)newSegment {
  return [self pathWithAndroidNetUri_PathPart:AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(path_, newSegment)];
}

- (AndroidNetUri_Builder *)queryWithAndroidNetUri_Part:(AndroidNetUri_Part *)query {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->query_, query);
  return self;
}

- (AndroidNetUri_Builder *)queryWithNSString:(NSString *)query {
  return [self queryWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(query)];
}

- (AndroidNetUri_Builder *)encodedQueryWithNSString:(NSString *)query {
  return [self queryWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(query)];
}

- (AndroidNetUri_Builder *)fragmentWithAndroidNetUri_Part:(AndroidNetUri_Part *)fragment {
  JreStrongAssign(&self->fragment_, fragment);
  return self;
}

- (AndroidNetUri_Builder *)fragmentWithNSString:(NSString *)fragment {
  return [self fragmentWithAndroidNetUri_Part:AndroidNetUri_Part_fromDecodedWithNSString_(fragment)];
}

- (AndroidNetUri_Builder *)encodedFragmentWithNSString:(NSString *)fragment {
  return [self fragmentWithAndroidNetUri_Part:AndroidNetUri_Part_fromEncodedWithNSString_(fragment)];
}

- (AndroidNetUri_Builder *)appendQueryParameterWithNSString:(NSString *)key
                                               withNSString:(NSString *)value {
  JreStrongAssign(&self->opaquePart_, nil);
  NSString *encodedParameter = JreStrcat("$C$", AndroidNetUri_encodeWithNSString_withNSString_(key, nil), '=', AndroidNetUri_encodeWithNSString_withNSString_(value, nil));
  if (query_ == nil) {
    JreStrongAssign(&query_, AndroidNetUri_Part_fromEncodedWithNSString_(encodedParameter));
    return self;
  }
  NSString *oldQuery = [query_ getEncoded];
  if (oldQuery == nil || [oldQuery java_length] == 0) {
    JreStrongAssign(&query_, AndroidNetUri_Part_fromEncodedWithNSString_(encodedParameter));
  }
  else {
    JreStrongAssign(&query_, AndroidNetUri_Part_fromEncodedWithNSString_(JreStrcat("$C$", oldQuery, '&', encodedParameter)));
  }
  return self;
}

- (AndroidNetUri_Builder *)clearQuery {
  return [self queryWithAndroidNetUri_Part:nil];
}

- (AndroidNetUri *)build {
  if (opaquePart_ != nil) {
    if (self->scheme_ == nil) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"An opaque URI must have a scheme.");
    }
    return create_AndroidNetUri_OpaqueUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_Part_(scheme_, opaquePart_, fragment_);
  }
  else {
    AndroidNetUri_PathPart *path = self->path_;
    if (path == nil || path == JreLoadStatic(AndroidNetUri_PathPart, NULL)) {
      path = JreLoadStatic(AndroidNetUri_PathPart, EMPTY);
    }
    else {
      if (AndroidNetUri_Builder_hasSchemeOrAuthority(self)) {
        path = AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(path);
      }
    }
    return create_AndroidNetUri_HierarchicalUri_initWithNSString_withAndroidNetUri_Part_withAndroidNetUri_PathPart_withAndroidNetUri_Part_withAndroidNetUri_Part_(scheme_, authority_, path, query_, fragment_);
  }
}

- (jboolean)hasSchemeOrAuthority {
  return AndroidNetUri_Builder_hasSchemeOrAuthority(self);
}

- (NSString *)description {
  return [((AndroidNetUri *) nil_chk([self build])) description];
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(opaquePart_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 12, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(schemeWithNSString:);
  methods[2].selector = @selector(opaquePartWithAndroidNetUri_Part:);
  methods[3].selector = @selector(opaquePartWithNSString:);
  methods[4].selector = @selector(encodedOpaquePartWithNSString:);
  methods[5].selector = @selector(authorityWithAndroidNetUri_Part:);
  methods[6].selector = @selector(authorityWithNSString:);
  methods[7].selector = @selector(encodedAuthorityWithNSString:);
  methods[8].selector = @selector(pathWithAndroidNetUri_PathPart:);
  methods[9].selector = @selector(pathWithNSString:);
  methods[10].selector = @selector(encodedPathWithNSString:);
  methods[11].selector = @selector(appendPathWithNSString:);
  methods[12].selector = @selector(appendEncodedPathWithNSString:);
  methods[13].selector = @selector(queryWithAndroidNetUri_Part:);
  methods[14].selector = @selector(queryWithNSString:);
  methods[15].selector = @selector(encodedQueryWithNSString:);
  methods[16].selector = @selector(fragmentWithAndroidNetUri_Part:);
  methods[17].selector = @selector(fragmentWithNSString:);
  methods[18].selector = @selector(encodedFragmentWithNSString:);
  methods[19].selector = @selector(appendQueryParameterWithNSString:withNSString:);
  methods[20].selector = @selector(clearQuery);
  methods[21].selector = @selector(build);
  methods[22].selector = @selector(hasSchemeOrAuthority);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opaquePart_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authority_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "path_", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "scheme", "LNSString;", "opaquePart", "LAndroidNetUri_Part;", "encodedOpaquePart", "authority", "encodedAuthority", "path", "LAndroidNetUri_PathPart;", "encodedPath", "appendPath", "appendEncodedPath", "query", "encodedQuery", "fragment", "encodedFragment", "appendQueryParameter", "LNSString;LNSString;", "toString", "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_Builder = { "Builder", "android.net", ptrTable, methods, fields, 7, 0x19, 24, 6, 19, -1, -1, -1, -1 };
  return &_AndroidNetUri_Builder;
}

@end

void AndroidNetUri_Builder_init(AndroidNetUri_Builder *self) {
  NSObject_init(self);
}

AndroidNetUri_Builder *new_AndroidNetUri_Builder_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_Builder, init)
}

AndroidNetUri_Builder *create_AndroidNetUri_Builder_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_Builder, init)
}

jboolean AndroidNetUri_Builder_hasSchemeOrAuthority(AndroidNetUri_Builder *self) {
  return self->scheme_ != nil || (self->authority_ != nil && self->authority_ != JreLoadStatic(AndroidNetUri_Part, NULL));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_Builder)

@implementation AndroidOsParcelable_Creator

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "[LNSObject;", 0x401, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createFromParcelWithAndroidOsParcel:);
  methods[1].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LAndroidOsParcel;", "(Landroid/os/Parcel;)TT;", "newArray", "I", "(I)[TT;", "LAndroidOsParcelable;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _AndroidOsParcelable_Creator = { "Creator", "android.os", ptrTable, methods, NULL, 7, 0x609, 2, 0, 6, -1, -1, 7, -1 };
  return &_AndroidOsParcelable_Creator;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsParcelable_Creator)

@implementation AndroidNetUri_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidNetUri_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidNetUri *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)inArg {
  jint type = [((AndroidOsParcel *) nil_chk(inArg)) readInt];
  switch (type) {
    case AndroidNetUri_NULL_TYPE_ID:
    return nil;
    case AndroidNetUri_StringUri_TYPE_ID:
    return AndroidNetUri_StringUri_readFromWithAndroidOsParcel_(inArg);
    case AndroidNetUri_OpaqueUri_TYPE_ID:
    return AndroidNetUri_OpaqueUri_readFromWithAndroidOsParcel_(inArg);
    case AndroidNetUri_HierarchicalUri_TYPE_ID:
    return AndroidNetUri_HierarchicalUri_readFromWithAndroidOsParcel_(inArg);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown URI type: ", type));
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:AndroidNetUri_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LAndroidNetUri;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithAndroidOsParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LAndroidOsParcel;", "newArray", "I", "LAndroidNetUri;", "Ljava/lang/Object;Landroid/os/Parcelable$Creator<Landroid/net/Uri;>;" };
  static const J2ObjcClassInfo _AndroidNetUri_1 = { "", "android.net", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, 5, -1 };
  return &_AndroidNetUri_1;
}

@end

void AndroidNetUri_1_init(AndroidNetUri_1 *self) {
  NSObject_init(self);
}

AndroidNetUri_1 *new_AndroidNetUri_1_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_1, init)
}

AndroidNetUri_1 *create_AndroidNetUri_1_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_1, init)
}

@implementation AndroidNetUri_AbstractPart

- (instancetype __nonnull)initWithNSString:(NSString *)encoded
                              withNSString:(NSString *)decoded {
  AndroidNetUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (NSString *)getEncoded {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDecoded {
  return AndroidNetUri_AbstractPart_getDecoded(self);
}

- (void)writeToWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(self, parcel);
}

- (void)__javaClone:(AndroidNetUri_AbstractPart *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&encoded_, &original->encoded_);
  JreCloneVolatileStrong(&decoded_, &original->decoded_);
}

- (void)dealloc {
  JreReleaseVolatile(&encoded_);
  JreReleaseVolatile(&decoded_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getDecoded);
  methods[3].selector = @selector(writeToWithAndroidOsParcel:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encoded_", "LNSString;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "decoded_", "LNSString;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "writeTo", "LAndroidOsParcel;", "LAndroidNetUri;", "LAndroidNetUri_AbstractPart_Representation;" };
  static const J2ObjcClassInfo _AndroidNetUri_AbstractPart = { "AbstractPart", "android.net", ptrTable, methods, fields, 7, 0x408, 4, 2, 3, 4, -1, -1, -1 };
  return &_AndroidNetUri_AbstractPart;
}

@end

void AndroidNetUri_AbstractPart_initWithNSString_withNSString_(AndroidNetUri_AbstractPart *self, NSString *encoded, NSString *decoded) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->encoded_, encoded);
  JreVolatileStrongAssign(&self->decoded_, decoded);
}

NSString *AndroidNetUri_AbstractPart_getDecoded(AndroidNetUri_AbstractPart *self) {
  jboolean hasDecoded = JreLoadVolatileId(&self->decoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return hasDecoded ? JreLoadVolatileId(&self->decoded_) : (JreVolatileStrongAssign(&self->decoded_, AndroidNetUri_decodeWithNSString_(JreLoadVolatileId(&self->encoded_))));
}

void AndroidNetUri_AbstractPart_writeToWithAndroidOsParcel_(AndroidNetUri_AbstractPart *self, AndroidOsParcel *parcel) {
  jboolean hasEncoded = JreLoadVolatileId(&self->encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  jboolean hasDecoded = JreLoadVolatileId(&self->decoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  if (hasEncoded && hasDecoded) {
    [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_AbstractPart_Representation_BOTH];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->encoded_)];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->decoded_)];
  }
  else if (hasEncoded) {
    [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_AbstractPart_Representation_ENCODED];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->encoded_)];
  }
  else if (hasDecoded) {
    [((AndroidOsParcel *) nil_chk(parcel)) writeIntWithInt:AndroidNetUri_AbstractPart_Representation_DECODED];
    [parcel writeStringWithNSString:JreLoadVolatileId(&self->decoded_)];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Neither encoded nor decoded");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_AbstractPart)

@implementation AndroidNetUri_AbstractPart_Representation

+ (jint)BOTH {
  return AndroidNetUri_AbstractPart_Representation_BOTH;
}

+ (jint)ENCODED {
  return AndroidNetUri_AbstractPart_Representation_ENCODED;
}

+ (jint)DECODED {
  return AndroidNetUri_AbstractPart_Representation_DECODED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidNetUri_AbstractPart_Representation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BOTH", "I", .constantValue.asInt = AndroidNetUri_AbstractPart_Representation_BOTH, 0x18, -1, -1, -1, -1 },
    { "ENCODED", "I", .constantValue.asInt = AndroidNetUri_AbstractPart_Representation_ENCODED, 0x18, -1, -1, -1, -1 },
    { "DECODED", "I", .constantValue.asInt = AndroidNetUri_AbstractPart_Representation_DECODED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidNetUri_AbstractPart;" };
  static const J2ObjcClassInfo _AndroidNetUri_AbstractPart_Representation = { "Representation", "android.net", ptrTable, methods, fields, 7, 0x8, 1, 3, 0, -1, -1, -1, -1 };
  return &_AndroidNetUri_AbstractPart_Representation;
}

@end

void AndroidNetUri_AbstractPart_Representation_init(AndroidNetUri_AbstractPart_Representation *self) {
  NSObject_init(self);
}

AndroidNetUri_AbstractPart_Representation *new_AndroidNetUri_AbstractPart_Representation_init() {
  J2OBJC_NEW_IMPL(AndroidNetUri_AbstractPart_Representation, init)
}

AndroidNetUri_AbstractPart_Representation *create_AndroidNetUri_AbstractPart_Representation_init() {
  J2OBJC_CREATE_IMPL(AndroidNetUri_AbstractPart_Representation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_AbstractPart_Representation)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri_Part)

AndroidNetUri_Part *AndroidNetUri_Part_NULL;
AndroidNetUri_Part *AndroidNetUri_Part_EMPTY;

@implementation AndroidNetUri_Part

+ (AndroidNetUri_Part *)NULL_ {
  return AndroidNetUri_Part_NULL;
}

+ (AndroidNetUri_Part *)EMPTY {
  return AndroidNetUri_Part_EMPTY;
}

- (instancetype __nonnull)initWithNSString:(NSString *)encoded
                              withNSString:(NSString *)decoded {
  AndroidNetUri_Part_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (jboolean)isEmpty {
  return false;
}

- (NSString *)getEncoded {
  jboolean hasEncoded = JreLoadVolatileId(&encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return hasEncoded ? JreLoadVolatileId(&encoded_) : (JreVolatileStrongAssign(&encoded_, AndroidNetUri_encodeWithNSString_(JreLoadVolatileId(&decoded_))));
}

+ (AndroidNetUri_Part *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_Part_readFromWithAndroidOsParcel_(parcel);
}

+ (AndroidNetUri_Part *)nonNullWithAndroidNetUri_Part:(AndroidNetUri_Part *)part {
  return AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(part);
}

+ (AndroidNetUri_Part *)fromEncodedWithNSString:(NSString *)encoded {
  return AndroidNetUri_Part_fromEncodedWithNSString_(encoded);
}

+ (AndroidNetUri_Part *)fromDecodedWithNSString:(NSString *)decoded {
  return AndroidNetUri_Part_fromDecodedWithNSString_(decoded);
}

+ (AndroidNetUri_Part *)fromWithNSString:(NSString *)encoded
                            withNSString:(NSString *)decoded {
  return AndroidNetUri_Part_fromWithNSString_withNSString_(encoded, decoded);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 7, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_Part;", 0x8, 8, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(getEncoded);
  methods[3].selector = @selector(readFromWithAndroidOsParcel:);
  methods[4].selector = @selector(nonNullWithAndroidNetUri_Part:);
  methods[5].selector = @selector(fromEncodedWithNSString:);
  methods[6].selector = @selector(fromDecodedWithNSString:);
  methods[7].selector = @selector(fromWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
    { "EMPTY", "LAndroidNetUri_Part;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "readFrom", "LAndroidOsParcel;", "nonNull", "LAndroidNetUri_Part;", "fromEncoded", "LNSString;", "fromDecoded", "from", &AndroidNetUri_Part_NULL, &AndroidNetUri_Part_EMPTY, "LAndroidNetUri;", "LAndroidNetUri_Part_EmptyPart;" };
  static const J2ObjcClassInfo _AndroidNetUri_Part = { "Part", "android.net", ptrTable, methods, fields, 7, 0x8, 8, 2, 11, 12, -1, -1, -1 };
  return &_AndroidNetUri_Part;
}

+ (void)initialize {
  if (self == [AndroidNetUri_Part class]) {
    JreStrongAssignAndConsume(&AndroidNetUri_Part_NULL, new_AndroidNetUri_Part_EmptyPart_initWithNSString_(nil));
    JreStrongAssignAndConsume(&AndroidNetUri_Part_EMPTY, new_AndroidNetUri_Part_EmptyPart_initWithNSString_(@""));
    J2OBJC_SET_INITIALIZED(AndroidNetUri_Part)
  }
}

@end

void AndroidNetUri_Part_initWithNSString_withNSString_(AndroidNetUri_Part *self, NSString *encoded, NSString *decoded) {
  AndroidNetUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
}

AndroidNetUri_Part *new_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_NEW_IMPL(AndroidNetUri_Part, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_Part *create_AndroidNetUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_Part, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_Part *AndroidNetUri_Part_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_Part_initialize();
  jint representation = [((AndroidOsParcel *) nil_chk(parcel)) readInt];
  switch (representation) {
    case AndroidNetUri_AbstractPart_Representation_BOTH:
    return AndroidNetUri_Part_fromWithNSString_withNSString_([parcel readString], [parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_ENCODED:
    return AndroidNetUri_Part_fromEncodedWithNSString_([parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_DECODED:
    return AndroidNetUri_Part_fromDecodedWithNSString_([parcel readString]);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown representation: ", representation));
  }
}

AndroidNetUri_Part *AndroidNetUri_Part_nonNullWithAndroidNetUri_Part_(AndroidNetUri_Part *part) {
  AndroidNetUri_Part_initialize();
  return part == nil ? AndroidNetUri_Part_NULL : part;
}

AndroidNetUri_Part *AndroidNetUri_Part_fromEncodedWithNSString_(NSString *encoded) {
  AndroidNetUri_Part_initialize();
  return AndroidNetUri_Part_fromWithNSString_withNSString_(encoded, JreLoadStatic(AndroidNetUri, NOT_CACHED));
}

AndroidNetUri_Part *AndroidNetUri_Part_fromDecodedWithNSString_(NSString *decoded) {
  AndroidNetUri_Part_initialize();
  return AndroidNetUri_Part_fromWithNSString_withNSString_(JreLoadStatic(AndroidNetUri, NOT_CACHED), decoded);
}

AndroidNetUri_Part *AndroidNetUri_Part_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  AndroidNetUri_Part_initialize();
  if (encoded == nil) {
    return AndroidNetUri_Part_NULL;
  }
  if ([encoded java_length] == 0) {
    return AndroidNetUri_Part_EMPTY;
  }
  if (decoded == nil) {
    return AndroidNetUri_Part_NULL;
  }
  if ([decoded java_length] == 0) {
    return AndroidNetUri_Part_EMPTY;
  }
  return create_AndroidNetUri_Part_initWithNSString_withNSString_(encoded, decoded);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_Part)

@implementation AndroidNetUri_Part_EmptyPart

- (instancetype __nonnull)initWithNSString:(NSString *)value {
  AndroidNetUri_Part_EmptyPart_initWithNSString_(self, value);
  return self;
}

- (jboolean)isEmpty {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LAndroidNetUri_Part;" };
  static const J2ObjcClassInfo _AndroidNetUri_Part_EmptyPart = { "EmptyPart", "android.net", ptrTable, methods, NULL, 7, 0xa, 2, 0, 1, -1, -1, -1, -1 };
  return &_AndroidNetUri_Part_EmptyPart;
}

@end

void AndroidNetUri_Part_EmptyPart_initWithNSString_(AndroidNetUri_Part_EmptyPart *self, NSString *value) {
  AndroidNetUri_Part_initWithNSString_withNSString_(self, value, value);
}

AndroidNetUri_Part_EmptyPart *new_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(AndroidNetUri_Part_EmptyPart, initWithNSString_, value)
}

AndroidNetUri_Part_EmptyPart *create_AndroidNetUri_Part_EmptyPart_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_Part_EmptyPart, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_Part_EmptyPart)

J2OBJC_INITIALIZED_DEFN(AndroidNetUri_PathPart)

AndroidNetUri_PathPart *AndroidNetUri_PathPart_NULL;
AndroidNetUri_PathPart *AndroidNetUri_PathPart_EMPTY;

@implementation AndroidNetUri_PathPart

+ (AndroidNetUri_PathPart *)NULL_ {
  return AndroidNetUri_PathPart_NULL;
}

+ (AndroidNetUri_PathPart *)EMPTY {
  return AndroidNetUri_PathPart_EMPTY;
}

- (instancetype __nonnull)initWithNSString:(NSString *)encoded
                              withNSString:(NSString *)decoded {
  AndroidNetUri_PathPart_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (NSString *)getEncoded {
  jboolean hasEncoded = JreLoadVolatileId(&encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return hasEncoded ? JreLoadVolatileId(&encoded_) : (JreVolatileStrongAssign(&encoded_, AndroidNetUri_encodeWithNSString_withNSString_(JreLoadVolatileId(&decoded_), @"/")));
}

- (AndroidNetUri_PathSegments *)getPathSegments {
  if (pathSegments_ != nil) {
    return pathSegments_;
  }
  NSString *path = [self getEncoded];
  if (path == nil) {
    return JreStrongAssign(&pathSegments_, JreLoadStatic(AndroidNetUri_PathSegments, EMPTY));
  }
  AndroidNetUri_PathSegmentsBuilder *segmentBuilder = create_AndroidNetUri_PathSegmentsBuilder_init();
  jint previous = 0;
  jint current;
  while ((current = [path java_indexOf:'/' fromIndex:previous]) > -1) {
    if (previous < current) {
      NSString *decodedSegment = AndroidNetUri_decodeWithNSString_([path java_substring:previous endIndex:current]);
      [segmentBuilder addWithNSString:decodedSegment];
    }
    previous = current + 1;
  }
  if (previous < [path java_length]) {
    [segmentBuilder addWithNSString:AndroidNetUri_decodeWithNSString_([path java_substring:previous])];
  }
  return JreStrongAssign(&pathSegments_, [segmentBuilder build]);
}

+ (AndroidNetUri_PathPart *)appendEncodedSegmentWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart
                                                              withNSString:(NSString *)newSegment {
  return AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(oldPart, newSegment);
}

+ (AndroidNetUri_PathPart *)appendDecodedSegmentWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart
                                                              withNSString:(NSString *)decoded {
  return AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(oldPart, decoded);
}

+ (AndroidNetUri_PathPart *)readFromWithAndroidOsParcel:(AndroidOsParcel *)parcel {
  return AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(parcel);
}

+ (AndroidNetUri_PathPart *)fromEncodedWithNSString:(NSString *)encoded {
  return AndroidNetUri_PathPart_fromEncodedWithNSString_(encoded);
}

+ (AndroidNetUri_PathPart *)fromDecodedWithNSString:(NSString *)decoded {
  return AndroidNetUri_PathPart_fromDecodedWithNSString_(decoded);
}

+ (AndroidNetUri_PathPart *)fromWithNSString:(NSString *)encoded
                                withNSString:(NSString *)decoded {
  return AndroidNetUri_PathPart_fromWithNSString_withNSString_(encoded, decoded);
}

+ (AndroidNetUri_PathPart *)makeAbsoluteWithAndroidNetUri_PathPart:(AndroidNetUri_PathPart *)oldPart {
  return AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(oldPart);
}

- (void)dealloc {
  RELEASE_(pathSegments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathSegments;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 3, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 8, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 9, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidNetUri_PathPart;", 0x8, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getPathSegments);
  methods[3].selector = @selector(appendEncodedSegmentWithAndroidNetUri_PathPart:withNSString:);
  methods[4].selector = @selector(appendDecodedSegmentWithAndroidNetUri_PathPart:withNSString:);
  methods[5].selector = @selector(readFromWithAndroidOsParcel:);
  methods[6].selector = @selector(fromEncodedWithNSString:);
  methods[7].selector = @selector(fromDecodedWithNSString:);
  methods[8].selector = @selector(fromWithNSString:withNSString:);
  methods[9].selector = @selector(makeAbsoluteWithAndroidNetUri_PathPart:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "EMPTY", "LAndroidNetUri_PathPart;", .constantValue.asLong = 0, 0x18, -1, 13, -1, -1 },
    { "pathSegments_", "LAndroidNetUri_PathSegments;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "appendEncodedSegment", "LAndroidNetUri_PathPart;LNSString;", "appendDecodedSegment", "readFrom", "LAndroidOsParcel;", "fromEncoded", "LNSString;", "fromDecoded", "from", "makeAbsolute", "LAndroidNetUri_PathPart;", &AndroidNetUri_PathPart_NULL, &AndroidNetUri_PathPart_EMPTY, "LAndroidNetUri;" };
  static const J2ObjcClassInfo _AndroidNetUri_PathPart = { "PathPart", "android.net", ptrTable, methods, fields, 7, 0x8, 10, 3, 14, -1, -1, -1, -1 };
  return &_AndroidNetUri_PathPart;
}

+ (void)initialize {
  if (self == [AndroidNetUri_PathPart class]) {
    JreStrongAssignAndConsume(&AndroidNetUri_PathPart_NULL, new_AndroidNetUri_PathPart_initWithNSString_withNSString_(nil, nil));
    JreStrongAssignAndConsume(&AndroidNetUri_PathPart_EMPTY, new_AndroidNetUri_PathPart_initWithNSString_withNSString_(@"", @""));
    J2OBJC_SET_INITIALIZED(AndroidNetUri_PathPart)
  }
}

@end

void AndroidNetUri_PathPart_initWithNSString_withNSString_(AndroidNetUri_PathPart *self, NSString *encoded, NSString *decoded) {
  AndroidNetUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
}

AndroidNetUri_PathPart *new_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_NEW_IMPL(AndroidNetUri_PathPart, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_PathPart *create_AndroidNetUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_CREATE_IMPL(AndroidNetUri_PathPart, initWithNSString_withNSString_, encoded, decoded)
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(AndroidNetUri_PathPart *oldPart, NSString *newSegment) {
  AndroidNetUri_PathPart_initialize();
  if (oldPart == nil) {
    return AndroidNetUri_PathPart_fromEncodedWithNSString_(JreStrcat("C$", '/', newSegment));
  }
  NSString *oldPath = [oldPart getEncoded];
  if (oldPath == nil) {
    oldPath = @"";
  }
  jint oldPathLength = [oldPath java_length];
  NSString *newPath;
  if (oldPathLength == 0) {
    newPath = JreStrcat("C$", '/', newSegment);
  }
  else if ([oldPath charAtWithInt:oldPathLength - 1] == '/') {
    newPath = JreStrcat("$$", oldPath, newSegment);
  }
  else {
    newPath = JreStrcat("$C$", oldPath, '/', newSegment);
  }
  return AndroidNetUri_PathPart_fromEncodedWithNSString_(newPath);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_appendDecodedSegmentWithAndroidNetUri_PathPart_withNSString_(AndroidNetUri_PathPart *oldPart, NSString *decoded) {
  AndroidNetUri_PathPart_initialize();
  NSString *encoded = AndroidNetUri_encodeWithNSString_(decoded);
  return AndroidNetUri_PathPart_appendEncodedSegmentWithAndroidNetUri_PathPart_withNSString_(oldPart, encoded);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_readFromWithAndroidOsParcel_(AndroidOsParcel *parcel) {
  AndroidNetUri_PathPart_initialize();
  jint representation = [((AndroidOsParcel *) nil_chk(parcel)) readInt];
  switch (representation) {
    case AndroidNetUri_AbstractPart_Representation_BOTH:
    return AndroidNetUri_PathPart_fromWithNSString_withNSString_([parcel readString], [parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_ENCODED:
    return AndroidNetUri_PathPart_fromEncodedWithNSString_([parcel readString]);
    case AndroidNetUri_AbstractPart_Representation_DECODED:
    return AndroidNetUri_PathPart_fromDecodedWithNSString_([parcel readString]);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Bad representation: ", representation));
  }
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromEncodedWithNSString_(NSString *encoded) {
  AndroidNetUri_PathPart_initialize();
  return AndroidNetUri_PathPart_fromWithNSString_withNSString_(encoded, JreLoadStatic(AndroidNetUri, NOT_CACHED));
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromDecodedWithNSString_(NSString *decoded) {
  AndroidNetUri_PathPart_initialize();
  return AndroidNetUri_PathPart_fromWithNSString_withNSString_(JreLoadStatic(AndroidNetUri, NOT_CACHED), decoded);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  AndroidNetUri_PathPart_initialize();
  if (encoded == nil) {
    return AndroidNetUri_PathPart_NULL;
  }
  if ([encoded java_length] == 0) {
    return AndroidNetUri_PathPart_EMPTY;
  }
  return create_AndroidNetUri_PathPart_initWithNSString_withNSString_(encoded, decoded);
}

AndroidNetUri_PathPart *AndroidNetUri_PathPart_makeAbsoluteWithAndroidNetUri_PathPart_(AndroidNetUri_PathPart *oldPart) {
  AndroidNetUri_PathPart_initialize();
  jboolean encodedCached = JreLoadVolatileId(&((AndroidNetUri_PathPart *) nil_chk(oldPart))->encoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  NSString *oldPath = encodedCached ? JreLoadVolatileId(&oldPart->encoded_) : JreLoadVolatileId(&oldPart->decoded_);
  if (oldPath == nil || [oldPath java_length] == 0 || [oldPath java_hasPrefix:@"/"]) {
    return oldPart;
  }
  NSString *newEncoded = encodedCached ? JreStrcat("C$", '/', JreLoadVolatileId(&oldPart->encoded_)) : JreLoadStatic(AndroidNetUri, NOT_CACHED);
  jboolean decodedCached = JreLoadVolatileId(&oldPart->decoded_) != JreLoadStatic(AndroidNetUri, NOT_CACHED);
  NSString *newDecoded = decodedCached ? JreStrcat("C$", '/', JreLoadVolatileId(&oldPart->decoded_)) : JreLoadStatic(AndroidNetUri, NOT_CACHED);
  return create_AndroidNetUri_PathPart_initWithNSString_withNSString_(newEncoded, newDecoded);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidNetUri_PathPart)

@implementation AndroidUtilAndroidRuntimeException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilAndroidRuntimeException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)name {
  AndroidUtilAndroidRuntimeException_initWithNSString_(self, name);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                     withJavaLangThrowable:(JavaLangThrowable *)cause {
  AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(self, name, cause);
  return self;
}

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)cause {
  AndroidUtilAndroidRuntimeException_initWithJavaLangException_(self, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[3].selector = @selector(initWithJavaLangException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;", "LJavaLangException;" };
  static const J2ObjcClassInfo _AndroidUtilAndroidRuntimeException = { "AndroidRuntimeException", "android.util", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_AndroidUtilAndroidRuntimeException;
}

@end

void AndroidUtilAndroidRuntimeException_init(AndroidUtilAndroidRuntimeException *self) {
  JavaLangRuntimeException_init(self);
}

AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_init() {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidRuntimeException, init)
}

AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidRuntimeException, init)
}

void AndroidUtilAndroidRuntimeException_initWithNSString_(AndroidUtilAndroidRuntimeException *self, NSString *name) {
  JavaLangRuntimeException_initWithNSString_(self, name);
}

AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidRuntimeException, initWithNSString_, name)
}

AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidRuntimeException, initWithNSString_, name)
}

void AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(AndroidUtilAndroidRuntimeException *self, NSString *name, JavaLangThrowable *cause) {
  JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, name, cause);
}

AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *name, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidRuntimeException, initWithNSString_withJavaLangThrowable_, name, cause)
}

AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *name, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidRuntimeException, initWithNSString_withJavaLangThrowable_, name, cause)
}

void AndroidUtilAndroidRuntimeException_initWithJavaLangException_(AndroidUtilAndroidRuntimeException *self, JavaLangException *cause) {
  JavaLangRuntimeException_initWithJavaLangThrowable_(self, cause);
}

AndroidUtilAndroidRuntimeException *new_AndroidUtilAndroidRuntimeException_initWithJavaLangException_(JavaLangException *cause) {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidRuntimeException, initWithJavaLangException_, cause)
}

AndroidUtilAndroidRuntimeException *create_AndroidUtilAndroidRuntimeException_initWithJavaLangException_(JavaLangException *cause) {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidRuntimeException, initWithJavaLangException_, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilAndroidRuntimeException)

@implementation AndroidOsBadParcelableException

- (instancetype __nonnull)initWithNSString:(NSString *)msg {
  AndroidOsBadParcelableException_initWithNSString_(self, msg);
  return self;
}

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)cause {
  AndroidOsBadParcelableException_initWithJavaLangException_(self, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaLangException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _AndroidOsBadParcelableException = { "BadParcelableException", "android.os", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidOsBadParcelableException;
}

@end

void AndroidOsBadParcelableException_initWithNSString_(AndroidOsBadParcelableException *self, NSString *msg) {
  AndroidUtilAndroidRuntimeException_initWithNSString_(self, msg);
}

AndroidOsBadParcelableException *new_AndroidOsBadParcelableException_initWithNSString_(NSString *msg) {
  J2OBJC_NEW_IMPL(AndroidOsBadParcelableException, initWithNSString_, msg)
}

AndroidOsBadParcelableException *create_AndroidOsBadParcelableException_initWithNSString_(NSString *msg) {
  J2OBJC_CREATE_IMPL(AndroidOsBadParcelableException, initWithNSString_, msg)
}

void AndroidOsBadParcelableException_initWithJavaLangException_(AndroidOsBadParcelableException *self, JavaLangException *cause) {
  AndroidUtilAndroidRuntimeException_initWithJavaLangException_(self, cause);
}

AndroidOsBadParcelableException *new_AndroidOsBadParcelableException_initWithJavaLangException_(JavaLangException *cause) {
  J2OBJC_NEW_IMPL(AndroidOsBadParcelableException, initWithJavaLangException_, cause)
}

AndroidOsBadParcelableException *create_AndroidOsBadParcelableException_initWithJavaLangException_(JavaLangException *cause) {
  J2OBJC_CREATE_IMPL(AndroidOsBadParcelableException, initWithJavaLangException_, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsBadParcelableException)

NSString *AndroidOsBuild_UNKNOWN = @"unknown";

@implementation AndroidOsBuild

+ (NSString *)UNKNOWN {
  return AndroidOsBuild_UNKNOWN;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsBuild_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNKNOWN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &AndroidOsBuild_UNKNOWN, "LAndroidOsBuild_VERSION_CODES;" };
  static const J2ObjcClassInfo _AndroidOsBuild = { "Build", "android.os", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_AndroidOsBuild;
}

@end

void AndroidOsBuild_init(AndroidOsBuild *self) {
  NSObject_init(self);
}

AndroidOsBuild *new_AndroidOsBuild_init() {
  J2OBJC_NEW_IMPL(AndroidOsBuild, init)
}

AndroidOsBuild *create_AndroidOsBuild_init() {
  J2OBJC_CREATE_IMPL(AndroidOsBuild, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsBuild)

@implementation AndroidOsBuild_VERSION_CODES

+ (jint)CUR_DEVELOPMENT {
  return AndroidOsBuild_VERSION_CODES_CUR_DEVELOPMENT;
}

+ (jint)BASE {
  return AndroidOsBuild_VERSION_CODES_BASE;
}

+ (jint)BASE_1_1 {
  return AndroidOsBuild_VERSION_CODES_BASE_1_1;
}

+ (jint)CUPCAKE {
  return AndroidOsBuild_VERSION_CODES_CUPCAKE;
}

+ (jint)DONUT {
  return AndroidOsBuild_VERSION_CODES_DONUT;
}

+ (jint)ECLAIR {
  return AndroidOsBuild_VERSION_CODES_ECLAIR;
}

+ (jint)ECLAIR_0_1 {
  return AndroidOsBuild_VERSION_CODES_ECLAIR_0_1;
}

+ (jint)ECLAIR_MR1 {
  return AndroidOsBuild_VERSION_CODES_ECLAIR_MR1;
}

+ (jint)FROYO {
  return AndroidOsBuild_VERSION_CODES_FROYO;
}

+ (jint)GINGERBREAD {
  return AndroidOsBuild_VERSION_CODES_GINGERBREAD;
}

+ (jint)GINGERBREAD_MR1 {
  return AndroidOsBuild_VERSION_CODES_GINGERBREAD_MR1;
}

+ (jint)HONEYCOMB {
  return AndroidOsBuild_VERSION_CODES_HONEYCOMB;
}

+ (jint)HONEYCOMB_MR1 {
  return AndroidOsBuild_VERSION_CODES_HONEYCOMB_MR1;
}

+ (jint)HONEYCOMB_MR2 {
  return AndroidOsBuild_VERSION_CODES_HONEYCOMB_MR2;
}

+ (jint)ICE_CREAM_SANDWICH {
  return AndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH;
}

+ (jint)ICE_CREAM_SANDWICH_MR1 {
  return AndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH_MR1;
}

+ (jint)JELLY_BEAN {
  return AndroidOsBuild_VERSION_CODES_JELLY_BEAN;
}

+ (jint)JELLY_BEAN_MR1 {
  return AndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR1;
}

+ (jint)JELLY_BEAN_MR2 {
  return AndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR2;
}

+ (jint)KITKAT {
  return AndroidOsBuild_VERSION_CODES_KITKAT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsBuild_VERSION_CODES_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CUR_DEVELOPMENT", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_CUR_DEVELOPMENT, 0x19, -1, -1, -1, -1 },
    { "BASE", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_BASE, 0x19, -1, -1, -1, -1 },
    { "BASE_1_1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_BASE_1_1, 0x19, -1, -1, -1, -1 },
    { "CUPCAKE", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_CUPCAKE, 0x19, -1, -1, -1, -1 },
    { "DONUT", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_DONUT, 0x19, -1, -1, -1, -1 },
    { "ECLAIR", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_ECLAIR, 0x19, -1, -1, -1, -1 },
    { "ECLAIR_0_1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_ECLAIR_0_1, 0x19, -1, -1, -1, -1 },
    { "ECLAIR_MR1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_ECLAIR_MR1, 0x19, -1, -1, -1, -1 },
    { "FROYO", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_FROYO, 0x19, -1, -1, -1, -1 },
    { "GINGERBREAD", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_GINGERBREAD, 0x19, -1, -1, -1, -1 },
    { "GINGERBREAD_MR1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_GINGERBREAD_MR1, 0x19, -1, -1, -1, -1 },
    { "HONEYCOMB", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_HONEYCOMB, 0x19, -1, -1, -1, -1 },
    { "HONEYCOMB_MR1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_HONEYCOMB_MR1, 0x19, -1, -1, -1, -1 },
    { "HONEYCOMB_MR2", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_HONEYCOMB_MR2, 0x19, -1, -1, -1, -1 },
    { "ICE_CREAM_SANDWICH", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH, 0x19, -1, -1, -1, -1 },
    { "ICE_CREAM_SANDWICH_MR1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH_MR1, 0x19, -1, -1, -1, -1 },
    { "JELLY_BEAN", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_JELLY_BEAN, 0x19, -1, -1, -1, -1 },
    { "JELLY_BEAN_MR1", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR1, 0x19, -1, -1, -1, -1 },
    { "JELLY_BEAN_MR2", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR2, 0x19, -1, -1, -1, -1 },
    { "KITKAT", "I", .constantValue.asInt = AndroidOsBuild_VERSION_CODES_KITKAT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsBuild;" };
  static const J2ObjcClassInfo _AndroidOsBuild_VERSION_CODES = { "VERSION_CODES", "android.os", ptrTable, methods, fields, 7, 0x9, 1, 20, 0, -1, -1, -1, -1 };
  return &_AndroidOsBuild_VERSION_CODES;
}

@end

void AndroidOsBuild_VERSION_CODES_init(AndroidOsBuild_VERSION_CODES *self) {
  NSObject_init(self);
}

AndroidOsBuild_VERSION_CODES *new_AndroidOsBuild_VERSION_CODES_init() {
  J2OBJC_NEW_IMPL(AndroidOsBuild_VERSION_CODES, init)
}

AndroidOsBuild_VERSION_CODES *create_AndroidOsBuild_VERSION_CODES_init() {
  J2OBJC_CREATE_IMPL(AndroidOsBuild_VERSION_CODES, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsBuild_VERSION_CODES)

J2OBJC_INITIALIZED_DEFN(AndroidOsBundle)

AndroidOsBundle *AndroidOsBundle_EMPTY;

@implementation AndroidOsBundle

+ (AndroidOsBundle *)EMPTY {
  return AndroidOsBundle_EMPTY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsBundle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  AndroidOsBundle_initWithJavaLangClassLoader_(self, loader);
  return self;
}

- (instancetype __nonnull)initWithInt:(jint)capacity {
  AndroidOsBundle_initWithInt_(self, capacity);
  return self;
}

- (instancetype __nonnull)initWithAndroidOsBundle:(AndroidOsBundle *)b {
  AndroidOsBundle_initWithAndroidOsBundle_(self, b);
  return self;
}

+ (AndroidOsBundle *)forPairWithNSString:(NSString *)key
                            withNSString:(NSString *)value {
  return AndroidOsBundle_forPairWithNSString_withNSString_(key, value);
}

- (NSString *)getPairValue {
  jint size = [((id<JavaUtilMap>) nil_chk(mMap_)) size];
  if (size > 1) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidOsBundle_LOG_TAG, @"getPairValue() used on Bundle with multiple pairs.");
  }
  if (size == 0) {
    return nil;
  }
  id o = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(mMap_)) values])) iterator])) next];
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, @"getPairValue()", o, @"String", e);
    return nil;
  }
}

- (void)setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  JreStrongAssign(&mClassLoader_, loader);
}

- (JavaLangClassLoader *)getClassLoader {
  return mClassLoader_;
}

- (jboolean)setAllowFdsWithBoolean:(jboolean)allowFds {
  jboolean orig = mAllowFds_;
  mAllowFds_ = allowFds;
  return orig;
}

- (id)java_clone {
  return create_AndroidOsBundle_initWithAndroidOsBundle_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) isEmpty];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(mMap_)) clear];
  mHasFds_ = false;
  mFdsKnown_ = true;
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) containsKeyWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
}

- (void)removeWithNSString:(NSString *)key {
  [((id<JavaUtilMap>) nil_chk(mMap_)) removeWithId:key];
}

- (void)putAllWithAndroidOsBundle:(AndroidOsBundle *)map {
  [((id<JavaUtilMap>) nil_chk(((AndroidOsBundle *) nil_chk(map))->mMap_)) putAllWithJavaUtilMap:map->mMap_];
  mHasFds_ |= map->mHasFds_;
  mFdsKnown_ = (mFdsKnown_ && map->mFdsKnown_);
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) keySet];
}

- (void)putBooleanWithNSString:(NSString *)key
                   withBoolean:(jboolean)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangBoolean_valueOfWithBoolean_(value)];
}

- (void)putByteWithNSString:(NSString *)key
                   withByte:(jbyte)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangByte_valueOfWithByte_(value)];
}

- (void)putCharWithNSString:(NSString *)key
                   withChar:(jchar)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangCharacter_valueOfWithChar_(value)];
}

- (void)putShortWithNSString:(NSString *)key
                   withShort:(jshort)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangShort_valueOfWithShort_(value)];
}

- (void)putIntWithNSString:(NSString *)key
                   withInt:(jint)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangInteger_valueOfWithInt_(value)];
}

- (void)putLongWithNSString:(NSString *)key
                   withLong:(jlong)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangLong_valueOfWithLong_(value)];
}

- (void)putFloatWithNSString:(NSString *)key
                   withFloat:(jfloat)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangFloat_valueOfWithFloat_(value)];
}

- (void)putDoubleWithNSString:(NSString *)key
                   withDouble:(jdouble)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangDouble_valueOfWithDouble_(value)];
}

- (void)putStringWithNSString:(NSString *)key
                 withNSString:(NSString *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceWithNSString:(NSString *)key
           withJavaLangCharSequence:(id<JavaLangCharSequence>)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putIntegerArrayListWithNSString:(NSString *)key
                  withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceArrayListWithNSString:(NSString *)key
                       withJavaUtilArrayList:(JavaUtilArrayList *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putSerializableWithNSString:(NSString *)key
             withJavaIoSerializable:(id<JavaIoSerializable>)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putBooleanArrayWithNSString:(NSString *)key
                   withBooleanArray:(IOSBooleanArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putByteArrayWithNSString:(NSString *)key
                   withByteArray:(IOSByteArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putShortArrayWithNSString:(NSString *)key
                   withShortArray:(IOSShortArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharArrayWithNSString:(NSString *)key
                   withCharArray:(IOSCharArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putIntArrayWithNSString:(NSString *)key
                   withIntArray:(IOSIntArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putLongArrayWithNSString:(NSString *)key
                   withLongArray:(IOSLongArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putFloatArrayWithNSString:(NSString *)key
                   withFloatArray:(IOSFloatArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putDoubleArrayWithNSString:(NSString *)key
                   withDoubleArray:(IOSDoubleArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putStringArrayWithNSString:(NSString *)key
                 withNSStringArray:(IOSObjectArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceArrayWithNSString:(NSString *)key
           withJavaLangCharSequenceArray:(IOSObjectArray *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putBundleWithNSString:(NSString *)key
          withAndroidOsBundle:(AndroidOsBundle *)value {
  [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  return [self getBooleanWithNSString:key withBoolean:false];
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
                         withId:(id)defaultValue
 withJavaLangClassCastException:(JavaLangClassCastException *)e {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, value, className_, defaultValue, e);
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
 withJavaLangClassCastException:(JavaLangClassCastException *)e {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, value, className_, e);
}

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangBoolean *) cast_chk(o, [JavaLangBoolean class]) booleanValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Boolean", JavaLangBoolean_valueOfWithBoolean_(defaultValue), e);
    return defaultValue;
  }
}

- (jbyte)getByteWithNSString:(NSString *)key {
  return [((JavaLangByte *) nil_chk([self getByteWithNSString:key withByte:(jbyte) 0])) charValue];
}

- (JavaLangByte *)getByteWithNSString:(NSString *)key
                             withByte:(jbyte)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return JavaLangByte_valueOfWithByte_(defaultValue);
  }
  @try {
    return (JavaLangByte *) cast_chk(o, [JavaLangByte class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Byte", JavaLangByte_valueOfWithByte_(defaultValue), e);
    return JavaLangByte_valueOfWithByte_(defaultValue);
  }
}

- (jchar)getCharWithNSString:(NSString *)key {
  return [self getCharWithNSString:key withChar:(jchar) 0];
}

- (jchar)getCharWithNSString:(NSString *)key
                    withChar:(jchar)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangCharacter *) cast_chk(o, [JavaLangCharacter class]) charValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Character", JavaLangCharacter_valueOfWithChar_(defaultValue), e);
    return defaultValue;
  }
}

- (jshort)getShortWithNSString:(NSString *)key {
  return [self getShortWithNSString:key withShort:(jshort) 0];
}

- (jshort)getShortWithNSString:(NSString *)key
                     withShort:(jshort)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangShort *) cast_chk(o, [JavaLangShort class]) shortValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Short", JavaLangShort_valueOfWithShort_(defaultValue), e);
    return defaultValue;
  }
}

- (jint)getIntWithNSString:(NSString *)key {
  return [self getIntWithNSString:key withInt:0];
}

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangInteger *) cast_chk(o, [JavaLangInteger class]) intValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Integer", JavaLangInteger_valueOfWithInt_(defaultValue), e);
    return defaultValue;
  }
}

- (jlong)getLongWithNSString:(NSString *)key {
  return [self getLongWithNSString:key withLong:0LL];
}

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangLong *) cast_chk(o, [JavaLangLong class]) longLongValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Long", JavaLangLong_valueOfWithLong_(defaultValue), e);
    return defaultValue;
  }
}

- (jfloat)getFloatWithNSString:(NSString *)key {
  return [self getFloatWithNSString:key withFloat:0.0f];
}

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangFloat *) cast_chk(o, [JavaLangFloat class]) floatValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Float", JavaLangFloat_valueOfWithFloat_(defaultValue), e);
    return defaultValue;
  }
}

- (jdouble)getDoubleWithNSString:(NSString *)key {
  return [self getDoubleWithNSString:key withDouble:0.0];
}

- (jdouble)getDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [(JavaLangDouble *) cast_chk(o, [JavaLangDouble class]) doubleValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Double", JavaLangDouble_valueOfWithDouble_(defaultValue), e);
    return defaultValue;
  }
}

- (NSString *)getStringWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String", e);
    return nil;
  }
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String", e);
    return defaultValue;
  }
}

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavaLangCharSequence_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence", e);
    return nil;
  }
}

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavaLangCharSequence_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence", e);
    return defaultValue;
  }
}

- (AndroidOsBundle *)getBundleWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (AndroidOsBundle *) cast_chk(o, [AndroidOsBundle class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"Bundle", e);
    return nil;
  }
}

- (id<JavaIoSerializable>)getSerializableWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (id<JavaIoSerializable>) cast_check(o, JavaIoSerializable_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"Serializable", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getIntegerArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<Integer>", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<String>", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getCharSequenceArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<CharSequence>", e);
    return nil;
  }
}

- (IOSBooleanArray *)getBooleanArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSBooleanArray *) cast_chk(o, [IOSBooleanArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"byte[]", e);
    return nil;
  }
}

- (IOSByteArray *)getByteArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSByteArray *) cast_chk(o, [IOSByteArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"byte[]", e);
    return nil;
  }
}

- (IOSShortArray *)getShortArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSShortArray *) cast_chk(o, [IOSShortArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"short[]", e);
    return nil;
  }
}

- (IOSCharArray *)getCharArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSCharArray *) cast_chk(o, [IOSCharArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"char[]", e);
    return nil;
  }
}

- (IOSIntArray *)getIntArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSIntArray *) cast_chk(o, [IOSIntArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"int[]", e);
    return nil;
  }
}

- (IOSLongArray *)getLongArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSLongArray *) cast_chk(o, [IOSLongArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"long[]", e);
    return nil;
  }
}

- (IOSFloatArray *)getFloatArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSFloatArray *) cast_chk(o, [IOSFloatArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"float[]", e);
    return nil;
  }
}

- (IOSDoubleArray *)getDoubleArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSDoubleArray *) cast_chk(o, [IOSDoubleArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"double[]", e);
    return nil;
  }
}

- (IOSObjectArray *)getStringArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSString_class_(), 1));
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String[]", e);
    return nil;
  }
}

- (IOSObjectArray *)getCharSequenceArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSObjectArray *) cast_check(o, IOSClass_arrayType(JavaLangCharSequence_class_(), 1));
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence[]", e);
    return nil;
  }
}

- (NSString *)description {
  @synchronized(self) {
    return JreRetainedLocalValue(JreStrcat("$$C", @"Bundle[", [((id<JavaUtilMap>) nil_chk(mMap_)) description], ']'));
  }
}

- (jint)describeContents {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)dest
                                 withInt:(jint)flags {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(mMap_);
  RELEASE_(mClassLoader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangClassLoader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x1, 37, 35, -1, 38, -1, -1 },
    { NULL, "V", 0x1, 39, 35, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 65, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 68, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 65, 16, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 69, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, 69, 18, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 70, 10, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 70, 20, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 71, 10, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 71, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 24, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 73, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 73, 26, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 74, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 74, 28, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 75, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 75, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 76, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 76, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 77, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 77, 33, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, 78, 10, -1, -1, -1, -1 },
    { NULL, "LJavaIoSerializable;", 0x1, 79, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 80, 10, -1, 81, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 82, 10, -1, 83, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 84, 10, -1, 85, -1, -1 },
    { NULL, "[Z", 0x1, 86, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 87, 10, -1, -1, -1, -1 },
    { NULL, "[S", 0x1, 88, 10, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 89, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 90, 10, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, 91, 10, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 92, 10, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 93, 10, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 94, 10, -1, -1, -1, -1 },
    { NULL, "[LJavaLangCharSequence;", 0x1, 95, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 96, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 98, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaLangClassLoader:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithAndroidOsBundle:);
  methods[4].selector = @selector(forPairWithNSString:withNSString:);
  methods[5].selector = @selector(getPairValue);
  methods[6].selector = @selector(setClassLoaderWithJavaLangClassLoader:);
  methods[7].selector = @selector(getClassLoader);
  methods[8].selector = @selector(setAllowFdsWithBoolean:);
  methods[9].selector = @selector(java_clone);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(isEmpty);
  methods[12].selector = @selector(clear);
  methods[13].selector = @selector(containsKeyWithNSString:);
  methods[14].selector = @selector(getWithNSString:);
  methods[15].selector = @selector(removeWithNSString:);
  methods[16].selector = @selector(putAllWithAndroidOsBundle:);
  methods[17].selector = @selector(keySet);
  methods[18].selector = @selector(putBooleanWithNSString:withBoolean:);
  methods[19].selector = @selector(putByteWithNSString:withByte:);
  methods[20].selector = @selector(putCharWithNSString:withChar:);
  methods[21].selector = @selector(putShortWithNSString:withShort:);
  methods[22].selector = @selector(putIntWithNSString:withInt:);
  methods[23].selector = @selector(putLongWithNSString:withLong:);
  methods[24].selector = @selector(putFloatWithNSString:withFloat:);
  methods[25].selector = @selector(putDoubleWithNSString:withDouble:);
  methods[26].selector = @selector(putStringWithNSString:withNSString:);
  methods[27].selector = @selector(putCharSequenceWithNSString:withJavaLangCharSequence:);
  methods[28].selector = @selector(putIntegerArrayListWithNSString:withJavaUtilArrayList:);
  methods[29].selector = @selector(putStringArrayListWithNSString:withJavaUtilArrayList:);
  methods[30].selector = @selector(putCharSequenceArrayListWithNSString:withJavaUtilArrayList:);
  methods[31].selector = @selector(putSerializableWithNSString:withJavaIoSerializable:);
  methods[32].selector = @selector(putBooleanArrayWithNSString:withBooleanArray:);
  methods[33].selector = @selector(putByteArrayWithNSString:withByteArray:);
  methods[34].selector = @selector(putShortArrayWithNSString:withShortArray:);
  methods[35].selector = @selector(putCharArrayWithNSString:withCharArray:);
  methods[36].selector = @selector(putIntArrayWithNSString:withIntArray:);
  methods[37].selector = @selector(putLongArrayWithNSString:withLongArray:);
  methods[38].selector = @selector(putFloatArrayWithNSString:withFloatArray:);
  methods[39].selector = @selector(putDoubleArrayWithNSString:withDoubleArray:);
  methods[40].selector = @selector(putStringArrayWithNSString:withNSStringArray:);
  methods[41].selector = @selector(putCharSequenceArrayWithNSString:withJavaLangCharSequenceArray:);
  methods[42].selector = @selector(putBundleWithNSString:withAndroidOsBundle:);
  methods[43].selector = @selector(getBooleanWithNSString:);
  methods[44].selector = @selector(typeWarningWithNSString:withId:withNSString:withId:withJavaLangClassCastException:);
  methods[45].selector = @selector(typeWarningWithNSString:withId:withNSString:withJavaLangClassCastException:);
  methods[46].selector = @selector(getBooleanWithNSString:withBoolean:);
  methods[47].selector = @selector(getByteWithNSString:);
  methods[48].selector = @selector(getByteWithNSString:withByte:);
  methods[49].selector = @selector(getCharWithNSString:);
  methods[50].selector = @selector(getCharWithNSString:withChar:);
  methods[51].selector = @selector(getShortWithNSString:);
  methods[52].selector = @selector(getShortWithNSString:withShort:);
  methods[53].selector = @selector(getIntWithNSString:);
  methods[54].selector = @selector(getIntWithNSString:withInt:);
  methods[55].selector = @selector(getLongWithNSString:);
  methods[56].selector = @selector(getLongWithNSString:withLong:);
  methods[57].selector = @selector(getFloatWithNSString:);
  methods[58].selector = @selector(getFloatWithNSString:withFloat:);
  methods[59].selector = @selector(getDoubleWithNSString:);
  methods[60].selector = @selector(getDoubleWithNSString:withDouble:);
  methods[61].selector = @selector(getStringWithNSString:);
  methods[62].selector = @selector(getStringWithNSString:withNSString:);
  methods[63].selector = @selector(getCharSequenceWithNSString:);
  methods[64].selector = @selector(getCharSequenceWithNSString:withJavaLangCharSequence:);
  methods[65].selector = @selector(getBundleWithNSString:);
  methods[66].selector = @selector(getSerializableWithNSString:);
  methods[67].selector = @selector(getIntegerArrayListWithNSString:);
  methods[68].selector = @selector(getStringArrayListWithNSString:);
  methods[69].selector = @selector(getCharSequenceArrayListWithNSString:);
  methods[70].selector = @selector(getBooleanArrayWithNSString:);
  methods[71].selector = @selector(getByteArrayWithNSString:);
  methods[72].selector = @selector(getShortArrayWithNSString:);
  methods[73].selector = @selector(getCharArrayWithNSString:);
  methods[74].selector = @selector(getIntArrayWithNSString:);
  methods[75].selector = @selector(getLongArrayWithNSString:);
  methods[76].selector = @selector(getFloatArrayWithNSString:);
  methods[77].selector = @selector(getDoubleArrayWithNSString:);
  methods[78].selector = @selector(getStringArrayWithNSString:);
  methods[79].selector = @selector(getCharSequenceArrayWithNSString:);
  methods[80].selector = @selector(description);
  methods[81].selector = @selector(describeContents);
  methods[82].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 99, -1, -1 },
    { "EMPTY", "LAndroidOsBundle;", .constantValue.asLong = 0, 0x19, -1, 100, -1, -1 },
    { "mMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 101, -1 },
    { "mHasFds_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFdsKnown_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAllowFds_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mClassLoader_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangClassLoader;", "I", "LAndroidOsBundle;", "forPair", "LNSString;LNSString;", "setClassLoader", "setAllowFds", "Z", "clone", "containsKey", "LNSString;", "get", "remove", "putAll", "()Ljava/util/Set<Ljava/lang/String;>;", "putBoolean", "LNSString;Z", "putByte", "LNSString;B", "putChar", "LNSString;C", "putShort", "LNSString;S", "putInt", "LNSString;I", "putLong", "LNSString;J", "putFloat", "LNSString;F", "putDouble", "LNSString;D", "putString", "putCharSequence", "LNSString;LJavaLangCharSequence;", "putIntegerArrayList", "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Integer;>;)V", "putStringArrayList", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V", "putCharSequenceArrayList", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/CharSequence;>;)V", "putSerializable", "LNSString;LJavaIoSerializable;", "putBooleanArray", "LNSString;[Z", "putByteArray", "LNSString;[B", "putShortArray", "LNSString;[S", "putCharArray", "LNSString;[C", "putIntArray", "LNSString;[I", "putLongArray", "LNSString;[J", "putFloatArray", "LNSString;[F", "putDoubleArray", "LNSString;[D", "putStringArray", "LNSString;[LNSString;", "putCharSequenceArray", "LNSString;[LJavaLangCharSequence;", "putBundle", "LNSString;LAndroidOsBundle;", "getBoolean", "typeWarning", "LNSString;LNSObject;LNSString;LNSObject;LJavaLangClassCastException;", "LNSString;LNSObject;LNSString;LJavaLangClassCastException;", "getByte", "getChar", "getShort", "getInt", "getLong", "getFloat", "getDouble", "getString", "getCharSequence", "getBundle", "getSerializable", "getIntegerArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/Integer;>;", "getStringArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/String;>;", "getCharSequenceArrayList", "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/CharSequence;>;", "getBooleanArray", "getByteArray", "getShortArray", "getCharArray", "getIntArray", "getLongArray", "getFloatArray", "getDoubleArray", "getStringArray", "getCharSequenceArray", "toString", "writeToParcel", "LAndroidOsParcel;I", &AndroidOsBundle_LOG_TAG, &AndroidOsBundle_EMPTY, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _AndroidOsBundle = { "Bundle", "android.os", ptrTable, methods, fields, 7, 0x11, 83, 7, -1, -1, -1, -1, -1 };
  return &_AndroidOsBundle;
}

- (id)copyWithZone:(NSZone * __nullable)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [AndroidOsBundle class]) {
    {
      JreStrongAssignAndConsume(&AndroidOsBundle_EMPTY, new_AndroidOsBundle_init());
      JreStrongAssign(&AndroidOsBundle_EMPTY->mMap_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(create_JavaUtilHashMap_init()));
    }
    J2OBJC_SET_INITIALIZED(AndroidOsBundle)
  }
}

@end

void AndroidOsBundle_init(AndroidOsBundle *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->mClassLoader_, [[self java_getClass] getClassLoader]);
}

AndroidOsBundle *new_AndroidOsBundle_init() {
  J2OBJC_NEW_IMPL(AndroidOsBundle, init)
}

AndroidOsBundle *create_AndroidOsBundle_init() {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, init)
}

void AndroidOsBundle_initWithJavaLangClassLoader_(AndroidOsBundle *self, JavaLangClassLoader *loader) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->mClassLoader_, loader);
}

AndroidOsBundle *new_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) {
  J2OBJC_NEW_IMPL(AndroidOsBundle, initWithJavaLangClassLoader_, loader)
}

AndroidOsBundle *create_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, initWithJavaLangClassLoader_, loader)
}

void AndroidOsBundle_initWithInt_(AndroidOsBundle *self, jint capacity) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_initWithInt_(capacity));
  JreStrongAssign(&self->mClassLoader_, [[self java_getClass] getClassLoader]);
}

AndroidOsBundle *new_AndroidOsBundle_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(AndroidOsBundle, initWithInt_, capacity)
}

AndroidOsBundle *create_AndroidOsBundle_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, initWithInt_, capacity)
}

void AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *self, AndroidOsBundle *b) {
  NSObject_init(self);
  JreStrongAssign(&self->mMap_, nil);
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  if (((AndroidOsBundle *) nil_chk(b))->mMap_ != nil) {
    JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_initWithJavaUtilMap_(b->mMap_));
  }
  else {
    JreStrongAssign(&self->mMap_, nil);
  }
  self->mHasFds_ = b->mHasFds_;
  self->mFdsKnown_ = b->mFdsKnown_;
  JreStrongAssign(&self->mClassLoader_, b->mClassLoader_);
}

AndroidOsBundle *new_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) {
  J2OBJC_NEW_IMPL(AndroidOsBundle, initWithAndroidOsBundle_, b)
}

AndroidOsBundle *create_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) {
  J2OBJC_CREATE_IMPL(AndroidOsBundle, initWithAndroidOsBundle_, b)
}

AndroidOsBundle *AndroidOsBundle_forPairWithNSString_withNSString_(NSString *key, NSString *value) {
  AndroidOsBundle_initialize();
  AndroidOsBundle *b = create_AndroidOsBundle_initWithInt_(1);
  [b putStringWithNSString:key withNSString:value];
  return b;
}

void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, id defaultValue, JavaLangClassCastException *e) {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:@"Key "];
  [sb appendWithNSString:key];
  [sb appendWithNSString:@" expected "];
  [sb appendWithNSString:className_];
  [sb appendWithNSString:@" but value was a "];
  [sb appendWithNSString:[[nil_chk(value) java_getClass] getName]];
  [sb appendWithNSString:@".  The default value "];
  [sb appendWithId:defaultValue];
  [sb appendWithNSString:@" was returned."];
  AndroidUtilLog_wWithNSString_withNSString_(AndroidOsBundle_LOG_TAG, [sb description]);
  AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(AndroidOsBundle_LOG_TAG, @"Attempt to cast generated internal exception:", e);
}

void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, JavaLangClassCastException *e) {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, value, className_, @"<null>", e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsBundle)

@implementation AndroidOsCancellationSignal

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsCancellationSignal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isCanceled {
  @synchronized(self) {
    return mIsCanceled_;
  }
}

- (void)throwIfCanceled {
  if ([self isCanceled]) {
    @throw create_AndroidOsOperationCanceledException_init();
  }
}

- (void)cancel {
  id<AndroidOsCancellationSignal_OnCancelListener> listener;
  @synchronized(self) {
    if (mIsCanceled_) {
      return;
    }
    mIsCanceled_ = true;
    mCancelInProgress_ = true;
    listener = JreRetainedLocalValue(mOnCancelListener_);
  }
  @try {
    if (listener != nil) {
      [listener onCancel];
    }
  }
  @finally {
    @synchronized(self) {
      mCancelInProgress_ = false;
      [self java_notifyAll];
    }
  }
}

- (void)setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:(id<AndroidOsCancellationSignal_OnCancelListener>)listener {
  @synchronized(self) {
    AndroidOsCancellationSignal_waitForCancelFinishedLocked(self);
    if (mOnCancelListener_ == listener) {
      return;
    }
    JreStrongAssign(&mOnCancelListener_, listener);
    if (!mIsCanceled_ || listener == nil) {
      return;
    }
  }
  [listener onCancel];
}

- (void)waitForCancelFinishedLocked {
  AndroidOsCancellationSignal_waitForCancelFinishedLocked(self);
}

- (void)dealloc {
  RELEASE_(mOnCancelListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isCanceled);
  methods[2].selector = @selector(throwIfCanceled);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(setOnCancelListenerWithAndroidOsCancellationSignal_OnCancelListener:);
  methods[5].selector = @selector(waitForCancelFinishedLocked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mIsCanceled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnCancelListener_", "LAndroidOsCancellationSignal_OnCancelListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCancelInProgress_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setOnCancelListener", "LAndroidOsCancellationSignal_OnCancelListener;" };
  static const J2ObjcClassInfo _AndroidOsCancellationSignal = { "CancellationSignal", "android.os", ptrTable, methods, fields, 7, 0x11, 6, 3, -1, 1, -1, -1, -1 };
  return &_AndroidOsCancellationSignal;
}

@end

void AndroidOsCancellationSignal_init(AndroidOsCancellationSignal *self) {
  NSObject_init(self);
}

AndroidOsCancellationSignal *new_AndroidOsCancellationSignal_init() {
  J2OBJC_NEW_IMPL(AndroidOsCancellationSignal, init)
}

AndroidOsCancellationSignal *create_AndroidOsCancellationSignal_init() {
  J2OBJC_CREATE_IMPL(AndroidOsCancellationSignal, init)
}

void AndroidOsCancellationSignal_waitForCancelFinishedLocked(AndroidOsCancellationSignal *self) {
  while (self->mCancelInProgress_) {
    @try {
      [self java_wait];
    }
    @catch (JavaLangInterruptedException *ex) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsCancellationSignal)

J2OBJC_INITIALIZED_DEFN(AndroidOsFileUtils)

@implementation AndroidOsFileUtils

+ (jint)S_IRWXU_ {
  return AndroidOsFileUtils_S_IRWXU;
}

+ (jint)S_IRUSR_ {
  return AndroidOsFileUtils_S_IRUSR;
}

+ (jint)S_IWUSR_ {
  return AndroidOsFileUtils_S_IWUSR;
}

+ (jint)S_IXUSR_ {
  return AndroidOsFileUtils_S_IXUSR;
}

+ (jint)S_IRWXG_ {
  return AndroidOsFileUtils_S_IRWXG;
}

+ (jint)S_IRGRP_ {
  return AndroidOsFileUtils_S_IRGRP;
}

+ (jint)S_IWGRP_ {
  return AndroidOsFileUtils_S_IWGRP;
}

+ (jint)S_IXGRP_ {
  return AndroidOsFileUtils_S_IXGRP;
}

+ (jint)S_IRWXO_ {
  return AndroidOsFileUtils_S_IRWXO;
}

+ (jint)S_IROTH_ {
  return AndroidOsFileUtils_S_IROTH;
}

+ (jint)S_IWOTH_ {
  return AndroidOsFileUtils_S_IWOTH;
}

+ (jint)S_IXOTH_ {
  return AndroidOsFileUtils_S_IXOTH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsFileUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)getFileStatusWithNSString:(NSString *)path
    withAndroidOsFileUtils_FileStatus:(AndroidOsFileUtils_FileStatus *)status {
  return AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_(path, status);
}

+ (jint)setPermissionsWithNSString:(NSString *)file
                           withInt:(jint)mode
                           withInt:(jint)uid
                           withInt:(jint)gid {
  return AndroidOsFileUtils_setPermissionsWithNSString_withInt_withInt_withInt_(file, mode, uid, gid);
}

+ (jboolean)syncWithJavaIoFileOutputStream:(JavaIoFileOutputStream *)stream {
  return AndroidOsFileUtils_syncWithJavaIoFileOutputStream_(stream);
}

+ (jboolean)copyFileWithJavaIoFile:(JavaIoFile *)srcFile
                    withJavaIoFile:(JavaIoFile *)destFile {
  return AndroidOsFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(srcFile, destFile);
}

+ (jboolean)copyToFileWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                             withJavaIoFile:(JavaIoFile *)destFile {
  return AndroidOsFileUtils_copyToFileWithJavaIoInputStream_withJavaIoFile_(inputStream, destFile);
}

+ (jboolean)isFilenameSafeWithJavaIoFile:(JavaIoFile *)file {
  return AndroidOsFileUtils_isFilenameSafeWithJavaIoFile_(file);
}

+ (NSString *)readTextFileWithJavaIoFile:(JavaIoFile *)file
                                 withInt:(jint)max
                            withNSString:(NSString *)ellipsis {
  return AndroidOsFileUtils_readTextFileWithJavaIoFile_withInt_withNSString_(file, max, ellipsis);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 13, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFileStatusWithNSString:withAndroidOsFileUtils_FileStatus:);
  methods[2].selector = @selector(setPermissionsWithNSString:withInt:withInt:withInt:);
  methods[3].selector = @selector(syncWithJavaIoFileOutputStream:);
  methods[4].selector = @selector(copyFileWithJavaIoFile:withJavaIoFile:);
  methods[5].selector = @selector(copyToFileWithJavaIoInputStream:withJavaIoFile:);
  methods[6].selector = @selector(isFilenameSafeWithJavaIoFile:);
  methods[7].selector = @selector(readTextFileWithJavaIoFile:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "S_IRWXU", "I", .constantValue.asInt = AndroidOsFileUtils_S_IRWXU, 0x19, -1, -1, -1, -1 },
    { "S_IRUSR", "I", .constantValue.asInt = AndroidOsFileUtils_S_IRUSR, 0x19, -1, -1, -1, -1 },
    { "S_IWUSR", "I", .constantValue.asInt = AndroidOsFileUtils_S_IWUSR, 0x19, -1, -1, -1, -1 },
    { "S_IXUSR", "I", .constantValue.asInt = AndroidOsFileUtils_S_IXUSR, 0x19, -1, -1, -1, -1 },
    { "S_IRWXG", "I", .constantValue.asInt = AndroidOsFileUtils_S_IRWXG, 0x19, -1, -1, -1, -1 },
    { "S_IRGRP", "I", .constantValue.asInt = AndroidOsFileUtils_S_IRGRP, 0x19, -1, -1, -1, -1 },
    { "S_IWGRP", "I", .constantValue.asInt = AndroidOsFileUtils_S_IWGRP, 0x19, -1, -1, -1, -1 },
    { "S_IXGRP", "I", .constantValue.asInt = AndroidOsFileUtils_S_IXGRP, 0x19, -1, -1, -1, -1 },
    { "S_IRWXO", "I", .constantValue.asInt = AndroidOsFileUtils_S_IRWXO, 0x19, -1, -1, -1, -1 },
    { "S_IROTH", "I", .constantValue.asInt = AndroidOsFileUtils_S_IROTH, 0x19, -1, -1, -1, -1 },
    { "S_IWOTH", "I", .constantValue.asInt = AndroidOsFileUtils_S_IWOTH, 0x19, -1, -1, -1, -1 },
    { "S_IXOTH", "I", .constantValue.asInt = AndroidOsFileUtils_S_IXOTH, 0x19, -1, -1, -1, -1 },
    { "SAFE_FILENAME_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "getFileStatus", "LNSString;LAndroidOsFileUtils_FileStatus;", "setPermissions", "LNSString;III", "sync", "LJavaIoFileOutputStream;", "copyFile", "LJavaIoFile;LJavaIoFile;", "copyToFile", "LJavaIoInputStream;LJavaIoFile;", "isFilenameSafe", "LJavaIoFile;", "readTextFile", "LJavaIoFile;ILNSString;", "LJavaIoIOException;", &AndroidOsFileUtils_SAFE_FILENAME_PATTERN, "LAndroidOsFileUtils_FileStatus;" };
  static const J2ObjcClassInfo _AndroidOsFileUtils = { "FileUtils", "android.os", ptrTable, methods, fields, 7, 0x1, 8, 13, -1, 16, -1, -1, -1 };
  return &_AndroidOsFileUtils;
}

+ (void)initialize {
  if (self == [AndroidOsFileUtils class]) {
    JreStrongAssign(&AndroidOsFileUtils_SAFE_FILENAME_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\w%+,./=_-]+"));
    J2OBJC_SET_INITIALIZED(AndroidOsFileUtils)
  }
}

@end

void AndroidOsFileUtils_init(AndroidOsFileUtils *self) {
  NSObject_init(self);
}

AndroidOsFileUtils *new_AndroidOsFileUtils_init() {
  J2OBJC_NEW_IMPL(AndroidOsFileUtils, init)
}

AndroidOsFileUtils *create_AndroidOsFileUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidOsFileUtils, init)
}

jboolean AndroidOsFileUtils_getFileStatusWithNSString_withAndroidOsFileUtils_FileStatus_(NSString *path, AndroidOsFileUtils_FileStatus *status) {
  AndroidOsFileUtils_initialize();
  //    const char* pathStr = env->GetStringUTFChars(path, NULL);
  jboolean ret = false;
  
  struct stat s;
  int res = stat([path cStringUsingEncoding: NSASCIIStringEncoding], &s);
  if (res == 0) {
    ret = true;
    if (status != NULL) {
      
      status->dev_ = s.st_dev;
      status->ino_ = s.st_ino;
      status->mode_ = s.st_mode;
      status->nlink_ = s.st_nlink;
      status->uid_ = s.st_uid;
      status->gid_ = s.st_gid;
      status->size_ = s.st_size;
      status->blksize_ = s.st_blksize;
      status->blocks_ = s.st_blocks;
      
      status->atime_ = s.st_atime;
      status->mtime_ = s.st_mtime;
      status->ctime_ = s.st_ctime;
      
      //            env->SetIntField(fileStatus, gFileStatusDevFieldID, s.st_dev);
      //            env->SetIntField(fileStatus, gFileStatusInoFieldID, s.st_ino);
      //            env->SetIntField(fileStatus, gFileStatusModeFieldID, s.st_mode);
      //            env->SetIntField(fileStatus, gFileStatusNlinkFieldID, s.st_nlink);
      //            env->SetIntField(fileStatus, gFileStatusUidFieldID, s.st_uid);
      //            env->SetIntField(fileStatus, gFileStatusGidFieldID, s.st_gid);
      //            env->SetLongField(fileStatus, gFileStatusSizeFieldID, s.st_size);
      //            env->SetIntField(fileStatus, gFileStatusBlksizeFieldID, s.st_blksize);
      //            env->SetLongField(fileStatus, gFileStatusBlocksFieldID, s.st_blocks);
      //            env->SetLongField(fileStatus, gFileStatusAtimeFieldID, s.st_atime);
      //            env->SetLongField(fileStatus, gFileStatusMtimeFieldID, s.st_mtime);
      //            env->SetLongField(fileStatus, gFileStatusCtimeFieldID, s.st_ctime);
    }
  }
  
  //    env->ReleaseStringUTFChars(path, pathStr);
  
  return ret;
}

jint AndroidOsFileUtils_setPermissionsWithNSString_withInt_withInt_withInt_(NSString *file, jint mode, jint uid, jint gid) {
  AndroidOsFileUtils_initialize();
  if ([file length] <= 0) {
    return ENOENT;
  }
  if (uid >= 0 || gid >= 0) {
    int res = chown([file cStringUsingEncoding: NSASCIIStringEncoding], uid, gid);
    if (res != 0) {
      return errno;
    }
  }
  return chmod([file cStringUsingEncoding: NSASCIIStringEncoding], mode) == 0 ? 0 : errno;
}

jboolean AndroidOsFileUtils_syncWithJavaIoFileOutputStream_(JavaIoFileOutputStream *stream) {
  AndroidOsFileUtils_initialize();
  @try {
    if (stream != nil) {
      [((JavaIoFileDescriptor *) nil_chk([stream getFD])) sync];
    }
    return true;
  }
  @catch (JavaIoIOException *e) {
  }
  return false;
}

jboolean AndroidOsFileUtils_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *srcFile, JavaIoFile *destFile) {
  AndroidOsFileUtils_initialize();
  jboolean result = false;
  @try {
    JavaIoInputStream *in = create_JavaIoFileInputStream_initWithJavaIoFile_(srcFile);
    @try {
      result = AndroidOsFileUtils_copyToFileWithJavaIoInputStream_withJavaIoFile_(in, destFile);
    }
    @finally {
      [in close];
    }
  }
  @catch (JavaIoIOException *e) {
    result = false;
  }
  return result;
}

jboolean AndroidOsFileUtils_copyToFileWithJavaIoInputStream_withJavaIoFile_(JavaIoInputStream *inputStream, JavaIoFile *destFile) {
  AndroidOsFileUtils_initialize();
  @try {
    if ([((JavaIoFile *) nil_chk(destFile)) exists]) {
      [destFile delete__];
    }
    JavaIoFileOutputStream *out = create_JavaIoFileOutputStream_initWithJavaIoFile_(destFile);
    @try {
      IOSByteArray *buffer = [IOSByteArray arrayWithLength:4096];
      jint bytesRead;
      while ((bytesRead = [((JavaIoInputStream *) nil_chk(inputStream)) readWithByteArray:buffer]) >= 0) {
        [out writeWithByteArray:buffer withInt:0 withInt:bytesRead];
      }
    }
    @finally {
      [out flush];
      @try {
        [((JavaIoFileDescriptor *) nil_chk([out getFD])) sync];
      }
      @catch (JavaIoIOException *e) {
      }
      [out close];
    }
    return true;
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
}

jboolean AndroidOsFileUtils_isFilenameSafeWithJavaIoFile_(JavaIoFile *file) {
  AndroidOsFileUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidOsFileUtils_SAFE_FILENAME_PATTERN)) matcherWithJavaLangCharSequence:[((JavaIoFile *) nil_chk(file)) getPath]])) matches];
}

NSString *AndroidOsFileUtils_readTextFileWithJavaIoFile_withInt_withNSString_(JavaIoFile *file, jint max, NSString *ellipsis) {
  AndroidOsFileUtils_initialize();
  JavaIoInputStream *input = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
  @try {
    jlong size = [((JavaIoFile *) nil_chk(file)) length];
    if (max > 0 || (size > 0 && max == 0)) {
      if (size > 0 && (max == 0 || size < max)) max = (jint) size;
      IOSByteArray *data = [IOSByteArray arrayWithLength:max + 1];
      jint length = [input readWithByteArray:data];
      if (length <= 0) return @"";
      if (length <= max) return [NSString java_stringWithBytes:data offset:0 length:length];
      if (ellipsis == nil) return [NSString java_stringWithBytes:data offset:0 length:max];
      return JreStrcat("$$", [NSString java_stringWithBytes:data offset:0 length:max], ellipsis);
    }
    else if (max < 0) {
      jint len;
      jboolean rolled = false;
      IOSByteArray *last = nil;
      IOSByteArray *data = nil;
      do {
        if (last != nil) rolled = true;
        IOSByteArray *tmp = last;
        last = data;
        data = tmp;
        if (data == nil) data = [IOSByteArray arrayWithLength:-max];
        len = [input readWithByteArray:data];
      }
      while (len == data->size_);
      if (last == nil && len <= 0) return @"";
      if (last == nil) return [NSString java_stringWithBytes:data offset:0 length:len];
      if (len > 0) {
        rolled = true;
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(last, len, last, 0, last->size_ - len);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, last, last->size_ - len, len);
      }
      if (ellipsis == nil || !rolled) return [NSString java_stringWithBytes:last];
      return JreStrcat("$$", ellipsis, [NSString java_stringWithBytes:last]);
    }
    else {
      JavaIoByteArrayOutputStream *contents = create_JavaIoByteArrayOutputStream_init();
      jint len;
      IOSByteArray *data = [IOSByteArray arrayWithLength:1024];
      do {
        len = [input readWithByteArray:data];
        if (len > 0) [contents writeWithByteArray:data withInt:0 withInt:len];
      }
      while (len == data->size_);
      return [contents description];
    }
  }
  @finally {
    [input close];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsFileUtils)

@implementation AndroidOsFileUtils_FileStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsFileUtils_FileStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dev_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ino_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mode_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "nlink_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "uid_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "gid_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rdev_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "blksize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "blocks_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "atime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mtime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsFileUtils;" };
  static const J2ObjcClassInfo _AndroidOsFileUtils_FileStatus = { "FileStatus", "android.os", ptrTable, methods, fields, 7, 0x19, 1, 13, 0, -1, -1, -1, -1 };
  return &_AndroidOsFileUtils_FileStatus;
}

@end

void AndroidOsFileUtils_FileStatus_init(AndroidOsFileUtils_FileStatus *self) {
  NSObject_init(self);
}

AndroidOsFileUtils_FileStatus *new_AndroidOsFileUtils_FileStatus_init() {
  J2OBJC_NEW_IMPL(AndroidOsFileUtils_FileStatus, init)
}

AndroidOsFileUtils_FileStatus *create_AndroidOsFileUtils_FileStatus_init() {
  J2OBJC_CREATE_IMPL(AndroidOsFileUtils_FileStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsFileUtils_FileStatus)

@implementation AndroidOsHandler

- (void)handleMessageWithAndroidOsMessage:(AndroidOsMessage *)msg {
}

- (void)dispatchMessageWithAndroidOsMessage:(AndroidOsMessage *)msg {
  if (((AndroidOsMessage *) nil_chk(msg))->callback_ != nil) {
    AndroidOsHandler_handleCallbackWithAndroidOsMessage_(self, msg);
  }
  else {
    if (mCallback_ != nil) {
      if ([mCallback_ handleMessageWithAndroidOsMessage:msg]) {
        return;
      }
    }
    [self handleMessageWithAndroidOsMessage:msg];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithAndroidOsHandler_Callback:(id<AndroidOsHandler_Callback>)callback {
  AndroidOsHandler_initWithAndroidOsHandler_Callback_(self, callback);
  return self;
}

- (instancetype __nonnull)initWithAndroidOsLooper:(AndroidOsLooper *)looper {
  AndroidOsHandler_initWithAndroidOsLooper_(self, looper);
  return self;
}

- (instancetype __nonnull)initWithAndroidOsLooper:(AndroidOsLooper *)looper
                    withAndroidOsHandler_Callback:(id<AndroidOsHandler_Callback>)callback {
  AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(self, looper, callback);
  return self;
}

- (NSString *)getMessageNameWithAndroidOsMessage:(AndroidOsMessage *)message {
  if (((AndroidOsMessage *) nil_chk(message))->callback_ != nil) {
    return [[message->callback_ java_getClass] getName];
  }
  return JreStrcat("$$", @"0x", JavaLangInteger_toHexStringWithInt_(message->what_));
}

- (AndroidOsMessage *)obtainMessage {
  return AndroidOsMessage_obtainWithAndroidOsHandler_(self);
}

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(self, what);
}

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what
                                    withId:(id)obj {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(self, what, obj);
}

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what
                                   withInt:(jint)arg1
                                   withInt:(jint)arg2 {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(self, what, arg1, arg2);
}

- (AndroidOsMessage *)obtainMessageWithInt:(jint)what
                                   withInt:(jint)arg1
                                   withInt:(jint)arg2
                                    withId:(id)obj {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(self, what, arg1, arg2, obj);
}

- (jboolean)postWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(self, AndroidOsHandler_getPostMessageWithJavaLangRunnable_(self, r), 0);
}

- (jboolean)postAtTimeWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                  withLong:(jlong)uptimeMillis {
  return [self sendMessageAtTimeWithAndroidOsMessage:AndroidOsHandler_getPostMessageWithJavaLangRunnable_(self, r) withLong:uptimeMillis];
}

- (jboolean)postAtTimeWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                    withId:(id)token
                                  withLong:(jlong)uptimeMillis {
  return [self sendMessageAtTimeWithAndroidOsMessage:AndroidOsHandler_getPostMessageWithJavaLangRunnable_withId_(self, r, token) withLong:uptimeMillis];
}

- (jboolean)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                   withLong:(jlong)delayMillis {
  return AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(self, AndroidOsHandler_getPostMessageWithJavaLangRunnable_(self, r), delayMillis);
}

- (jboolean)postAtFrontOfQueueWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return AndroidOsHandler_sendMessageAtFrontOfQueueWithAndroidOsMessage_(self, AndroidOsHandler_getPostMessageWithJavaLangRunnable_(self, r));
}

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeMessagesWithAndroidOsHandler:self withJavaLangRunnable:r withId:nil];
}

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                     withId:(id)token {
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeMessagesWithAndroidOsHandler:self withJavaLangRunnable:r withId:token];
}

- (jboolean)sendMessageWithAndroidOsMessage:(AndroidOsMessage *)msg {
  return AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(self, msg, 0);
}

- (jboolean)sendEmptyMessageWithInt:(jint)what {
  return AndroidOsHandler_sendEmptyMessageDelayedWithInt_withLong_(self, what, 0);
}

- (jboolean)sendEmptyMessageDelayedWithInt:(jint)what
                                  withLong:(jlong)delayMillis {
  return AndroidOsHandler_sendEmptyMessageDelayedWithInt_withLong_(self, what, delayMillis);
}

- (jboolean)sendEmptyMessageAtTimeWithInt:(jint)what
                                 withLong:(jlong)uptimeMillis {
  AndroidOsMessage *msg = AndroidOsMessage_obtain();
  ((AndroidOsMessage *) nil_chk(msg))->what_ = what;
  return [self sendMessageAtTimeWithAndroidOsMessage:msg withLong:uptimeMillis];
}

- (jboolean)sendMessageDelayedWithAndroidOsMessage:(AndroidOsMessage *)msg
                                          withLong:(jlong)delayMillis {
  return AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(self, msg, delayMillis);
}

- (jboolean)sendMessageAtTimeWithAndroidOsMessage:(AndroidOsMessage *)msg
                                         withLong:(jlong)uptimeMillis {
  jboolean sent = false;
  AndroidOsMessageQueue *queue = mQueue_;
  if (queue != nil) {
    JreStrongAssign(&((AndroidOsMessage *) nil_chk(msg))->target_, self);
    sent = [queue enqueueMessageWithAndroidOsMessage:msg withLong:uptimeMillis];
  }
  else {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(JreStrcat("@$", self, @" sendMessageAtTime() called with no mQueue"));
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(@"Looper", [e getMessage], e);
  }
  return sent;
}

- (jboolean)sendMessageAtFrontOfQueueWithAndroidOsMessage:(AndroidOsMessage *)msg {
  return AndroidOsHandler_sendMessageAtFrontOfQueueWithAndroidOsMessage_(self, msg);
}

- (void)removeMessagesWithInt:(jint)what {
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeMessagesWithAndroidOsHandler:self withInt:what withId:nil withBoolean:true];
}

- (void)removeMessagesWithInt:(jint)what
                       withId:(id)object {
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeMessagesWithAndroidOsHandler:self withInt:what withId:object withBoolean:true];
}

- (void)removeCallbacksAndMessagesWithId:(id)token {
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeCallbacksAndMessagesWithAndroidOsHandler:self withId:token];
}

- (jboolean)hasMessagesWithInt:(jint)what {
  return [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeMessagesWithAndroidOsHandler:self withInt:what withId:nil withBoolean:false];
}

- (jboolean)hasMessagesWithInt:(jint)what
                        withId:(id)object {
  return [((AndroidOsMessageQueue *) nil_chk(mQueue_)) removeMessagesWithAndroidOsHandler:self withInt:what withId:object withBoolean:false];
}

- (AndroidOsLooper *)getLooper {
  return mLooper_;
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)pw
                      withNSString:(NSString *)prefix {
  [((id<AndroidUtilPrinter>) nil_chk(pw)) printlnWithNSString:JreStrcat("$@$J", prefix, self, @" @ ", AndroidOsSystemClock_uptimeMillis())];
  if (mLooper_ == nil) {
    [pw printlnWithNSString:JreStrcat("$$", prefix, @"looper uninitialized")];
  }
  else {
    [mLooper_ dumpWithAndroidUtilPrinter:pw withNSString:JreStrcat("$$", prefix, @"  ")];
  }
}

- (NSString *)description {
  return JreStrcat("$$$$C", @"Handler (", [[self java_getClass] getName], @") {", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(self)), '}');
}

- (AndroidOsMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return AndroidOsHandler_getPostMessageWithJavaLangRunnable_(self, r);
}

- (AndroidOsMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                                  withId:(id)token {
  return AndroidOsHandler_getPostMessageWithJavaLangRunnable_withId_(self, r, token);
}

- (void)handleCallbackWithAndroidOsMessage:(AndroidOsMessage *)message {
  AndroidOsHandler_handleCallbackWithAndroidOsMessage_(self, message);
}

- (void)dealloc {
  RELEASE_(mQueue_);
  RELEASE_(mLooper_);
  RELEASE_(mCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x11, 7, 9, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x11, 7, 10, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x11, 7, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 14, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 17, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 18, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 19, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 21, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 22, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 23, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 25, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 30, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 30, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 33, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 33, 9, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 34, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x12, 37, 13, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x12, 37, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 38, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(handleMessageWithAndroidOsMessage:);
  methods[1].selector = @selector(dispatchMessageWithAndroidOsMessage:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithAndroidOsHandler_Callback:);
  methods[4].selector = @selector(initWithAndroidOsLooper:);
  methods[5].selector = @selector(initWithAndroidOsLooper:withAndroidOsHandler_Callback:);
  methods[6].selector = @selector(getMessageNameWithAndroidOsMessage:);
  methods[7].selector = @selector(obtainMessage);
  methods[8].selector = @selector(obtainMessageWithInt:);
  methods[9].selector = @selector(obtainMessageWithInt:withId:);
  methods[10].selector = @selector(obtainMessageWithInt:withInt:withInt:);
  methods[11].selector = @selector(obtainMessageWithInt:withInt:withInt:withId:);
  methods[12].selector = @selector(postWithJavaLangRunnable:);
  methods[13].selector = @selector(postAtTimeWithJavaLangRunnable:withLong:);
  methods[14].selector = @selector(postAtTimeWithJavaLangRunnable:withId:withLong:);
  methods[15].selector = @selector(postDelayedWithJavaLangRunnable:withLong:);
  methods[16].selector = @selector(postAtFrontOfQueueWithJavaLangRunnable:);
  methods[17].selector = @selector(removeCallbacksWithJavaLangRunnable:);
  methods[18].selector = @selector(removeCallbacksWithJavaLangRunnable:withId:);
  methods[19].selector = @selector(sendMessageWithAndroidOsMessage:);
  methods[20].selector = @selector(sendEmptyMessageWithInt:);
  methods[21].selector = @selector(sendEmptyMessageDelayedWithInt:withLong:);
  methods[22].selector = @selector(sendEmptyMessageAtTimeWithInt:withLong:);
  methods[23].selector = @selector(sendMessageDelayedWithAndroidOsMessage:withLong:);
  methods[24].selector = @selector(sendMessageAtTimeWithAndroidOsMessage:withLong:);
  methods[25].selector = @selector(sendMessageAtFrontOfQueueWithAndroidOsMessage:);
  methods[26].selector = @selector(removeMessagesWithInt:);
  methods[27].selector = @selector(removeMessagesWithInt:withId:);
  methods[28].selector = @selector(removeCallbacksAndMessagesWithId:);
  methods[29].selector = @selector(hasMessagesWithInt:);
  methods[30].selector = @selector(hasMessagesWithInt:withId:);
  methods[31].selector = @selector(getLooper);
  methods[32].selector = @selector(dumpWithAndroidUtilPrinter:withNSString:);
  methods[33].selector = @selector(description);
  methods[34].selector = @selector(getPostMessageWithJavaLangRunnable:);
  methods[35].selector = @selector(getPostMessageWithJavaLangRunnable:withId:);
  methods[36].selector = @selector(handleCallbackWithAndroidOsMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIND_POTENTIAL_LEAKS", "Z", .constantValue.asBOOL = AndroidOsHandler_FIND_POTENTIAL_LEAKS, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "mQueue_", "LAndroidOsMessageQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mLooper_", "LAndroidOsLooper;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mCallback_", "LAndroidOsHandler_Callback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "handleMessage", "LAndroidOsMessage;", "dispatchMessage", "LAndroidOsHandler_Callback;", "LAndroidOsLooper;", "LAndroidOsLooper;LAndroidOsHandler_Callback;", "getMessageName", "obtainMessage", "I", "ILNSObject;", "III", "IIILNSObject;", "post", "LJavaLangRunnable;", "postAtTime", "LJavaLangRunnable;J", "LJavaLangRunnable;LNSObject;J", "postDelayed", "postAtFrontOfQueue", "removeCallbacks", "LJavaLangRunnable;LNSObject;", "sendMessage", "sendEmptyMessage", "sendEmptyMessageDelayed", "IJ", "sendEmptyMessageAtTime", "sendMessageDelayed", "LAndroidOsMessage;J", "sendMessageAtTime", "sendMessageAtFrontOfQueue", "removeMessages", "removeCallbacksAndMessages", "LNSObject;", "hasMessages", "dump", "LAndroidUtilPrinter;LNSString;", "toString", "getPostMessage", "handleCallback", &AndroidOsHandler_TAG };
  static const J2ObjcClassInfo _AndroidOsHandler = { "Handler", "android.os", ptrTable, methods, fields, 7, 0x1, 37, 5, -1, 3, -1, -1, -1 };
  return &_AndroidOsHandler;
}

@end

void AndroidOsHandler_init(AndroidOsHandler *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mLooper_, AndroidOsLooper_myLooper());
  if (self->mLooper_ == nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Can't create handler inside thread that has not called Looper.prepare()");
  }
  JreStrongAssign(&self->mQueue_, self->mLooper_->mQueue_);
  JreStrongAssign(&self->mCallback_, nil);
}

AndroidOsHandler *new_AndroidOsHandler_init() {
  J2OBJC_NEW_IMPL(AndroidOsHandler, init)
}

AndroidOsHandler *create_AndroidOsHandler_init() {
  J2OBJC_CREATE_IMPL(AndroidOsHandler, init)
}

void AndroidOsHandler_initWithAndroidOsHandler_Callback_(AndroidOsHandler *self, id<AndroidOsHandler_Callback> callback) {
  NSObject_init(self);
  JreStrongAssign(&self->mLooper_, AndroidOsLooper_myLooper());
  if (self->mLooper_ == nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Can't create handler inside thread that has not called Looper.prepare()");
  }
  JreStrongAssign(&self->mQueue_, self->mLooper_->mQueue_);
  JreStrongAssign(&self->mCallback_, callback);
}

AndroidOsHandler *new_AndroidOsHandler_initWithAndroidOsHandler_Callback_(id<AndroidOsHandler_Callback> callback) {
  J2OBJC_NEW_IMPL(AndroidOsHandler, initWithAndroidOsHandler_Callback_, callback)
}

AndroidOsHandler *create_AndroidOsHandler_initWithAndroidOsHandler_Callback_(id<AndroidOsHandler_Callback> callback) {
  J2OBJC_CREATE_IMPL(AndroidOsHandler, initWithAndroidOsHandler_Callback_, callback)
}

void AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsHandler *self, AndroidOsLooper *looper) {
  NSObject_init(self);
  JreStrongAssign(&self->mLooper_, looper);
  JreStrongAssign(&self->mQueue_, ((AndroidOsLooper *) nil_chk(looper))->mQueue_);
  JreStrongAssign(&self->mCallback_, nil);
}

AndroidOsHandler *new_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper *looper) {
  J2OBJC_NEW_IMPL(AndroidOsHandler, initWithAndroidOsLooper_, looper)
}

AndroidOsHandler *create_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper *looper) {
  J2OBJC_CREATE_IMPL(AndroidOsHandler, initWithAndroidOsLooper_, looper)
}

void AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsHandler *self, AndroidOsLooper *looper, id<AndroidOsHandler_Callback> callback) {
  NSObject_init(self);
  JreStrongAssign(&self->mLooper_, looper);
  JreStrongAssign(&self->mQueue_, ((AndroidOsLooper *) nil_chk(looper))->mQueue_);
  JreStrongAssign(&self->mCallback_, callback);
}

AndroidOsHandler *new_AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsLooper *looper, id<AndroidOsHandler_Callback> callback) {
  J2OBJC_NEW_IMPL(AndroidOsHandler, initWithAndroidOsLooper_withAndroidOsHandler_Callback_, looper, callback)
}

AndroidOsHandler *create_AndroidOsHandler_initWithAndroidOsLooper_withAndroidOsHandler_Callback_(AndroidOsLooper *looper, id<AndroidOsHandler_Callback> callback) {
  J2OBJC_CREATE_IMPL(AndroidOsHandler, initWithAndroidOsLooper_withAndroidOsHandler_Callback_, looper, callback)
}

jboolean AndroidOsHandler_sendEmptyMessageDelayedWithInt_withLong_(AndroidOsHandler *self, jint what, jlong delayMillis) {
  AndroidOsMessage *msg = AndroidOsMessage_obtain();
  ((AndroidOsMessage *) nil_chk(msg))->what_ = what;
  return AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(self, msg, delayMillis);
}

jboolean AndroidOsHandler_sendMessageDelayedWithAndroidOsMessage_withLong_(AndroidOsHandler *self, AndroidOsMessage *msg, jlong delayMillis) {
  if (delayMillis < 0) {
    delayMillis = 0;
  }
  return [self sendMessageAtTimeWithAndroidOsMessage:msg withLong:AndroidOsSystemClock_uptimeMillis() + delayMillis];
}

jboolean AndroidOsHandler_sendMessageAtFrontOfQueueWithAndroidOsMessage_(AndroidOsHandler *self, AndroidOsMessage *msg) {
  jboolean sent = false;
  AndroidOsMessageQueue *queue = self->mQueue_;
  if (queue != nil) {
    JreStrongAssign(&((AndroidOsMessage *) nil_chk(msg))->target_, self);
    sent = [queue enqueueMessageWithAndroidOsMessage:msg withLong:0];
  }
  else {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(JreStrcat("@$", self, @" sendMessageAtTime() called with no mQueue"));
    AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(@"Looper", [e getMessage], e);
  }
  return sent;
}

AndroidOsMessage *AndroidOsHandler_getPostMessageWithJavaLangRunnable_(AndroidOsHandler *self, id<JavaLangRunnable> r) {
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->callback_, r);
  return m;
}

AndroidOsMessage *AndroidOsHandler_getPostMessageWithJavaLangRunnable_withId_(AndroidOsHandler *self, id<JavaLangRunnable> r, id token) {
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->obj_, token);
  JreStrongAssign(&m->callback_, r);
  return m;
}

void AndroidOsHandler_handleCallbackWithAndroidOsMessage_(AndroidOsHandler *self, AndroidOsMessage *message) {
  [((id<JavaLangRunnable>) nil_chk(((AndroidOsMessage *) nil_chk(message))->callback_)) run];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsHandler)

@implementation AndroidOsHandler_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(handleMessageWithAndroidOsMessage:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handleMessage", "LAndroidOsMessage;", "LAndroidOsHandler;" };
  static const J2ObjcClassInfo _AndroidOsHandler_Callback = { "Callback", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidOsHandler_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsHandler_Callback)

@implementation AndroidOsHandlerThread

- (instancetype __nonnull)initWithNSString:(NSString *)name {
  AndroidOsHandlerThread_initWithNSString_(self, name);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)priority {
  AndroidOsHandlerThread_initWithNSString_withInt_(self, name, priority);
  return self;
}

- (void)onLooperPrepared {
}

- (void)run {
  AndroidOsLooper_prepare();
  @synchronized(self) {
    JreStrongAssign(&mLooper_, AndroidOsLooper_myLooper());
    [self java_notifyAll];
  }
  [self onLooperPrepared];
  AndroidOsLooper_loop();
}

- (AndroidOsLooper *)getLooper {
  if (![self isAlive]) {
    return nil;
  }
  @synchronized(self) {
    while ([self isAlive] && mLooper_ == nil) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
  }
  return mLooper_;
}

- (jboolean)quit {
  AndroidOsLooper *looper = [self getLooper];
  if (looper != nil) {
    [looper quit];
    return true;
  }
  return false;
}

- (jint)getThreadId {
  return -1;
}

- (void)dealloc {
  RELEASE_(mLooper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(onLooperPrepared);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(getLooper);
  methods[5].selector = @selector(quit);
  methods[6].selector = @selector(getThreadId);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPriority_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLooper_", "LAndroidOsLooper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;I" };
  static const J2ObjcClassInfo _AndroidOsHandlerThread = { "HandlerThread", "android.os", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_AndroidOsHandlerThread;
}

@end

void AndroidOsHandlerThread_initWithNSString_(AndroidOsHandlerThread *self, NSString *name) {
  JavaLangThread_initWithNSString_(self, name);
  self->mPriority_ = 0;
}

AndroidOsHandlerThread *new_AndroidOsHandlerThread_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(AndroidOsHandlerThread, initWithNSString_, name)
}

AndroidOsHandlerThread *create_AndroidOsHandlerThread_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidOsHandlerThread, initWithNSString_, name)
}

void AndroidOsHandlerThread_initWithNSString_withInt_(AndroidOsHandlerThread *self, NSString *name, jint priority) {
  JavaLangThread_initWithNSString_(self, name);
  self->mPriority_ = priority;
}

AndroidOsHandlerThread *new_AndroidOsHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) {
  J2OBJC_NEW_IMPL(AndroidOsHandlerThread, initWithNSString_withInt_, name, priority)
}

AndroidOsHandlerThread *create_AndroidOsHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) {
  J2OBJC_CREATE_IMPL(AndroidOsHandlerThread, initWithNSString_withInt_, name, priority)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsHandlerThread)

@implementation AndroidOsIBinder

+ (jint)FIRST_CALL_TRANSACTION {
  return AndroidOsIBinder_FIRST_CALL_TRANSACTION;
}

+ (jint)LAST_CALL_TRANSACTION {
  return AndroidOsIBinder_LAST_CALL_TRANSACTION;
}

+ (jint)PING_TRANSACTION {
  return AndroidOsIBinder_PING_TRANSACTION;
}

+ (jint)DUMP_TRANSACTION {
  return AndroidOsIBinder_DUMP_TRANSACTION;
}

+ (jint)INTERFACE_TRANSACTION {
  return AndroidOsIBinder_INTERFACE_TRANSACTION;
}

+ (jint)FLAG_ONEWAY {
  return AndroidOsIBinder_FLAG_ONEWAY;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsIInterface;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, 5, 6, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInterfaceDescriptor);
  methods[1].selector = @selector(pingBinder);
  methods[2].selector = @selector(isBinderAlive);
  methods[3].selector = @selector(queryLocalInterfaceWithNSString:);
  methods[4].selector = @selector(dumpWithJavaIoFileDescriptor:withNSStringArray:);
  methods[5].selector = @selector(transactWithInt:withAndroidOsParcel:withAndroidOsParcel:withInt:);
  methods[6].selector = @selector(linkToDeathWithAndroidOsIBinder_DeathRecipient:withInt:);
  methods[7].selector = @selector(unlinkToDeathWithAndroidOsIBinder_DeathRecipient:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIRST_CALL_TRANSACTION", "I", .constantValue.asInt = AndroidOsIBinder_FIRST_CALL_TRANSACTION, 0x19, -1, -1, -1, -1 },
    { "LAST_CALL_TRANSACTION", "I", .constantValue.asInt = AndroidOsIBinder_LAST_CALL_TRANSACTION, 0x19, -1, -1, -1, -1 },
    { "PING_TRANSACTION", "I", .constantValue.asInt = AndroidOsIBinder_PING_TRANSACTION, 0x19, -1, -1, -1, -1 },
    { "DUMP_TRANSACTION", "I", .constantValue.asInt = AndroidOsIBinder_DUMP_TRANSACTION, 0x19, -1, -1, -1, -1 },
    { "INTERFACE_TRANSACTION", "I", .constantValue.asInt = AndroidOsIBinder_INTERFACE_TRANSACTION, 0x19, -1, -1, -1, -1 },
    { "FLAG_ONEWAY", "I", .constantValue.asInt = AndroidOsIBinder_FLAG_ONEWAY, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsRemoteException;", "queryLocalInterface", "LNSString;", "dump", "LJavaIoFileDescriptor;[LNSString;", "transact", "ILAndroidOsParcel;LAndroidOsParcel;I", "linkToDeath", "LAndroidOsIBinder_DeathRecipient;I", "unlinkToDeath", "LAndroidOsIBinder_DeathRecipient;" };
  static const J2ObjcClassInfo _AndroidOsIBinder = { "IBinder", "android.os", ptrTable, methods, fields, 7, 0x609, 8, 6, -1, 10, -1, -1, -1 };
  return &_AndroidOsIBinder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsIBinder)

@implementation AndroidOsIBinder_DeathRecipient

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(binderDied);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidOsIBinder;" };
  static const J2ObjcClassInfo _AndroidOsIBinder_DeathRecipient = { "DeathRecipient", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_AndroidOsIBinder_DeathRecipient;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsIBinder_DeathRecipient)

@implementation AndroidOsIInterface

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidOsIBinder;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(asBinder);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidOsIInterface = { "IInterface", "android.os", NULL, methods, NULL, 7, 0x609, 1, 0, -1, -1, -1, -1, -1 };
  return &_AndroidOsIInterface;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsIInterface)

@implementation AndroidOsThreadNudger

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nudge);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidOsThreadNudger = { "ThreadNudger", "android.os", NULL, methods, NULL, 7, 0x609, 1, 0, -1, -1, -1, -1, -1 };
  return &_AndroidOsThreadNudger;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsThreadNudger)

J2OBJC_INITIALIZED_DEFN(AndroidOsLooper)

JavaLangThreadLocal *AndroidOsLooper_sThreadLocal;

@implementation AndroidOsLooper

+ (JavaLangThreadLocal *)sThreadLocal {
  return AndroidOsLooper_sThreadLocal;
}

+ (void)prepare {
  AndroidOsLooper_prepare();
}

+ (void)prepareMainLooper {
  AndroidOsLooper_prepareMainLooper();
}

+ (void)setMainLooperWithAndroidOsLooper:(AndroidOsLooper *)looper {
  AndroidOsLooper_setMainLooperWithAndroidOsLooper_(looper);
}

+ (AndroidOsLooper *)getMainLooper {
  return AndroidOsLooper_getMainLooper();
}

- (void)nudge {
  AndroidOsLooper_loop();
}

+ (void)loop {
  AndroidOsLooper_loop();
}

+ (AndroidOsLooper *)myLooper {
  return AndroidOsLooper_myLooper();
}

- (void)setMessageLoggingWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer {
  JreStrongAssign(&mLogging_, printer);
}

+ (AndroidOsMessageQueue *)myQueue {
  return AndroidOsLooper_myQueue();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsLooper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)quit {
  AndroidOsMessage *msg = AndroidOsMessage_obtain();
  [((AndroidOsMessageQueue *) nil_chk(mQueue_)) enqueueMessageWithAndroidOsMessage:msg withLong:0];
}

- (JavaLangThread *)getThread {
  return mThread_;
}

- (AndroidOsMessageQueue *)getQueue {
  return mQueue_;
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)pw
                      withNSString:(NSString *)prefix {
}

- (NSString *)description {
  return JreStrcat("$$C", @"Looper{", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(self)), '}');
}

- (void)dealloc {
  RELEASE_(mQueue_);
  RELEASE_(mThread_);
  RELEASE_(mLogging_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2a, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsLooper;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessageQueue;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessageQueue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(prepare);
  methods[1].selector = @selector(prepareMainLooper);
  methods[2].selector = @selector(setMainLooperWithAndroidOsLooper:);
  methods[3].selector = @selector(getMainLooper);
  methods[4].selector = @selector(nudge);
  methods[5].selector = @selector(loop);
  methods[6].selector = @selector(myLooper);
  methods[7].selector = @selector(setMessageLoggingWithAndroidUtilPrinter:);
  methods[8].selector = @selector(myQueue);
  methods[9].selector = @selector(init);
  methods[10].selector = @selector(quit);
  methods[11].selector = @selector(getThread);
  methods[12].selector = @selector(getQueue);
  methods[13].selector = @selector(dumpWithAndroidUtilPrinter:withNSString:);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "sThreadLocal", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x18, -1, 8, 9, -1 },
    { "mQueue_", "LAndroidOsMessageQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mRun_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "mLogging_", "LAndroidUtilPrinter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMainLooper", "LAndroidOsLooper;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "setMainLooper", "LAndroidOsLooper;", "setMessageLogging", "LAndroidUtilPrinter;", "dump", "LAndroidUtilPrinter;LNSString;", "toString", &AndroidOsLooper_TAG, &AndroidOsLooper_sThreadLocal, "Ljava/lang/ThreadLocal<Landroid/os/Looper;>;", &AndroidOsLooper_mMainLooper, "LAndroidOsLooper_Profiler;" };
  static const J2ObjcClassInfo _AndroidOsLooper = { "Looper", "android.os", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, 11, -1, -1, -1 };
  return &_AndroidOsLooper;
}

+ (void)initialize {
  if (self == [AndroidOsLooper class]) {
    JreStrongAssignAndConsume(&AndroidOsLooper_sThreadLocal, new_JavaLangThreadLocal_init());
    JreStrongAssign(&AndroidOsLooper_mMainLooper, nil);
    J2OBJC_SET_INITIALIZED(AndroidOsLooper)
  }
}

@end

void AndroidOsLooper_prepare() {
  AndroidOsLooper_initialize();
  if ([((JavaLangThreadLocal *) nil_chk(AndroidOsLooper_sThreadLocal)) get] != nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Only one Looper may be created per thread");
  }
  [AndroidOsLooper_sThreadLocal setWithId:create_AndroidOsLooper_init()];
}

void AndroidOsLooper_prepareMainLooper() {
  AndroidOsLooper_initialize();
  AndroidOsLooper_prepare();
  AndroidOsLooper_setMainLooperWithAndroidOsLooper_(AndroidOsLooper_myLooper());
  ((AndroidOsMessageQueue *) nil_chk(((AndroidOsLooper *) nil_chk(AndroidOsLooper_myLooper()))->mQueue_))->mQuitAllowed_ = false;
}

void AndroidOsLooper_setMainLooperWithAndroidOsLooper_(AndroidOsLooper *looper) {
  AndroidOsLooper_initialize();
  @synchronized(AndroidOsLooper_class_()) {
    JreStrongAssign(&AndroidOsLooper_mMainLooper, looper);
  }
}

AndroidOsLooper *AndroidOsLooper_getMainLooper() {
  AndroidOsLooper_initialize();
  @synchronized(AndroidOsLooper_class_()) {
    return JreRetainedLocalValue(AndroidOsLooper_mMainLooper);
  }
}

void AndroidOsLooper_loop() {
  AndroidOsLooper_initialize();
  AndroidOsLooper *me = AndroidOsLooper_myLooper();
  if (me == nil) {
    AndroidOsLooper_prepare();
    me = AndroidOsLooper_myLooper();
  }
  AndroidOsMessageQueue *queue = ((AndroidOsLooper *) nil_chk(me))->mQueue_;
  while (true) {
    AndroidOsMessage *msg = [((AndroidOsMessageQueue *) nil_chk(queue)) next];
    if (msg == nil) {
      return;
    }
    else {
      if (msg->target_ == nil) {
        return;
      }
      [msg->target_ dispatchMessageWithAndroidOsMessage:msg];
      [msg recycle];
    }
  }
}

AndroidOsLooper *AndroidOsLooper_myLooper() {
  AndroidOsLooper_initialize();
  return [((JavaLangThreadLocal *) nil_chk(AndroidOsLooper_sThreadLocal)) get];
}

AndroidOsMessageQueue *AndroidOsLooper_myQueue() {
  AndroidOsLooper_initialize();
  return ((AndroidOsLooper *) nil_chk(AndroidOsLooper_myLooper()))->mQueue_;
}

void AndroidOsLooper_init(AndroidOsLooper *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mLogging_, nil);
  JreStrongAssignAndConsume(&self->mQueue_, new_AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(self));
  JreAssignVolatileBoolean(&self->mRun_, true);
  JreStrongAssign(&self->mThread_, JavaLangThread_currentThread());
}

AndroidOsLooper *new_AndroidOsLooper_init() {
  J2OBJC_NEW_IMPL(AndroidOsLooper, init)
}

AndroidOsLooper *create_AndroidOsLooper_init() {
  J2OBJC_CREATE_IMPL(AndroidOsLooper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsLooper)

@implementation AndroidOsLooper_Profiler

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(profileWithAndroidOsMessage:withLong:withLong:withLong:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "profile", "LAndroidOsMessage;JJJJ", "LAndroidOsLooper;" };
  static const J2ObjcClassInfo _AndroidOsLooper_Profiler = { "Profiler", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_AndroidOsLooper_Profiler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsLooper_Profiler)

J2OBJC_INITIALIZED_DEFN(AndroidOsMessage)

@implementation AndroidOsMessage

+ (jint)FLAG_IN_USE {
  return AndroidOsMessage_FLAG_IN_USE;
}

+ (jint)FLAGS_RESERVED {
  return AndroidOsMessage_FLAGS_RESERVED;
}

+ (jint)FLAGS_TO_CLEAR_ON_COPY_FROM {
  return AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM;
}

+ (AndroidOsMessage *)obtain {
  return AndroidOsMessage_obtain();
}

+ (AndroidOsMessage *)obtainWithAndroidOsMessage:(AndroidOsMessage *)orig {
  return AndroidOsMessage_obtainWithAndroidOsMessage_(orig);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h {
  return AndroidOsMessage_obtainWithAndroidOsHandler_(h);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                            withJavaLangRunnable:(id<JavaLangRunnable>)callback {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withJavaLangRunnable_(h, callback);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(h, what);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                          withId:(id)obj {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(h, what, obj);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2 {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(h, what, arg1, arg2);
}

+ (AndroidOsMessage *)obtainWithAndroidOsHandler:(AndroidOsHandler *)h
                                         withInt:(jint)what
                                         withInt:(jint)arg1
                                         withInt:(jint)arg2
                                          withId:(id)obj {
  return AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(h, what, arg1, arg2, obj);
}

- (void)recycle {
  [self clearForRecycle];
  @synchronized(AndroidOsMessage_sPoolSync) {
    if (AndroidOsMessage_sPoolSize < AndroidOsMessage_MAX_POOL_SIZE) {
      JreStrongAssign(&next_, AndroidOsMessage_sPool);
      JreStrongAssign(&AndroidOsMessage_sPool, self);
      AndroidOsMessage_sPoolSize++;
    }
  }
}

- (void)copyFromWithAndroidOsMessage:(AndroidOsMessage *)o {
  self->flags_ = ((AndroidOsMessage *) nil_chk(o))->flags_ & ~AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM;
  self->what_ = o->what_;
  self->arg1_ = o->arg1_;
  self->arg2_ = o->arg2_;
  JreStrongAssign(&self->obj_, o->obj_);
  if (o->data_ != nil) {
    JreStrongAssign(&self->data_, (AndroidOsBundle *) cast_chk([o->data_ java_clone], [AndroidOsBundle class]));
  }
  else {
    JreStrongAssign(&self->data_, nil);
  }
}

- (jlong)getWhen {
  return when_;
}

- (void)setTargetWithAndroidOsHandler:(AndroidOsHandler *)target {
  JreStrongAssign(&self->target_, target);
}

- (AndroidOsHandler *)getTarget {
  return target_;
}

- (id<JavaLangRunnable>)getCallback {
  return callback_;
}

- (AndroidOsBundle *)getData {
  if (data_ == nil) {
    JreStrongAssignAndConsume(&data_, new_AndroidOsBundle_init());
  }
  return data_;
}

- (AndroidOsBundle *)peekData {
  return data_;
}

- (void)setDataWithAndroidOsBundle:(AndroidOsBundle *)data {
  JreStrongAssign(&self->data_, data);
}

- (void)sendToTarget {
  [((AndroidOsHandler *) nil_chk(target_)) sendMessageWithAndroidOsMessage:self];
}

- (void)clearForRecycle {
  flags_ = 0;
  what_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  JreStrongAssign(&obj_, nil);
  when_ = 0;
  JreStrongAssign(&target_, nil);
  JreStrongAssign(&callback_, nil);
  JreStrongAssign(&data_, nil);
}

- (jboolean)isInUse {
  return (flags_ & AndroidOsMessage_FLAG_IN_USE) == AndroidOsMessage_FLAG_IN_USE;
}

- (void)markInUse {
  flags_ |= AndroidOsMessage_FLAG_IN_USE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return [self toStringWithLong:AndroidOsSystemClock_uptimeMillis()];
}

- (NSString *)toStringWithLong:(jlong)now {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [b appendWithNSString:@"{ what="];
  [b appendWithInt:what_];
  [b appendWithNSString:@" when="];
  AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(when_ - now, b);
  if (arg1_ != 0) {
    [b appendWithNSString:@" arg1="];
    [b appendWithInt:arg1_];
  }
  if (arg2_ != 0) {
    [b appendWithNSString:@" arg2="];
    [b appendWithInt:arg2_];
  }
  if (obj_ != nil) {
    [b appendWithNSString:@" obj="];
    [b appendWithId:obj_];
  }
  [b appendWithNSString:@" }"];
  return [b description];
}

- (jint)describeContents {
  return 0;
}

- (void)dealloc {
  RELEASE_(obj_);
  RELEASE_(data_);
  RELEASE_(target_);
  RELEASE_(callback_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidOsMessage;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x9, 0, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LAndroidOsHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(obtain);
  methods[1].selector = @selector(obtainWithAndroidOsMessage:);
  methods[2].selector = @selector(obtainWithAndroidOsHandler:);
  methods[3].selector = @selector(obtainWithAndroidOsHandler:withJavaLangRunnable:);
  methods[4].selector = @selector(obtainWithAndroidOsHandler:withInt:);
  methods[5].selector = @selector(obtainWithAndroidOsHandler:withInt:withId:);
  methods[6].selector = @selector(obtainWithAndroidOsHandler:withInt:withInt:withInt:);
  methods[7].selector = @selector(obtainWithAndroidOsHandler:withInt:withInt:withInt:withId:);
  methods[8].selector = @selector(recycle);
  methods[9].selector = @selector(copyFromWithAndroidOsMessage:);
  methods[10].selector = @selector(getWhen);
  methods[11].selector = @selector(setTargetWithAndroidOsHandler:);
  methods[12].selector = @selector(getTarget);
  methods[13].selector = @selector(getCallback);
  methods[14].selector = @selector(getData);
  methods[15].selector = @selector(peekData);
  methods[16].selector = @selector(setDataWithAndroidOsBundle:);
  methods[17].selector = @selector(sendToTarget);
  methods[18].selector = @selector(clearForRecycle);
  methods[19].selector = @selector(isInUse);
  methods[20].selector = @selector(markInUse);
  methods[21].selector = @selector(init);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(toStringWithLong:);
  methods[24].selector = @selector(describeContents);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "what_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arg1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arg2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "obj_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "FLAG_IN_USE", "I", .constantValue.asInt = AndroidOsMessage_FLAG_IN_USE, 0x18, -1, -1, -1, -1 },
    { "FLAGS_RESERVED", "I", .constantValue.asInt = AndroidOsMessage_FLAGS_RESERVED, 0x18, -1, -1, -1, -1 },
    { "FLAGS_TO_CLEAR_ON_COPY_FROM", "I", .constantValue.asInt = AndroidOsMessage_FLAGS_TO_CLEAR_ON_COPY_FROM, 0x18, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "when_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "data_", "LAndroidOsBundle;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "target_", "LAndroidOsHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callback_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LAndroidOsMessage;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sPoolSync", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "sPool", "LAndroidOsMessage;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "sPoolSize", "I", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "MAX_POOL_SIZE", "I", .constantValue.asInt = AndroidOsMessage_MAX_POOL_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "obtain", "LAndroidOsMessage;", "LAndroidOsHandler;", "LAndroidOsHandler;LJavaLangRunnable;", "LAndroidOsHandler;I", "LAndroidOsHandler;ILNSObject;", "LAndroidOsHandler;III", "LAndroidOsHandler;IIILNSObject;", "copyFrom", "setTarget", "setData", "LAndroidOsBundle;", "toString", "J", &AndroidOsMessage_sPoolSync, &AndroidOsMessage_sPool, &AndroidOsMessage_sPoolSize };
  static const J2ObjcClassInfo _AndroidOsMessage = { "Message", "android.os", ptrTable, methods, fields, 7, 0x11, 25, 17, -1, -1, -1, -1, -1 };
  return &_AndroidOsMessage;
}

+ (void)initialize {
  if (self == [AndroidOsMessage class]) {
    JreStrongAssignAndConsume(&AndroidOsMessage_sPoolSync, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(AndroidOsMessage)
  }
}

@end

AndroidOsMessage *AndroidOsMessage_obtain() {
  AndroidOsMessage_initialize();
  @synchronized(AndroidOsMessage_sPoolSync) {
    if (AndroidOsMessage_sPool != nil) {
      AndroidOsMessage *m = AndroidOsMessage_sPool;
      JreStrongAssign(&AndroidOsMessage_sPool, m->next_);
      JreStrongAssign(&m->next_, nil);
      AndroidOsMessage_sPoolSize--;
      return JreRetainedLocalValue(m);
    }
  }
  return create_AndroidOsMessage_init();
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsMessage_(AndroidOsMessage *orig) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  ((AndroidOsMessage *) nil_chk(m))->what_ = ((AndroidOsMessage *) nil_chk(orig))->what_;
  m->arg1_ = orig->arg1_;
  m->arg2_ = orig->arg2_;
  JreStrongAssign(&m->obj_, orig->obj_);
  if (orig->data_ != nil) {
    JreStrongAssignAndConsume(&m->data_, new_AndroidOsBundle_initWithAndroidOsBundle_(orig->data_));
  }
  JreStrongAssign(&m->target_, orig->target_);
  JreStrongAssign(&m->callback_, orig->callback_);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_(AndroidOsHandler *h) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withJavaLangRunnable_(AndroidOsHandler *h, id<JavaLangRunnable> callback) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  JreStrongAssign(&m->callback_, callback);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_(AndroidOsHandler *h, jint what) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withId_(AndroidOsHandler *h, jint what, id obj) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  JreStrongAssign(&m->obj_, obj);
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_(AndroidOsHandler *h, jint what, jint arg1, jint arg2) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  m->arg1_ = arg1;
  m->arg2_ = arg2;
  return m;
}

AndroidOsMessage *AndroidOsMessage_obtainWithAndroidOsHandler_withInt_withInt_withInt_withId_(AndroidOsHandler *h, jint what, jint arg1, jint arg2, id obj) {
  AndroidOsMessage_initialize();
  AndroidOsMessage *m = AndroidOsMessage_obtain();
  JreStrongAssign(&((AndroidOsMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  m->arg1_ = arg1;
  m->arg2_ = arg2;
  JreStrongAssign(&m->obj_, obj);
  return m;
}

void AndroidOsMessage_init(AndroidOsMessage *self) {
  NSObject_init(self);
}

AndroidOsMessage *new_AndroidOsMessage_init() {
  J2OBJC_NEW_IMPL(AndroidOsMessage, init)
}

AndroidOsMessage *create_AndroidOsMessage_init() {
  J2OBJC_CREATE_IMPL(AndroidOsMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsMessage)

@implementation AndroidOsMessageQueue

NSOperationQueue *opQueue;

- (void)nativeInit {
  AndroidOsMessageQueue_nativeInit(self);
}

- (void)nativeDestroy {
  AndroidOsMessageQueue_nativeDestroy(self);
}

- (void)dopNudgeThreadNow {
  AndroidOsMessageQueue_dopNudgeThreadNow(self);
}

- (void)dopNudgeThreadAtWithInt:(jint)timeoutMillis {
  AndroidOsMessageQueue_dopNudgeThreadAtWithInt_(self, timeoutMillis);
}

- (void)testThreadTimerWithInt:(jint)timeout {
  AndroidOsMessageQueue_testThreadTimerWithInt_(self, timeout);
}

- (void)callNudgeOnThread {
  AndroidOsMessageQueue_callNudgeOnThread(self);
}

- (void)callNudge {
  AndroidOsMessageQueue_callNudge(self);
}

- (void)addIdleHandlerWithAndroidOsMessageQueue_IdleHandler:(id<AndroidOsMessageQueue_IdleHandler>)handler {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"We will be handing control back to native iOS thread, so no idle. May add back in the future.");
}

- (void)removeIdleHandlerWithAndroidOsMessageQueue_IdleHandler:(id<AndroidOsMessageQueue_IdleHandler>)handler {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"We will be handing control back to native iOS thread, so no idle. May add back in the future.");
}

- (instancetype __nonnull)initWithAndroidOsThreadNudger:(id<AndroidOsThreadNudger>)threadNudger {
  AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(self, threadNudger);
  return self;
}

- (AndroidOsMessage *)next {
  @synchronized(self) {
    jlong now = AndroidOsSystemClock_uptimeMillis();
    AndroidOsMessage *msg = mMessages_;
    if (msg != nil) {
      jlong when = msg->when_;
      if (now >= when) {
        mBlocked_ = false;
        JreStrongAssign(&mMessages_, msg->next_);
        JreStrongAssign(&msg->next_, nil);
        [msg markInUse];
        return JreRetainedLocalValue(msg);
      }
      else {
        jint nudgeTimeout = (jint) JavaLangMath_minWithLong_withLong_(when - now, JavaLangInteger_MAX_VALUE);
        AndroidOsMessageQueue_dopNudgeThreadAtWithInt_(self, nudgeTimeout);
      }
    }
    mBlocked_ = true;
    return JreRetainedLocalValue(nil);
  }
}

- (jboolean)enqueueMessageWithAndroidOsMessage:(AndroidOsMessage *)msg
                                      withLong:(jlong)when {
  if ([((AndroidOsMessage *) nil_chk(msg)) isInUse]) {
    @throw create_AndroidUtilAndroidRuntimeException_initWithNSString_(JreStrcat("@$", msg, @" This message is already in use."));
  }
  if (msg->target_ == nil && !mQuitAllowed_) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Main thread not allowed to quit");
  }
  jboolean needWake;
  @synchronized(self) {
    if (mQuiting_) {
      JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(JreStrcat("@$", msg->target_, @" sending message to a Handler on a dead thread"));
      AndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(@"MessageQueue", [e getMessage], e);
      return false;
    }
    else if (msg->target_ == nil) {
      mQuiting_ = true;
    }
    msg->when_ = when;
    AndroidOsMessage *p = mMessages_;
    if (p == nil || when == 0 || when < p->when_) {
      JreStrongAssign(&msg->next_, p);
      JreStrongAssign(&mMessages_, msg);
      needWake = mBlocked_;
    }
    else {
      AndroidOsMessage *prev = nil;
      while (p != nil && p->when_ <= when) {
        prev = p;
        p = p->next_;
      }
      JreStrongAssign(&msg->next_, ((AndroidOsMessage *) nil_chk(prev))->next_);
      JreStrongAssign(&prev->next_, msg);
      needWake = false;
    }
  }
  if (needWake) {
    AndroidOsMessageQueue_dopNudgeThreadNow(self);
  }
  return true;
}

- (jboolean)removeMessagesWithAndroidOsHandler:(AndroidOsHandler *)h
                                       withInt:(jint)what
                                        withId:(id)object
                                   withBoolean:(jboolean)doRemove {
  @synchronized(self) {
    AndroidOsMessage *p = mMessages_;
    jboolean found = false;
    while (p != nil && p->target_ == h && p->what_ == what && (object == nil || p->obj_ == object)) {
      if (!doRemove) return true;
      found = true;
      AndroidOsMessage *n = p->next_;
      JreStrongAssign(&mMessages_, n);
      [p recycle];
      p = n;
    }
    while (p != nil) {
      AndroidOsMessage *n = p->next_;
      if (n != nil) {
        if (n->target_ == h && n->what_ == what && (object == nil || n->obj_ == object)) {
          if (!doRemove) return true;
          found = true;
          AndroidOsMessage *nn = n->next_;
          [n recycle];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
    return found;
  }
}

- (void)removeMessagesWithAndroidOsHandler:(AndroidOsHandler *)h
                      withJavaLangRunnable:(id<JavaLangRunnable>)r
                                    withId:(id)object {
  if (r == nil) {
    return;
  }
  @synchronized(self) {
    AndroidOsMessage *p = mMessages_;
    while (p != nil && p->target_ == h && p->callback_ == r && (object == nil || p->obj_ == object)) {
      AndroidOsMessage *n = p->next_;
      JreStrongAssign(&mMessages_, n);
      [p recycle];
      p = n;
    }
    while (p != nil) {
      AndroidOsMessage *n = p->next_;
      if (n != nil) {
        if (n->target_ == h && n->callback_ == r && (object == nil || n->obj_ == object)) {
          AndroidOsMessage *nn = n->next_;
          [n recycle];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeCallbacksAndMessagesWithAndroidOsHandler:(AndroidOsHandler *)h
                                                withId:(id)object {
  @synchronized(self) {
    AndroidOsMessage *p = mMessages_;
    while (p != nil && p->target_ == h && (object == nil || p->obj_ == object)) {
      AndroidOsMessage *n = p->next_;
      JreStrongAssign(&mMessages_, n);
      [p recycle];
      p = n;
    }
    while (p != nil) {
      AndroidOsMessage *n = p->next_;
      if (n != nil) {
        if (n->target_ == h && (object == nil || n->obj_ == object)) {
          AndroidOsMessage *nn = n->next_;
          [n recycle];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)__javaClone:(AndroidOsMessageQueue *)original {
  [super __javaClone:original];
  [mThreadNudger_ release];
}

- (void)dealloc {
  RELEASE_(mMessages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "LAndroidOsMessage;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 9, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nativeInit);
  methods[1].selector = @selector(nativeDestroy);
  methods[2].selector = @selector(dopNudgeThreadNow);
  methods[3].selector = @selector(dopNudgeThreadAtWithInt:);
  methods[4].selector = @selector(testThreadTimerWithInt:);
  methods[5].selector = @selector(callNudgeOnThread);
  methods[6].selector = @selector(callNudge);
  methods[7].selector = @selector(addIdleHandlerWithAndroidOsMessageQueue_IdleHandler:);
  methods[8].selector = @selector(removeIdleHandlerWithAndroidOsMessageQueue_IdleHandler:);
  methods[9].selector = @selector(initWithAndroidOsThreadNudger:);
  methods[10].selector = @selector(next);
  methods[11].selector = @selector(enqueueMessageWithAndroidOsMessage:withLong:);
  methods[12].selector = @selector(removeMessagesWithAndroidOsHandler:withInt:withId:withBoolean:);
  methods[13].selector = @selector(removeMessagesWithAndroidOsHandler:withJavaLangRunnable:withId:);
  methods[14].selector = @selector(removeCallbacksAndMessagesWithAndroidOsHandler:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mThreadNudger_", "LAndroidOsThreadNudger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMessages_", "LAndroidOsMessage;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mQuiting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mQuitAllowed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBlocked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPtr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "dopNudgeThreadAt", "I", "testThreadTimer", "addIdleHandler", "LAndroidOsMessageQueue_IdleHandler;", "removeIdleHandler", "LAndroidOsThreadNudger;", "enqueueMessage", "LAndroidOsMessage;J", "removeMessages", "LAndroidOsHandler;ILNSObject;Z", "LAndroidOsHandler;LJavaLangRunnable;LNSObject;", "removeCallbacksAndMessages", "LAndroidOsHandler;LNSObject;" };
  static const J2ObjcClassInfo _AndroidOsMessageQueue = { "MessageQueue", "android.os", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, 4, -1, -1, -1 };
  return &_AndroidOsMessageQueue;
}

@end

void AndroidOsMessageQueue_nativeInit(AndroidOsMessageQueue *self) {
  if([NSThread isMainThread])
  opQueue = [NSOperationQueue mainQueue];
  else
  opQueue = [[NSOperationQueue alloc] init];
}

void AndroidOsMessageQueue_nativeDestroy(AndroidOsMessageQueue *self) {
  
}

void AndroidOsMessageQueue_dopNudgeThreadNow(AndroidOsMessageQueue *self) {
  AndroidOsMessageQueue_dopNudgeThreadAtWithInt_(self, 0);
}

void AndroidOsMessageQueue_dopNudgeThreadAtWithInt_(AndroidOsMessageQueue *self, jint timeoutMillis) {
  if(timeoutMillis <= 0){
    [self callNudgeOnThread];
  }else{
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (long)timeoutMillis + (long)1000000), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
      [self callNudgeOnThread];
    });
  }
}

void AndroidOsMessageQueue_testThreadTimerWithInt_(AndroidOsMessageQueue *self, jint timeout) {
  [create_AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(self, timeout) start];
}

void AndroidOsMessageQueue_callNudgeOnThread(AndroidOsMessageQueue *self) {
  [opQueue addOperation:[NSBlockOperation blockOperationWithBlock:^{
    [self callNudge];
  }]];
}

void AndroidOsMessageQueue_callNudge(AndroidOsMessageQueue *self) {
  [((id<AndroidOsThreadNudger>) nil_chk(self->mThreadNudger_)) nudge];
}

void AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(AndroidOsMessageQueue *self, id<AndroidOsThreadNudger> threadNudger) {
  NSObject_init(self);
  self->mQuitAllowed_ = true;
  self->mBlocked_ = true;
  self->mThreadNudger_ = threadNudger;
  AndroidOsMessageQueue_nativeInit(self);
}

AndroidOsMessageQueue *new_AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(id<AndroidOsThreadNudger> threadNudger) {
  J2OBJC_NEW_IMPL(AndroidOsMessageQueue, initWithAndroidOsThreadNudger_, threadNudger)
}

AndroidOsMessageQueue *create_AndroidOsMessageQueue_initWithAndroidOsThreadNudger_(id<AndroidOsThreadNudger> threadNudger) {
  J2OBJC_CREATE_IMPL(AndroidOsMessageQueue, initWithAndroidOsThreadNudger_, threadNudger)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsMessageQueue)

@implementation AndroidOsMessageQueue_1

- (instancetype __nonnull)initWithAndroidOsMessageQueue:(AndroidOsMessageQueue *)outer$
                                                withInt:(jint)capture$0 {
  AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(self, outer$, capture$0);
  return self;
}

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(val$timeout_);
    AndroidOsMessageQueue_dopNudgeThreadNow(this$0_);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidOsMessageQueue:withInt:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAndroidOsMessageQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeout_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsMessageQueue;", "testThreadTimerWithInt:" };
  static const J2ObjcClassInfo _AndroidOsMessageQueue_1 = { "", "android.os", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_AndroidOsMessageQueue_1;
}

@end

void AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(AndroidOsMessageQueue_1 *self, AndroidOsMessageQueue *outer$, jint capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$timeout_ = capture$0;
  JavaLangThread_init(self);
}

AndroidOsMessageQueue_1 *new_AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(AndroidOsMessageQueue *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(AndroidOsMessageQueue_1, initWithAndroidOsMessageQueue_withInt_, outer$, capture$0)
}

AndroidOsMessageQueue_1 *create_AndroidOsMessageQueue_1_initWithAndroidOsMessageQueue_withInt_(AndroidOsMessageQueue *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(AndroidOsMessageQueue_1, initWithAndroidOsMessageQueue_withInt_, outer$, capture$0)
}

@implementation AndroidOsMessageQueue_IdleHandler

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(queueIdle);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidOsMessageQueue;" };
  static const J2ObjcClassInfo _AndroidOsMessageQueue_IdleHandler = { "IdleHandler", "android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_AndroidOsMessageQueue_IdleHandler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidOsMessageQueue_IdleHandler)

@implementation AndroidOsOperationCanceledException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsOperationCanceledException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)message {
  AndroidOsOperationCanceledException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidOsOperationCanceledException = { "OperationCanceledException", "android.os", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_AndroidOsOperationCanceledException;
}

@end

void AndroidOsOperationCanceledException_init(AndroidOsOperationCanceledException *self) {
  AndroidOsOperationCanceledException_initWithNSString_(self, nil);
}

AndroidOsOperationCanceledException *new_AndroidOsOperationCanceledException_init() {
  J2OBJC_NEW_IMPL(AndroidOsOperationCanceledException, init)
}

AndroidOsOperationCanceledException *create_AndroidOsOperationCanceledException_init() {
  J2OBJC_CREATE_IMPL(AndroidOsOperationCanceledException, init)
}

void AndroidOsOperationCanceledException_initWithNSString_(AndroidOsOperationCanceledException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message != nil ? message : @"The operation has been canceled.");
}

AndroidOsOperationCanceledException *new_AndroidOsOperationCanceledException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(AndroidOsOperationCanceledException, initWithNSString_, message)
}

AndroidOsOperationCanceledException *create_AndroidOsOperationCanceledException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(AndroidOsOperationCanceledException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsOperationCanceledException)

J2OBJC_INITIALIZED_DEFN(AndroidOsParcel)

id<AndroidOsParcelable_Creator> AndroidOsParcel_STRING_CREATOR;

@implementation AndroidOsParcel

+ (id<AndroidOsParcelable_Creator>)STRING_CREATOR {
  return AndroidOsParcel_STRING_CREATOR;
}

+ (AndroidOsParcel *)obtain {
  return AndroidOsParcel_obtain();
}

- (void)recycle {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)dataSize {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)dataAvail {
  return AndroidOsParcel_dataAvail(self);
}

- (jint)dataPosition {
  return AndroidOsParcel_dataPosition(self);
}

- (jint)dataCapacity {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setDataSizeWithInt:(jint)size {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setDataPositionWithInt:(jint)pos {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setDataCapacityWithInt:(jint)size {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSByteArray *)marshall {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)unmarshallWithByteArray:(IOSByteArray *)data
                        withInt:(jint)offest
                        withInt:(jint)length {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)appendFromWithAndroidOsParcel:(AndroidOsParcel *)parcel
                              withInt:(jint)offset
                              withInt:(jint)length {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)hasFileDescriptors {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeInterfaceTokenWithNSString:(NSString *)interfaceName {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)enforceInterfaceWithNSString:(NSString *)interfaceName {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeByteArrayWithByteArray:(IOSByteArray *)b {
  AndroidOsParcel_writeByteArrayWithByteArray_(self, b);
}

- (void)writeByteArrayWithByteArray:(IOSByteArray *)b
                            withInt:(jint)offset
                            withInt:(jint)len {
  AndroidOsParcel_writeByteArrayWithByteArray_withInt_withInt_(self, b, offset, len);
}

- (void)writeNativeWithByteArray:(IOSByteArray *)b
                         withInt:(jint)offset
                         withInt:(jint)len {
  AndroidOsParcel_writeNativeWithByteArray_withInt_withInt_(self, b, offset, len);
}

- (void)writeIntWithInt:(jint)val {
  AndroidOsParcel_writeIntWithInt_(self, val);
}

- (void)writeLongWithLong:(jlong)val {
  AndroidOsParcel_writeLongWithLong_(self, val);
}

- (void)writeFloatWithFloat:(jfloat)val {
  AndroidOsParcel_writeFloatWithFloat_(self, val);
}

- (void)writeDoubleWithDouble:(jdouble)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeStringWithNSString:(NSString *)val {
  AndroidOsParcel_writeStringWithNSString_(self, val);
}

- (void)writeCharSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeStrongBinderWithAndroidOsIBinder:(id<AndroidOsIBinder>)val {
  AndroidOsParcel_writeStrongBinderWithAndroidOsIBinder_(self, val);
}

- (void)writeStrongInterfaceWithAndroidOsIInterface:(id<AndroidOsIInterface>)val {
  AndroidOsParcel_writeStrongBinderWithAndroidOsIBinder_(self, val == nil ? nil : [val asBinder]);
}

- (void)writeFileDescriptorWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeByteWithByte:(jbyte)val {
  AndroidOsParcel_writeByteWithByte_(self, val);
}

- (void)writeMapWithJavaUtilMap:(id<JavaUtilMap>)val {
  [self writeMapInternalWithJavaUtilMap:val];
}

- (void)writeMapInternalWithJavaUtilMap:(id<JavaUtilMap>)val {
  if (val == nil) {
    AndroidOsParcel_writeIntWithInt_(self, -1);
    return;
  }
  id<JavaUtilSet> entries = [val entrySet];
  AndroidOsParcel_writeIntWithInt_(self, [((id<JavaUtilSet>) nil_chk(entries)) size]);
  for (id<JavaUtilMap_Entry> __strong e in entries) {
    AndroidOsParcel_writeValueWithId_(self, [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]);
    AndroidOsParcel_writeValueWithId_(self, [e getValue]);
  }
}

- (void)writeBundleWithAndroidOsBundle:(AndroidOsBundle *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeListWithJavaUtilList:(id<JavaUtilList>)val {
  if (val == nil) {
    AndroidOsParcel_writeIntWithInt_(self, -1);
    return;
  }
  jint N = [val size];
  jint i = 0;
  AndroidOsParcel_writeIntWithInt_(self, N);
  while (i < N) {
    AndroidOsParcel_writeValueWithId_(self, [val getWithInt:i]);
    i++;
  }
}

- (void)writeArrayWithNSObjectArray:(IOSObjectArray *)val {
  if (val == nil) {
    AndroidOsParcel_writeIntWithInt_(self, -1);
    return;
  }
  jint N = val->size_;
  jint i = 0;
  AndroidOsParcel_writeIntWithInt_(self, N);
  while (i < N) {
    AndroidOsParcel_writeValueWithId_(self, IOSObjectArray_Get(val, i));
    i++;
  }
}

- (void)writeSparseArrayWithAndroidUtilSparseArray:(AndroidUtilSparseArray *)val {
  if (val == nil) {
    AndroidOsParcel_writeIntWithInt_(self, -1);
    return;
  }
  jint N = [val size];
  AndroidOsParcel_writeIntWithInt_(self, N);
  jint i = 0;
  while (i < N) {
    AndroidOsParcel_writeIntWithInt_(self, [val keyAtWithInt:i]);
    AndroidOsParcel_writeValueWithId_(self, [val valueAtWithInt:i]);
    i++;
  }
}

- (void)writeSparseBooleanArrayWithAndroidUtilSparseBooleanArray:(AndroidUtilSparseBooleanArray *)val {
  if (val == nil) {
    AndroidOsParcel_writeIntWithInt_(self, -1);
    return;
  }
  jint N = [val size];
  AndroidOsParcel_writeIntWithInt_(self, N);
  jint i = 0;
  while (i < N) {
    AndroidOsParcel_writeIntWithInt_(self, [val keyAtWithInt:i]);
    AndroidOsParcel_writeByteWithByte_(self, (jbyte) ([val valueAtWithInt:i] ? 1 : 0));
    i++;
  }
}

- (void)writeBooleanArrayWithBooleanArray:(IOSBooleanArray *)val {
  if (val != nil) {
    jint N = val->size_;
    AndroidOsParcel_writeIntWithInt_(self, N);
    for (jint i = 0; i < N; i++) {
      AndroidOsParcel_writeIntWithInt_(self, IOSBooleanArray_Get(val, i) ? 1 : 0);
    }
  }
  else {
    AndroidOsParcel_writeIntWithInt_(self, -1);
  }
}

- (IOSBooleanArray *)createBooleanArray {
  return AndroidOsParcel_createBooleanArray(self);
}

- (void)readBooleanArrayWithBooleanArray:(IOSBooleanArray *)val {
  jint N = AndroidOsParcel_readInt(self);
  if (N == ((IOSBooleanArray *) nil_chk(val))->size_) {
    for (jint i = 0; i < N; i++) {
      *IOSBooleanArray_GetRef(val, i) = (AndroidOsParcel_readInt(self) != 0);
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (void)writeCharArrayWithCharArray:(IOSCharArray *)val {
  if (val != nil) {
    jint N = val->size_;
    AndroidOsParcel_writeIntWithInt_(self, N);
    for (jint i = 0; i < N; i++) {
      AndroidOsParcel_writeIntWithInt_(self, (jint) IOSCharArray_Get(val, i));
    }
  }
  else {
    AndroidOsParcel_writeIntWithInt_(self, -1);
  }
}

- (IOSCharArray *)createCharArray {
  jint N = AndroidOsParcel_readInt(self);
  if (N >= 0 && N <= (JreRShift32(AndroidOsParcel_dataAvail(self), 2))) {
    IOSCharArray *val = [IOSCharArray arrayWithLength:N];
    for (jint i = 0; i < N; i++) {
      *IOSCharArray_GetRef(val, i) = (jchar) AndroidOsParcel_readInt(self);
    }
    return val;
  }
  else {
    return nil;
  }
}

- (void)readCharArrayWithCharArray:(IOSCharArray *)val {
  jint N = AndroidOsParcel_readInt(self);
  if (N == ((IOSCharArray *) nil_chk(val))->size_) {
    for (jint i = 0; i < N; i++) {
      *IOSCharArray_GetRef(val, i) = (jchar) AndroidOsParcel_readInt(self);
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (void)writeIntArrayWithIntArray:(IOSIntArray *)val {
  if (val != nil) {
    jint N = val->size_;
    AndroidOsParcel_writeIntWithInt_(self, N);
    for (jint i = 0; i < N; i++) {
      AndroidOsParcel_writeIntWithInt_(self, IOSIntArray_Get(val, i));
    }
  }
  else {
    AndroidOsParcel_writeIntWithInt_(self, -1);
  }
}

- (IOSIntArray *)createIntArray {
  return AndroidOsParcel_createIntArray(self);
}

- (void)readIntArrayWithIntArray:(IOSIntArray *)val {
  jint N = AndroidOsParcel_readInt(self);
  if (N == ((IOSIntArray *) nil_chk(val))->size_) {
    for (jint i = 0; i < N; i++) {
      *IOSIntArray_GetRef(val, i) = AndroidOsParcel_readInt(self);
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (void)writeLongArrayWithLongArray:(IOSLongArray *)val {
  if (val != nil) {
    jint N = val->size_;
    AndroidOsParcel_writeIntWithInt_(self, N);
    for (jint i = 0; i < N; i++) {
      AndroidOsParcel_writeLongWithLong_(self, IOSLongArray_Get(val, i));
    }
  }
  else {
    AndroidOsParcel_writeIntWithInt_(self, -1);
  }
}

- (IOSLongArray *)createLongArray {
  return AndroidOsParcel_createLongArray(self);
}

- (void)readLongArrayWithLongArray:(IOSLongArray *)val {
  jint N = AndroidOsParcel_readInt(self);
  if (N == ((IOSLongArray *) nil_chk(val))->size_) {
    for (jint i = 0; i < N; i++) {
      *IOSLongArray_GetRef(val, i) = AndroidOsParcel_readLong(self);
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (void)writeFloatArrayWithFloatArray:(IOSFloatArray *)val {
  if (val != nil) {
    jint N = val->size_;
    AndroidOsParcel_writeIntWithInt_(self, N);
    for (jint i = 0; i < N; i++) {
      AndroidOsParcel_writeFloatWithFloat_(self, IOSFloatArray_Get(val, i));
    }
  }
  else {
    AndroidOsParcel_writeIntWithInt_(self, -1);
  }
}

- (IOSFloatArray *)createFloatArray {
  jint N = AndroidOsParcel_readInt(self);
  if (N >= 0 && N <= (JreRShift32(AndroidOsParcel_dataAvail(self), 2))) {
    IOSFloatArray *val = [IOSFloatArray arrayWithLength:N];
    for (jint i = 0; i < N; i++) {
      *IOSFloatArray_GetRef(val, i) = AndroidOsParcel_readFloat(self);
    }
    return val;
  }
  else {
    return nil;
  }
}

- (void)readFloatArrayWithFloatArray:(IOSFloatArray *)val {
  jint N = AndroidOsParcel_readInt(self);
  if (N == ((IOSFloatArray *) nil_chk(val))->size_) {
    for (jint i = 0; i < N; i++) {
      *IOSFloatArray_GetRef(val, i) = AndroidOsParcel_readFloat(self);
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (void)writeDoubleArrayWithDoubleArray:(IOSDoubleArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSDoubleArray *)createDoubleArray {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)readDoubleArrayWithDoubleArray:(IOSDoubleArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeStringArrayWithNSStringArray:(IOSObjectArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)createStringArray {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)readStringArrayWithNSStringArray:(IOSObjectArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeBinderArrayWithAndroidOsIBinderArray:(IOSObjectArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeCharSequenceArrayWithJavaLangCharSequenceArray:(IOSObjectArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)createBinderArray {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)readBinderArrayWithAndroidOsIBinderArray:(IOSObjectArray *)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeTypedListWithJavaUtilList:(id<JavaUtilList>)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeStringListWithJavaUtilList:(id<JavaUtilList>)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeBinderListWithJavaUtilList:(id<JavaUtilList>)val {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeTypedArrayWithAndroidOsParcelableArray:(IOSObjectArray *)val
                                            withInt:(jint)parcelableFlags {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeValueWithId:(id)v {
  AndroidOsParcel_writeValueWithId_(self, v);
}

- (void)writeParcelableWithAndroidOsParcelable:(id<AndroidOsParcelable>)p
                                       withInt:(jint)parcelableFlags {
  AndroidOsParcel_writeParcelableWithAndroidOsParcelable_withInt_(self, p, parcelableFlags);
}

- (void)writeSerializableWithJavaIoSerializable:(id<JavaIoSerializable>)s {
  if (s == nil) {
    AndroidOsParcel_writeStringWithNSString_(self, nil);
    return;
  }
  NSString *name = [[s java_getClass] getName];
  AndroidOsParcel_writeStringWithNSString_(self, name);
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_init();
  @try {
    JavaIoObjectOutputStream *oos = create_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(baos);
    [oos writeObjectWithId:s];
    [oos close];
    AndroidOsParcel_writeByteArrayWithByteArray_(self, [baos toByteArray]);
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$C", @"Parcelable encountered IOException writing serializable object (name = ", name, ')'), ioe);
  }
}

- (void)writeExceptionWithJavaLangException:(JavaLangException *)e {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)writeNoException {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)readException {
  jint code = AndroidOsParcel_readExceptionCode(self);
  if (code != 0) {
    NSString *msg = AndroidOsParcel_readString(self);
    AndroidOsParcel_readExceptionWithInt_withNSString_(self, code, msg);
  }
}

- (jint)readExceptionCode {
  return AndroidOsParcel_readExceptionCode(self);
}

- (void)readExceptionWithInt:(jint)code
                withNSString:(NSString *)msg {
  AndroidOsParcel_readExceptionWithInt_withNSString_(self, code, msg);
}

- (jint)readInt {
  return AndroidOsParcel_readInt(self);
}

- (jlong)readLong {
  return AndroidOsParcel_readLong(self);
}

- (jfloat)readFloat {
  return AndroidOsParcel_readFloat(self);
}

- (jdouble)readDouble {
  return AndroidOsParcel_readDouble(self);
}

- (NSString *)readString {
  return AndroidOsParcel_readString(self);
}

- (id<JavaLangCharSequence>)readCharSequence {
  return AndroidOsParcel_readCharSequence(self);
}

- (id<AndroidOsIBinder>)readStrongBinder {
  return AndroidOsParcel_readStrongBinder(self);
}

- (AndroidOsParcelFileDescriptor *)readFileDescriptor {
  JavaIoFileDescriptor *fd = AndroidOsParcel_internalReadFileDescriptor(self);
  return fd != nil ? create_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(fd) : nil;
}

- (JavaIoFileDescriptor *)internalReadFileDescriptor {
  return AndroidOsParcel_internalReadFileDescriptor(self);
}

+ (JavaIoFileDescriptor *)openFileDescriptorWithNSString:(NSString *)file
                                                 withInt:(jint)mode {
  return AndroidOsParcel_openFileDescriptorWithNSString_withInt_(file, mode);
}

+ (void)closeFileDescriptorWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)desc {
  AndroidOsParcel_closeFileDescriptorWithJavaIoFileDescriptor_(desc);
}

- (jbyte)readByte {
  return AndroidOsParcel_readByte(self);
}

- (void)readMapWithJavaUtilMap:(id<JavaUtilMap>)outVal
       withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  jint N = AndroidOsParcel_readInt(self);
  [self readMapInternalWithJavaUtilMap:outVal withInt:N withJavaLangClassLoader:loader];
}

- (void)readListWithJavaUtilList:(id<JavaUtilList>)outVal
         withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  jint N = AndroidOsParcel_readInt(self);
  AndroidOsParcel_readListInternalWithJavaUtilList_withInt_withJavaLangClassLoader_(self, outVal, N, loader);
}

- (JavaUtilHashMap *)readHashMapWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readHashMapWithJavaLangClassLoader_(self, loader);
}

- (AndroidOsBundle *)readBundle {
  return AndroidOsParcel_readBundleWithJavaLangClassLoader_(self, nil);
}

- (AndroidOsBundle *)readBundleWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readBundleWithJavaLangClassLoader_(self, loader);
}

- (IOSByteArray *)createByteArray {
  return AndroidOsParcel_createByteArray(self);
}

- (void)readByteArrayWithByteArray:(IOSByteArray *)val {
  IOSByteArray *ba = AndroidOsParcel_createByteArray(self);
  if (((IOSByteArray *) nil_chk(ba))->size_ == ((IOSByteArray *) nil_chk(val))->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ba, 0, val, 0, ba->size_);
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (IOSObjectArray *)readStringArray {
  return AndroidOsParcel_readStringArray(self);
}

- (IOSObjectArray *)readCharSequenceArray {
  return AndroidOsParcel_readCharSequenceArray(self);
}

- (JavaUtilArrayList *)readArrayListWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readArrayListWithJavaLangClassLoader_(self, loader);
}

- (IOSObjectArray *)readArrayWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readArrayWithJavaLangClassLoader_(self, loader);
}

- (AndroidUtilSparseArray *)readSparseArrayWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readSparseArrayWithJavaLangClassLoader_(self, loader);
}

- (AndroidUtilSparseBooleanArray *)readSparseBooleanArray {
  return AndroidOsParcel_readSparseBooleanArray(self);
}

- (JavaUtilArrayList *)createTypedArrayListWithAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  JavaUtilArrayList *l = create_JavaUtilArrayList_initWithInt_(N);
  while (N > 0) {
    if (AndroidOsParcel_readInt(self) != 0) {
      [l addWithId:[((id<AndroidOsParcelable_Creator>) nil_chk(c)) createFromParcelWithAndroidOsParcel:self]];
    }
    else {
      [l addWithId:nil];
    }
    N--;
  }
  return l;
}

- (void)readTypedListWithJavaUtilList:(id<JavaUtilList>)list
      withAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c {
  jint M = [((id<JavaUtilList>) nil_chk(list)) size];
  jint N = AndroidOsParcel_readInt(self);
  jint i = 0;
  for (; i < M && i < N; i++) {
    if (AndroidOsParcel_readInt(self) != 0) {
      [list setWithInt:i withId:[((id<AndroidOsParcelable_Creator>) nil_chk(c)) createFromParcelWithAndroidOsParcel:self]];
    }
    else {
      [list setWithInt:i withId:nil];
    }
  }
  for (; i < N; i++) {
    if (AndroidOsParcel_readInt(self) != 0) {
      [list addWithId:[((id<AndroidOsParcelable_Creator>) nil_chk(c)) createFromParcelWithAndroidOsParcel:self]];
    }
    else {
      [list addWithId:nil];
    }
  }
  for (; i < M; i++) {
    [list removeWithInt:N];
  }
}

- (JavaUtilArrayList *)createStringArrayList {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  JavaUtilArrayList *l = create_JavaUtilArrayList_initWithInt_(N);
  while (N > 0) {
    [l addWithId:AndroidOsParcel_readString(self)];
    N--;
  }
  return l;
}

- (JavaUtilArrayList *)createBinderArrayList {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  JavaUtilArrayList *l = create_JavaUtilArrayList_initWithInt_(N);
  while (N > 0) {
    [l addWithId:AndroidOsParcel_readStrongBinder(self)];
    N--;
  }
  return l;
}

- (void)readStringListWithJavaUtilList:(id<JavaUtilList>)list {
  jint M = [((id<JavaUtilList>) nil_chk(list)) size];
  jint N = AndroidOsParcel_readInt(self);
  jint i = 0;
  for (; i < M && i < N; i++) {
    [list setWithInt:i withId:AndroidOsParcel_readString(self)];
  }
  for (; i < N; i++) {
    [list addWithId:AndroidOsParcel_readString(self)];
  }
  for (; i < M; i++) {
    [list removeWithInt:N];
  }
}

- (void)readBinderListWithJavaUtilList:(id<JavaUtilList>)list {
  jint M = [((id<JavaUtilList>) nil_chk(list)) size];
  jint N = AndroidOsParcel_readInt(self);
  jint i = 0;
  for (; i < M && i < N; i++) {
    [list setWithInt:i withId:AndroidOsParcel_readStrongBinder(self)];
  }
  for (; i < N; i++) {
    [list addWithId:AndroidOsParcel_readStrongBinder(self)];
  }
  for (; i < M; i++) {
    [list removeWithInt:N];
  }
}

- (IOSObjectArray *)createTypedArrayWithAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c {
  return AndroidOsParcel_createTypedArrayWithAndroidOsParcelable_Creator_(self, c);
}

- (void)readTypedArrayWithNSObjectArray:(IOSObjectArray *)val
        withAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c {
  jint N = AndroidOsParcel_readInt(self);
  if (N == ((IOSObjectArray *) nil_chk(val))->size_) {
    for (jint i = 0; i < N; i++) {
      if (AndroidOsParcel_readInt(self) != 0) {
        IOSObjectArray_Set(val, i, [((id<AndroidOsParcelable_Creator>) nil_chk(c)) createFromParcelWithAndroidOsParcel:self]);
      }
      else {
        IOSObjectArray_Set(val, i, nil);
      }
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"bad array lengths");
  }
}

- (IOSObjectArray *)readTypedArrayWithAndroidOsParcelable_Creator:(id<AndroidOsParcelable_Creator>)c {
  return AndroidOsParcel_createTypedArrayWithAndroidOsParcelable_Creator_(self, c);
}

- (void)writeParcelableArrayWithAndroidOsParcelableArray:(IOSObjectArray *)value
                                                 withInt:(jint)parcelableFlags {
  if (value != nil) {
    jint N = value->size_;
    AndroidOsParcel_writeIntWithInt_(self, N);
    for (jint i = 0; i < N; i++) {
      AndroidOsParcel_writeParcelableWithAndroidOsParcelable_withInt_(self, IOSObjectArray_Get(value, i), parcelableFlags);
    }
  }
  else {
    AndroidOsParcel_writeIntWithInt_(self, -1);
  }
}

- (id)readValueWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readValueWithJavaLangClassLoader_(self, loader);
}

- (id<AndroidOsParcelable>)readParcelableWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readParcelableWithJavaLangClassLoader_(self, loader);
}

- (IOSObjectArray *)readParcelableArrayWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return AndroidOsParcel_readParcelableArrayWithJavaLangClassLoader_(self, loader);
}

- (id<JavaIoSerializable>)readSerializable {
  return AndroidOsParcel_readSerializable(self);
}

+ (AndroidOsParcel *)obtainWithInt:(jint)obj {
  return AndroidOsParcel_obtainWithInt_(obj);
}

- (instancetype __nonnull)initWithInt:(jint)obj {
  AndroidOsParcel_initWithInt_(self, obj);
  return self;
}

- (void)java_finalize {
  AndroidOsParcel_destroy(self);
}

- (void)freeBuffer {
  AndroidOsParcel_freeBuffer(self);
}

- (void)init__WithInt:(jint)obj {
  AndroidOsParcel_init__WithInt_(self, obj);
}

- (void)destroy {
  AndroidOsParcel_destroy(self);
}

- (void)readMapInternalWithJavaUtilMap:(id<JavaUtilMap>)outVal
                               withInt:(jint)N
               withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  while (N > 0) {
    id key = AndroidOsParcel_readValueWithJavaLangClassLoader_(self, loader);
    id value = AndroidOsParcel_readValueWithJavaLangClassLoader_(self, loader);
    [((id<JavaUtilMap>) nil_chk(outVal)) putWithId:key withId:value];
    N--;
  }
}

- (void)readListInternalWithJavaUtilList:(id<JavaUtilList>)outVal
                                 withInt:(jint)N
                 withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  AndroidOsParcel_readListInternalWithJavaUtilList_withInt_withJavaLangClassLoader_(self, outVal, N, loader);
}

- (void)readArrayInternalWithNSObjectArray:(IOSObjectArray *)outVal
                                   withInt:(jint)N
                   withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  AndroidOsParcel_readArrayInternalWithNSObjectArray_withInt_withJavaLangClassLoader_(self, outVal, N, loader);
}

- (void)readSparseArrayInternalWithAndroidUtilSparseArray:(AndroidUtilSparseArray *)outVal
                                                  withInt:(jint)N
                                  withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  AndroidOsParcel_readSparseArrayInternalWithAndroidUtilSparseArray_withInt_withJavaLangClassLoader_(self, outVal, N, loader);
}

- (void)readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray:(AndroidUtilSparseBooleanArray *)outVal
                                                                withInt:(jint)N {
  AndroidOsParcel_readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray_withInt_(self, outVal, N);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidOsParcel class]);
  RELEASE_(mStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidOsParcel;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 21, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 34, 33, -1, 35, -1, -1 },
    { NULL, "V", 0x11, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 42, 43, -1, 44, -1, -1 },
    { NULL, "V", 0x11, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 47, 48, -1, -1, -1, -1 },
    { NULL, "[Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 50, 51, -1, -1, -1, -1 },
    { NULL, "[C", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 52, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 53, 54, -1, -1, -1, -1 },
    { NULL, "[I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 55, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 56, 57, -1, -1, -1, -1 },
    { NULL, "[J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 58, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 59, 60, -1, -1, -1, -1 },
    { NULL, "[F", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 61, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 62, 63, -1, -1, -1, -1 },
    { NULL, "[D", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 64, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 65, 66, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 67, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 70, 71, -1, -1, -1, -1 },
    { NULL, "[LAndroidOsIBinder;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 72, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 73, 39, -1, 74, -1, -1 },
    { NULL, "V", 0x11, 75, 39, -1, 76, -1, -1 },
    { NULL, "V", 0x11, 77, 39, -1, 78, -1, -1 },
    { NULL, "V", 0x11, 79, 80, -1, 81, -1, -1 },
    { NULL, "V", 0x11, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 86, 87, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 88, 89, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 90, 91, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsIBinder;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsParcelFileDescriptor;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileDescriptor;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileDescriptor;", 0x8, 92, 93, 94, -1, -1, -1 },
    { NULL, "V", 0x8, 95, 29, 96, -1, -1, -1 },
    { NULL, "B", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 97, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 99, 100, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x11, 101, 102, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsBundle;", 0x11, 103, 102, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 104, 12, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangCharSequence;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x11, 105, 102, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x11, 106, 102, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilSparseArray;", 0x11, 107, 102, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilSparseBooleanArray;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x11, 108, 109, -1, 110, -1, -1 },
    { NULL, "V", 0x11, 111, 112, -1, 113, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x11, -1, -1, -1, 114, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x11, -1, -1, -1, 115, -1, -1 },
    { NULL, "V", 0x11, 116, 39, -1, 76, -1, -1 },
    { NULL, "V", 0x11, 117, 39, -1, 78, -1, -1 },
    { NULL, "[LNSObject;", 0x11, 118, 109, -1, 119, -1, -1 },
    { NULL, "V", 0x11, 120, 121, -1, 122, -1, -1 },
    { NULL, "[LNSObject;", 0x11, 120, 109, -1, 119, 123, -1 },
    { NULL, "V", 0x11, 124, 80, -1, 81, -1, -1 },
    { NULL, "LNSObject;", 0x11, 125, 102, -1, -1, -1, -1 },
    { NULL, "LAndroidOsParcelable;", 0x11, 126, 102, -1, 127, -1, -1 },
    { NULL, "[LAndroidOsParcelable;", 0x11, 128, 102, -1, -1, -1, -1 },
    { NULL, "LJavaIoSerializable;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsParcel;", 0x1c, 129, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 130, -1, 131, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 132, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 133, 134, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 135, 136, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 137, 138, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 139, 140, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 141, 142, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(obtain);
  methods[1].selector = @selector(recycle);
  methods[2].selector = @selector(dataSize);
  methods[3].selector = @selector(dataAvail);
  methods[4].selector = @selector(dataPosition);
  methods[5].selector = @selector(dataCapacity);
  methods[6].selector = @selector(setDataSizeWithInt:);
  methods[7].selector = @selector(setDataPositionWithInt:);
  methods[8].selector = @selector(setDataCapacityWithInt:);
  methods[9].selector = @selector(marshall);
  methods[10].selector = @selector(unmarshallWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(appendFromWithAndroidOsParcel:withInt:withInt:);
  methods[12].selector = @selector(hasFileDescriptors);
  methods[13].selector = @selector(writeInterfaceTokenWithNSString:);
  methods[14].selector = @selector(enforceInterfaceWithNSString:);
  methods[15].selector = @selector(writeByteArrayWithByteArray:);
  methods[16].selector = @selector(writeByteArrayWithByteArray:withInt:withInt:);
  methods[17].selector = @selector(writeNativeWithByteArray:withInt:withInt:);
  methods[18].selector = @selector(writeIntWithInt:);
  methods[19].selector = @selector(writeLongWithLong:);
  methods[20].selector = @selector(writeFloatWithFloat:);
  methods[21].selector = @selector(writeDoubleWithDouble:);
  methods[22].selector = @selector(writeStringWithNSString:);
  methods[23].selector = @selector(writeCharSequenceWithJavaLangCharSequence:);
  methods[24].selector = @selector(writeStrongBinderWithAndroidOsIBinder:);
  methods[25].selector = @selector(writeStrongInterfaceWithAndroidOsIInterface:);
  methods[26].selector = @selector(writeFileDescriptorWithJavaIoFileDescriptor:);
  methods[27].selector = @selector(writeByteWithByte:);
  methods[28].selector = @selector(writeMapWithJavaUtilMap:);
  methods[29].selector = @selector(writeMapInternalWithJavaUtilMap:);
  methods[30].selector = @selector(writeBundleWithAndroidOsBundle:);
  methods[31].selector = @selector(writeListWithJavaUtilList:);
  methods[32].selector = @selector(writeArrayWithNSObjectArray:);
  methods[33].selector = @selector(writeSparseArrayWithAndroidUtilSparseArray:);
  methods[34].selector = @selector(writeSparseBooleanArrayWithAndroidUtilSparseBooleanArray:);
  methods[35].selector = @selector(writeBooleanArrayWithBooleanArray:);
  methods[36].selector = @selector(createBooleanArray);
  methods[37].selector = @selector(readBooleanArrayWithBooleanArray:);
  methods[38].selector = @selector(writeCharArrayWithCharArray:);
  methods[39].selector = @selector(createCharArray);
  methods[40].selector = @selector(readCharArrayWithCharArray:);
  methods[41].selector = @selector(writeIntArrayWithIntArray:);
  methods[42].selector = @selector(createIntArray);
  methods[43].selector = @selector(readIntArrayWithIntArray:);
  methods[44].selector = @selector(writeLongArrayWithLongArray:);
  methods[45].selector = @selector(createLongArray);
  methods[46].selector = @selector(readLongArrayWithLongArray:);
  methods[47].selector = @selector(writeFloatArrayWithFloatArray:);
  methods[48].selector = @selector(createFloatArray);
  methods[49].selector = @selector(readFloatArrayWithFloatArray:);
  methods[50].selector = @selector(writeDoubleArrayWithDoubleArray:);
  methods[51].selector = @selector(createDoubleArray);
  methods[52].selector = @selector(readDoubleArrayWithDoubleArray:);
  methods[53].selector = @selector(writeStringArrayWithNSStringArray:);
  methods[54].selector = @selector(createStringArray);
  methods[55].selector = @selector(readStringArrayWithNSStringArray:);
  methods[56].selector = @selector(writeBinderArrayWithAndroidOsIBinderArray:);
  methods[57].selector = @selector(writeCharSequenceArrayWithJavaLangCharSequenceArray:);
  methods[58].selector = @selector(createBinderArray);
  methods[59].selector = @selector(readBinderArrayWithAndroidOsIBinderArray:);
  methods[60].selector = @selector(writeTypedListWithJavaUtilList:);
  methods[61].selector = @selector(writeStringListWithJavaUtilList:);
  methods[62].selector = @selector(writeBinderListWithJavaUtilList:);
  methods[63].selector = @selector(writeTypedArrayWithAndroidOsParcelableArray:withInt:);
  methods[64].selector = @selector(writeValueWithId:);
  methods[65].selector = @selector(writeParcelableWithAndroidOsParcelable:withInt:);
  methods[66].selector = @selector(writeSerializableWithJavaIoSerializable:);
  methods[67].selector = @selector(writeExceptionWithJavaLangException:);
  methods[68].selector = @selector(writeNoException);
  methods[69].selector = @selector(readException);
  methods[70].selector = @selector(readExceptionCode);
  methods[71].selector = @selector(readExceptionWithInt:withNSString:);
  methods[72].selector = @selector(readInt);
  methods[73].selector = @selector(readLong);
  methods[74].selector = @selector(readFloat);
  methods[75].selector = @selector(readDouble);
  methods[76].selector = @selector(readString);
  methods[77].selector = @selector(readCharSequence);
  methods[78].selector = @selector(readStrongBinder);
  methods[79].selector = @selector(readFileDescriptor);
  methods[80].selector = @selector(internalReadFileDescriptor);
  methods[81].selector = @selector(openFileDescriptorWithNSString:withInt:);
  methods[82].selector = @selector(closeFileDescriptorWithJavaIoFileDescriptor:);
  methods[83].selector = @selector(readByte);
  methods[84].selector = @selector(readMapWithJavaUtilMap:withJavaLangClassLoader:);
  methods[85].selector = @selector(readListWithJavaUtilList:withJavaLangClassLoader:);
  methods[86].selector = @selector(readHashMapWithJavaLangClassLoader:);
  methods[87].selector = @selector(readBundle);
  methods[88].selector = @selector(readBundleWithJavaLangClassLoader:);
  methods[89].selector = @selector(createByteArray);
  methods[90].selector = @selector(readByteArrayWithByteArray:);
  methods[91].selector = @selector(readStringArray);
  methods[92].selector = @selector(readCharSequenceArray);
  methods[93].selector = @selector(readArrayListWithJavaLangClassLoader:);
  methods[94].selector = @selector(readArrayWithJavaLangClassLoader:);
  methods[95].selector = @selector(readSparseArrayWithJavaLangClassLoader:);
  methods[96].selector = @selector(readSparseBooleanArray);
  methods[97].selector = @selector(createTypedArrayListWithAndroidOsParcelable_Creator:);
  methods[98].selector = @selector(readTypedListWithJavaUtilList:withAndroidOsParcelable_Creator:);
  methods[99].selector = @selector(createStringArrayList);
  methods[100].selector = @selector(createBinderArrayList);
  methods[101].selector = @selector(readStringListWithJavaUtilList:);
  methods[102].selector = @selector(readBinderListWithJavaUtilList:);
  methods[103].selector = @selector(createTypedArrayWithAndroidOsParcelable_Creator:);
  methods[104].selector = @selector(readTypedArrayWithNSObjectArray:withAndroidOsParcelable_Creator:);
  methods[105].selector = @selector(readTypedArrayWithAndroidOsParcelable_Creator:);
  methods[106].selector = @selector(writeParcelableArrayWithAndroidOsParcelableArray:withInt:);
  methods[107].selector = @selector(readValueWithJavaLangClassLoader:);
  methods[108].selector = @selector(readParcelableWithJavaLangClassLoader:);
  methods[109].selector = @selector(readParcelableArrayWithJavaLangClassLoader:);
  methods[110].selector = @selector(readSerializable);
  methods[111].selector = @selector(obtainWithInt:);
  methods[112].selector = @selector(initWithInt:);
  methods[113].selector = @selector(java_finalize);
  methods[114].selector = @selector(freeBuffer);
  methods[115].selector = @selector(init__WithInt:);
  methods[116].selector = @selector(destroy);
  methods[117].selector = @selector(readMapInternalWithJavaUtilMap:withInt:withJavaLangClassLoader:);
  methods[118].selector = @selector(readListInternalWithJavaUtilList:withInt:withJavaLangClassLoader:);
  methods[119].selector = @selector(readArrayInternalWithNSObjectArray:withInt:withJavaLangClassLoader:);
  methods[120].selector = @selector(readSparseArrayInternalWithAndroidUtilSparseArray:withInt:withJavaLangClassLoader:);
  methods[121].selector = @selector(readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG_RECYCLE", "Z", .constantValue.asBOOL = AndroidOsParcel_DEBUG_RECYCLE, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 143, -1, -1 },
    { "mObject_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOwnObject_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStack_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "POOL_SIZE", "I", .constantValue.asInt = AndroidOsParcel_POOL_SIZE, 0x1a, -1, -1, -1, -1 },
    { "sOwnedPool", "[LAndroidOsParcel;", .constantValue.asLong = 0, 0x1a, -1, 144, -1, -1 },
    { "sHolderPool", "[LAndroidOsParcel;", .constantValue.asLong = 0, 0x1a, -1, 145, -1, -1 },
    { "VAL_NULL", "I", .constantValue.asInt = AndroidOsParcel_VAL_NULL, 0x1a, -1, -1, -1, -1 },
    { "VAL_STRING", "I", .constantValue.asInt = AndroidOsParcel_VAL_STRING, 0x1a, -1, -1, -1, -1 },
    { "VAL_INTEGER", "I", .constantValue.asInt = AndroidOsParcel_VAL_INTEGER, 0x1a, -1, -1, -1, -1 },
    { "VAL_MAP", "I", .constantValue.asInt = AndroidOsParcel_VAL_MAP, 0x1a, -1, -1, -1, -1 },
    { "VAL_BUNDLE", "I", .constantValue.asInt = AndroidOsParcel_VAL_BUNDLE, 0x1a, -1, -1, -1, -1 },
    { "VAL_PARCELABLE", "I", .constantValue.asInt = AndroidOsParcel_VAL_PARCELABLE, 0x1a, -1, -1, -1, -1 },
    { "VAL_SHORT", "I", .constantValue.asInt = AndroidOsParcel_VAL_SHORT, 0x1a, -1, -1, -1, -1 },
    { "VAL_LONG", "I", .constantValue.asInt = AndroidOsParcel_VAL_LONG, 0x1a, -1, -1, -1, -1 },
    { "VAL_FLOAT", "I", .constantValue.asInt = AndroidOsParcel_VAL_FLOAT, 0x1a, -1, -1, -1, -1 },
    { "VAL_DOUBLE", "I", .constantValue.asInt = AndroidOsParcel_VAL_DOUBLE, 0x1a, -1, -1, -1, -1 },
    { "VAL_BOOLEAN", "I", .constantValue.asInt = AndroidOsParcel_VAL_BOOLEAN, 0x1a, -1, -1, -1, -1 },
    { "VAL_CHARSEQUENCE", "I", .constantValue.asInt = AndroidOsParcel_VAL_CHARSEQUENCE, 0x1a, -1, -1, -1, -1 },
    { "VAL_LIST", "I", .constantValue.asInt = AndroidOsParcel_VAL_LIST, 0x1a, -1, -1, -1, -1 },
    { "VAL_SPARSEARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_SPARSEARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_BYTEARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_BYTEARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_STRINGARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_STRINGARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_IBINDER", "I", .constantValue.asInt = AndroidOsParcel_VAL_IBINDER, 0x1a, -1, -1, -1, -1 },
    { "VAL_PARCELABLEARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_PARCELABLEARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_OBJECTARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_OBJECTARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_INTARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_INTARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_LONGARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_LONGARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_BYTE", "I", .constantValue.asInt = AndroidOsParcel_VAL_BYTE, 0x1a, -1, -1, -1, -1 },
    { "VAL_SERIALIZABLE", "I", .constantValue.asInt = AndroidOsParcel_VAL_SERIALIZABLE, 0x1a, -1, -1, -1, -1 },
    { "VAL_SPARSEBOOLEANARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_SPARSEBOOLEANARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_BOOLEANARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_BOOLEANARRAY, 0x1a, -1, -1, -1, -1 },
    { "VAL_CHARSEQUENCEARRAY", "I", .constantValue.asInt = AndroidOsParcel_VAL_CHARSEQUENCEARRAY, 0x1a, -1, -1, -1, -1 },
    { "EX_SECURITY", "I", .constantValue.asInt = AndroidOsParcel_EX_SECURITY, 0x1a, -1, -1, -1, -1 },
    { "EX_BAD_PARCELABLE", "I", .constantValue.asInt = AndroidOsParcel_EX_BAD_PARCELABLE, 0x1a, -1, -1, -1, -1 },
    { "EX_ILLEGAL_ARGUMENT", "I", .constantValue.asInt = AndroidOsParcel_EX_ILLEGAL_ARGUMENT, 0x1a, -1, -1, -1, -1 },
    { "EX_NULL_POINTER", "I", .constantValue.asInt = AndroidOsParcel_EX_NULL_POINTER, 0x1a, -1, -1, -1, -1 },
    { "EX_ILLEGAL_STATE", "I", .constantValue.asInt = AndroidOsParcel_EX_ILLEGAL_STATE, 0x1a, -1, -1, -1, -1 },
    { "EX_HAS_REPLY_HEADER", "I", .constantValue.asInt = AndroidOsParcel_EX_HAS_REPLY_HEADER, 0x1a, -1, -1, -1, -1 },
    { "STRING_CREATOR", "LAndroidOsParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 146, 147, -1 },
    { "mCreators", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 148, 149, -1 },
  };
  static const void *ptrTable[] = { "setDataSize", "I", "setDataPosition", "setDataCapacity", "unmarshall", "[BII", "appendFrom", "LAndroidOsParcel;II", "writeInterfaceToken", "LNSString;", "enforceInterface", "writeByteArray", "[B", "writeNative", "writeInt", "writeLong", "J", "writeFloat", "F", "writeDouble", "D", "writeString", "writeCharSequence", "LJavaLangCharSequence;", "writeStrongBinder", "LAndroidOsIBinder;", "writeStrongInterface", "LAndroidOsIInterface;", "writeFileDescriptor", "LJavaIoFileDescriptor;", "writeByte", "B", "writeMap", "LJavaUtilMap;", "writeMapInternal", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "writeBundle", "LAndroidOsBundle;", "writeList", "LJavaUtilList;", "writeArray", "[LNSObject;", "writeSparseArray", "LAndroidUtilSparseArray;", "(Landroid/util/SparseArray<Ljava/lang/Object;>;)V", "writeSparseBooleanArray", "LAndroidUtilSparseBooleanArray;", "writeBooleanArray", "[Z", "readBooleanArray", "writeCharArray", "[C", "readCharArray", "writeIntArray", "[I", "readIntArray", "writeLongArray", "[J", "readLongArray", "writeFloatArray", "[F", "readFloatArray", "writeDoubleArray", "[D", "readDoubleArray", "writeStringArray", "[LNSString;", "readStringArray", "writeBinderArray", "[LAndroidOsIBinder;", "writeCharSequenceArray", "[LJavaLangCharSequence;", "readBinderArray", "writeTypedList", "<T::Landroid/os/Parcelable;>(Ljava/util/List<TT;>;)V", "writeStringList", "(Ljava/util/List<Ljava/lang/String;>;)V", "writeBinderList", "(Ljava/util/List<Landroid/os/IBinder;>;)V", "writeTypedArray", "[LAndroidOsParcelable;I", "<T::Landroid/os/Parcelable;>([TT;I)V", "writeValue", "LNSObject;", "writeParcelable", "LAndroidOsParcelable;I", "writeSerializable", "LJavaIoSerializable;", "writeException", "LJavaLangException;", "readException", "ILNSString;", "openFileDescriptor", "LNSString;I", "LJavaIoFileNotFoundException;", "closeFileDescriptor", "LJavaIoIOException;", "readMap", "LJavaUtilMap;LJavaLangClassLoader;", "readList", "LJavaUtilList;LJavaLangClassLoader;", "readHashMap", "LJavaLangClassLoader;", "readBundle", "readByteArray", "readArrayList", "readArray", "readSparseArray", "createTypedArrayList", "LAndroidOsParcelable_Creator;", "<T:Ljava/lang/Object;>(Landroid/os/Parcelable$Creator<TT;>;)Ljava/util/ArrayList<TT;>;", "readTypedList", "LJavaUtilList;LAndroidOsParcelable_Creator;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;Landroid/os/Parcelable$Creator<TT;>;)V", "()Ljava/util/ArrayList<Ljava/lang/String;>;", "()Ljava/util/ArrayList<Landroid/os/IBinder;>;", "readStringList", "readBinderList", "createTypedArray", "<T:Ljava/lang/Object;>(Landroid/os/Parcelable$Creator<TT;>;)[TT;", "readTypedArray", "[LNSObject;LAndroidOsParcelable_Creator;", "<T:Ljava/lang/Object;>([TT;Landroid/os/Parcelable$Creator<TT;>;)V", (void *)&AndroidOsParcel__Annotations$0, "writeParcelableArray", "readValue", "readParcelable", "<T::Landroid/os/Parcelable;>(Ljava/lang/ClassLoader;)TT;", "readParcelableArray", "obtain", "finalize", "LJavaLangThrowable;", "init", "readMapInternal", "LJavaUtilMap;ILJavaLangClassLoader;", "readListInternal", "LJavaUtilList;ILJavaLangClassLoader;", "readArrayInternal", "[LNSObject;ILJavaLangClassLoader;", "readSparseArrayInternal", "LAndroidUtilSparseArray;ILJavaLangClassLoader;", "readSparseBooleanArrayInternal", "LAndroidUtilSparseBooleanArray;I", &AndroidOsParcel_TAG, &AndroidOsParcel_sOwnedPool, &AndroidOsParcel_sHolderPool, &AndroidOsParcel_STRING_CREATOR, "Landroid/os/Parcelable$Creator<Ljava/lang/String;>;", &AndroidOsParcel_mCreators, "Ljava/util/HashMap<Ljava/lang/ClassLoader;Ljava/util/HashMap<Ljava/lang/String;Landroid/os/Parcelable$Creator;>;>;" };
  static const J2ObjcClassInfo _AndroidOsParcel = { "Parcel", "android.os", ptrTable, methods, fields, 7, 0x11, 122, 42, -1, -1, -1, -1, -1 };
  return &_AndroidOsParcel;
}

+ (void)initialize {
  if (self == [AndroidOsParcel class]) {
    JreStrongAssignAndConsume(&AndroidOsParcel_sOwnedPool, [IOSObjectArray newArrayWithLength:AndroidOsParcel_POOL_SIZE type:AndroidOsParcel_class_()]);
    JreStrongAssignAndConsume(&AndroidOsParcel_sHolderPool, [IOSObjectArray newArrayWithLength:AndroidOsParcel_POOL_SIZE type:AndroidOsParcel_class_()]);
    JreStrongAssignAndConsume(&AndroidOsParcel_STRING_CREATOR, new_AndroidOsParcel_1_init());
    JreStrongAssignAndConsume(&AndroidOsParcel_mCreators, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(AndroidOsParcel)
  }
}

@end

AndroidOsParcel *AndroidOsParcel_obtain() {
  AndroidOsParcel_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

jint AndroidOsParcel_dataAvail(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

jint AndroidOsParcel_dataPosition(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeByteArrayWithByteArray_(AndroidOsParcel *self, IOSByteArray *b) {
  AndroidOsParcel_writeByteArrayWithByteArray_withInt_withInt_(self, b, 0, (b != nil) ? ((IOSByteArray *) nil_chk(b))->size_ : 0);
}

void AndroidOsParcel_writeByteArrayWithByteArray_withInt_withInt_(AndroidOsParcel *self, IOSByteArray *b, jint offset, jint len) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeNativeWithByteArray_withInt_withInt_(AndroidOsParcel *self, IOSByteArray *b, jint offset, jint len) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeIntWithInt_(AndroidOsParcel *self, jint val) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeLongWithLong_(AndroidOsParcel *self, jlong val) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeFloatWithFloat_(AndroidOsParcel *self, jfloat val) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeStringWithNSString_(AndroidOsParcel *self, NSString *val) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeStrongBinderWithAndroidOsIBinder_(AndroidOsParcel *self, id<AndroidOsIBinder> val) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeByteWithByte_(AndroidOsParcel *self, jbyte val) {
  AndroidOsParcel_writeIntWithInt_(self, val);
}

IOSBooleanArray *AndroidOsParcel_createBooleanArray(AndroidOsParcel *self) {
  jint N = AndroidOsParcel_readInt(self);
  if (N >= 0 && N <= (JreRShift32(AndroidOsParcel_dataAvail(self), 2))) {
    IOSBooleanArray *val = [IOSBooleanArray arrayWithLength:N];
    for (jint i = 0; i < N; i++) {
      *IOSBooleanArray_GetRef(val, i) = (AndroidOsParcel_readInt(self) != 0);
    }
    return val;
  }
  else {
    return nil;
  }
}

IOSIntArray *AndroidOsParcel_createIntArray(AndroidOsParcel *self) {
  jint N = AndroidOsParcel_readInt(self);
  if (N >= 0 && N <= (JreRShift32(AndroidOsParcel_dataAvail(self), 2))) {
    IOSIntArray *val = [IOSIntArray arrayWithLength:N];
    for (jint i = 0; i < N; i++) {
      *IOSIntArray_GetRef(val, i) = AndroidOsParcel_readInt(self);
    }
    return val;
  }
  else {
    return nil;
  }
}

IOSLongArray *AndroidOsParcel_createLongArray(AndroidOsParcel *self) {
  jint N = AndroidOsParcel_readInt(self);
  if (N >= 0 && N <= (JreRShift32(AndroidOsParcel_dataAvail(self), 3))) {
    IOSLongArray *val = [IOSLongArray arrayWithLength:N];
    for (jint i = 0; i < N; i++) {
      *IOSLongArray_GetRef(val, i) = AndroidOsParcel_readLong(self);
    }
    return val;
  }
  else {
    return nil;
  }
}

void AndroidOsParcel_writeValueWithId_(AndroidOsParcel *self, id v) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_writeParcelableWithAndroidOsParcelable_withInt_(AndroidOsParcel *self, id<AndroidOsParcelable> p, jint parcelableFlags) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

jint AndroidOsParcel_readExceptionCode(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_readExceptionWithInt_withNSString_(AndroidOsParcel *self, jint code, NSString *msg) {
  switch (code) {
    case AndroidOsParcel_EX_SECURITY:
    @throw create_JavaLangSecurityException_initWithNSString_(msg);
    case AndroidOsParcel_EX_BAD_PARCELABLE:
    @throw create_AndroidOsBadParcelableException_initWithNSString_(msg);
    case AndroidOsParcel_EX_ILLEGAL_ARGUMENT:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(msg);
    case AndroidOsParcel_EX_NULL_POINTER:
    @throw create_JavaLangNullPointerException_initWithNSString_(msg);
    case AndroidOsParcel_EX_ILLEGAL_STATE:
    @throw create_JavaLangIllegalStateException_initWithNSString_(msg);
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$$", @"Unknown exception code: ", code, @" msg ", msg));
}

jint AndroidOsParcel_readInt(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

jlong AndroidOsParcel_readLong(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

jfloat AndroidOsParcel_readFloat(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

jdouble AndroidOsParcel_readDouble(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

NSString *AndroidOsParcel_readString(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

id<JavaLangCharSequence> AndroidOsParcel_readCharSequence(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

id<AndroidOsIBinder> AndroidOsParcel_readStrongBinder(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

JavaIoFileDescriptor *AndroidOsParcel_internalReadFileDescriptor(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

JavaIoFileDescriptor *AndroidOsParcel_openFileDescriptorWithNSString_withInt_(NSString *file, jint mode) {
  AndroidOsParcel_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_closeFileDescriptorWithJavaIoFileDescriptor_(JavaIoFileDescriptor *desc) {
  AndroidOsParcel_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

jbyte AndroidOsParcel_readByte(AndroidOsParcel *self) {
  return (jbyte) (AndroidOsParcel_readInt(self) & (jint) 0xff);
}

JavaUtilHashMap *AndroidOsParcel_readHashMapWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  JavaUtilHashMap *m = create_JavaUtilHashMap_initWithInt_(N);
  [self readMapInternalWithJavaUtilMap:m withInt:N withJavaLangClassLoader:loader];
  return m;
}

AndroidOsBundle *AndroidOsParcel_readBundleWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

IOSByteArray *AndroidOsParcel_createByteArray(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

IOSObjectArray *AndroidOsParcel_readStringArray(AndroidOsParcel *self) {
  IOSObjectArray *array = nil;
  jint length = AndroidOsParcel_readInt(self);
  if (length >= 0) {
    array = [IOSObjectArray arrayWithLength:length type:NSString_class_()];
    for (jint i = 0; i < length; i++) {
      IOSObjectArray_Set(array, i, AndroidOsParcel_readString(self));
    }
  }
  return array;
}

IOSObjectArray *AndroidOsParcel_readCharSequenceArray(AndroidOsParcel *self) {
  IOSObjectArray *array = nil;
  jint length = AndroidOsParcel_readInt(self);
  if (length >= 0) {
    array = [IOSObjectArray arrayWithLength:length type:JavaLangCharSequence_class_()];
    for (jint i = 0; i < length; i++) {
      IOSObjectArray_Set(array, i, AndroidOsParcel_readCharSequence(self));
    }
  }
  return array;
}

JavaUtilArrayList *AndroidOsParcel_readArrayListWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  JavaUtilArrayList *l = create_JavaUtilArrayList_initWithInt_(N);
  AndroidOsParcel_readListInternalWithJavaUtilList_withInt_withJavaLangClassLoader_(self, l, N, loader);
  return l;
}

IOSObjectArray *AndroidOsParcel_readArrayWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  IOSObjectArray *l = [IOSObjectArray arrayWithLength:N type:NSObject_class_()];
  AndroidOsParcel_readArrayInternalWithNSObjectArray_withInt_withJavaLangClassLoader_(self, l, N, loader);
  return l;
}

AndroidUtilSparseArray *AndroidOsParcel_readSparseArrayWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  AndroidUtilSparseArray *sa = create_AndroidUtilSparseArray_initWithInt_(N);
  AndroidOsParcel_readSparseArrayInternalWithAndroidUtilSparseArray_withInt_withJavaLangClassLoader_(self, sa, N, loader);
  return sa;
}

AndroidUtilSparseBooleanArray *AndroidOsParcel_readSparseBooleanArray(AndroidOsParcel *self) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  AndroidUtilSparseBooleanArray *sa = create_AndroidUtilSparseBooleanArray_initWithInt_(N);
  AndroidOsParcel_readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray_withInt_(self, sa, N);
  return sa;
}

IOSObjectArray *AndroidOsParcel_createTypedArrayWithAndroidOsParcelable_Creator_(AndroidOsParcel *self, id<AndroidOsParcelable_Creator> c) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  IOSObjectArray *l = [((id<AndroidOsParcelable_Creator>) nil_chk(c)) newArrayWithInt:N];
  for (jint i = 0; i < N; i++) {
    if (AndroidOsParcel_readInt(self) != 0) {
      IOSObjectArray_Set(nil_chk(l), i, [c createFromParcelWithAndroidOsParcel:self]);
    }
  }
  return l;
}

id AndroidOsParcel_readValueWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  jint type = AndroidOsParcel_readInt(self);
  {
    jint off;
    switch (type) {
      case AndroidOsParcel_VAL_NULL:
      return nil;
      case AndroidOsParcel_VAL_STRING:
      return AndroidOsParcel_readString(self);
      case AndroidOsParcel_VAL_INTEGER:
      return JavaLangInteger_valueOfWithInt_(AndroidOsParcel_readInt(self));
      case AndroidOsParcel_VAL_MAP:
      return AndroidOsParcel_readHashMapWithJavaLangClassLoader_(self, loader);
      case AndroidOsParcel_VAL_PARCELABLE:
      return AndroidOsParcel_readParcelableWithJavaLangClassLoader_(self, loader);
      case AndroidOsParcel_VAL_SHORT:
      return JavaLangShort_valueOfWithShort_((jshort) AndroidOsParcel_readInt(self));
      case AndroidOsParcel_VAL_LONG:
      return JavaLangLong_valueOfWithLong_(AndroidOsParcel_readLong(self));
      case AndroidOsParcel_VAL_FLOAT:
      return JavaLangFloat_valueOfWithFloat_(AndroidOsParcel_readFloat(self));
      case AndroidOsParcel_VAL_DOUBLE:
      return JavaLangDouble_valueOfWithDouble_(AndroidOsParcel_readDouble(self));
      case AndroidOsParcel_VAL_BOOLEAN:
      return JavaLangBoolean_valueOfWithBoolean_(AndroidOsParcel_readInt(self) == 1);
      case AndroidOsParcel_VAL_CHARSEQUENCE:
      return AndroidOsParcel_readCharSequence(self);
      case AndroidOsParcel_VAL_LIST:
      return AndroidOsParcel_readArrayListWithJavaLangClassLoader_(self, loader);
      case AndroidOsParcel_VAL_BOOLEANARRAY:
      return AndroidOsParcel_createBooleanArray(self);
      case AndroidOsParcel_VAL_BYTEARRAY:
      return AndroidOsParcel_createByteArray(self);
      case AndroidOsParcel_VAL_STRINGARRAY:
      return AndroidOsParcel_readStringArray(self);
      case AndroidOsParcel_VAL_CHARSEQUENCEARRAY:
      return AndroidOsParcel_readCharSequenceArray(self);
      case AndroidOsParcel_VAL_IBINDER:
      return AndroidOsParcel_readStrongBinder(self);
      case AndroidOsParcel_VAL_OBJECTARRAY:
      return AndroidOsParcel_readArrayWithJavaLangClassLoader_(self, loader);
      case AndroidOsParcel_VAL_INTARRAY:
      return AndroidOsParcel_createIntArray(self);
      case AndroidOsParcel_VAL_LONGARRAY:
      return AndroidOsParcel_createLongArray(self);
      case AndroidOsParcel_VAL_BYTE:
      return JavaLangByte_valueOfWithByte_(AndroidOsParcel_readByte(self));
      case AndroidOsParcel_VAL_SERIALIZABLE:
      return AndroidOsParcel_readSerializable(self);
      case AndroidOsParcel_VAL_PARCELABLEARRAY:
      return AndroidOsParcel_readParcelableArrayWithJavaLangClassLoader_(self, loader);
      case AndroidOsParcel_VAL_SPARSEARRAY:
      return AndroidOsParcel_readSparseArrayWithJavaLangClassLoader_(self, loader);
      case AndroidOsParcel_VAL_SPARSEBOOLEANARRAY:
      return AndroidOsParcel_readSparseBooleanArray(self);
      case AndroidOsParcel_VAL_BUNDLE:
      return AndroidOsParcel_readBundleWithJavaLangClassLoader_(self, loader);
      default:
      off = AndroidOsParcel_dataPosition(self) - 4;
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"Parcel ", self, @": Unmarshalling unknown type code ", type, @" at offset ", off));
    }
  }
}

id<AndroidOsParcelable> AndroidOsParcel_readParcelableWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  NSString *name = AndroidOsParcel_readString(self);
  if (name == nil) {
    return nil;
  }
  id<AndroidOsParcelable_Creator> creator;
  @synchronized(AndroidOsParcel_mCreators) {
    JavaUtilHashMap *map = [((JavaUtilHashMap *) nil_chk(AndroidOsParcel_mCreators)) getWithId:loader];
    if (map == nil) {
      map = create_JavaUtilHashMap_init();
      [AndroidOsParcel_mCreators putWithId:loader withId:map];
    }
    creator = JreRetainedLocalValue([map getWithId:name]);
    if (creator == nil) {
      @try {
        IOSClass *c = loader == nil ? IOSClass_forName_(name) : IOSClass_forName_initialize_classLoader_(name, true, loader);
        JavaLangReflectField *f = [c getField:@"CREATOR"];
        creator = JreRetainedLocalValue((id<AndroidOsParcelable_Creator>) cast_check([((JavaLangReflectField *) nil_chk(f)) getWithId:nil], AndroidOsParcelable_Creator_class_()));
      }
      @catch (JavaLangIllegalAccessException *e) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidOsParcel_TAG, JreStrcat("$$$@", @"Class not found when unmarshalling: ", name, @", e: ", e));
        @throw create_AndroidOsBadParcelableException_initWithNSString_(JreStrcat("$$", @"IllegalAccessException when unmarshalling: ", name));
      }
      @catch (JavaLangClassNotFoundException *e) {
        AndroidUtilLog_eWithNSString_withNSString_(AndroidOsParcel_TAG, JreStrcat("$$$@", @"Class not found when unmarshalling: ", name, @", e: ", e));
        @throw create_AndroidOsBadParcelableException_initWithNSString_(JreStrcat("$$", @"ClassNotFoundException when unmarshalling: ", name));
      }
      @catch (JavaLangClassCastException *e) {
        @throw create_AndroidOsBadParcelableException_initWithNSString_(JreStrcat("$$", @"Parcelable protocol requires a Parcelable.Creator object called  CREATOR on class ", name));
      }
      @catch (JavaLangNoSuchFieldException *e) {
        @throw create_AndroidOsBadParcelableException_initWithNSString_(JreStrcat("$$", @"Parcelable protocol requires a Parcelable.Creator object called  CREATOR on class ", name));
      }
      if (creator == nil) {
        @throw create_AndroidOsBadParcelableException_initWithNSString_(JreStrcat("$$", @"Parcelable protocol requires a Parcelable.Creator object called  CREATOR on class ", name));
      }
      [map putWithId:name withId:creator];
    }
  }
  return [creator createFromParcelWithAndroidOsParcel:self];
}

IOSObjectArray *AndroidOsParcel_readParcelableArrayWithJavaLangClassLoader_(AndroidOsParcel *self, JavaLangClassLoader *loader) {
  jint N = AndroidOsParcel_readInt(self);
  if (N < 0) {
    return nil;
  }
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:N type:AndroidOsParcelable_class_()];
  for (jint i = 0; i < N; i++) {
    IOSObjectArray_Set(p, i, AndroidOsParcel_readParcelableWithJavaLangClassLoader_(self, loader));
  }
  return p;
}

id<JavaIoSerializable> AndroidOsParcel_readSerializable(AndroidOsParcel *self) {
  NSString *name = AndroidOsParcel_readString(self);
  if (name == nil) {
    return nil;
  }
  IOSByteArray *serializedData = AndroidOsParcel_createByteArray(self);
  JavaIoByteArrayInputStream *bais = create_JavaIoByteArrayInputStream_initWithByteArray_(serializedData);
  @try {
    JavaIoObjectInputStream *ois = create_JavaIoObjectInputStream_initWithJavaIoInputStream_(bais);
    return (id<JavaIoSerializable>) cast_check([ois readObject], JavaIoSerializable_class_());
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$C", @"Parcelable encountered IOException reading a Serializable object (name = ", name, ')'), ioe);
  }
  @catch (JavaLangClassNotFoundException *cnfe) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$C", @"Parcelable encounteredClassNotFoundException reading a Serializable object (name = ", name, ')'), cnfe);
  }
}

AndroidOsParcel *AndroidOsParcel_obtainWithInt_(jint obj) {
  AndroidOsParcel_initialize();
  IOSObjectArray *pool = AndroidOsParcel_sHolderPool;
  @synchronized(pool) {
    AndroidOsParcel *p;
    for (jint i = 0; i < AndroidOsParcel_POOL_SIZE; i++) {
      p = IOSObjectArray_Get(nil_chk(pool), i);
      if (p != nil) {
        IOSObjectArray_Set(pool, i, nil);
        AndroidOsParcel_init__WithInt_(p, obj);
        return JreRetainedLocalValue(p);
      }
    }
  }
  return create_AndroidOsParcel_initWithInt_(obj);
}

void AndroidOsParcel_initWithInt_(AndroidOsParcel *self, jint obj) {
  NSObject_init(self);
  AndroidOsParcel_init__WithInt_(self, obj);
}

AndroidOsParcel *new_AndroidOsParcel_initWithInt_(jint obj) {
  J2OBJC_NEW_IMPL(AndroidOsParcel, initWithInt_, obj)
}

AndroidOsParcel *create_AndroidOsParcel_initWithInt_(jint obj) {
  J2OBJC_CREATE_IMPL(AndroidOsParcel, initWithInt_, obj)
}

void AndroidOsParcel_freeBuffer(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_init__WithInt_(AndroidOsParcel *self, jint obj) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_destroy(AndroidOsParcel *self) {
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcel_readListInternalWithJavaUtilList_withInt_withJavaLangClassLoader_(AndroidOsParcel *self, id<JavaUtilList> outVal, jint N, JavaLangClassLoader *loader) {
  while (N > 0) {
    id value = AndroidOsParcel_readValueWithJavaLangClassLoader_(self, loader);
    [((id<JavaUtilList>) nil_chk(outVal)) addWithId:value];
    N--;
  }
}

void AndroidOsParcel_readArrayInternalWithNSObjectArray_withInt_withJavaLangClassLoader_(AndroidOsParcel *self, IOSObjectArray *outVal, jint N, JavaLangClassLoader *loader) {
  for (jint i = 0; i < N; i++) {
    id value = AndroidOsParcel_readValueWithJavaLangClassLoader_(self, loader);
    IOSObjectArray_Set(nil_chk(outVal), i, value);
  }
}

void AndroidOsParcel_readSparseArrayInternalWithAndroidUtilSparseArray_withInt_withJavaLangClassLoader_(AndroidOsParcel *self, AndroidUtilSparseArray *outVal, jint N, JavaLangClassLoader *loader) {
  while (N > 0) {
    jint key = AndroidOsParcel_readInt(self);
    id value = AndroidOsParcel_readValueWithJavaLangClassLoader_(self, loader);
    [((AndroidUtilSparseArray *) nil_chk(outVal)) appendWithInt:key withId:value];
    N--;
  }
}

void AndroidOsParcel_readSparseBooleanArrayInternalWithAndroidUtilSparseBooleanArray_withInt_(AndroidOsParcel *self, AndroidUtilSparseBooleanArray *outVal, jint N) {
  while (N > 0) {
    jint key = AndroidOsParcel_readInt(self);
    jboolean value = AndroidOsParcel_readByte(self) == 1;
    [((AndroidUtilSparseBooleanArray *) nil_chk(outVal)) appendWithInt:key withBoolean:value];
    N--;
  }
}

IOSObjectArray *AndroidOsParcel__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsParcel)

@implementation AndroidOsParcel_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsParcel_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)source {
  return AndroidOsParcel_readString(nil_chk(source));
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:NSString_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithAndroidOsParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LAndroidOsParcel;", "newArray", "I", "Ljava/lang/Object;Landroid/os/Parcelable$Creator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _AndroidOsParcel_1 = { "", "android.os", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 1, -1, -1, 4, -1 };
  return &_AndroidOsParcel_1;
}

@end

void AndroidOsParcel_1_init(AndroidOsParcel_1 *self) {
  NSObject_init(self);
}

AndroidOsParcel_1 *new_AndroidOsParcel_1_init() {
  J2OBJC_NEW_IMPL(AndroidOsParcel_1, init)
}

AndroidOsParcel_1 *create_AndroidOsParcel_1_init() {
  J2OBJC_CREATE_IMPL(AndroidOsParcel_1, init)
}

J2OBJC_INITIALIZED_DEFN(AndroidOsParcelFileDescriptor)

id<AndroidOsParcelable_Creator> AndroidOsParcelFileDescriptor_CREATOR;

@implementation AndroidOsParcelFileDescriptor

+ (jint)MODE_WORLD_READABLE {
  return AndroidOsParcelFileDescriptor_MODE_WORLD_READABLE;
}

+ (jint)MODE_WORLD_WRITEABLE {
  return AndroidOsParcelFileDescriptor_MODE_WORLD_WRITEABLE;
}

+ (jint)MODE_READ_ONLY {
  return AndroidOsParcelFileDescriptor_MODE_READ_ONLY;
}

+ (jint)MODE_WRITE_ONLY {
  return AndroidOsParcelFileDescriptor_MODE_WRITE_ONLY;
}

+ (jint)MODE_READ_WRITE {
  return AndroidOsParcelFileDescriptor_MODE_READ_WRITE;
}

+ (jint)MODE_CREATE {
  return AndroidOsParcelFileDescriptor_MODE_CREATE;
}

+ (jint)MODE_TRUNCATE {
  return AndroidOsParcelFileDescriptor_MODE_TRUNCATE;
}

+ (jint)MODE_APPEND {
  return AndroidOsParcelFileDescriptor_MODE_APPEND;
}

+ (id<AndroidOsParcelable_Creator>)CREATOR {
  return AndroidOsParcelFileDescriptor_CREATOR;
}

+ (AndroidOsParcelFileDescriptor *)openWithJavaIoFile:(JavaIoFile *)file
                                              withInt:(jint)mode {
  return AndroidOsParcelFileDescriptor_openWithJavaIoFile_withInt_(file, mode);
}

+ (AndroidOsParcelFileDescriptor *)fromSocketWithJavaNetSocket:(JavaNetSocket *)socket {
  return AndroidOsParcelFileDescriptor_fromSocketWithJavaNetSocket_(socket);
}

+ (JavaIoFileDescriptor *)getFileDescriptorFromSocketWithJavaNetSocket:(JavaNetSocket *)socket {
  return AndroidOsParcelFileDescriptor_getFileDescriptorFromSocketWithJavaNetSocket_(socket);
}

+ (IOSObjectArray *)createPipe {
  return AndroidOsParcelFileDescriptor_createPipe();
}

+ (jint)createPipeNativeWithJavaIoFileDescriptorArray:(IOSObjectArray *)outFds {
  return AndroidOsParcelFileDescriptor_createPipeNativeWithJavaIoFileDescriptorArray_(outFds);
}

- (JavaIoFileDescriptor *)getFileDescriptor {
  return mFileDescriptor_;
}

- (jlong)getStatSize {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jlong)seekToWithLong:(jlong)pos {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)close {
  @synchronized(self) {
    if (mClosed_) return;
    mClosed_ = true;
  }
  if (mParcelDescriptor_ != nil) {
    [mParcelDescriptor_ close];
  }
  else {
    AndroidOsParcel_closeFileDescriptorWithJavaIoFileDescriptor_(mFileDescriptor_);
  }
}

- (NSString *)description {
  return JreStrcat("$@C", @"{ParcelFileDescriptor: ", mFileDescriptor_, '}');
}

- (void)java_finalize {
  @try {
    if (!mClosed_) {
      [self close];
    }
  }
  @finally {
    [super java_finalize];
  }
}

- (instancetype __nonnull)initWithAndroidOsParcelFileDescriptor:(AndroidOsParcelFileDescriptor *)descriptor {
  AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(self, descriptor);
  return self;
}

- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)descriptor {
  AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(self, descriptor);
  return self;
}

- (jint)describeContents {
  return AndroidOsParcelable_CONTENTS_FILE_DESCRIPTOR;
}

- (void)writeToParcelWithAndroidOsParcel:(AndroidOsParcel *)outArg
                                 withInt:(jint)flags {
  [((AndroidOsParcel *) nil_chk(outArg)) writeFileDescriptorWithJavaIoFileDescriptor:mFileDescriptor_];
  if ((flags & AndroidOsParcelable_PARCELABLE_WRITE_RETURN_VALUE) != 0 && !mClosed_) {
    @try {
      [self close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidOsParcelFileDescriptor class]);
  RELEASE_(mFileDescriptor_);
  RELEASE_(mParcelDescriptor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidOsParcelFileDescriptor;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LAndroidOsParcelFileDescriptor;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileDescriptor;", 0xa, 5, 4, -1, -1, -1, -1 },
    { NULL, "[LAndroidOsParcelFileDescriptor;", 0x9, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaIoFileDescriptor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, -1, 13, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(openWithJavaIoFile:withInt:);
  methods[1].selector = @selector(fromSocketWithJavaNetSocket:);
  methods[2].selector = @selector(getFileDescriptorFromSocketWithJavaNetSocket:);
  methods[3].selector = @selector(createPipe);
  methods[4].selector = @selector(createPipeNativeWithJavaIoFileDescriptorArray:);
  methods[5].selector = @selector(getFileDescriptor);
  methods[6].selector = @selector(getStatSize);
  methods[7].selector = @selector(seekToWithLong:);
  methods[8].selector = @selector(close);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(java_finalize);
  methods[11].selector = @selector(initWithAndroidOsParcelFileDescriptor:);
  methods[12].selector = @selector(initWithJavaIoFileDescriptor:);
  methods[13].selector = @selector(describeContents);
  methods[14].selector = @selector(writeToParcelWithAndroidOsParcel:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mFileDescriptor_", "LJavaIoFileDescriptor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mClosed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParcelDescriptor_", "LAndroidOsParcelFileDescriptor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MODE_WORLD_READABLE", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_WORLD_READABLE, 0x19, -1, -1, -1, -1 },
    { "MODE_WORLD_WRITEABLE", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_WORLD_WRITEABLE, 0x19, -1, -1, -1, -1 },
    { "MODE_READ_ONLY", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_READ_ONLY, 0x19, -1, -1, -1, -1 },
    { "MODE_WRITE_ONLY", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_WRITE_ONLY, 0x19, -1, -1, -1, -1 },
    { "MODE_READ_WRITE", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_READ_WRITE, 0x19, -1, -1, -1, -1 },
    { "MODE_CREATE", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_CREATE, 0x19, -1, -1, -1, -1 },
    { "MODE_TRUNCATE", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_TRUNCATE, 0x19, -1, -1, -1, -1 },
    { "MODE_APPEND", "I", .constantValue.asInt = AndroidOsParcelFileDescriptor_MODE_APPEND, 0x19, -1, -1, -1, -1 },
    { "CREATOR", "LAndroidOsParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 18, 19, -1 },
  };
  static const void *ptrTable[] = { "open", "LJavaIoFile;I", "LJavaIoFileNotFoundException;", "fromSocket", "LJavaNetSocket;", "getFileDescriptorFromSocket", "LJavaIoIOException;", "createPipeNative", "[LJavaIoFileDescriptor;", "seekTo", "J", "toString", "finalize", "LJavaLangThrowable;", "LAndroidOsParcelFileDescriptor;", "LJavaIoFileDescriptor;", "writeToParcel", "LAndroidOsParcel;I", &AndroidOsParcelFileDescriptor_CREATOR, "Landroid/os/Parcelable$Creator<Landroid/os/ParcelFileDescriptor;>;", "LAndroidOsParcelFileDescriptor_AutoCloseInputStream;LAndroidOsParcelFileDescriptor_AutoCloseOutputStream;" };
  static const J2ObjcClassInfo _AndroidOsParcelFileDescriptor = { "ParcelFileDescriptor", "android.os", ptrTable, methods, fields, 7, 0x1, 15, 12, -1, 20, -1, -1, -1 };
  return &_AndroidOsParcelFileDescriptor;
}

+ (void)initialize {
  if (self == [AndroidOsParcelFileDescriptor class]) {
    JreStrongAssignAndConsume(&AndroidOsParcelFileDescriptor_CREATOR, new_AndroidOsParcelFileDescriptor_1_init());
    J2OBJC_SET_INITIALIZED(AndroidOsParcelFileDescriptor)
  }
}

@end

AndroidOsParcelFileDescriptor *AndroidOsParcelFileDescriptor_openWithJavaIoFile_withInt_(JavaIoFile *file, jint mode) {
  AndroidOsParcelFileDescriptor_initialize();
  NSString *path = [((JavaIoFile *) nil_chk(file)) getPath];
  JavaLangSecurityManager *security = JavaLangSystem_getSecurityManager();
  if (security != nil) {
    [security checkReadWithNSString:path];
    if ((mode & AndroidOsParcelFileDescriptor_MODE_WRITE_ONLY) != 0) {
      [security checkWriteWithNSString:path];
    }
  }
  if ((mode & AndroidOsParcelFileDescriptor_MODE_READ_WRITE) == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must specify MODE_READ_ONLY, MODE_WRITE_ONLY, or MODE_READ_WRITE");
  }
  JavaIoFileDescriptor *fd = AndroidOsParcel_openFileDescriptorWithNSString_withInt_(path, mode);
  return fd != nil ? create_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(fd) : nil;
}

AndroidOsParcelFileDescriptor *AndroidOsParcelFileDescriptor_fromSocketWithJavaNetSocket_(JavaNetSocket *socket) {
  AndroidOsParcelFileDescriptor_initialize();
  JavaIoFileDescriptor *fd = AndroidOsParcelFileDescriptor_getFileDescriptorFromSocketWithJavaNetSocket_(socket);
  return fd != nil ? create_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(fd) : nil;
}

JavaIoFileDescriptor *AndroidOsParcelFileDescriptor_getFileDescriptorFromSocketWithJavaNetSocket_(JavaNetSocket *socket) {
  AndroidOsParcelFileDescriptor_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

IOSObjectArray *AndroidOsParcelFileDescriptor_createPipe() {
  AndroidOsParcelFileDescriptor_initialize();
  IOSObjectArray *fds = [IOSObjectArray arrayWithLength:2 type:JavaIoFileDescriptor_class_()];
  jint res = AndroidOsParcelFileDescriptor_createPipeNativeWithJavaIoFileDescriptorArray_(fds);
  if (res == 0) {
    IOSObjectArray *pfds = [IOSObjectArray arrayWithLength:2 type:AndroidOsParcelFileDescriptor_class_()];
    IOSObjectArray_SetAndConsume(pfds, 0, new_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(IOSObjectArray_Get(fds, 0)));
    IOSObjectArray_SetAndConsume(pfds, 1, new_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(IOSObjectArray_Get(fds, 1)));
    return pfds;
  }
  @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Unable to create pipe: errno=", -res));
}

jint AndroidOsParcelFileDescriptor_createPipeNativeWithJavaIoFileDescriptorArray_(IOSObjectArray *outFds) {
  AndroidOsParcelFileDescriptor_initialize();
  @throw create_JavaLangUnsupportedOperationException_init();
}

void AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *self, AndroidOsParcelFileDescriptor *descriptor) {
  NSObject_init(self);
  JreStrongAssign(&self->mParcelDescriptor_, descriptor);
  JreStrongAssign(&self->mFileDescriptor_, ((AndroidOsParcelFileDescriptor *) nil_chk(self->mParcelDescriptor_))->mFileDescriptor_);
}

AndroidOsParcelFileDescriptor *new_AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *descriptor) {
  J2OBJC_NEW_IMPL(AndroidOsParcelFileDescriptor, initWithAndroidOsParcelFileDescriptor_, descriptor)
}

AndroidOsParcelFileDescriptor *create_AndroidOsParcelFileDescriptor_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *descriptor) {
  J2OBJC_CREATE_IMPL(AndroidOsParcelFileDescriptor, initWithAndroidOsParcelFileDescriptor_, descriptor)
}

void AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(AndroidOsParcelFileDescriptor *self, JavaIoFileDescriptor *descriptor) {
  NSObject_init(self);
  if (descriptor == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"descriptor must not be null");
  }
  JreStrongAssign(&self->mFileDescriptor_, descriptor);
  JreStrongAssign(&self->mParcelDescriptor_, nil);
}

AndroidOsParcelFileDescriptor *new_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *descriptor) {
  J2OBJC_NEW_IMPL(AndroidOsParcelFileDescriptor, initWithJavaIoFileDescriptor_, descriptor)
}

AndroidOsParcelFileDescriptor *create_AndroidOsParcelFileDescriptor_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *descriptor) {
  J2OBJC_CREATE_IMPL(AndroidOsParcelFileDescriptor, initWithJavaIoFileDescriptor_, descriptor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsParcelFileDescriptor)

@implementation AndroidOsParcelFileDescriptor_AutoCloseInputStream

- (instancetype __nonnull)initWithAndroidOsParcelFileDescriptor:(AndroidOsParcelFileDescriptor *)fd {
  AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(self, fd);
  return self;
}

- (void)close {
  [((AndroidOsParcelFileDescriptor *) nil_chk(mFd_)) close];
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidOsParcelFileDescriptor_AutoCloseInputStream class]);
  RELEASE_(mFd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidOsParcelFileDescriptor:);
  methods[1].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mFd_", "LAndroidOsParcelFileDescriptor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsParcelFileDescriptor;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _AndroidOsParcelFileDescriptor_AutoCloseInputStream = { "AutoCloseInputStream", "android.os", ptrTable, methods, fields, 7, 0x9, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidOsParcelFileDescriptor_AutoCloseInputStream;
}

@end

void AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor_AutoCloseInputStream *self, AndroidOsParcelFileDescriptor *fd) {
  JavaIoFileInputStream_initWithJavaIoFileDescriptor_(self, [((AndroidOsParcelFileDescriptor *) nil_chk(fd)) getFileDescriptor]);
  JreStrongAssign(&self->mFd_, fd);
}

AndroidOsParcelFileDescriptor_AutoCloseInputStream *new_AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd) {
  J2OBJC_NEW_IMPL(AndroidOsParcelFileDescriptor_AutoCloseInputStream, initWithAndroidOsParcelFileDescriptor_, fd)
}

AndroidOsParcelFileDescriptor_AutoCloseInputStream *create_AndroidOsParcelFileDescriptor_AutoCloseInputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd) {
  J2OBJC_CREATE_IMPL(AndroidOsParcelFileDescriptor_AutoCloseInputStream, initWithAndroidOsParcelFileDescriptor_, fd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsParcelFileDescriptor_AutoCloseInputStream)

@implementation AndroidOsParcelFileDescriptor_AutoCloseOutputStream

- (instancetype __nonnull)initWithAndroidOsParcelFileDescriptor:(AndroidOsParcelFileDescriptor *)fd {
  AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(self, fd);
  return self;
}

- (void)close {
  [((AndroidOsParcelFileDescriptor *) nil_chk(mFd_)) close];
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidOsParcelFileDescriptor_AutoCloseOutputStream class]);
  RELEASE_(mFd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAndroidOsParcelFileDescriptor:);
  methods[1].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mFd_", "LAndroidOsParcelFileDescriptor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAndroidOsParcelFileDescriptor;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _AndroidOsParcelFileDescriptor_AutoCloseOutputStream = { "AutoCloseOutputStream", "android.os", ptrTable, methods, fields, 7, 0x9, 2, 1, 0, -1, -1, -1, -1 };
  return &_AndroidOsParcelFileDescriptor_AutoCloseOutputStream;
}

@end

void AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor_AutoCloseOutputStream *self, AndroidOsParcelFileDescriptor *fd) {
  JavaIoFileOutputStream_initWithJavaIoFileDescriptor_(self, [((AndroidOsParcelFileDescriptor *) nil_chk(fd)) getFileDescriptor]);
  JreStrongAssign(&self->mFd_, fd);
}

AndroidOsParcelFileDescriptor_AutoCloseOutputStream *new_AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd) {
  J2OBJC_NEW_IMPL(AndroidOsParcelFileDescriptor_AutoCloseOutputStream, initWithAndroidOsParcelFileDescriptor_, fd)
}

AndroidOsParcelFileDescriptor_AutoCloseOutputStream *create_AndroidOsParcelFileDescriptor_AutoCloseOutputStream_initWithAndroidOsParcelFileDescriptor_(AndroidOsParcelFileDescriptor *fd) {
  J2OBJC_CREATE_IMPL(AndroidOsParcelFileDescriptor_AutoCloseOutputStream, initWithAndroidOsParcelFileDescriptor_, fd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsParcelFileDescriptor_AutoCloseOutputStream)

@implementation AndroidOsParcelFileDescriptor_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsParcelFileDescriptor_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (AndroidOsParcelFileDescriptor *)createFromParcelWithAndroidOsParcel:(AndroidOsParcel *)inArg {
  return [((AndroidOsParcel *) nil_chk(inArg)) readFileDescriptor];
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:AndroidOsParcelFileDescriptor_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidOsParcelFileDescriptor;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LAndroidOsParcelFileDescriptor;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithAndroidOsParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LAndroidOsParcel;", "newArray", "I", "LAndroidOsParcelFileDescriptor;", "Ljava/lang/Object;Landroid/os/Parcelable$Creator<Landroid/os/ParcelFileDescriptor;>;" };
  static const J2ObjcClassInfo _AndroidOsParcelFileDescriptor_1 = { "", "android.os", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, 5, -1 };
  return &_AndroidOsParcelFileDescriptor_1;
}

@end

void AndroidOsParcelFileDescriptor_1_init(AndroidOsParcelFileDescriptor_1 *self) {
  NSObject_init(self);
}

AndroidOsParcelFileDescriptor_1 *new_AndroidOsParcelFileDescriptor_1_init() {
  J2OBJC_NEW_IMPL(AndroidOsParcelFileDescriptor_1, init)
}

AndroidOsParcelFileDescriptor_1 *create_AndroidOsParcelFileDescriptor_1_init() {
  J2OBJC_CREATE_IMPL(AndroidOsParcelFileDescriptor_1, init)
}

@implementation AndroidUtilAndroidException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilAndroidException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithNSString:(NSString *)name {
  AndroidUtilAndroidException_initWithNSString_(self, name);
  return self;
}

- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)cause {
  AndroidUtilAndroidException_initWithJavaLangException_(self, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithJavaLangException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _AndroidUtilAndroidException = { "AndroidException", "android.util", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidUtilAndroidException;
}

@end

void AndroidUtilAndroidException_init(AndroidUtilAndroidException *self) {
  JavaLangException_init(self);
}

AndroidUtilAndroidException *new_AndroidUtilAndroidException_init() {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidException, init)
}

AndroidUtilAndroidException *create_AndroidUtilAndroidException_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidException, init)
}

void AndroidUtilAndroidException_initWithNSString_(AndroidUtilAndroidException *self, NSString *name) {
  JavaLangException_initWithNSString_(self, name);
}

AndroidUtilAndroidException *new_AndroidUtilAndroidException_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidException, initWithNSString_, name)
}

AndroidUtilAndroidException *create_AndroidUtilAndroidException_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidException, initWithNSString_, name)
}

void AndroidUtilAndroidException_initWithJavaLangException_(AndroidUtilAndroidException *self, JavaLangException *cause) {
  JavaLangException_initWithJavaLangThrowable_(self, cause);
}

AndroidUtilAndroidException *new_AndroidUtilAndroidException_initWithJavaLangException_(JavaLangException *cause) {
  J2OBJC_NEW_IMPL(AndroidUtilAndroidException, initWithJavaLangException_, cause)
}

AndroidUtilAndroidException *create_AndroidUtilAndroidException_initWithJavaLangException_(JavaLangException *cause) {
  J2OBJC_CREATE_IMPL(AndroidUtilAndroidException, initWithJavaLangException_, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilAndroidException)

@implementation AndroidOsRemoteException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsRemoteException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _AndroidOsRemoteException = { "RemoteException", "android.os", NULL, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, -1, -1 };
  return &_AndroidOsRemoteException;
}

@end

void AndroidOsRemoteException_init(AndroidOsRemoteException *self) {
  AndroidUtilAndroidException_init(self);
}

AndroidOsRemoteException *new_AndroidOsRemoteException_init() {
  J2OBJC_NEW_IMPL(AndroidOsRemoteException, init)
}

AndroidOsRemoteException *create_AndroidOsRemoteException_init() {
  J2OBJC_CREATE_IMPL(AndroidOsRemoteException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsRemoteException)

J2OBJC_INITIALIZED_DEFN(AndroidOsTrace)

@implementation AndroidOsTrace

+ (jlong)TRACE_TAG_NEVER {
  return AndroidOsTrace_TRACE_TAG_NEVER;
}

+ (jlong)TRACE_TAG_ALWAYS {
  return AndroidOsTrace_TRACE_TAG_ALWAYS;
}

+ (jlong)TRACE_TAG_GRAPHICS {
  return AndroidOsTrace_TRACE_TAG_GRAPHICS;
}

+ (jlong)TRACE_TAG_INPUT {
  return AndroidOsTrace_TRACE_TAG_INPUT;
}

+ (jlong)TRACE_TAG_VIEW {
  return AndroidOsTrace_TRACE_TAG_VIEW;
}

+ (jlong)TRACE_TAG_WEBVIEW {
  return AndroidOsTrace_TRACE_TAG_WEBVIEW;
}

+ (jlong)TRACE_TAG_WINDOW_MANAGER {
  return AndroidOsTrace_TRACE_TAG_WINDOW_MANAGER;
}

+ (jlong)TRACE_TAG_ACTIVITY_MANAGER {
  return AndroidOsTrace_TRACE_TAG_ACTIVITY_MANAGER;
}

+ (jlong)TRACE_TAG_SYNC_MANAGER {
  return AndroidOsTrace_TRACE_TAG_SYNC_MANAGER;
}

+ (jlong)TRACE_TAG_AUDIO {
  return AndroidOsTrace_TRACE_TAG_AUDIO;
}

+ (jlong)TRACE_TAG_VIDEO {
  return AndroidOsTrace_TRACE_TAG_VIDEO;
}

+ (jlong)TRACE_TAG_CAMERA {
  return AndroidOsTrace_TRACE_TAG_CAMERA;
}

+ (jlong)TRACE_TAG_HAL {
  return AndroidOsTrace_TRACE_TAG_HAL;
}

+ (jlong)TRACE_TAG_APP {
  return AndroidOsTrace_TRACE_TAG_APP;
}

+ (jlong)TRACE_TAG_RESOURCES {
  return AndroidOsTrace_TRACE_TAG_RESOURCES;
}

+ (jlong)TRACE_TAG_DALVIK {
  return AndroidOsTrace_TRACE_TAG_DALVIK;
}

+ (jlong)TRACE_TAG_RS {
  return AndroidOsTrace_TRACE_TAG_RS;
}

+ (jlong)TRACE_TAG_BIONIC {
  return AndroidOsTrace_TRACE_TAG_BIONIC;
}

+ (jlong)TRACE_TAG_POWER {
  return AndroidOsTrace_TRACE_TAG_POWER;
}

+ (jlong)TRACE_TAG_PACKAGE_MANAGER {
  return AndroidOsTrace_TRACE_TAG_PACKAGE_MANAGER;
}

+ (jlong)TRACE_TAG_SYSTEM_SERVER {
  return AndroidOsTrace_TRACE_TAG_SYSTEM_SERVER;
}

+ (jlong)TRACE_TAG_DATABASE {
  return AndroidOsTrace_TRACE_TAG_DATABASE;
}

+ (jlong)nativeGetEnabledTags {
  return AndroidOsTrace_nativeGetEnabledTags();
}

+ (void)nativeTraceCounterWithLong:(jlong)tag
                      withNSString:(NSString *)name
                           withInt:(jint)value {
  AndroidOsTrace_nativeTraceCounterWithLong_withNSString_withInt_(tag, name, value);
}

+ (void)nativeTraceBeginWithLong:(jlong)tag
                    withNSString:(NSString *)name {
  AndroidOsTrace_nativeTraceBeginWithLong_withNSString_(tag, name);
}

+ (void)nativeTraceEndWithLong:(jlong)tag {
  AndroidOsTrace_nativeTraceEndWithLong_(tag);
}

+ (void)nativeAsyncTraceBeginWithLong:(jlong)tag
                         withNSString:(NSString *)name
                              withInt:(jint)cookie {
  AndroidOsTrace_nativeAsyncTraceBeginWithLong_withNSString_withInt_(tag, name, cookie);
}

+ (void)nativeAsyncTraceEndWithLong:(jlong)tag
                       withNSString:(NSString *)name
                            withInt:(jint)cookie {
  AndroidOsTrace_nativeAsyncTraceEndWithLong_withNSString_withInt_(tag, name, cookie);
}

+ (void)nativeSetAppTracingAllowedWithBoolean:(jboolean)allowed {
  AndroidOsTrace_nativeSetAppTracingAllowedWithBoolean_(allowed);
}

+ (void)nativeSetTracingEnabledWithBoolean:(jboolean)allowed {
  AndroidOsTrace_nativeSetTracingEnabledWithBoolean_(allowed);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsTrace_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)cacheEnabledTags {
  return AndroidOsTrace_cacheEnabledTags();
}

+ (jboolean)isTagEnabledWithLong:(jlong)traceTag {
  return AndroidOsTrace_isTagEnabledWithLong_(traceTag);
}

+ (void)traceCounterWithLong:(jlong)traceTag
                withNSString:(NSString *)counterName
                     withInt:(jint)counterValue {
  AndroidOsTrace_traceCounterWithLong_withNSString_withInt_(traceTag, counterName, counterValue);
}

+ (void)setAppTracingAllowedWithBoolean:(jboolean)allowed {
  AndroidOsTrace_setAppTracingAllowedWithBoolean_(allowed);
}

+ (void)setTracingEnabledWithBoolean:(jboolean)enabled {
  AndroidOsTrace_setTracingEnabledWithBoolean_(enabled);
}

+ (void)traceBeginWithLong:(jlong)traceTag
              withNSString:(NSString *)methodName {
  AndroidOsTrace_traceBeginWithLong_withNSString_(traceTag, methodName);
}

+ (void)traceEndWithLong:(jlong)traceTag {
  AndroidOsTrace_traceEndWithLong_(traceTag);
}

+ (void)asyncTraceBeginWithLong:(jlong)traceTag
                   withNSString:(NSString *)methodName
                        withInt:(jint)cookie {
  AndroidOsTrace_asyncTraceBeginWithLong_withNSString_withInt_(traceTag, methodName, cookie);
}

+ (void)asyncTraceEndWithLong:(jlong)traceTag
                 withNSString:(NSString *)methodName
                      withInt:(jint)cookie {
  AndroidOsTrace_asyncTraceEndWithLong_withNSString_withInt_(traceTag, methodName, cookie);
}

+ (void)beginSectionWithNSString:(NSString *)sectionName {
  AndroidOsTrace_beginSectionWithNSString_(sectionName);
}

+ (void)endSection {
  AndroidOsTrace_endSection();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 7, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 10, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nativeGetEnabledTags);
  methods[1].selector = @selector(nativeTraceCounterWithLong:withNSString:withInt:);
  methods[2].selector = @selector(nativeTraceBeginWithLong:withNSString:);
  methods[3].selector = @selector(nativeTraceEndWithLong:);
  methods[4].selector = @selector(nativeAsyncTraceBeginWithLong:withNSString:withInt:);
  methods[5].selector = @selector(nativeAsyncTraceEndWithLong:withNSString:withInt:);
  methods[6].selector = @selector(nativeSetAppTracingAllowedWithBoolean:);
  methods[7].selector = @selector(nativeSetTracingEnabledWithBoolean:);
  methods[8].selector = @selector(init);
  methods[9].selector = @selector(cacheEnabledTags);
  methods[10].selector = @selector(isTagEnabledWithLong:);
  methods[11].selector = @selector(traceCounterWithLong:withNSString:withInt:);
  methods[12].selector = @selector(setAppTracingAllowedWithBoolean:);
  methods[13].selector = @selector(setTracingEnabledWithBoolean:);
  methods[14].selector = @selector(traceBeginWithLong:withNSString:);
  methods[15].selector = @selector(traceEndWithLong:);
  methods[16].selector = @selector(asyncTraceBeginWithLong:withNSString:withInt:);
  methods[17].selector = @selector(asyncTraceEndWithLong:withNSString:withInt:);
  methods[18].selector = @selector(beginSectionWithNSString:);
  methods[19].selector = @selector(endSection);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "TRACE_TAG_NEVER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_NEVER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_ALWAYS", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_ALWAYS, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_GRAPHICS", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_GRAPHICS, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_INPUT", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_INPUT, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_VIEW", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_VIEW, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_WEBVIEW", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_WEBVIEW, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_WINDOW_MANAGER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_WINDOW_MANAGER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_ACTIVITY_MANAGER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_ACTIVITY_MANAGER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_SYNC_MANAGER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_SYNC_MANAGER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_AUDIO", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_AUDIO, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_VIDEO", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_VIDEO, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_CAMERA", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_CAMERA, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_HAL", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_HAL, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_APP", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_APP, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_RESOURCES", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_RESOURCES, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_DALVIK", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_DALVIK, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_RS", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_RS, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_BIONIC", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_BIONIC, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_POWER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_POWER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_PACKAGE_MANAGER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_PACKAGE_MANAGER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_SYSTEM_SERVER", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_SYSTEM_SERVER, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_DATABASE", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_DATABASE, 0x19, -1, -1, -1, -1 },
    { "TRACE_TAG_NOT_READY", "J", .constantValue.asLong = AndroidOsTrace_TRACE_TAG_NOT_READY, 0x1a, -1, -1, -1, -1 },
    { "MAX_SECTION_NAME_LEN", "I", .constantValue.asInt = AndroidOsTrace_MAX_SECTION_NAME_LEN, 0x1a, -1, -1, -1, -1 },
    { "sEnabledTags", "J", .constantValue.asLong = 0, 0x4a, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "nativeTraceCounter", "JLNSString;I", "nativeTraceBegin", "JLNSString;", "nativeTraceEnd", "J", "nativeAsyncTraceBegin", "nativeAsyncTraceEnd", "nativeSetAppTracingAllowed", "Z", "nativeSetTracingEnabled", "isTagEnabled", "traceCounter", "setAppTracingAllowed", "setTracingEnabled", "traceBegin", "traceEnd", "asyncTraceBegin", "asyncTraceEnd", "beginSection", "LNSString;", &AndroidOsTrace_TAG, &AndroidOsTrace_sEnabledTags };
  static const J2ObjcClassInfo _AndroidOsTrace = { "Trace", "android.os", ptrTable, methods, fields, 7, 0x11, 20, 26, -1, -1, -1, -1, -1 };
  return &_AndroidOsTrace;
}

+ (void)initialize {
  if (self == [AndroidOsTrace class]) {
    {
    }
    J2OBJC_SET_INITIALIZED(AndroidOsTrace)
  }
}

@end

jlong AndroidOsTrace_nativeGetEnabledTags() {
  AndroidOsTrace_initialize();
  return -1;
}

void AndroidOsTrace_nativeTraceCounterWithLong_withNSString_withInt_(jlong tag, NSString *name, jint value) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_nativeTraceBeginWithLong_withNSString_(jlong tag, NSString *name) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_nativeTraceEndWithLong_(jlong tag) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_nativeAsyncTraceBeginWithLong_withNSString_withInt_(jlong tag, NSString *name, jint cookie) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_nativeAsyncTraceEndWithLong_withNSString_withInt_(jlong tag, NSString *name, jint cookie) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_nativeSetAppTracingAllowedWithBoolean_(jboolean allowed) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_nativeSetTracingEnabledWithBoolean_(jboolean allowed) {
  AndroidOsTrace_initialize();
  
}

void AndroidOsTrace_init(AndroidOsTrace *self) {
  NSObject_init(self);
}

AndroidOsTrace *new_AndroidOsTrace_init() {
  J2OBJC_NEW_IMPL(AndroidOsTrace, init)
}

AndroidOsTrace *create_AndroidOsTrace_init() {
  J2OBJC_CREATE_IMPL(AndroidOsTrace, init)
}

jlong AndroidOsTrace_cacheEnabledTags() {
  AndroidOsTrace_initialize();
  jlong tags = AndroidOsTrace_nativeGetEnabledTags();
  JreAssignVolatileLong(&AndroidOsTrace_sEnabledTags, tags);
  return tags;
}

jboolean AndroidOsTrace_isTagEnabledWithLong_(jlong traceTag) {
  AndroidOsTrace_initialize();
  jlong tags = JreLoadVolatileLong(&AndroidOsTrace_sEnabledTags);
  if (tags == AndroidOsTrace_TRACE_TAG_NOT_READY) {
    tags = AndroidOsTrace_cacheEnabledTags();
  }
  return (tags & traceTag) != 0;
}

void AndroidOsTrace_traceCounterWithLong_withNSString_withInt_(jlong traceTag, NSString *counterName, jint counterValue) {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(traceTag)) {
    AndroidOsTrace_nativeTraceCounterWithLong_withNSString_withInt_(traceTag, counterName, counterValue);
  }
}

void AndroidOsTrace_setAppTracingAllowedWithBoolean_(jboolean allowed) {
  AndroidOsTrace_initialize();
  AndroidOsTrace_nativeSetAppTracingAllowedWithBoolean_(allowed);
  AndroidOsTrace_cacheEnabledTags();
}

void AndroidOsTrace_setTracingEnabledWithBoolean_(jboolean enabled) {
  AndroidOsTrace_initialize();
  AndroidOsTrace_nativeSetTracingEnabledWithBoolean_(enabled);
  AndroidOsTrace_cacheEnabledTags();
}

void AndroidOsTrace_traceBeginWithLong_withNSString_(jlong traceTag, NSString *methodName) {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(traceTag)) {
    AndroidOsTrace_nativeTraceBeginWithLong_withNSString_(traceTag, methodName);
  }
}

void AndroidOsTrace_traceEndWithLong_(jlong traceTag) {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(traceTag)) {
    AndroidOsTrace_nativeTraceEndWithLong_(traceTag);
  }
}

void AndroidOsTrace_asyncTraceBeginWithLong_withNSString_withInt_(jlong traceTag, NSString *methodName, jint cookie) {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(traceTag)) {
    AndroidOsTrace_nativeAsyncTraceBeginWithLong_withNSString_withInt_(traceTag, methodName, cookie);
  }
}

void AndroidOsTrace_asyncTraceEndWithLong_withNSString_withInt_(jlong traceTag, NSString *methodName, jint cookie) {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(traceTag)) {
    AndroidOsTrace_nativeAsyncTraceEndWithLong_withNSString_withInt_(traceTag, methodName, cookie);
  }
}

void AndroidOsTrace_beginSectionWithNSString_(NSString *sectionName) {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(AndroidOsTrace_TRACE_TAG_APP)) {
    if ([((NSString *) nil_chk(sectionName)) java_length] > AndroidOsTrace_MAX_SECTION_NAME_LEN) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sectionName is too long");
    }
    AndroidOsTrace_nativeTraceBeginWithLong_withNSString_(AndroidOsTrace_TRACE_TAG_APP, sectionName);
  }
}

void AndroidOsTrace_endSection() {
  AndroidOsTrace_initialize();
  if (AndroidOsTrace_isTagEnabledWithLong_(AndroidOsTrace_TRACE_TAG_APP)) {
    AndroidOsTrace_nativeTraceEndWithLong_(AndroidOsTrace_TRACE_TAG_APP);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsTrace)

@implementation AndroidOsUserHandle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidOsUserHandle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getUserIdWithInt:(jint)uid {
  return AndroidOsUserHandle_getUserIdWithInt_(uid);
}

+ (jint)getCallingUserId {
  return AndroidOsUserHandle_getCallingUserId();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x19, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getUserIdWithInt:);
  methods[2].selector = @selector(getCallingUserId);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getUserId", "I" };
  static const J2ObjcClassInfo _AndroidOsUserHandle = { "UserHandle", "android.os", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_AndroidOsUserHandle;
}

@end

void AndroidOsUserHandle_init(AndroidOsUserHandle *self) {
  NSObject_init(self);
}

AndroidOsUserHandle *new_AndroidOsUserHandle_init() {
  J2OBJC_NEW_IMPL(AndroidOsUserHandle, init)
}

AndroidOsUserHandle *create_AndroidOsUserHandle_init() {
  J2OBJC_CREATE_IMPL(AndroidOsUserHandle, init)
}

jint AndroidOsUserHandle_getUserIdWithInt_(jint uid) {
  AndroidOsUserHandle_initialize();
  return 0;
}

jint AndroidOsUserHandle_getCallingUserId() {
  AndroidOsUserHandle_initialize();
  return AndroidOsUserHandle_getUserIdWithInt_(0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsUserHandle)

NSString *AndroidProviderBaseColumns__ID = @"_id";
NSString *AndroidProviderBaseColumns__COUNT = @"_count";

@implementation AndroidProviderBaseColumns

+ (NSString *)_ID {
  return AndroidProviderBaseColumns__ID;
}

+ (NSString *)_COUNT {
  return AndroidProviderBaseColumns__COUNT;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "_ID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "_COUNT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { &AndroidProviderBaseColumns__ID, &AndroidProviderBaseColumns__COUNT };
  static const J2ObjcClassInfo _AndroidProviderBaseColumns = { "BaseColumns", "android.provider", ptrTable, NULL, fields, 7, 0x609, 0, 2, -1, -1, -1, -1, -1 };
  return &_AndroidProviderBaseColumns;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidProviderBaseColumns)

@implementation AndroidSupportAnnotationAnyThread

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationAnyThread__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationAnyThread = { "AnyThread", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationAnyThread;
}

@end

IOSObjectArray *AndroidSupportAnnotationAnyThread__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationAnyThread)

@implementation AndroidSupportAnnotationCallSuper

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationCallSuper__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationCallSuper = { "CallSuper", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationCallSuper;
}

@end

IOSObjectArray *AndroidSupportAnnotationCallSuper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationCallSuper)

@implementation AndroidSupportAnnotationCheckResult

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(suggest);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationCheckResult__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationCheckResult = { "CheckResult", "android.support.annotation", ptrTable, methods, NULL, 7, 0x2609, 1, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationCheckResult;
}

@end

IOSObjectArray *AndroidSupportAnnotationCheckResult__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationCheckResult)

@implementation AndroidSupportAnnotationIntDef

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(flag);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationIntDef__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationIntDef = { "IntDef", "android.support.annotation", ptrTable, methods, NULL, 7, 0x2609, 2, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationIntDef;
}

@end

IOSObjectArray *AndroidSupportAnnotationIntDef__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationIntDef)

@implementation AndroidSupportAnnotationIntRange

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(from);
  methods[1].selector = @selector(to);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationIntRange__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationIntRange = { "IntRange", "android.support.annotation", ptrTable, methods, NULL, 7, 0x2609, 2, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationIntRange;
}

@end

IOSObjectArray *AndroidSupportAnnotationIntRange__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, FIELD), JreLoadEnum(JavaLangAnnotationElementType, LOCAL_VARIABLE), JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:5 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationIntRange)

@implementation AndroidSupportAnnotationMainThread

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationMainThread__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationMainThread = { "MainThread", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationMainThread;
}

@end

IOSObjectArray *AndroidSupportAnnotationMainThread__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationMainThread)

@implementation AndroidSupportAnnotationNonNull

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationNonNull__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationNonNull = { "NonNull", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationNonNull;
}

@end

IOSObjectArray *AndroidSupportAnnotationNonNull__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationNonNull)

@implementation AndroidSupportAnnotationNullable

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationNullable__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationNullable = { "Nullable", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationNullable;
}

@end

IOSObjectArray *AndroidSupportAnnotationNullable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationNullable)

@implementation AndroidSupportAnnotationRequiresApi

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(api);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationRequiresApi__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationRequiresApi = { "RequiresApi", "android.support.annotation", ptrTable, methods, NULL, 7, 0x2609, 2, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationRequiresApi;
}

@end

IOSObjectArray *AndroidSupportAnnotationRequiresApi__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE), JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:4 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationRequiresApi)

@implementation AndroidSupportAnnotationRestrictTo

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidSupportAnnotationRestrictTo_Scope;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LAndroidSupportAnnotationRestrictTo_Scope;", (void *)&AndroidSupportAnnotationRestrictTo__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationRestrictTo = { "RestrictTo", "android.support.annotation", ptrTable, methods, NULL, 7, 0x2609, 1, 0, -1, 0, -1, -1, 1 };
  return &_AndroidSupportAnnotationRestrictTo;
}

@end

IOSObjectArray *AndroidSupportAnnotationRestrictTo__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE), JreLoadEnum(JavaLangAnnotationElementType, TYPE), JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, FIELD), JreLoadEnum(JavaLangAnnotationElementType, PACKAGE) } count:6 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationRestrictTo)

J2OBJC_INITIALIZED_DEFN(AndroidSupportAnnotationRestrictTo_Scope)

AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_values_[5];

@implementation AndroidSupportAnnotationRestrictTo_Scope

+ (AndroidSupportAnnotationRestrictTo_Scope *)LIBRARY {
  return JreEnum(AndroidSupportAnnotationRestrictTo_Scope, LIBRARY);
}

+ (AndroidSupportAnnotationRestrictTo_Scope *)LIBRARY_GROUP {
  return JreEnum(AndroidSupportAnnotationRestrictTo_Scope, LIBRARY_GROUP);
}

+ (AndroidSupportAnnotationRestrictTo_Scope *)GROUP_ID {
  return JreEnum(AndroidSupportAnnotationRestrictTo_Scope, GROUP_ID);
}

+ (AndroidSupportAnnotationRestrictTo_Scope *)TESTS {
  return JreEnum(AndroidSupportAnnotationRestrictTo_Scope, TESTS);
}

+ (AndroidSupportAnnotationRestrictTo_Scope *)SUBCLASSES {
  return JreEnum(AndroidSupportAnnotationRestrictTo_Scope, SUBCLASSES);
}

+ (IOSObjectArray *)values {
  return AndroidSupportAnnotationRestrictTo_Scope_values();
}

+ (AndroidSupportAnnotationRestrictTo_Scope *)valueOfWithNSString:(NSString *)name {
  return AndroidSupportAnnotationRestrictTo_Scope_valueOfWithNSString_(name);
}

- (AndroidSupportAnnotationRestrictTo_Scope_Enum)toNSEnum {
  return (AndroidSupportAnnotationRestrictTo_Scope_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidSupportAnnotationRestrictTo_Scope;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidSupportAnnotationRestrictTo_Scope;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LIBRARY", "LAndroidSupportAnnotationRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "LIBRARY_GROUP", "LAndroidSupportAnnotationRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "GROUP_ID", "LAndroidSupportAnnotationRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, 5 },
    { "TESTS", "LAndroidSupportAnnotationRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SUBCLASSES", "LAndroidSupportAnnotationRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidSupportAnnotationRestrictTo_Scope, LIBRARY), &JreEnum(AndroidSupportAnnotationRestrictTo_Scope, LIBRARY_GROUP), &JreEnum(AndroidSupportAnnotationRestrictTo_Scope, GROUP_ID), (void *)&AndroidSupportAnnotationRestrictTo_Scope__Annotations$0, &JreEnum(AndroidSupportAnnotationRestrictTo_Scope, TESTS), &JreEnum(AndroidSupportAnnotationRestrictTo_Scope, SUBCLASSES), "LAndroidSupportAnnotationRestrictTo;", "Ljava/lang/Enum<Landroid/support/annotation/RestrictTo$Scope;>;" };
  static const J2ObjcClassInfo _AndroidSupportAnnotationRestrictTo_Scope = { "Scope", "android.support.annotation", ptrTable, methods, fields, 7, 0x4019, 2, 5, 8, -1, -1, 9, -1 };
  return &_AndroidSupportAnnotationRestrictTo_Scope;
}

+ (void)initialize {
  if (self == [AndroidSupportAnnotationRestrictTo_Scope class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 5; i++) {
      ((void)(AndroidSupportAnnotationRestrictTo_Scope_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      AndroidSupportAnnotationRestrictTo_Scope_initWithNSString_withInt_(e, JreEnumConstantName(AndroidSupportAnnotationRestrictTo_Scope_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(AndroidSupportAnnotationRestrictTo_Scope)
  }
}

@end

void AndroidSupportAnnotationRestrictTo_Scope_initWithNSString_withInt_(AndroidSupportAnnotationRestrictTo_Scope *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *AndroidSupportAnnotationRestrictTo_Scope_values() {
  AndroidSupportAnnotationRestrictTo_Scope_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidSupportAnnotationRestrictTo_Scope_values_ count:5 type:AndroidSupportAnnotationRestrictTo_Scope_class_()];
}

AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_valueOfWithNSString_(NSString *name) {
  AndroidSupportAnnotationRestrictTo_Scope_initialize();
  for (int i = 0; i < 5; i++) {
    AndroidSupportAnnotationRestrictTo_Scope *e = AndroidSupportAnnotationRestrictTo_Scope_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidSupportAnnotationRestrictTo_Scope *AndroidSupportAnnotationRestrictTo_Scope_fromOrdinal(NSUInteger ordinal) {
  AndroidSupportAnnotationRestrictTo_Scope_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return AndroidSupportAnnotationRestrictTo_Scope_values_[ordinal];
}

IOSObjectArray *AndroidSupportAnnotationRestrictTo_Scope__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationRestrictTo_Scope)

@implementation AndroidSupportAnnotationVisibleForTesting

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationVisibleForTesting__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationVisibleForTesting = { "VisibleForTesting", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationVisibleForTesting;
}

@end

IOSObjectArray *AndroidSupportAnnotationVisibleForTesting__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationVisibleForTesting)

@implementation AndroidSupportAnnotationWorkerThread

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&AndroidSupportAnnotationWorkerThread__Annotations$0 };
  static const J2ObjcClassInfo _AndroidSupportAnnotationWorkerThread = { "WorkerThread", "android.support.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_AndroidSupportAnnotationWorkerThread;
}

@end

IOSObjectArray *AndroidSupportAnnotationWorkerThread__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:3 type:JavaLangAnnotationElementType_class_()]) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidSupportAnnotationWorkerThread)

J2OBJC_INITIALIZED_DEFN(AndroidTelephonyJapanesePhoneNumberFormatter)

@implementation AndroidTelephonyJapanesePhoneNumberFormatter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidTelephonyJapanesePhoneNumberFormatter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)formatWithAndroidTextEditable:(id<AndroidTextEditable>)text {
  AndroidTelephonyJapanesePhoneNumberFormatter_formatWithAndroidTextEditable_(text);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(formatWithAndroidTextEditable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FORMAT_MAP", "[S", .constantValue.asLong = 0, 0xa, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "format", "LAndroidTextEditable;", &AndroidTelephonyJapanesePhoneNumberFormatter_FORMAT_MAP };
  static const J2ObjcClassInfo _AndroidTelephonyJapanesePhoneNumberFormatter = { "JapanesePhoneNumberFormatter", "android.telephony", ptrTable, methods, fields, 7, 0x0, 2, 1, -1, -1, -1, -1, -1 };
  return &_AndroidTelephonyJapanesePhoneNumberFormatter;
}

+ (void)initialize {
  if (self == [AndroidTelephonyJapanesePhoneNumberFormatter class]) {
    JreStrongAssignAndConsume(&AndroidTelephonyJapanesePhoneNumberFormatter_FORMAT_MAP, [IOSShortArray newArrayWithShorts:(jshort[]){ -100, 10, 220, -15, 410, 530, -15, 670, 780, 1060, -100, -25, 20, 40, 70, 100, 150, 190, 200, 210, -36, -100, -100, -35, -35, -35, 30, -100, -100, -100, -35, -35, -35, -35, -35, -35, -35, -45, -35, -35, -100, -100, -100, -35, -35, -35, -35, 50, -35, 60, -35, -35, -45, -35, -45, -35, -35, -45, -35, -35, -35, -35, -45, -35, -35, -35, -35, -45, -45, -35, -100, -100, -35, -35, -35, 80, 90, -100, -100, -100, -35, -35, -35, -35, -35, -35, -45, -45, -35, -35, -35, -35, -35, -35, -35, -35, -45, -35, -35, -35, -25, -25, -35, -35, 110, 120, 130, -35, 140, -25, -35, -25, -35, -35, -35, -35, -35, -45, -25, -35, -35, -25, -35, -35, -35, -35, -35, -25, -45, -35, -35, -35, -35, -35, -45, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -45, -45, -35, -35, -100, -100, -35, 160, 170, 180, -35, -35, -100, -100, -35, -35, -45, -35, -45, -45, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -45, -35, -35, -35, -35, -35, -45, -45, -45, -35, -45, -35, -25, -25, -35, -35, -35, -35, -35, -25, -35, -35, -25, -25, -35, -35, -35, -35, -35, -35, -25, -25, -25, -35, -35, -35, -35, -35, -25, -35, -35, -25, -100, -100, 230, 250, 260, 270, 320, 340, 360, 390, -35, -25, -25, 240, -35, -35, -35, -25, -35, -35, -25, -35, -35, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -35, -35, -35, -25, -35, -35, -25, -35, -35, -35, -35, -35, -25, -35, -35, -35, -25, -35, -25, -25, -25, -35, 280, 290, 300, 310, -35, -25, -25, -25, -25, -25, -25, -25, -35, -35, -25, -25, -35, -35, -35, -35, -35, -35, -35, -35, -35, -25, -25, -35, -35, -35, -25, -25, -25, -25, -25, -25, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -25, -35, 330, -35, -35, -35, -35, -35, -25, -35, -35, -35, -35, -35, -25, -25, -25, -25, -35, -25, -25, -25, -35, -25, -35, -35, 350, -35, -25, -35, -35, -35, -35, -35, -35, -35, -25, -25, -35, -25, -35, 370, -35, -35, -25, -35, -35, 380, -25, -35, -35, -25, -25, -35, -35, -35, -35, -35, -25, -35, -25, -25, -25, -25, -35, -35, -35, -35, -25, -35, -25, 400, -35, -35, -35, -35, -25, -35, -25, -35, -35, -35, -35, -25, -25, -25, -25, -25, -15, -15, 420, 460, -25, -25, 470, 480, 500, 510, -15, -25, 430, -25, -25, -25, -25, -25, 440, 450, -25, -35, -35, -35, -35, -35, -35, -35, -35, -35, -25, -25, -35, -35, -25, -25, -25, -35, -35, -35, -15, -25, -15, -15, -15, -15, -15, -25, -25, -15, -25, -25, -25, -25, -25, -25, -35, -25, -35, -35, -35, -25, -25, -35, -25, -35, -35, -35, -25, -25, 490, -15, -25, -25, -25, -35, -35, -25, -35, -35, -15, -35, -35, -35, -35, -35, -35, -35, -35, -15, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -35, -35, -35, -25, -25, -25, 520, -100, -100, -45, -100, -45, -100, -45, -100, -45, -100, -25, -100, -25, 540, 580, 590, 600, 610, 630, 640, -25, -35, -35, -35, -25, -25, -35, -35, -35, 550, -35, -35, -25, -25, -25, -25, 560, 570, -25, -35, -35, -35, -35, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -35, -25, -25, -35, -25, -25, -25, -25, -25, -25, -35, -35, -25, -35, -35, -25, -35, -35, -25, -35, -35, -35, -35, -35, -35, -25, -100, -35, -35, -35, -35, -35, -35, -35, -35, -35, -36, -100, -35, -35, -35, -35, 620, -35, -35, -100, -35, -35, -35, -35, -35, -35, -35, -35, -35, -45, -25, -35, -25, -25, -35, -35, -35, -35, -25, -25, -25, -25, -25, -25, -35, -35, -35, 650, -35, 660, -35, -35, -35, -35, -45, -35, -35, -35, -35, -45, -35, -35, -35, -35, -35, -35, -35, -35, -35, -25, -26, -100, 680, 690, 700, -25, 720, 730, -25, 740, -25, -35, -25, -25, -25, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -35, -35, -35, -35, -35, -35, -100, -35, -35, -35, -35, 710, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -45, -35, -25, -35, -25, -35, -25, -35, -35, -35, -35, -25, -35, -35, -35, -35, -35, -25, -35, -25, -35, -35, -35, -35, -25, -25, 750, 760, 770, -35, -35, -35, -25, -35, -25, -25, -25, -25, -35, -35, -35, -25, -25, -35, -35, -35, -35, -25, -25, -35, -35, -25, -25, -35, -35, -35, -35, -35, -25, -25, -35, -35, 790, -100, 800, 850, 900, 920, 940, 1030, 1040, 1050, -36, -26, -26, -26, -26, -26, -26, -26, -26, -26, -35, -25, -25, -35, 810, -25, -35, -35, -25, 820, -25, -35, -25, -25, -35, -35, -35, -35, -35, -25, -25, -35, 830, -35, 840, -35, -25, -35, -35, -25, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -100, -25, -25, -25, -100, -100, -100, -100, -100, -100, -25, -25, -35, -35, -35, -35, 860, -35, 870, 880, -25, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -45, -45, -35, -100, -100, -100, -100, -100, -100, 890, -100, -100, -100, -25, -45, -45, -25, -45, -45, -25, -45, -45, -45, -25, -25, -25, -25, -25, -35, -35, 910, -35, -25, -35, -35, -35, -35, -35, -35, -35, -45, -35, -35, -100, 930, -35, -35, -35, -35, -35, -35, -35, -35, -100, -100, -45, -100, -45, -100, -100, -100, -100, -100, -25, -25, -25, 950, -25, 970, 990, -35, 1000, 1010, -35, -35, -35, -35, -35, -35, 960, -35, -35, -35, -45, -45, -45, -45, -45, -45, -35, -45, -45, -45, -35, -35, -25, -35, -35, 980, -35, -35, -35, -35, -100, -100, -25, -25, -100, -100, -100, -100, -100, -100, -25, -35, -35, -35, -35, -35, -35, -35, -35, -35, -25, -35, -35, -35, -35, -35, -35, -35, -35, -25, -25, -35, -35, -35, -25, -25, -35, -35, -35, 1020, -45, -45, -35, -35, -45, -45, -45, -45, -45, -45, -25, -25, -25, -25, -25, -35, -25, -35, -25, -35, -35, -25, -25, -35, -35, -35, -25, -35, -25, -35, -25, -25, -35, -35, -35, -35, -35, -35, -35, -25, -26, -100, 1070, 1080, 1090, 1110, 1120, 1130, 1140, 1160, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -35, -25, -25, -25, -25, -25, -25, -25, -25, -25, -35, -100, -35, -35, -35, -100, -35, -35, -35, 1100, -35, -35, -35, -35, -35, -35, -45, -35, -35, -35, -35, -25, -35, -25, -35, -35, -35, -35, -25, -35, -25, -25, -25, -25, -35, -35, -35, -35, -35, -35, -25, -25, -35, -35, -35, -25, -25, -35, -35, -35, 1150, -25, -35, -35, -35, -35, -35, -35, -25, -25, -35, -35, -45, -35, -35, -35, -35, -35, -35, -35, -35, 1170, -25, -35, 1180, -35, 1190, -35, -25, -25, -100, -100, -45, -45, -100, -100, -100, -100, -100, -100, -25, -35, -35, -35, -35, -35, -35, -25, -25, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -45 } count:1200]);
    J2OBJC_SET_INITIALIZED(AndroidTelephonyJapanesePhoneNumberFormatter)
  }
}

@end

void AndroidTelephonyJapanesePhoneNumberFormatter_init(AndroidTelephonyJapanesePhoneNumberFormatter *self) {
  NSObject_init(self);
}

AndroidTelephonyJapanesePhoneNumberFormatter *new_AndroidTelephonyJapanesePhoneNumberFormatter_init() {
  J2OBJC_NEW_IMPL(AndroidTelephonyJapanesePhoneNumberFormatter, init)
}

AndroidTelephonyJapanesePhoneNumberFormatter *create_AndroidTelephonyJapanesePhoneNumberFormatter_init() {
  J2OBJC_CREATE_IMPL(AndroidTelephonyJapanesePhoneNumberFormatter, init)
}

void AndroidTelephonyJapanesePhoneNumberFormatter_formatWithAndroidTextEditable_(id<AndroidTextEditable> text) {
  AndroidTelephonyJapanesePhoneNumberFormatter_initialize();
  jint rootIndex = 1;
  jint length = [((id<AndroidTextEditable>) nil_chk(text)) java_length];
  if (length > 3 && [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:0 to:3])) description])) isEqual:@"+81"]) {
    rootIndex = 3;
  }
  else if (length < 1 || [text charAtWithInt:0] != '0') {
    return;
  }
  id<JavaLangCharSequence> saved = [text subSequenceFrom:0 to:length];
  jint i = 0;
  while (i < [text java_length]) {
    if ([text charAtWithInt:i] == '-') {
      [text delete__WithInt:i withInt:i + 1];
    }
    else {
      i++;
    }
  }
  length = [text java_length];
  i = rootIndex;
  jint base = 0;
  while (i < length) {
    jchar ch = [text charAtWithInt:i];
    if (!JavaLangCharacter_isDigitWithChar_(ch)) {
      [text replaceWithInt:0 withInt:length withJavaLangCharSequence:saved];
      return;
    }
    jshort value = IOSShortArray_Get(nil_chk(AndroidTelephonyJapanesePhoneNumberFormatter_FORMAT_MAP), base + ch - '0');
    if (value < 0) {
      if (value <= -100) {
        [text replaceWithInt:0 withInt:length withJavaLangCharSequence:saved];
        return;
      }
      jint dashPos2 = rootIndex + (JavaLangMath_absWithInt_(value) % 10);
      if (length > dashPos2) {
        [text insertWithInt:dashPos2 withJavaLangCharSequence:@"-"];
      }
      jint dashPos1 = rootIndex + (JavaLangMath_absWithInt_(value) / 10);
      if (length > dashPos1) {
        [text insertWithInt:dashPos1 withJavaLangCharSequence:@"-"];
      }
      break;
    }
    else {
      base = value;
      i++;
    }
  }
  if (length > 3 && rootIndex == 3) {
    [text insertWithInt:rootIndex withJavaLangCharSequence:@"-"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidTelephonyJapanesePhoneNumberFormatter)

J2OBJC_INITIALIZED_DEFN(AndroidTelephonyPhoneNumberUtils)

NSString *AndroidTelephonyPhoneNumberUtils_LOG_TAG = @"PhoneNumberUtils";

@implementation AndroidTelephonyPhoneNumberUtils

+ (jchar)PAUSE {
  return AndroidTelephonyPhoneNumberUtils_PAUSE;
}

+ (jchar)WAIT {
  return AndroidTelephonyPhoneNumberUtils_WAIT;
}

+ (jchar)WILD {
  return AndroidTelephonyPhoneNumberUtils_WILD;
}

+ (jint)TOA_International {
  return AndroidTelephonyPhoneNumberUtils_TOA_International;
}

+ (jint)TOA_Unknown {
  return AndroidTelephonyPhoneNumberUtils_TOA_Unknown;
}

+ (NSString *)LOG_TAG {
  return AndroidTelephonyPhoneNumberUtils_LOG_TAG;
}

+ (jint)FORMAT_UNKNOWN {
  return AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN;
}

+ (jint)FORMAT_NANP {
  return AndroidTelephonyPhoneNumberUtils_FORMAT_NANP;
}

+ (jint)FORMAT_JAPAN {
  return AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN;
}

+ (jint)MIN_MATCH {
  return AndroidTelephonyPhoneNumberUtils_MIN_MATCH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidTelephonyPhoneNumberUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isISODigitWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c);
}

+ (jboolean)is12KeyWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_is12KeyWithChar_(c);
}

+ (jboolean)isDialableWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(c);
}

+ (jboolean)isReallyDialableWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(c);
}

+ (jboolean)isNonSeparatorWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c);
}

+ (jboolean)isStartsPostDialWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(c);
}

+ (jboolean)isSeparatorWithChar:(jchar)ch {
  return AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(ch);
}

+ (NSString *)extractNetworkPortionWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(phoneNumber);
}

+ (NSString *)extractNetworkPortionAltWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(phoneNumber);
}

+ (NSString *)stripSeparatorsWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_stripSeparatorsWithNSString_(phoneNumber);
}

+ (jint)minPositiveWithInt:(jint)a
                   withInt:(jint)b {
  return AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(a, b);
}

+ (void)logWithNSString:(NSString *)msg {
  AndroidTelephonyPhoneNumberUtils_logWithNSString_(msg);
}

+ (jint)indexOfLastNetworkCharWithNSString:(NSString *)a {
  return AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(a);
}

+ (NSString *)extractPostDialPortionWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_extractPostDialPortionWithNSString_(phoneNumber);
}

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b {
  return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_(a, b);
}

+ (jboolean)compareWithNSString:(NSString *)a
                   withNSString:(NSString *)b
                    withBoolean:(jboolean)useStrictComparation {
  return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, useStrictComparation);
}

+ (jboolean)compareLooselyWithNSString:(NSString *)a
                          withNSString:(NSString *)b {
  return AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(a, b);
}

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b {
  return AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(a, b);
}

+ (jboolean)compareStrictlyWithNSString:(NSString *)a
                           withNSString:(NSString *)b
                            withBoolean:(jboolean)acceptInvalidCCCPrefix {
  return AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(a, b, acceptInvalidCCCPrefix);
}

+ (NSString *)toCallerIDMinMatchWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_toCallerIDMinMatchWithNSString_(phoneNumber);
}

+ (NSString *)getStrippedReversedWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_getStrippedReversedWithNSString_(phoneNumber);
}

+ (NSString *)internalGetStrippedReversedWithNSString:(NSString *)np
                                              withInt:(jint)numDigits {
  return AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(np, numDigits);
}

+ (NSString *)stringFromStringAndTOAWithNSString:(NSString *)s
                                         withInt:(jint)TOA {
  return AndroidTelephonyPhoneNumberUtils_stringFromStringAndTOAWithNSString_withInt_(s, TOA);
}

+ (jint)toaFromStringWithNSString:(NSString *)s {
  return AndroidTelephonyPhoneNumberUtils_toaFromStringWithNSString_(s);
}

+ (NSString *)calledPartyBCDToStringWithByteArray:(IOSByteArray *)bytes
                                          withInt:(jint)offset
                                          withInt:(jint)length {
  return AndroidTelephonyPhoneNumberUtils_calledPartyBCDToStringWithByteArray_withInt_withInt_(bytes, offset, length);
}

+ (void)internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                          withByteArray:(IOSByteArray *)bytes
                                                                withInt:(jint)offset
                                                                withInt:(jint)length {
  AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(sb, bytes, offset, length);
}

+ (NSString *)calledPartyBCDFragmentToStringWithByteArray:(IOSByteArray *)bytes
                                                  withInt:(jint)offset
                                                  withInt:(jint)length {
  return AndroidTelephonyPhoneNumberUtils_calledPartyBCDFragmentToStringWithByteArray_withInt_withInt_(bytes, offset, length);
}

+ (jchar)bcdToCharWithByte:(jbyte)b {
  return AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(b);
}

+ (jint)charToBCDWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(c);
}

+ (jboolean)isWellFormedSmsAddressWithNSString:(NSString *)address {
  return AndroidTelephonyPhoneNumberUtils_isWellFormedSmsAddressWithNSString_(address);
}

+ (jboolean)isGlobalPhoneNumberWithNSString:(NSString *)phoneNumber {
  return AndroidTelephonyPhoneNumberUtils_isGlobalPhoneNumberWithNSString_(phoneNumber);
}

+ (jboolean)isDialableWithNSString:(NSString *)address {
  return AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(address);
}

+ (jboolean)isNonSeparatorWithNSString:(NSString *)address {
  return AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithNSString_(address);
}

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithNSString:(NSString *)s {
  return AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithNSString_(s);
}

+ (IOSByteArray *)networkPortionToCalledPartyBCDWithLengthWithNSString:(NSString *)s {
  return AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithLengthWithNSString_(s);
}

+ (IOSByteArray *)numberToCalledPartyBCDWithNSString:(NSString *)number {
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDWithNSString_(number);
}

+ (IOSByteArray *)numberToCalledPartyBCDHelperWithNSString:(NSString *)number
                                               withBoolean:(jboolean)includeLength {
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(number, includeLength);
}

+ (NSString *)formatNumberWithNSString:(NSString *)source {
  return AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_(source);
}

+ (NSString *)formatNumberWithNSString:(NSString *)source
                               withInt:(jint)defaultFormattingType {
  return AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_withInt_(source, defaultFormattingType);
}

+ (jint)getFormatTypeForLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(locale);
}

+ (void)formatNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text
                                    withInt:(jint)defaultFormattingType {
  AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(text, defaultFormattingType);
}

+ (void)formatNanpNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text {
  AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(text);
}

+ (void)formatJapaneseNumberWithAndroidTextEditable:(id<AndroidTextEditable>)text {
  AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(text);
}

+ (NSString *)convertKeypadLettersToDigitsWithNSString:(NSString *)input {
  return AndroidTelephonyPhoneNumberUtils_convertKeypadLettersToDigitsWithNSString_(input);
}

+ (jboolean)isTwoToNineWithChar:(jchar)c {
  return AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_(c);
}

+ (jint)getFormatTypeFromCountryCodeWithNSString:(NSString *)country {
  return AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(country);
}

+ (jboolean)isNanpWithNSString:(NSString *)dialStr {
  return AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(dialStr);
}

+ (jboolean)isOneNanpWithNSString:(NSString *)dialStr {
  return AndroidTelephonyPhoneNumberUtils_isOneNanpWithNSString_(dialStr);
}

+ (jboolean)isUriNumberWithNSString:(NSString *)number {
  return AndroidTelephonyPhoneNumberUtils_isUriNumberWithNSString_(number);
}

+ (jint)findDialableIndexFromPostDialStrWithNSString:(NSString *)postDialStr {
  return AndroidTelephonyPhoneNumberUtils_findDialableIndexFromPostDialStrWithNSString_(postDialStr);
}

+ (NSString *)appendPwCharBackToOrigDialStrWithInt:(jint)dialableIndex
                                      withNSString:(NSString *)origStr
                                      withNSString:(NSString *)dialStr {
  return AndroidTelephonyPhoneNumberUtils_appendPwCharBackToOrigDialStrWithInt_withNSString_withNSString_(dialableIndex, origStr, dialStr);
}

+ (jboolean)matchIntlPrefixWithNSString:(NSString *)a
                                withInt:(jint)len {
  return AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(a, len);
}

+ (jboolean)matchIntlPrefixAndCCWithNSString:(NSString *)a
                                     withInt:(jint)len {
  return AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(a, len);
}

+ (jboolean)matchTrunkPrefixWithNSString:(NSString *)a
                                 withInt:(jint)len {
  return AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(a, len);
}

+ (jboolean)isCountryCallingCodeWithInt:(jint)countryCallingCodeCandidate {
  return AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(countryCallingCodeCandidate);
}

+ (jint)tryGetISODigitWithChar:(jchar)ch {
  return AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(ch);
}

+ (AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *)tryGetCountryCallingCodeAndNewIndexWithNSString:(NSString *)str
                                                                                                        withBoolean:(jboolean)acceptThailandCase {
  return AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(str, acceptThailandCase);
}

+ (jint)tryGetTrunkPrefixOmittedIndexWithNSString:(NSString *)str
                                          withInt:(jint)currentIndex {
  return AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(str, currentIndex);
}

+ (jboolean)checkPrefixIsIgnorableWithNSString:(NSString *)str
                                       withInt:(jint)forwardIndex
                                       withInt:(jint)backwardIndex {
  return AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(str, forwardIndex, backwardIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 27, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 32, 29, -1, -1, -1, -1 },
    { NULL, "C", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 35, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 36, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 5, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 38, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 39, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 40, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 43, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 43, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 43, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 50, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 51, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 52, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 53, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 54, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 55, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 56, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 57, 58, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 59, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 60, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 61, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 62, 63, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 64, 1, -1, -1, -1, -1 },
    { NULL, "LAndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;", 0xa, 65, 42, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 66, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 67, 68, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isISODigitWithChar:);
  methods[2].selector = @selector(is12KeyWithChar:);
  methods[3].selector = @selector(isDialableWithChar:);
  methods[4].selector = @selector(isReallyDialableWithChar:);
  methods[5].selector = @selector(isNonSeparatorWithChar:);
  methods[6].selector = @selector(isStartsPostDialWithChar:);
  methods[7].selector = @selector(isSeparatorWithChar:);
  methods[8].selector = @selector(extractNetworkPortionWithNSString:);
  methods[9].selector = @selector(extractNetworkPortionAltWithNSString:);
  methods[10].selector = @selector(stripSeparatorsWithNSString:);
  methods[11].selector = @selector(minPositiveWithInt:withInt:);
  methods[12].selector = @selector(logWithNSString:);
  methods[13].selector = @selector(indexOfLastNetworkCharWithNSString:);
  methods[14].selector = @selector(extractPostDialPortionWithNSString:);
  methods[15].selector = @selector(compareWithNSString:withNSString:);
  methods[16].selector = @selector(compareWithNSString:withNSString:withBoolean:);
  methods[17].selector = @selector(compareLooselyWithNSString:withNSString:);
  methods[18].selector = @selector(compareStrictlyWithNSString:withNSString:);
  methods[19].selector = @selector(compareStrictlyWithNSString:withNSString:withBoolean:);
  methods[20].selector = @selector(toCallerIDMinMatchWithNSString:);
  methods[21].selector = @selector(getStrippedReversedWithNSString:);
  methods[22].selector = @selector(internalGetStrippedReversedWithNSString:withInt:);
  methods[23].selector = @selector(stringFromStringAndTOAWithNSString:withInt:);
  methods[24].selector = @selector(toaFromStringWithNSString:);
  methods[25].selector = @selector(calledPartyBCDToStringWithByteArray:withInt:withInt:);
  methods[26].selector = @selector(internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder:withByteArray:withInt:withInt:);
  methods[27].selector = @selector(calledPartyBCDFragmentToStringWithByteArray:withInt:withInt:);
  methods[28].selector = @selector(bcdToCharWithByte:);
  methods[29].selector = @selector(charToBCDWithChar:);
  methods[30].selector = @selector(isWellFormedSmsAddressWithNSString:);
  methods[31].selector = @selector(isGlobalPhoneNumberWithNSString:);
  methods[32].selector = @selector(isDialableWithNSString:);
  methods[33].selector = @selector(isNonSeparatorWithNSString:);
  methods[34].selector = @selector(networkPortionToCalledPartyBCDWithNSString:);
  methods[35].selector = @selector(networkPortionToCalledPartyBCDWithLengthWithNSString:);
  methods[36].selector = @selector(numberToCalledPartyBCDWithNSString:);
  methods[37].selector = @selector(numberToCalledPartyBCDHelperWithNSString:withBoolean:);
  methods[38].selector = @selector(formatNumberWithNSString:);
  methods[39].selector = @selector(formatNumberWithNSString:withInt:);
  methods[40].selector = @selector(getFormatTypeForLocaleWithJavaUtilLocale:);
  methods[41].selector = @selector(formatNumberWithAndroidTextEditable:withInt:);
  methods[42].selector = @selector(formatNanpNumberWithAndroidTextEditable:);
  methods[43].selector = @selector(formatJapaneseNumberWithAndroidTextEditable:);
  methods[44].selector = @selector(convertKeypadLettersToDigitsWithNSString:);
  methods[45].selector = @selector(isTwoToNineWithChar:);
  methods[46].selector = @selector(getFormatTypeFromCountryCodeWithNSString:);
  methods[47].selector = @selector(isNanpWithNSString:);
  methods[48].selector = @selector(isOneNanpWithNSString:);
  methods[49].selector = @selector(isUriNumberWithNSString:);
  methods[50].selector = @selector(findDialableIndexFromPostDialStrWithNSString:);
  methods[51].selector = @selector(appendPwCharBackToOrigDialStrWithInt:withNSString:withNSString:);
  methods[52].selector = @selector(matchIntlPrefixWithNSString:withInt:);
  methods[53].selector = @selector(matchIntlPrefixAndCCWithNSString:withInt:);
  methods[54].selector = @selector(matchTrunkPrefixWithNSString:withInt:);
  methods[55].selector = @selector(isCountryCallingCodeWithInt:);
  methods[56].selector = @selector(tryGetISODigitWithChar:);
  methods[57].selector = @selector(tryGetCountryCallingCodeAndNewIndexWithNSString:withBoolean:);
  methods[58].selector = @selector(tryGetTrunkPrefixOmittedIndexWithNSString:withInt:);
  methods[59].selector = @selector(checkPrefixIsIgnorableWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PAUSE", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_PAUSE, 0x19, -1, -1, -1, -1 },
    { "WAIT", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_WAIT, 0x19, -1, -1, -1, -1 },
    { "WILD", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_WILD, 0x19, -1, -1, -1, -1 },
    { "TOA_International", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_TOA_International, 0x19, -1, -1, -1, -1 },
    { "TOA_Unknown", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_TOA_Unknown, 0x19, -1, -1, -1, -1 },
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 69, -1, -1 },
    { "DBG", "Z", .constantValue.asBOOL = AndroidTelephonyPhoneNumberUtils_DBG, 0x1a, -1, -1, -1, -1 },
    { "GLOBAL_PHONE_NUMBER_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "FORMAT_UNKNOWN", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "FORMAT_NANP", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_FORMAT_NANP, 0x19, -1, -1, -1, -1 },
    { "FORMAT_JAPAN", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN, 0x19, -1, -1, -1, -1 },
    { "NANP_COUNTRIES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "NANP_STATE_DIGIT", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT, 0x1a, -1, -1, -1, -1 },
    { "NANP_STATE_PLUS", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS, 0x1a, -1, -1, -1, -1 },
    { "NANP_STATE_ONE", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE, 0x1a, -1, -1, -1, -1 },
    { "NANP_STATE_DASH", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH, 0x1a, -1, -1, -1, -1 },
    { "MIN_MATCH", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_MIN_MATCH, 0x18, -1, -1, -1, -1 },
    { "KEYPAD_MAP", "LAndroidUtilSparseIntArray;", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "PLUS_SIGN_CHAR", "C", .constantValue.asUnichar = AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_CHAR, 0x1a, -1, -1, -1, -1 },
    { "PLUS_SIGN_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "NANP_IDP_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "NANP_LENGTH", "I", .constantValue.asInt = AndroidTelephonyPhoneNumberUtils_NANP_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "COUNTLY_CALLING_CALL", "[Z", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "CCC_LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
  };
  static const void *ptrTable[] = { "isISODigit", "C", "is12Key", "isDialable", "isReallyDialable", "isNonSeparator", "isStartsPostDial", "isSeparator", "extractNetworkPortion", "LNSString;", "extractNetworkPortionAlt", "stripSeparators", "minPositive", "II", "log", "indexOfLastNetworkChar", "extractPostDialPortion", "compare", "LNSString;LNSString;", "LNSString;LNSString;Z", "compareLoosely", "compareStrictly", "toCallerIDMinMatch", "getStrippedReversed", "internalGetStrippedReversed", "LNSString;I", "stringFromStringAndTOA", "toaFromString", "calledPartyBCDToString", "[BII", "internalCalledPartyBCDFragmentToString", "LJavaLangStringBuilder;[BII", "calledPartyBCDFragmentToString", "bcdToChar", "B", "charToBCD", "isWellFormedSmsAddress", "isGlobalPhoneNumber", "networkPortionToCalledPartyBCD", "networkPortionToCalledPartyBCDWithLength", "numberToCalledPartyBCD", "numberToCalledPartyBCDHelper", "LNSString;Z", "formatNumber", "getFormatTypeForLocale", "LJavaUtilLocale;", "LAndroidTextEditable;I", "formatNanpNumber", "LAndroidTextEditable;", "formatJapaneseNumber", "convertKeypadLettersToDigits", "isTwoToNine", "getFormatTypeFromCountryCode", "isNanp", "isOneNanp", "isUriNumber", "findDialableIndexFromPostDialStr", "appendPwCharBackToOrigDialStr", "ILNSString;LNSString;", "matchIntlPrefix", "matchIntlPrefixAndCC", "matchTrunkPrefix", "isCountryCallingCode", "I", "tryGetISODigit", "tryGetCountryCallingCodeAndNewIndex", "tryGetTrunkPrefixOmittedIndex", "checkPrefixIsIgnorable", "LNSString;II", &AndroidTelephonyPhoneNumberUtils_LOG_TAG, &AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN, &AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES, &AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP, &AndroidTelephonyPhoneNumberUtils_PLUS_SIGN_STRING, &AndroidTelephonyPhoneNumberUtils_NANP_IDP_STRING, &AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL, &AndroidTelephonyPhoneNumberUtils_CCC_LENGTH, "LAndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;" };
  static const J2ObjcClassInfo _AndroidTelephonyPhoneNumberUtils = { "PhoneNumberUtils", "android.telephony", ptrTable, methods, fields, 7, 0x1, 60, 24, -1, 77, -1, -1, -1 };
  return &_AndroidTelephonyPhoneNumberUtils;
}

+ (void)initialize {
  if (self == [AndroidTelephonyPhoneNumberUtils class]) {
    JreStrongAssign(&AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"[\\+]?[0-9.-]+"));
    JreStrongAssignAndConsume(&AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES, [IOSObjectArray newArrayWithObjects:(id[]){ @"US", @"CA", @"AS", @"AI", @"AG", @"BS", @"BB", @"BM", @"VG", @"KY", @"DM", @"DO", @"GD", @"GU", @"JM", @"PR", @"MS", @"MP", @"KN", @"LC", @"VC", @"TT", @"TC", @"VI" } count:24 type:NSString_class_()]);
    JreStrongAssignAndConsume(&AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP, new_AndroidUtilSparseIntArray_init());
    {
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'a' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'b' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'c' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'A' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'B' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'C' withInt:'2'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'d' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'e' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'f' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'D' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'E' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'F' withInt:'3'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'g' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'h' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'i' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'G' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'H' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'I' withInt:'4'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'j' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'k' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'l' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'J' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'K' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'L' withInt:'5'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'m' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'n' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'o' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'M' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'N' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'O' withInt:'6'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'p' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'q' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'r' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'s' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'P' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'Q' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'R' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'S' withInt:'7'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'t' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'u' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'v' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'T' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'U' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'V' withInt:'8'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'w' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'x' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'y' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'z' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'W' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'X' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'Y' withInt:'9'];
      [AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP putWithInt:'Z' withInt:'9'];
    }
    JreStrongAssignAndConsume(&AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false } count:100]);
    AndroidTelephonyPhoneNumberUtils_CCC_LENGTH = AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL->size_;
    J2OBJC_SET_INITIALIZED(AndroidTelephonyPhoneNumberUtils)
  }
}

@end

void AndroidTelephonyPhoneNumberUtils_init(AndroidTelephonyPhoneNumberUtils *self) {
  NSObject_init(self);
}

AndroidTelephonyPhoneNumberUtils *new_AndroidTelephonyPhoneNumberUtils_init() {
  J2OBJC_NEW_IMPL(AndroidTelephonyPhoneNumberUtils, init)
}

AndroidTelephonyPhoneNumberUtils *create_AndroidTelephonyPhoneNumberUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidTelephonyPhoneNumberUtils, init)
}

jboolean AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return c >= '0' && c <= '9';
}

jboolean AndroidTelephonyPhoneNumberUtils_is12KeyWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#';
}

jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == AndroidTelephonyPhoneNumberUtils_WILD;
}

jboolean AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+';
}

jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == AndroidTelephonyPhoneNumberUtils_WILD || c == AndroidTelephonyPhoneNumberUtils_WAIT || c == AndroidTelephonyPhoneNumberUtils_PAUSE;
}

jboolean AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return c == AndroidTelephonyPhoneNumberUtils_PAUSE || c == AndroidTelephonyPhoneNumberUtils_WAIT;
}

jboolean AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(jchar ch) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return !AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch) && !(('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z'));
}

NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) {
    return nil;
  }
  jint len = [phoneNumber java_length];
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(len);
  jboolean firstCharAdded = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(c) && (c != '+' || !firstCharAdded)) {
      firstCharAdded = true;
      [ret appendWithChar:c];
    }
    else if (AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(c)) {
      break;
    }
  }
  return [ret description];
}

NSString *AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) {
    return nil;
  }
  jint len = [phoneNumber java_length];
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(len);
  jboolean haveSeenPlus = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (c == '+') {
      if (haveSeenPlus) {
        continue;
      }
      haveSeenPlus = true;
    }
    if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(c)) {
      [ret appendWithChar:c];
    }
    else if (AndroidTelephonyPhoneNumberUtils_isStartsPostDialWithChar_(c)) {
      break;
    }
  }
  return [ret description];
}

NSString *AndroidTelephonyPhoneNumberUtils_stripSeparatorsWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) {
    return nil;
  }
  jint len = [phoneNumber java_length];
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(len);
  for (jint i = 0; i < len; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) {
      [ret appendWithChar:c];
    }
  }
  return [ret description];
}

jint AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(jint a, jint b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (a >= 0 && b >= 0) {
    return (a < b) ? a : b;
  }
  else if (a >= 0) {
    return a;
  }
  else if (b >= 0) {
    return b;
  }
  else {
    return -1;
  }
}

void AndroidTelephonyPhoneNumberUtils_logWithNSString_(NSString *msg) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidUtilLog_dWithNSString_withNSString_(AndroidTelephonyPhoneNumberUtils_LOG_TAG, msg);
}

jint AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(NSString *a) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint pIndex;
  jint wIndex;
  jint origLength;
  jint trimIndex;
  origLength = [((NSString *) nil_chk(a)) java_length];
  pIndex = [a java_indexOf:AndroidTelephonyPhoneNumberUtils_PAUSE];
  wIndex = [a java_indexOf:AndroidTelephonyPhoneNumberUtils_WAIT];
  trimIndex = AndroidTelephonyPhoneNumberUtils_minPositiveWithInt_withInt_(pIndex, wIndex);
  if (trimIndex < 0) {
    return origLength - 1;
  }
  else {
    return trimIndex - 1;
  }
}

NSString *AndroidTelephonyPhoneNumberUtils_extractPostDialPortionWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (phoneNumber == nil) return nil;
  jint trimIndex;
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_init();
  trimIndex = AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(phoneNumber);
  for (jint i = trimIndex + 1, s = [phoneNumber java_length]; i < s; i++) {
    jchar c = [phoneNumber charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) {
      [ret appendWithChar:c];
    }
  }
  return [ret description];
}

jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, false);
}

jboolean AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean useStrictComparation) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return (useStrictComparation ? AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(a, b) : AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(a, b));
}

jboolean AndroidTelephonyPhoneNumberUtils_compareLooselyWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint ia;
  jint ib;
  jint matched;
  jint numNonDialableCharsInA = 0;
  jint numNonDialableCharsInB = 0;
  if (a == nil || b == nil) return a == b;
  if ([a java_length] == 0 || [b java_length] == 0) {
    return false;
  }
  ia = AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(a);
  ib = AndroidTelephonyPhoneNumberUtils_indexOfLastNetworkCharWithNSString_(b);
  matched = 0;
  while (ia >= 0 && ib >= 0) {
    jchar ca;
    jchar cb;
    jboolean skipCmp = false;
    ca = [a charAtWithInt:ia];
    if (!AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ca)) {
      ia--;
      skipCmp = true;
      numNonDialableCharsInA++;
    }
    cb = [b charAtWithInt:ib];
    if (!AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(cb)) {
      ib--;
      skipCmp = true;
      numNonDialableCharsInB++;
    }
    if (!skipCmp) {
      if (cb != ca && ca != AndroidTelephonyPhoneNumberUtils_WILD && cb != AndroidTelephonyPhoneNumberUtils_WILD) {
        break;
      }
      ia--;
      ib--;
      matched++;
    }
  }
  if (matched < AndroidTelephonyPhoneNumberUtils_MIN_MATCH) {
    jint effectiveALen = [a java_length] - numNonDialableCharsInA;
    jint effectiveBLen = [b java_length] - numNonDialableCharsInB;
    if (effectiveALen == effectiveBLen && effectiveALen == matched) {
      return true;
    }
    return false;
  }
  if (matched >= AndroidTelephonyPhoneNumberUtils_MIN_MATCH && (ia < 0 || ib < 0)) {
    return true;
  }
  if (AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(a, ia + 1) && AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(b, ib + 1)) {
    return true;
  }
  if (AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(a, ia + 1) && AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(b, ib + 1)) {
    return true;
  }
  if (AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(b, ib + 1) && AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(a, ia + 1)) {
    return true;
  }
  return false;
}

jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_(NSString *a, NSString *b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(a, b, true);
}

jboolean AndroidTelephonyPhoneNumberUtils_compareStrictlyWithNSString_withNSString_withBoolean_(NSString *a, NSString *b, jboolean acceptInvalidCCCPrefix) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (a == nil || b == nil) {
    return a == b;
  }
  else if ([a java_length] == 0 && [b java_length] == 0) {
    return false;
  }
  jint forwardIndexA = 0;
  jint forwardIndexB = 0;
  AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *cccA = AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(a, acceptInvalidCCCPrefix);
  AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *cccB = AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(b, acceptInvalidCCCPrefix);
  jboolean bothHasCountryCallingCode = false;
  jboolean okToIgnorePrefix = true;
  jboolean trunkPrefixIsOmittedA = false;
  jboolean trunkPrefixIsOmittedB = false;
  if (cccA != nil && cccB != nil) {
    if (cccA->countryCallingCode_ != cccB->countryCallingCode_) {
      return false;
    }
    okToIgnorePrefix = false;
    bothHasCountryCallingCode = true;
    forwardIndexA = cccA->newIndex_;
    forwardIndexB = cccB->newIndex_;
  }
  else if (cccA == nil && cccB == nil) {
    okToIgnorePrefix = false;
  }
  else {
    if (cccA != nil) {
      forwardIndexA = cccA->newIndex_;
    }
    else {
      jint tmp = AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(b, 0);
      if (tmp >= 0) {
        forwardIndexA = tmp;
        trunkPrefixIsOmittedA = true;
      }
    }
    if (cccB != nil) {
      forwardIndexB = cccB->newIndex_;
    }
    else {
      jint tmp = AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(b, 0);
      if (tmp >= 0) {
        forwardIndexB = tmp;
        trunkPrefixIsOmittedB = true;
      }
    }
  }
  jint backwardIndexA = [a java_length] - 1;
  jint backwardIndexB = [b java_length] - 1;
  while (backwardIndexA >= forwardIndexA && backwardIndexB >= forwardIndexB) {
    jboolean skip_compare = false;
    jchar chA = [a charAtWithInt:backwardIndexA];
    jchar chB = [b charAtWithInt:backwardIndexB];
    if (AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(chA)) {
      backwardIndexA--;
      skip_compare = true;
    }
    if (AndroidTelephonyPhoneNumberUtils_isSeparatorWithChar_(chB)) {
      backwardIndexB--;
      skip_compare = true;
    }
    if (!skip_compare) {
      if (chA != chB) {
        return false;
      }
      backwardIndexA--;
      backwardIndexB--;
    }
  }
  if (okToIgnorePrefix) {
    if ((trunkPrefixIsOmittedA && forwardIndexA <= backwardIndexA) || !AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(a, forwardIndexA, backwardIndexA)) {
      if (acceptInvalidCCCPrefix) {
        return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, false);
      }
      else {
        return false;
      }
    }
    if ((trunkPrefixIsOmittedB && forwardIndexB <= backwardIndexB) || !AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(b, forwardIndexA, backwardIndexB)) {
      if (acceptInvalidCCCPrefix) {
        return AndroidTelephonyPhoneNumberUtils_compareWithNSString_withNSString_withBoolean_(a, b, false);
      }
      else {
        return false;
      }
    }
  }
  else {
    jboolean maybeNamp = !bothHasCountryCallingCode;
    while (backwardIndexA >= forwardIndexA) {
      jchar chA = [a charAtWithInt:backwardIndexA];
      if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(chA)) {
        if (maybeNamp && AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(chA) == 1) {
          maybeNamp = false;
        }
        else {
          return false;
        }
      }
      backwardIndexA--;
    }
    while (backwardIndexB >= forwardIndexB) {
      jchar chB = [b charAtWithInt:backwardIndexB];
      if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(chB)) {
        if (maybeNamp && AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(chB) == 1) {
          maybeNamp = false;
        }
        else {
          return false;
        }
      }
      backwardIndexB--;
    }
  }
  return true;
}

NSString *AndroidTelephonyPhoneNumberUtils_toCallerIDMinMatchWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *np = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(phoneNumber);
  return AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(np, AndroidTelephonyPhoneNumberUtils_MIN_MATCH);
}

NSString *AndroidTelephonyPhoneNumberUtils_getStrippedReversedWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *np = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionAltWithNSString_(phoneNumber);
  if (np == nil) return nil;
  return AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(np, [np java_length]);
}

NSString *AndroidTelephonyPhoneNumberUtils_internalGetStrippedReversedWithNSString_withInt_(NSString *np, jint numDigits) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (np == nil) return nil;
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(numDigits);
  jint length = [np java_length];
  for (jint i = length - 1, s = length; i >= 0 && (s - i) <= numDigits; i--) {
    jchar c = [np charAtWithInt:i];
    [ret appendWithChar:c];
  }
  return [ret description];
}

NSString *AndroidTelephonyPhoneNumberUtils_stringFromStringAndTOAWithNSString_withInt_(NSString *s, jint TOA) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (s == nil) return nil;
  if (TOA == AndroidTelephonyPhoneNumberUtils_TOA_International && [s java_length] > 0 && [s charAtWithInt:0] != '+') {
    return JreStrcat("C$", '+', s);
  }
  return s;
}

jint AndroidTelephonyPhoneNumberUtils_toaFromStringWithNSString_(NSString *s) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (s != nil && [s java_length] > 0 && [s charAtWithInt:0] == '+') {
    return AndroidTelephonyPhoneNumberUtils_TOA_International;
  }
  return AndroidTelephonyPhoneNumberUtils_TOA_Unknown;
}

NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean prependPlus = false;
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(1 + length * 2);
  if (length < 2) {
    return @"";
  }
  if ((IOSByteArray_Get(nil_chk(bytes), offset) & (jint) 0xf0) == (AndroidTelephonyPhoneNumberUtils_TOA_International & (jint) 0xf0)) {
    prependPlus = true;
  }
  AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(ret, bytes, offset + 1, length - 1);
  if (prependPlus && [ret java_length] == 0) {
    return @"";
  }
  if (prependPlus) {
    NSString *retString = [ret description];
    JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"(^[#*])(.*)([#*])(.*)(#)$");
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:retString];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      if ([@"" isEqual:[m groupWithInt:2]]) {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithNSString:[m groupWithInt:1]];
        [ret appendWithNSString:[m groupWithInt:3]];
        [ret appendWithNSString:[m groupWithInt:4]];
        [ret appendWithNSString:[m groupWithInt:5]];
        [ret appendWithNSString:@"+"];
      }
      else {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithNSString:[m groupWithInt:1]];
        [ret appendWithNSString:[m groupWithInt:2]];
        [ret appendWithNSString:[m groupWithInt:3]];
        [ret appendWithNSString:@"+"];
        [ret appendWithNSString:[m groupWithInt:4]];
        [ret appendWithNSString:[m groupWithInt:5]];
      }
    }
    else {
      p = JavaUtilRegexPattern_compileWithNSString_(@"(^[#*])(.*)([#*])(.*)");
      m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:retString];
      if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithNSString:[m groupWithInt:1]];
        [ret appendWithNSString:[m groupWithInt:2]];
        [ret appendWithNSString:[m groupWithInt:3]];
        [ret appendWithNSString:@"+"];
        [ret appendWithNSString:[m groupWithInt:4]];
      }
      else {
        ret = create_JavaLangStringBuilder_init();
        [ret appendWithChar:'+'];
        [ret appendWithNSString:retString];
      }
    }
  }
  return [ret description];
}

void AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(JavaLangStringBuilder *sb, IOSByteArray *bytes, jint offset, jint length) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint i = offset; i < length + offset; i++) {
    jbyte b;
    jchar c;
    c = AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_((jbyte) (IOSByteArray_Get(nil_chk(bytes), i) & (jint) 0xf));
    if (c == 0) {
      return;
    }
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:c];
    b = (jbyte) ((JreRShift32(IOSByteArray_Get(bytes, i), 4)) & (jint) 0xf);
    if (b == (jint) 0xf && i + 1 == length + offset) {
      break;
    }
    c = AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(b);
    if (c == 0) {
      return;
    }
    [sb appendWithChar:c];
  }
}

NSString *AndroidTelephonyPhoneNumberUtils_calledPartyBCDFragmentToStringWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithInt_(length * 2);
  AndroidTelephonyPhoneNumberUtils_internalCalledPartyBCDFragmentToStringWithJavaLangStringBuilder_withByteArray_withInt_withInt_(ret, bytes, offset, length);
  return [ret description];
}

jchar AndroidTelephonyPhoneNumberUtils_bcdToCharWithByte_(jbyte b) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (b < (jint) 0xa) {
    return (jchar) ('0' + b);
  }
  else switch (b) {
    case (jint) 0xa:
    return '*';
    case (jint) 0xb:
    return '#';
    case (jint) 0xc:
    return AndroidTelephonyPhoneNumberUtils_PAUSE;
    case (jint) 0xd:
    return AndroidTelephonyPhoneNumberUtils_WILD;
    default:
    return 0;
  }
}

jint AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
  else if (c == '*') {
    return (jint) 0xa;
  }
  else if (c == '#') {
    return (jint) 0xb;
  }
  else if (c == AndroidTelephonyPhoneNumberUtils_PAUSE) {
    return (jint) 0xc;
  }
  else if (c == AndroidTelephonyPhoneNumberUtils_WILD) {
    return (jint) 0xd;
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$C", @"invalid char for BCD ", c));
  }
}

jboolean AndroidTelephonyPhoneNumberUtils_isWellFormedSmsAddressWithNSString_(NSString *address) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *networkPortion = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(address);
  return (!([((NSString *) nil_chk(networkPortion)) isEqual:@"+"] || AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(networkPortion))) && AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(networkPortion);
}

jboolean AndroidTelephonyPhoneNumberUtils_isGlobalPhoneNumberWithNSString_(NSString *phoneNumber) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(phoneNumber)) {
    return false;
  }
  JavaUtilRegexMatcher *match = [((JavaUtilRegexPattern *) nil_chk(AndroidTelephonyPhoneNumberUtils_GLOBAL_PHONE_NUMBER_PATTERN)) matcherWithJavaLangCharSequence:phoneNumber];
  return [((JavaUtilRegexMatcher *) nil_chk(match)) matches];
}

jboolean AndroidTelephonyPhoneNumberUtils_isDialableWithNSString_(NSString *address) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint i = 0, count = [((NSString *) nil_chk(address)) java_length]; i < count; i++) {
    if (!AndroidTelephonyPhoneNumberUtils_isDialableWithChar_([address charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

jboolean AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithNSString_(NSString *address) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint i = 0, count = [((NSString *) nil_chk(address)) java_length]; i < count; i++) {
    if (!AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_([address charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithNSString_(NSString *s) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *networkPortion = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(s);
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(networkPortion, false);
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_networkPortionToCalledPartyBCDWithLengthWithNSString_(NSString *s) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *networkPortion = AndroidTelephonyPhoneNumberUtils_extractNetworkPortionWithNSString_(s);
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(networkPortion, true);
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDWithNSString_(NSString *number) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(number, false);
}

IOSByteArray *AndroidTelephonyPhoneNumberUtils_numberToCalledPartyBCDHelperWithNSString_withBoolean_(NSString *number, jboolean includeLength) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint numberLenReal = [((NSString *) nil_chk(number)) java_length];
  jint numberLenEffective = numberLenReal;
  jboolean hasPlus = [number java_indexOf:'+'] != -1;
  if (hasPlus) numberLenEffective--;
  if (numberLenEffective == 0) return nil;
  jint resultLen = (numberLenEffective + 1) / 2;
  jint extraBytes = 1;
  if (includeLength) extraBytes++;
  resultLen += extraBytes;
  IOSByteArray *result = [IOSByteArray arrayWithLength:resultLen];
  jint digitCount = 0;
  for (jint i = 0; i < numberLenReal; i++) {
    jchar c = [number charAtWithInt:i];
    if (c == '+') continue;
    jint shift = ((digitCount & (jint) 0x01) == 1) ? 4 : 0;
    *IOSByteArray_GetRef(result, extraBytes + (JreRShift32(digitCount, 1))) |= (jbyte) (JreLShift32((AndroidTelephonyPhoneNumberUtils_charToBCDWithChar_(c) & (jint) 0x0F), shift));
    digitCount++;
  }
  if ((digitCount & (jint) 0x01) == 1) *IOSByteArray_GetRef(result, extraBytes + (JreRShift32(digitCount, 1))) |= (jint) 0xF0;
  jint offset = 0;
  if (includeLength) *IOSByteArray_GetRef(result, offset++) = (jbyte) (resultLen - 1);
  *IOSByteArray_GetRef(result, offset) = (jbyte) (hasPlus ? AndroidTelephonyPhoneNumberUtils_TOA_International : AndroidTelephonyPhoneNumberUtils_TOA_Unknown);
  return result;
}

NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_(NSString *source) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidTextSpannableStringBuilder *text = create_AndroidTextSpannableStringBuilder_initWithJavaLangCharSequence_(source);
  AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(text, AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(JavaUtilLocale_getDefault()));
  return [text description];
}

NSString *AndroidTelephonyPhoneNumberUtils_formatNumberWithNSString_withInt_(NSString *source, jint defaultFormattingType) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidTextSpannableStringBuilder *text = create_AndroidTextSpannableStringBuilder_initWithJavaLangCharSequence_(source);
  AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(text, defaultFormattingType);
  return [text description];
}

jint AndroidTelephonyPhoneNumberUtils_getFormatTypeForLocaleWithJavaUtilLocale_(JavaUtilLocale *locale) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *country = [((JavaUtilLocale *) nil_chk(locale)) getCountry];
  return AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(country);
}

void AndroidTelephonyPhoneNumberUtils_formatNumberWithAndroidTextEditable_withInt_(id<AndroidTextEditable> text, jint defaultFormattingType) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint formatType = defaultFormattingType;
  if ([((id<AndroidTextEditable>) nil_chk(text)) java_length] > 2 && [text charAtWithInt:0] == '+') {
    if ([text charAtWithInt:1] == '1') {
      formatType = AndroidTelephonyPhoneNumberUtils_FORMAT_NANP;
    }
    else if ([text java_length] >= 3 && [text charAtWithInt:1] == '8' && [text charAtWithInt:2] == '1') {
      formatType = AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN;
    }
    else {
      return;
    }
  }
  switch (formatType) {
    case AndroidTelephonyPhoneNumberUtils_FORMAT_NANP:
    AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(text);
    return;
    case AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN:
    AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(text);
    return;
  }
}

void AndroidTelephonyPhoneNumberUtils_formatNanpNumberWithAndroidTextEditable_(id<AndroidTextEditable> text) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint length = [((id<AndroidTextEditable>) nil_chk(text)) java_length];
  if (length > [@"+1-nnn-nnn-nnnn" java_length]) {
    return;
  }
  else if (length <= 5) {
    return;
  }
  id<JavaLangCharSequence> saved = [text subSequenceFrom:0 to:length];
  jint p = 0;
  while (p < [text java_length]) {
    if ([text charAtWithInt:p] == '-') {
      [text delete__WithInt:p withInt:p + 1];
    }
    else {
      p++;
    }
  }
  length = [text java_length];
  IOSIntArray *dashPositions = [IOSIntArray arrayWithLength:3];
  jint numDashes = 0;
  jint state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT;
  jint numDigits = 0;
  for (jint i = 0; i < length; i++) {
    jchar c = [text charAtWithInt:i];
    switch (c) {
      case '1':
      if (numDigits == 0 || state == AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS) {
        state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE;
        break;
      }
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '0':
      if (state == AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS) {
        [text replaceWithInt:0 withInt:length withJavaLangCharSequence:saved];
        return;
      }
      else if (state == AndroidTelephonyPhoneNumberUtils_NANP_STATE_ONE) {
        *IOSIntArray_GetRef(dashPositions, numDashes++) = i;
      }
      else if (state != AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH && (numDigits == 3 || numDigits == 6)) {
        *IOSIntArray_GetRef(dashPositions, numDashes++) = i;
      }
      state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DIGIT;
      numDigits++;
      break;
      case '-':
      state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_DASH;
      break;
      case '+':
      if (i == 0) {
        state = AndroidTelephonyPhoneNumberUtils_NANP_STATE_PLUS;
        break;
      }
      default:
      [text replaceWithInt:0 withInt:length withJavaLangCharSequence:saved];
      return;
    }
  }
  if (numDigits == 7) {
    numDashes--;
  }
  for (jint i = 0; i < numDashes; i++) {
    jint pos = IOSIntArray_Get(dashPositions, i);
    [text replaceWithInt:pos + i withInt:pos + i withJavaLangCharSequence:@"-"];
  }
  jint len = [text java_length];
  while (len > 0) {
    if ([text charAtWithInt:len - 1] == '-') {
      [text delete__WithInt:len - 1 withInt:len];
      len--;
    }
    else {
      break;
    }
  }
}

void AndroidTelephonyPhoneNumberUtils_formatJapaneseNumberWithAndroidTextEditable_(id<AndroidTextEditable> text) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  AndroidTelephonyJapanesePhoneNumberFormatter_formatWithAndroidTextEditable_(text);
}

NSString *AndroidTelephonyPhoneNumberUtils_convertKeypadLettersToDigitsWithNSString_(NSString *input) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (input == nil) {
    return input;
  }
  jint len = [input java_length];
  if (len == 0) {
    return input;
  }
  IOSCharArray *out = [input java_toCharArray];
  for (jint i = 0; i < len; i++) {
    jchar c = IOSCharArray_Get(nil_chk(out), i);
    *IOSCharArray_GetRef(out, i) = (jchar) [((AndroidUtilSparseIntArray *) nil_chk(AndroidTelephonyPhoneNumberUtils_KEYPAD_MAP)) getWithInt:c withInt:c];
  }
  return [NSString java_stringWithCharacters:out];
}

jboolean AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_(jchar c) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if (c >= '2' && c <= '9') {
    return true;
  }
  else {
    return false;
  }
}

jint AndroidTelephonyPhoneNumberUtils_getFormatTypeFromCountryCodeWithNSString_(NSString *country) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint length = ((IOSObjectArray *) nil_chk(AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(AndroidTelephonyPhoneNumberUtils_NANP_COUNTRIES, i))) java_compareToIgnoreCase:country] == 0) {
      return AndroidTelephonyPhoneNumberUtils_FORMAT_NANP;
    }
  }
  if ([@"jp" java_compareToIgnoreCase:country] == 0) {
    return AndroidTelephonyPhoneNumberUtils_FORMAT_JAPAN;
  }
  return AndroidTelephonyPhoneNumberUtils_FORMAT_UNKNOWN;
}

jboolean AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(NSString *dialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean retVal = false;
  if (dialStr != nil) {
    if ([dialStr java_length] == AndroidTelephonyPhoneNumberUtils_NANP_LENGTH) {
      if (AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_([dialStr charAtWithInt:0]) && AndroidTelephonyPhoneNumberUtils_isTwoToNineWithChar_([dialStr charAtWithInt:3])) {
        retVal = true;
        for (jint i = 1; i < AndroidTelephonyPhoneNumberUtils_NANP_LENGTH; i++) {
          jchar c = [dialStr charAtWithInt:i];
          if (!AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c)) {
            retVal = false;
            break;
          }
        }
      }
    }
  }
  else {
    AndroidUtilLog_eWithNSString_withNSString_(@"isNanp: null dialStr passed in", dialStr);
  }
  return retVal;
}

jboolean AndroidTelephonyPhoneNumberUtils_isOneNanpWithNSString_(NSString *dialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean retVal = false;
  if (dialStr != nil) {
    NSString *newDialStr = [dialStr java_substring:1];
    if (([dialStr charAtWithInt:0] == '1') && AndroidTelephonyPhoneNumberUtils_isNanpWithNSString_(newDialStr)) {
      retVal = true;
    }
  }
  else {
    AndroidUtilLog_eWithNSString_withNSString_(@"isOneNanp: null dialStr passed in", dialStr);
  }
  return retVal;
}

jboolean AndroidTelephonyPhoneNumberUtils_isUriNumberWithNSString_(NSString *number) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return number != nil && ([number java_contains:@"@"] || [number java_contains:@"%40"]);
}

jint AndroidTelephonyPhoneNumberUtils_findDialableIndexFromPostDialStrWithNSString_(NSString *postDialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  for (jint index = 0; index < [((NSString *) nil_chk(postDialStr)) java_length]; index++) {
    jchar c = [postDialStr charAtWithInt:index];
    if (AndroidTelephonyPhoneNumberUtils_isReallyDialableWithChar_(c)) {
      return index;
    }
  }
  return -1;
}

NSString *AndroidTelephonyPhoneNumberUtils_appendPwCharBackToOrigDialStrWithInt_withNSString_withNSString_(jint dialableIndex, NSString *origStr, NSString *dialStr) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  NSString *retStr;
  if (dialableIndex == 1) {
    JavaLangStringBuilder *ret = create_JavaLangStringBuilder_initWithNSString_(origStr);
    ret = [ret appendWithChar:[((NSString *) nil_chk(dialStr)) charAtWithInt:0]];
    retStr = [((JavaLangStringBuilder *) nil_chk(ret)) description];
  }
  else {
    NSString *nonDigitStr = [((NSString *) nil_chk(dialStr)) java_substring:0 endIndex:dialableIndex];
    retStr = [((NSString *) nil_chk(origStr)) java_concat:nonDigitStr];
  }
  return retStr;
}

jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixWithNSString_withInt_(NSString *a, jint len) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint state = 0;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(a)) charAtWithInt:i];
    switch (state) {
      case 0:
      if (c == '+') state = 1;
      else if (c == '0') state = 2;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 2:
      if (c == '0') state = 3;
      else if (c == '1') state = 4;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 4:
      if (c == '1') state = 5;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      default:
      if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
    }
  }
  return state == 1 || state == 3 || state == 5;
}

jboolean AndroidTelephonyPhoneNumberUtils_matchIntlPrefixAndCCWithNSString_withInt_(NSString *a, jint len) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint state = 0;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(a)) charAtWithInt:i];
    switch (state) {
      case 0:
      if (c == '+') state = 1;
      else if (c == '0') state = 2;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 2:
      if (c == '0') state = 3;
      else if (c == '1') state = 4;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 4:
      if (c == '1') state = 5;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 1:
      case 3:
      case 5:
      if (AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c)) state = 6;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      case 6:
      case 7:
      if (AndroidTelephonyPhoneNumberUtils_isISODigitWithChar_(c)) state++;
      else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
      break;
      default:
      if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) return false;
    }
  }
  return state == 6 || state == 7 || state == 8;
}

jboolean AndroidTelephonyPhoneNumberUtils_matchTrunkPrefixWithNSString_withInt_(NSString *a, jint len) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean found;
  found = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(a)) charAtWithInt:i];
    if (c == '0' && !found) {
      found = true;
    }
    else if (AndroidTelephonyPhoneNumberUtils_isNonSeparatorWithChar_(c)) {
      return false;
    }
  }
  return found;
}

jboolean AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(jint countryCallingCodeCandidate) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  return countryCallingCodeCandidate > 0 && countryCallingCodeCandidate < AndroidTelephonyPhoneNumberUtils_CCC_LENGTH && IOSBooleanArray_Get(nil_chk(AndroidTelephonyPhoneNumberUtils_COUNTLY_CALLING_CALL), countryCallingCodeCandidate);
}

jint AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(jchar ch) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  if ('0' <= ch && ch <= '9') {
    return ch - '0';
  }
  else {
    return -1;
  }
}

AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *AndroidTelephonyPhoneNumberUtils_tryGetCountryCallingCodeAndNewIndexWithNSString_withBoolean_(NSString *str, jboolean acceptThailandCase) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint state = 0;
  jint ccc = 0;
  jint length = [((NSString *) nil_chk(str)) java_length];
  for (jint i = 0; i < length; i++) {
    jchar ch = [str charAtWithInt:i];
    switch (state) {
      case 0:
      if (ch == '+') state = 1;
      else if (ch == '0') state = 2;
      else if (ch == '1') {
        if (acceptThailandCase) {
          state = 8;
        }
        else {
          return nil;
        }
      }
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 2:
      if (ch == '0') state = 3;
      else if (ch == '1') state = 4;
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 4:
      if (ch == '1') state = 5;
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 1:
      case 3:
      case 5:
      case 6:
      case 7:
      {
        jint ret = AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(ch);
        if (ret > 0) {
          ccc = ccc * 10 + ret;
          if (ccc >= 100 || AndroidTelephonyPhoneNumberUtils_isCountryCallingCodeWithInt_(ccc)) {
            return create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(ccc, i + 1);
          }
          if (state == 1 || state == 3 || state == 5) {
            state = 6;
          }
          else {
            state++;
          }
        }
        else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
          return nil;
        }
      }
      break;
      case 8:
      if (ch == '6') state = 9;
      else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
        return nil;
      }
      break;
      case 9:
      if (ch == '6') {
        return create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(66, i + 1);
      }
      else {
        return nil;
      }
      default:
      return nil;
    }
  }
  return nil;
}

jint AndroidTelephonyPhoneNumberUtils_tryGetTrunkPrefixOmittedIndexWithNSString_withInt_(NSString *str, jint currentIndex) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jint length = [((NSString *) nil_chk(str)) java_length];
  for (jint i = currentIndex; i < length; i++) {
    jchar ch = [str charAtWithInt:i];
    if (AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_(ch) >= 0) {
      return i + 1;
    }
    else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_(ch)) {
      return -1;
    }
  }
  return -1;
}

jboolean AndroidTelephonyPhoneNumberUtils_checkPrefixIsIgnorableWithNSString_withInt_withInt_(NSString *str, jint forwardIndex, jint backwardIndex) {
  AndroidTelephonyPhoneNumberUtils_initialize();
  jboolean trunk_prefix_was_read = false;
  while (backwardIndex >= forwardIndex) {
    if (AndroidTelephonyPhoneNumberUtils_tryGetISODigitWithChar_([((NSString *) nil_chk(str)) charAtWithInt:backwardIndex]) >= 0) {
      if (trunk_prefix_was_read) {
        return false;
      }
      else {
        trunk_prefix_was_read = true;
      }
    }
    else if (AndroidTelephonyPhoneNumberUtils_isDialableWithChar_([str charAtWithInt:backwardIndex])) {
      return false;
    }
    backwardIndex--;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidTelephonyPhoneNumberUtils)

@implementation AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex

- (instancetype __nonnull)initWithInt:(jint)countryCode
                              withInt:(jint)newIndex {
  AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(self, countryCode, newIndex);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "countryCallingCode_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "newIndex_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LAndroidTelephonyPhoneNumberUtils;" };
  static const J2ObjcClassInfo _AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex = { "CountryCallingCodeAndNewIndex", "android.telephony", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex;
}

@end

void AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *self, jint countryCode, jint newIndex) {
  NSObject_init(self);
  self->countryCallingCode_ = countryCode;
  self->newIndex_ = newIndex;
}

AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *new_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex) {
  J2OBJC_NEW_IMPL(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex, initWithInt_withInt_, countryCode, newIndex)
}

AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex *create_AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex_initWithInt_withInt_(jint countryCode, jint newIndex) {
  J2OBJC_CREATE_IMPL(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex, initWithInt_withInt_, countryCode, newIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidTelephonyPhoneNumberUtils_CountryCallingCodeAndNewIndex)

J2OBJC_INITIALIZED_DEFN(AndroidUtilEmptyArray)

IOSBooleanArray *AndroidUtilEmptyArray_BOOLEAN;
IOSByteArray *AndroidUtilEmptyArray_BYTE;
IOSCharArray *AndroidUtilEmptyArray_CHAR;
IOSDoubleArray *AndroidUtilEmptyArray_DOUBLE;
IOSIntArray *AndroidUtilEmptyArray_INT;
IOSLongArray *AndroidUtilEmptyArray_LONG;
IOSObjectArray *AndroidUtilEmptyArray_CLASS;
IOSObjectArray *AndroidUtilEmptyArray_OBJECT;
IOSObjectArray *AndroidUtilEmptyArray_STRING;
IOSObjectArray *AndroidUtilEmptyArray_THROWABLE;
IOSObjectArray *AndroidUtilEmptyArray_STACK_TRACE_ELEMENT;
IOSObjectArray *AndroidUtilEmptyArray_TYPE;
IOSObjectArray *AndroidUtilEmptyArray_TYPE_VARIABLE;

@implementation AndroidUtilEmptyArray

+ (IOSBooleanArray *)BOOLEAN {
  return AndroidUtilEmptyArray_BOOLEAN;
}

+ (IOSByteArray *)BYTE {
  return AndroidUtilEmptyArray_BYTE;
}

+ (IOSCharArray *)CHAR {
  return AndroidUtilEmptyArray_CHAR;
}

+ (IOSDoubleArray *)DOUBLE {
  return AndroidUtilEmptyArray_DOUBLE;
}

+ (IOSIntArray *)INT {
  return AndroidUtilEmptyArray_INT;
}

+ (IOSLongArray *)LONG {
  return AndroidUtilEmptyArray_LONG;
}

+ (IOSObjectArray *)CLASS {
  return AndroidUtilEmptyArray_CLASS;
}

+ (IOSObjectArray *)OBJECT {
  return AndroidUtilEmptyArray_OBJECT;
}

+ (IOSObjectArray *)STRING {
  return AndroidUtilEmptyArray_STRING;
}

+ (IOSObjectArray *)THROWABLE {
  return AndroidUtilEmptyArray_THROWABLE;
}

+ (IOSObjectArray *)STACK_TRACE_ELEMENT {
  return AndroidUtilEmptyArray_STACK_TRACE_ELEMENT;
}

+ (IOSObjectArray *)TYPE {
  return AndroidUtilEmptyArray_TYPE;
}

+ (IOSObjectArray *)TYPE_VARIABLE {
  return AndroidUtilEmptyArray_TYPE_VARIABLE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilEmptyArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BOOLEAN", "[Z", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "BYTE", "[B", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "CHAR", "[C", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "DOUBLE", "[D", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "INT", "[I", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "LONG", "[J", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "CLASS", "[LIOSClass;", .constantValue.asLong = 0, 0x19, -1, 6, 7, -1 },
    { "OBJECT", "[LNSObject;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "STRING", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "THROWABLE", "[LJavaLangThrowable;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "STACK_TRACE_ELEMENT", "[LJavaLangStackTraceElement;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "TYPE", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "TYPE_VARIABLE", "[LJavaLangReflectTypeVariable;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { &AndroidUtilEmptyArray_BOOLEAN, &AndroidUtilEmptyArray_BYTE, &AndroidUtilEmptyArray_CHAR, &AndroidUtilEmptyArray_DOUBLE, &AndroidUtilEmptyArray_INT, &AndroidUtilEmptyArray_LONG, &AndroidUtilEmptyArray_CLASS, "[Ljava/lang/Class<*>;", &AndroidUtilEmptyArray_OBJECT, &AndroidUtilEmptyArray_STRING, &AndroidUtilEmptyArray_THROWABLE, &AndroidUtilEmptyArray_STACK_TRACE_ELEMENT, &AndroidUtilEmptyArray_TYPE, &AndroidUtilEmptyArray_TYPE_VARIABLE };
  static const J2ObjcClassInfo _AndroidUtilEmptyArray = { "EmptyArray", "android.util", ptrTable, methods, fields, 7, 0x11, 1, 13, -1, -1, -1, -1, -1 };
  return &_AndroidUtilEmptyArray;
}

+ (void)initialize {
  if (self == [AndroidUtilEmptyArray class]) {
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_BOOLEAN, [IOSBooleanArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_BYTE, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_CHAR, [IOSCharArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_DOUBLE, [IOSDoubleArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_INT, [IOSIntArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_LONG, [IOSLongArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_CLASS, [IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_OBJECT, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_STRING, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_THROWABLE, [IOSObjectArray newArrayWithLength:0 type:JavaLangThrowable_class_()]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_STACK_TRACE_ELEMENT, [IOSObjectArray newArrayWithLength:0 type:JavaLangStackTraceElement_class_()]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_TYPE, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectType_class_()]);
    JreStrongAssignAndConsume(&AndroidUtilEmptyArray_TYPE_VARIABLE, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectTypeVariable_class_()]);
    J2OBJC_SET_INITIALIZED(AndroidUtilEmptyArray)
  }
}

@end

void AndroidUtilEmptyArray_init(AndroidUtilEmptyArray *self) {
  NSObject_init(self);
}

AndroidUtilEmptyArray *new_AndroidUtilEmptyArray_init() {
  J2OBJC_NEW_IMPL(AndroidUtilEmptyArray, init)
}

AndroidUtilEmptyArray *create_AndroidUtilEmptyArray_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilEmptyArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilEmptyArray)

@implementation AndroidUtilJsonReader

- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)inArg {
  AndroidUtilJsonReader_initWithJavaIoReader_(self, inArg);
  return self;
}

- (void)setLenientWithBoolean:(jboolean)lenient {
  self->lenient_ = lenient;
}

- (jboolean)isLenient {
  return lenient_;
}

- (void)beginArray {
  AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(self, JreLoadEnum(AndroidUtilJsonToken, BEGIN_ARRAY));
}

- (void)endArray {
  AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(self, JreLoadEnum(AndroidUtilJsonToken, END_ARRAY));
}

- (void)beginObject {
  AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(self, JreLoadEnum(AndroidUtilJsonToken, BEGIN_OBJECT));
}

- (void)endObject {
  AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(self, JreLoadEnum(AndroidUtilJsonToken, END_OBJECT));
}

- (void)expectWithAndroidUtilJsonToken:(AndroidUtilJsonToken *)expected {
  AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(self, expected);
}

- (jboolean)hasNext {
  [self peek];
  return token_ != JreLoadEnum(AndroidUtilJsonToken, END_OBJECT) && token_ != JreLoadEnum(AndroidUtilJsonToken, END_ARRAY);
}

- (AndroidUtilJsonToken *)peek {
  if (token_ != nil) {
    return token_;
  }
  {
    AndroidUtilJsonToken *firstToken;
    switch ([AndroidUtilJsonReader_peekStack(self) ordinal]) {
      case AndroidUtilJsonScope_Enum_EMPTY_DOCUMENT:
      AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_DOCUMENT));
      firstToken = AndroidUtilJsonReader_nextValue(self);
      if (!lenient_ && token_ != JreLoadEnum(AndroidUtilJsonToken, BEGIN_ARRAY) && token_ != JreLoadEnum(AndroidUtilJsonToken, BEGIN_OBJECT)) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Expected JSON document to start with '[' or '{' but was ", token_));
      }
      return firstToken;
      case AndroidUtilJsonScope_Enum_EMPTY_ARRAY:
      return AndroidUtilJsonReader_nextInArrayWithBoolean_(self, true);
      case AndroidUtilJsonScope_Enum_NONEMPTY_ARRAY:
      return AndroidUtilJsonReader_nextInArrayWithBoolean_(self, false);
      case AndroidUtilJsonScope_Enum_EMPTY_OBJECT:
      return AndroidUtilJsonReader_nextInObjectWithBoolean_(self, true);
      case AndroidUtilJsonScope_Enum_DANGLING_NAME:
      return AndroidUtilJsonReader_objectValue(self);
      case AndroidUtilJsonScope_Enum_NONEMPTY_OBJECT:
      return AndroidUtilJsonReader_nextInObjectWithBoolean_(self, false);
      case AndroidUtilJsonScope_Enum_NONEMPTY_DOCUMENT:
      @try {
        AndroidUtilJsonToken *token = AndroidUtilJsonReader_nextValue(self);
        if (lenient_) {
          return token;
        }
        @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Expected EOF"));
      }
      @catch (JavaIoEOFException *e) {
        return JreStrongAssign(&token_, JreLoadEnum(AndroidUtilJsonToken, END_DOCUMENT));
      }
      case AndroidUtilJsonScope_Enum_CLOSED:
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"JsonReader is closed");
      default:
      @throw create_JavaLangAssertionError_init();
    }
  }
}

- (AndroidUtilJsonToken *)advance {
  return AndroidUtilJsonReader_advance(self);
}

- (NSString *)nextName {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, NAME)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected a name but was ", [self peek]));
  }
  NSString *result = name_;
  AndroidUtilJsonReader_advance(self);
  return result;
}

- (NSString *)nextString {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, STRING) && token_ != JreLoadEnum(AndroidUtilJsonToken, NUMBER)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected a string but was ", [self peek]));
  }
  NSString *result = value_;
  AndroidUtilJsonReader_advance(self);
  return result;
}

- (jboolean)nextBoolean {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, BOOLEAN)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected a boolean but was ", token_));
  }
  jboolean result = value_ == AndroidUtilJsonReader_TRUE;
  AndroidUtilJsonReader_advance(self);
  return result;
}

- (void)nextNull {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, NULL)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected null but was ", token_));
  }
  AndroidUtilJsonReader_advance(self);
}

- (jdouble)nextDouble {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, STRING) && token_ != JreLoadEnum(AndroidUtilJsonToken, NUMBER)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected a double but was ", token_));
  }
  jdouble result = JavaLangDouble_parseDoubleWithNSString_(value_);
  AndroidUtilJsonReader_advance(self);
  return result;
}

- (jlong)nextLong {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, STRING) && token_ != JreLoadEnum(AndroidUtilJsonToken, NUMBER)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected a long but was ", token_));
  }
  jlong result;
  @try {
    result = JavaLangLong_parseLongWithNSString_(value_);
  }
  @catch (JavaLangNumberFormatException *ignored) {
    jdouble asDouble = JavaLangDouble_parseDoubleWithNSString_(value_);
    result = JreFpToLong(asDouble);
    if ((jdouble) result != asDouble) {
      @throw create_JavaLangNumberFormatException_initWithNSString_(value_);
    }
  }
  AndroidUtilJsonReader_advance(self);
  return result;
}

- (jint)nextInt {
  [self peek];
  if (token_ != JreLoadEnum(AndroidUtilJsonToken, STRING) && token_ != JreLoadEnum(AndroidUtilJsonToken, NUMBER)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected an int but was ", token_));
  }
  jint result;
  @try {
    result = JavaLangInteger_parseIntWithNSString_(value_);
  }
  @catch (JavaLangNumberFormatException *ignored) {
    jdouble asDouble = JavaLangDouble_parseDoubleWithNSString_(value_);
    result = JreFpToInt(asDouble);
    if ((jdouble) result != asDouble) {
      @throw create_JavaLangNumberFormatException_initWithNSString_(value_);
    }
  }
  AndroidUtilJsonReader_advance(self);
  return result;
}

- (void)close {
  JreStrongAssign(&value_, nil);
  JreStrongAssign(&token_, nil);
  [((id<JavaUtilList>) nil_chk(stack_)) clear];
  [stack_ addWithId:JreLoadEnum(AndroidUtilJsonScope, CLOSED)];
  [((JavaIoReader *) nil_chk(in_)) close];
}

- (void)skipValue {
  skipping_ = true;
  @try {
    jint count = 0;
    do {
      AndroidUtilJsonToken *token = AndroidUtilJsonReader_advance(self);
      if (token == JreLoadEnum(AndroidUtilJsonToken, BEGIN_ARRAY) || token == JreLoadEnum(AndroidUtilJsonToken, BEGIN_OBJECT)) {
        count++;
      }
      else if (token == JreLoadEnum(AndroidUtilJsonToken, END_ARRAY) || token == JreLoadEnum(AndroidUtilJsonToken, END_OBJECT)) {
        count--;
      }
    }
    while (count != 0);
  }
  @finally {
    skipping_ = false;
  }
}

- (AndroidUtilJsonScope *)peekStack {
  return AndroidUtilJsonReader_peekStack(self);
}

- (AndroidUtilJsonScope *)pop {
  return AndroidUtilJsonReader_pop(self);
}

- (void)pushWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)newTop {
  AndroidUtilJsonReader_pushWithAndroidUtilJsonScope_(self, newTop);
}

- (void)replaceTopWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)newTop {
  AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(self, newTop);
}

- (AndroidUtilJsonToken *)nextInArrayWithBoolean:(jboolean)firstElement {
  return AndroidUtilJsonReader_nextInArrayWithBoolean_(self, firstElement);
}

- (AndroidUtilJsonToken *)nextInObjectWithBoolean:(jboolean)firstElement {
  return AndroidUtilJsonReader_nextInObjectWithBoolean_(self, firstElement);
}

- (AndroidUtilJsonToken *)objectValue {
  return AndroidUtilJsonReader_objectValue(self);
}

- (AndroidUtilJsonToken *)nextValue {
  return AndroidUtilJsonReader_nextValue(self);
}

- (jboolean)fillBufferWithInt:(jint)minimum {
  return AndroidUtilJsonReader_fillBufferWithInt_(self, minimum);
}

- (jint)getLineNumber {
  return AndroidUtilJsonReader_getLineNumber(self);
}

- (jint)getColumnNumber {
  return AndroidUtilJsonReader_getColumnNumber(self);
}

- (jint)nextNonWhitespace {
  return AndroidUtilJsonReader_nextNonWhitespace(self);
}

- (void)checkLenient {
  AndroidUtilJsonReader_checkLenient(self);
}

- (void)skipToEndOfLine {
  AndroidUtilJsonReader_skipToEndOfLine(self);
}

- (jboolean)skipToWithNSString:(NSString *)toFind {
  return AndroidUtilJsonReader_skipToWithNSString_(self, toFind);
}

- (NSString *)nextStringWithChar:(jchar)quote {
  return AndroidUtilJsonReader_nextStringWithChar_(self, quote);
}

- (NSString *)nextLiteralWithBoolean:(jboolean)assignOffsetsOnly {
  return AndroidUtilJsonReader_nextLiteralWithBoolean_(self, assignOffsetsOnly);
}

- (NSString *)description {
  return JreStrcat("$$@", [[self java_getClass] getSimpleName], @" near ", AndroidUtilJsonReader_getSnippet(self));
}

- (jchar)readEscapeCharacter {
  return AndroidUtilJsonReader_readEscapeCharacter(self);
}

- (AndroidUtilJsonToken *)readLiteral {
  return AndroidUtilJsonReader_readLiteral(self);
}

- (AndroidUtilJsonToken *)decodeLiteral {
  return AndroidUtilJsonReader_decodeLiteral(self);
}

- (AndroidUtilJsonToken *)decodeNumberWithCharArray:(IOSCharArray *)chars
                                            withInt:(jint)offset
                                            withInt:(jint)length {
  return AndroidUtilJsonReader_decodeNumberWithCharArray_withInt_withInt_(self, chars, offset, length);
}

- (JavaIoIOException *)syntaxErrorWithNSString:(NSString *)message {
  return AndroidUtilJsonReader_syntaxErrorWithNSString_(self, message);
}

- (id<JavaLangCharSequence>)getSnippet {
  return AndroidUtilJsonReader_getSnippet(self);
}

- (void)dealloc {
  RELEASE_(stringPool_);
  RELEASE_(in_);
  RELEASE_(buffer_);
  RELEASE_(stack_);
  RELEASE_(token_);
  RELEASE_(name_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonScope;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonScope;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, 9, 2, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, 10, 2, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, 3, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 14, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 15, 16, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 17, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x2, 21, 14, 3, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(setLenientWithBoolean:);
  methods[2].selector = @selector(isLenient);
  methods[3].selector = @selector(beginArray);
  methods[4].selector = @selector(endArray);
  methods[5].selector = @selector(beginObject);
  methods[6].selector = @selector(endObject);
  methods[7].selector = @selector(expectWithAndroidUtilJsonToken:);
  methods[8].selector = @selector(hasNext);
  methods[9].selector = @selector(peek);
  methods[10].selector = @selector(advance);
  methods[11].selector = @selector(nextName);
  methods[12].selector = @selector(nextString);
  methods[13].selector = @selector(nextBoolean);
  methods[14].selector = @selector(nextNull);
  methods[15].selector = @selector(nextDouble);
  methods[16].selector = @selector(nextLong);
  methods[17].selector = @selector(nextInt);
  methods[18].selector = @selector(close);
  methods[19].selector = @selector(skipValue);
  methods[20].selector = @selector(peekStack);
  methods[21].selector = @selector(pop);
  methods[22].selector = @selector(pushWithAndroidUtilJsonScope:);
  methods[23].selector = @selector(replaceTopWithAndroidUtilJsonScope:);
  methods[24].selector = @selector(nextInArrayWithBoolean:);
  methods[25].selector = @selector(nextInObjectWithBoolean:);
  methods[26].selector = @selector(objectValue);
  methods[27].selector = @selector(nextValue);
  methods[28].selector = @selector(fillBufferWithInt:);
  methods[29].selector = @selector(getLineNumber);
  methods[30].selector = @selector(getColumnNumber);
  methods[31].selector = @selector(nextNonWhitespace);
  methods[32].selector = @selector(checkLenient);
  methods[33].selector = @selector(skipToEndOfLine);
  methods[34].selector = @selector(skipToWithNSString:);
  methods[35].selector = @selector(nextStringWithChar:);
  methods[36].selector = @selector(nextLiteralWithBoolean:);
  methods[37].selector = @selector(description);
  methods[38].selector = @selector(readEscapeCharacter);
  methods[39].selector = @selector(readLiteral);
  methods[40].selector = @selector(decodeLiteral);
  methods[41].selector = @selector(decodeNumberWithCharArray:withInt:withInt:);
  methods[42].selector = @selector(syntaxErrorWithNSString:);
  methods[43].selector = @selector(getSnippet);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "FALSE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "stringPool_", "LLibcoreInternalStringPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "in_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lenient_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferStartLine_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferStartColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stack_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
    { "token_", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "valuePos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "valueLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "setLenient", "Z", "LJavaIoIOException;", "expect", "LAndroidUtilJsonToken;", "push", "LAndroidUtilJsonScope;", "replaceTop", "nextInArray", "nextInObject", "fillBuffer", "I", "skipTo", "LNSString;", "nextString", "C", "nextLiteral", "toString", "decodeNumber", "[CII", "syntaxError", &AndroidUtilJsonReader_TRUE, &AndroidUtilJsonReader_FALSE, "Ljava/util/List<Landroid/util/JsonScope;>;" };
  static const J2ObjcClassInfo _AndroidUtilJsonReader = { "JsonReader", "android.util", ptrTable, methods, fields, 7, 0x11, 44, 17, -1, -1, -1, -1, -1 };
  return &_AndroidUtilJsonReader;
}

@end

void AndroidUtilJsonReader_initWithJavaIoReader_(AndroidUtilJsonReader *self, JavaIoReader *inArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stringPool_, new_LibcoreInternalStringPool_init());
  self->lenient_ = false;
  JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:1024]);
  self->pos_ = 0;
  self->limit_ = 0;
  self->bufferStartLine_ = 1;
  self->bufferStartColumn_ = 1;
  JreStrongAssignAndConsume(&self->stack_, new_JavaUtilArrayList_init());
  {
    AndroidUtilJsonReader_pushWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_DOCUMENT));
  }
  self->skipping_ = false;
  if (inArg == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"in == null");
  }
  JreStrongAssign(&self->in_, inArg);
}

AndroidUtilJsonReader *new_AndroidUtilJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(AndroidUtilJsonReader, initWithJavaIoReader_, inArg)
}

AndroidUtilJsonReader *create_AndroidUtilJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(AndroidUtilJsonReader, initWithJavaIoReader_, inArg)
}

void AndroidUtilJsonReader_expectWithAndroidUtilJsonToken_(AndroidUtilJsonReader *self, AndroidUtilJsonToken *expected) {
  [self peek];
  if (self->token_ != expected) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"Expected ", expected, @" but was ", [self peek]));
  }
  AndroidUtilJsonReader_advance(self);
}

AndroidUtilJsonToken *AndroidUtilJsonReader_advance(AndroidUtilJsonReader *self) {
  [self peek];
  AndroidUtilJsonToken *result = self->token_;
  JreStrongAssign(&self->token_, nil);
  JreStrongAssign(&self->value_, nil);
  JreStrongAssign(&self->name_, nil);
  return result;
}

AndroidUtilJsonScope *AndroidUtilJsonReader_peekStack(AndroidUtilJsonReader *self) {
  return [((id<JavaUtilList>) nil_chk(self->stack_)) getWithInt:[self->stack_ size] - 1];
}

AndroidUtilJsonScope *AndroidUtilJsonReader_pop(AndroidUtilJsonReader *self) {
  return [((id<JavaUtilList>) nil_chk(self->stack_)) removeWithInt:[self->stack_ size] - 1];
}

void AndroidUtilJsonReader_pushWithAndroidUtilJsonScope_(AndroidUtilJsonReader *self, AndroidUtilJsonScope *newTop) {
  [((id<JavaUtilList>) nil_chk(self->stack_)) addWithId:newTop];
}

void AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(AndroidUtilJsonReader *self, AndroidUtilJsonScope *newTop) {
  [((id<JavaUtilList>) nil_chk(self->stack_)) setWithInt:[self->stack_ size] - 1 withId:newTop];
}

AndroidUtilJsonToken *AndroidUtilJsonReader_nextInArrayWithBoolean_(AndroidUtilJsonReader *self, jboolean firstElement) {
  if (firstElement) {
    AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_ARRAY));
  }
  else {
    switch (AndroidUtilJsonReader_nextNonWhitespace(self)) {
      case ']':
      AndroidUtilJsonReader_pop(self);
      return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, END_ARRAY));
      case ';':
      AndroidUtilJsonReader_checkLenient(self);
      case ',':
      break;
      default:
      @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Unterminated array"));
    }
  }
  switch (AndroidUtilJsonReader_nextNonWhitespace(self)) {
    case ']':
    if (firstElement) {
      AndroidUtilJsonReader_pop(self);
      return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, END_ARRAY));
    }
    case ';':
    case ',':
    AndroidUtilJsonReader_checkLenient(self);
    self->pos_--;
    JreStrongAssign(&self->value_, @"null");
    return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, NULL));
    default:
    self->pos_--;
    return AndroidUtilJsonReader_nextValue(self);
  }
}

AndroidUtilJsonToken *AndroidUtilJsonReader_nextInObjectWithBoolean_(AndroidUtilJsonReader *self, jboolean firstElement) {
  if (firstElement) {
    switch (AndroidUtilJsonReader_nextNonWhitespace(self)) {
      case '}':
      AndroidUtilJsonReader_pop(self);
      return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, END_OBJECT));
      default:
      self->pos_--;
    }
  }
  else {
    switch (AndroidUtilJsonReader_nextNonWhitespace(self)) {
      case '}':
      AndroidUtilJsonReader_pop(self);
      return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, END_OBJECT));
      case ';':
      case ',':
      break;
      default:
      @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Unterminated object"));
    }
  }
  jint quote = AndroidUtilJsonReader_nextNonWhitespace(self);
  switch (quote) {
    case '\'':
    AndroidUtilJsonReader_checkLenient(self);
    case '"':
    JreStrongAssign(&self->name_, AndroidUtilJsonReader_nextStringWithChar_(self, (jchar) quote));
    break;
    default:
    AndroidUtilJsonReader_checkLenient(self);
    self->pos_--;
    JreStrongAssign(&self->name_, AndroidUtilJsonReader_nextLiteralWithBoolean_(self, false));
    if ([((NSString *) nil_chk(self->name_)) java_isEmpty]) {
      @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Expected name"));
    }
  }
  AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, DANGLING_NAME));
  return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, NAME));
}

AndroidUtilJsonToken *AndroidUtilJsonReader_objectValue(AndroidUtilJsonReader *self) {
  switch (AndroidUtilJsonReader_nextNonWhitespace(self)) {
    case ':':
    break;
    case '=':
    AndroidUtilJsonReader_checkLenient(self);
    if ((self->pos_ < self->limit_ || AndroidUtilJsonReader_fillBufferWithInt_(self, 1)) && IOSCharArray_Get(nil_chk(self->buffer_), self->pos_) == '>') {
      self->pos_++;
    }
    break;
    default:
    @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Expected ':'"));
  }
  AndroidUtilJsonReader_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_OBJECT));
  return AndroidUtilJsonReader_nextValue(self);
}

AndroidUtilJsonToken *AndroidUtilJsonReader_nextValue(AndroidUtilJsonReader *self) {
  jint c = AndroidUtilJsonReader_nextNonWhitespace(self);
  switch (c) {
    case '{':
    AndroidUtilJsonReader_pushWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_OBJECT));
    return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, BEGIN_OBJECT));
    case '[':
    AndroidUtilJsonReader_pushWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_ARRAY));
    return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, BEGIN_ARRAY));
    case '\'':
    AndroidUtilJsonReader_checkLenient(self);
    case '"':
    JreStrongAssign(&self->value_, AndroidUtilJsonReader_nextStringWithChar_(self, (jchar) c));
    return JreStrongAssign(&self->token_, JreLoadEnum(AndroidUtilJsonToken, STRING));
    default:
    self->pos_--;
    return AndroidUtilJsonReader_readLiteral(self);
  }
}

jboolean AndroidUtilJsonReader_fillBufferWithInt_(AndroidUtilJsonReader *self, jint minimum) {
  for (jint i = 0; i < self->pos_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), i) == 0x000a) {
      self->bufferStartLine_++;
      self->bufferStartColumn_ = 1;
    }
    else {
      self->bufferStartColumn_++;
    }
  }
  if (self->limit_ != self->pos_) {
    self->limit_ -= self->pos_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, self->pos_, self->buffer_, 0, self->limit_);
  }
  else {
    self->limit_ = 0;
  }
  self->pos_ = 0;
  jint total;
  while ((total = [((JavaIoReader *) nil_chk(self->in_)) readWithCharArray:self->buffer_ withInt:self->limit_ withInt:((IOSCharArray *) nil_chk(self->buffer_))->size_ - self->limit_]) != -1) {
    self->limit_ += total;
    if (self->bufferStartLine_ == 1 && self->bufferStartColumn_ == 1 && self->limit_ > 0 && IOSCharArray_Get(self->buffer_, 0) == 0xfeff) {
      self->pos_++;
      self->bufferStartColumn_--;
    }
    if (self->limit_ >= minimum) {
      return true;
    }
  }
  return false;
}

jint AndroidUtilJsonReader_getLineNumber(AndroidUtilJsonReader *self) {
  jint result = self->bufferStartLine_;
  for (jint i = 0; i < self->pos_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), i) == 0x000a) {
      result++;
    }
  }
  return result;
}

jint AndroidUtilJsonReader_getColumnNumber(AndroidUtilJsonReader *self) {
  jint result = self->bufferStartColumn_;
  for (jint i = 0; i < self->pos_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), i) == 0x000a) {
      result = 1;
    }
    else {
      result++;
    }
  }
  return result;
}

jint AndroidUtilJsonReader_nextNonWhitespace(AndroidUtilJsonReader *self) {
  while (self->pos_ < self->limit_ || AndroidUtilJsonReader_fillBufferWithInt_(self, 1)) {
    jint c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
    {
      jchar peek;
      switch (c) {
        case 0x0009:
        case ' ':
        case 0x000a:
        case 0x000d:
        continue;
        case '/':
        if (self->pos_ == self->limit_ && !AndroidUtilJsonReader_fillBufferWithInt_(self, 1)) {
          return c;
        }
        AndroidUtilJsonReader_checkLenient(self);
        peek = IOSCharArray_Get(self->buffer_, self->pos_);
        switch (peek) {
          case '*':
          self->pos_++;
          if (!AndroidUtilJsonReader_skipToWithNSString_(self, @"*/")) {
            @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Unterminated comment"));
          }
          self->pos_ += 2;
          continue;
          case '/':
          self->pos_++;
          AndroidUtilJsonReader_skipToEndOfLine(self);
          continue;
          default:
          return c;
        }
        case '#':
        AndroidUtilJsonReader_checkLenient(self);
        AndroidUtilJsonReader_skipToEndOfLine(self);
        continue;
        default:
        return c;
      }
    }
  }
  @throw create_JavaIoEOFException_initWithNSString_(@"End of input");
}

void AndroidUtilJsonReader_checkLenient(AndroidUtilJsonReader *self) {
  if (!self->lenient_) {
    @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Use JsonReader.setLenient(true) to accept malformed JSON"));
  }
}

void AndroidUtilJsonReader_skipToEndOfLine(AndroidUtilJsonReader *self) {
  while (self->pos_ < self->limit_ || AndroidUtilJsonReader_fillBufferWithInt_(self, 1)) {
    jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
    if (c == 0x000d || c == 0x000a) {
      break;
    }
  }
}

jboolean AndroidUtilJsonReader_skipToWithNSString_(AndroidUtilJsonReader *self, NSString *toFind) {
  for (; self->pos_ + [((NSString *) nil_chk(toFind)) java_length] <= self->limit_ || AndroidUtilJsonReader_fillBufferWithInt_(self, [toFind java_length]); self->pos_++) {
    {
      for (jint c = 0; c < [toFind java_length]; c++) {
        if (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + c) != [toFind charAtWithInt:c]) {
          goto continue_outer;
        }
      }
      return true;
    }
    continue_outer: ;
  }
  return false;
}

NSString *AndroidUtilJsonReader_nextStringWithChar_(AndroidUtilJsonReader *self, jchar quote) {
  JavaLangStringBuilder *builder = nil;
  do {
    jint start = self->pos_;
    while (self->pos_ < self->limit_) {
      jint c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
      if (c == quote) {
        if (self->skipping_) {
          return @"skipped!";
        }
        else if (builder == nil) {
          return [((LibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:start withInt:self->pos_ - start - 1];
        }
        else {
          [builder appendWithCharArray:self->buffer_ withInt:start withInt:self->pos_ - start - 1];
          return [builder description];
        }
      }
      else if (c == '\\') {
        if (builder == nil) {
          builder = create_JavaLangStringBuilder_init();
        }
        [builder appendWithCharArray:self->buffer_ withInt:start withInt:self->pos_ - start - 1];
        [builder appendWithChar:AndroidUtilJsonReader_readEscapeCharacter(self)];
        start = self->pos_;
      }
    }
    if (builder == nil) {
      builder = create_JavaLangStringBuilder_init();
    }
    [builder appendWithCharArray:self->buffer_ withInt:start withInt:self->pos_ - start];
  }
  while (AndroidUtilJsonReader_fillBufferWithInt_(self, 1));
  @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Unterminated string"));
}

NSString *AndroidUtilJsonReader_nextLiteralWithBoolean_(AndroidUtilJsonReader *self, jboolean assignOffsetsOnly) {
  JavaLangStringBuilder *builder = nil;
  self->valuePos_ = -1;
  self->valueLength_ = 0;
  jint i = 0;
  while (true) {
    for (; self->pos_ + i < self->limit_; i++) {
      switch (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i)) {
        case '/':
        case '\\':
        case ';':
        case '#':
        case '=':
        AndroidUtilJsonReader_checkLenient(self);
        case '{':
        case '}':
        case '[':
        case ']':
        case ':':
        case ',':
        case ' ':
        case 0x0009:
        case 0x000c:
        case 0x000d:
        case 0x000a:
        goto break_findNonLiteralCharacter;
      }
    }
    if (i < ((IOSCharArray *) nil_chk(self->buffer_))->size_) {
      if (AndroidUtilJsonReader_fillBufferWithInt_(self, i + 1)) {
        continue;
      }
      else {
        *IOSCharArray_GetRef(self->buffer_, self->limit_) = 0x0000;
        break;
      }
    }
    if (builder == nil) {
      builder = create_JavaLangStringBuilder_init();
    }
    [builder appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
    self->valueLength_ += i;
    self->pos_ += i;
    i = 0;
    if (!AndroidUtilJsonReader_fillBufferWithInt_(self, 1)) {
      break;
    }
  }
  break_findNonLiteralCharacter: ;
  NSString *result;
  if (assignOffsetsOnly && builder == nil) {
    self->valuePos_ = self->pos_;
    result = nil;
  }
  else if (self->skipping_) {
    result = @"skipped!";
  }
  else if (builder == nil) {
    result = [((LibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
  }
  else {
    [builder appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
    result = [builder description];
  }
  self->valueLength_ += i;
  self->pos_ += i;
  return result;
}

jchar AndroidUtilJsonReader_readEscapeCharacter(AndroidUtilJsonReader *self) {
  if (self->pos_ == self->limit_ && !AndroidUtilJsonReader_fillBufferWithInt_(self, 1)) {
    @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Unterminated escape sequence"));
  }
  jchar escaped = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
  {
    NSString *hex;
    switch (escaped) {
      case 'u':
      if (self->pos_ + 4 > self->limit_ && !AndroidUtilJsonReader_fillBufferWithInt_(self, 4)) {
        @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Unterminated escape sequence"));
      }
      hex = [((LibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:self->pos_ withInt:4];
      self->pos_ += 4;
      return (jchar) JavaLangInteger_parseIntWithNSString_withInt_(hex, 16);
      case 't':
      return 0x0009;
      case 'b':
      return 0x0008;
      case 'n':
      return 0x000a;
      case 'r':
      return 0x000d;
      case 'f':
      return 0x000c;
      case '\'':
      case '"':
      case '\\':
      default:
      return escaped;
    }
  }
}

AndroidUtilJsonToken *AndroidUtilJsonReader_readLiteral(AndroidUtilJsonReader *self) {
  JreStrongAssign(&self->value_, AndroidUtilJsonReader_nextLiteralWithBoolean_(self, true));
  if (self->valueLength_ == 0) {
    @throw nil_chk(AndroidUtilJsonReader_syntaxErrorWithNSString_(self, @"Expected literal value"));
  }
  JreStrongAssign(&self->token_, AndroidUtilJsonReader_decodeLiteral(self));
  if (self->token_ == JreLoadEnum(AndroidUtilJsonToken, STRING)) {
    AndroidUtilJsonReader_checkLenient(self);
  }
  return self->token_;
}

AndroidUtilJsonToken *AndroidUtilJsonReader_decodeLiteral(AndroidUtilJsonReader *self) {
  if (self->valuePos_ == -1) {
    return JreLoadEnum(AndroidUtilJsonToken, STRING);
  }
  else if (self->valueLength_ == 4 && ('n' == IOSCharArray_Get(nil_chk(self->buffer_), self->valuePos_) || 'N' == IOSCharArray_Get(self->buffer_, self->valuePos_)) && ('u' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 1) || 'U' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 1)) && ('l' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 2) || 'L' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 2)) && ('l' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 3) || 'L' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 3))) {
    JreStrongAssign(&self->value_, @"null");
    return JreLoadEnum(AndroidUtilJsonToken, NULL);
  }
  else if (self->valueLength_ == 4 && ('t' == IOSCharArray_Get(nil_chk(self->buffer_), self->valuePos_) || 'T' == IOSCharArray_Get(self->buffer_, self->valuePos_)) && ('r' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 1) || 'R' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 1)) && ('u' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 2) || 'U' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 2)) && ('e' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 3) || 'E' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 3))) {
    JreStrongAssign(&self->value_, AndroidUtilJsonReader_TRUE);
    return JreLoadEnum(AndroidUtilJsonToken, BOOLEAN);
  }
  else if (self->valueLength_ == 5 && ('f' == IOSCharArray_Get(nil_chk(self->buffer_), self->valuePos_) || 'F' == IOSCharArray_Get(self->buffer_, self->valuePos_)) && ('a' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 1) || 'A' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 1)) && ('l' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 2) || 'L' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 2)) && ('s' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 3) || 'S' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 3)) && ('e' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 4) || 'E' == IOSCharArray_Get(self->buffer_, self->valuePos_ + 4))) {
    JreStrongAssign(&self->value_, AndroidUtilJsonReader_FALSE);
    return JreLoadEnum(AndroidUtilJsonToken, BOOLEAN);
  }
  else {
    JreStrongAssign(&self->value_, [((LibcoreInternalStringPool *) nil_chk(self->stringPool_)) getWithCharArray:self->buffer_ withInt:self->valuePos_ withInt:self->valueLength_]);
    return AndroidUtilJsonReader_decodeNumberWithCharArray_withInt_withInt_(self, self->buffer_, self->valuePos_, self->valueLength_);
  }
}

AndroidUtilJsonToken *AndroidUtilJsonReader_decodeNumberWithCharArray_withInt_withInt_(AndroidUtilJsonReader *self, IOSCharArray *chars, jint offset, jint length) {
  jint i = offset;
  jint c = IOSCharArray_Get(nil_chk(chars), i);
  if (c == '-') {
    c = IOSCharArray_Get(chars, ++i);
  }
  if (c == '0') {
    c = IOSCharArray_Get(chars, ++i);
  }
  else if (c >= '1' && c <= '9') {
    c = IOSCharArray_Get(chars, ++i);
    while (c >= '0' && c <= '9') {
      c = IOSCharArray_Get(chars, ++i);
    }
  }
  else {
    return JreLoadEnum(AndroidUtilJsonToken, STRING);
  }
  if (c == '.') {
    c = IOSCharArray_Get(chars, ++i);
    while (c >= '0' && c <= '9') {
      c = IOSCharArray_Get(chars, ++i);
    }
  }
  if (c == 'e' || c == 'E') {
    c = IOSCharArray_Get(chars, ++i);
    if (c == '+' || c == '-') {
      c = IOSCharArray_Get(chars, ++i);
    }
    if (c >= '0' && c <= '9') {
      c = IOSCharArray_Get(chars, ++i);
      while (c >= '0' && c <= '9') {
        c = IOSCharArray_Get(chars, ++i);
      }
    }
    else {
      return JreLoadEnum(AndroidUtilJsonToken, STRING);
    }
  }
  if (i == offset + length) {
    return JreLoadEnum(AndroidUtilJsonToken, NUMBER);
  }
  else {
    return JreLoadEnum(AndroidUtilJsonToken, STRING);
  }
}

JavaIoIOException *AndroidUtilJsonReader_syntaxErrorWithNSString_(AndroidUtilJsonReader *self, NSString *message) {
  @throw create_AndroidUtilMalformedJsonException_initWithNSString_(JreStrcat("$$I$I", message, @" at line ", AndroidUtilJsonReader_getLineNumber(self), @" column ", AndroidUtilJsonReader_getColumnNumber(self)));
}

id<JavaLangCharSequence> AndroidUtilJsonReader_getSnippet(AndroidUtilJsonReader *self) {
  JavaLangStringBuilder *snippet = create_JavaLangStringBuilder_init();
  jint beforePos = JavaLangMath_minWithInt_withInt_(self->pos_, 20);
  [snippet appendWithCharArray:self->buffer_ withInt:self->pos_ - beforePos withInt:beforePos];
  jint afterPos = JavaLangMath_minWithInt_withInt_(self->limit_ - self->pos_, 20);
  [snippet appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:afterPos];
  return snippet;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilJsonReader)

J2OBJC_INITIALIZED_DEFN(AndroidUtilJsonScope)

AndroidUtilJsonScope *AndroidUtilJsonScope_values_[8];

@implementation AndroidUtilJsonScope

+ (AndroidUtilJsonScope *)EMPTY_ARRAY {
  return JreEnum(AndroidUtilJsonScope, EMPTY_ARRAY);
}

+ (AndroidUtilJsonScope *)NONEMPTY_ARRAY {
  return JreEnum(AndroidUtilJsonScope, NONEMPTY_ARRAY);
}

+ (AndroidUtilJsonScope *)EMPTY_OBJECT {
  return JreEnum(AndroidUtilJsonScope, EMPTY_OBJECT);
}

+ (AndroidUtilJsonScope *)DANGLING_NAME {
  return JreEnum(AndroidUtilJsonScope, DANGLING_NAME);
}

+ (AndroidUtilJsonScope *)NONEMPTY_OBJECT {
  return JreEnum(AndroidUtilJsonScope, NONEMPTY_OBJECT);
}

+ (AndroidUtilJsonScope *)EMPTY_DOCUMENT {
  return JreEnum(AndroidUtilJsonScope, EMPTY_DOCUMENT);
}

+ (AndroidUtilJsonScope *)NONEMPTY_DOCUMENT {
  return JreEnum(AndroidUtilJsonScope, NONEMPTY_DOCUMENT);
}

+ (AndroidUtilJsonScope *)CLOSED {
  return JreEnum(AndroidUtilJsonScope, CLOSED);
}

+ (IOSObjectArray *)values {
  return AndroidUtilJsonScope_values();
}

+ (AndroidUtilJsonScope *)valueOfWithNSString:(NSString *)name {
  return AndroidUtilJsonScope_valueOfWithNSString_(name);
}

- (AndroidUtilJsonScope_Enum)toNSEnum {
  return (AndroidUtilJsonScope_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidUtilJsonScope;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonScope;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "NONEMPTY_ARRAY", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "EMPTY_OBJECT", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "DANGLING_NAME", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "NONEMPTY_OBJECT", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "EMPTY_DOCUMENT", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "NONEMPTY_DOCUMENT", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "CLOSED", "LAndroidUtilJsonScope;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidUtilJsonScope, EMPTY_ARRAY), &JreEnum(AndroidUtilJsonScope, NONEMPTY_ARRAY), &JreEnum(AndroidUtilJsonScope, EMPTY_OBJECT), &JreEnum(AndroidUtilJsonScope, DANGLING_NAME), &JreEnum(AndroidUtilJsonScope, NONEMPTY_OBJECT), &JreEnum(AndroidUtilJsonScope, EMPTY_DOCUMENT), &JreEnum(AndroidUtilJsonScope, NONEMPTY_DOCUMENT), &JreEnum(AndroidUtilJsonScope, CLOSED), "Ljava/lang/Enum<Landroid/util/JsonScope;>;" };
  static const J2ObjcClassInfo _AndroidUtilJsonScope = { "JsonScope", "android.util", ptrTable, methods, fields, 7, 0x4010, 2, 8, -1, -1, -1, 10, -1 };
  return &_AndroidUtilJsonScope;
}

+ (void)initialize {
  if (self == [AndroidUtilJsonScope class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 8 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 8; i++) {
      ((void)(AndroidUtilJsonScope_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      AndroidUtilJsonScope_initWithNSString_withInt_(e, JreEnumConstantName(AndroidUtilJsonScope_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(AndroidUtilJsonScope)
  }
}

@end

void AndroidUtilJsonScope_initWithNSString_withInt_(AndroidUtilJsonScope *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *AndroidUtilJsonScope_values() {
  AndroidUtilJsonScope_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidUtilJsonScope_values_ count:8 type:AndroidUtilJsonScope_class_()];
}

AndroidUtilJsonScope *AndroidUtilJsonScope_valueOfWithNSString_(NSString *name) {
  AndroidUtilJsonScope_initialize();
  for (int i = 0; i < 8; i++) {
    AndroidUtilJsonScope *e = AndroidUtilJsonScope_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidUtilJsonScope *AndroidUtilJsonScope_fromOrdinal(NSUInteger ordinal) {
  AndroidUtilJsonScope_initialize();
  if (ordinal >= 8) {
    return nil;
  }
  return AndroidUtilJsonScope_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilJsonScope)

J2OBJC_INITIALIZED_DEFN(AndroidUtilJsonToken)

AndroidUtilJsonToken *AndroidUtilJsonToken_values_[10];

@implementation AndroidUtilJsonToken

+ (AndroidUtilJsonToken *)BEGIN_ARRAY {
  return JreEnum(AndroidUtilJsonToken, BEGIN_ARRAY);
}

+ (AndroidUtilJsonToken *)END_ARRAY {
  return JreEnum(AndroidUtilJsonToken, END_ARRAY);
}

+ (AndroidUtilJsonToken *)BEGIN_OBJECT {
  return JreEnum(AndroidUtilJsonToken, BEGIN_OBJECT);
}

+ (AndroidUtilJsonToken *)END_OBJECT {
  return JreEnum(AndroidUtilJsonToken, END_OBJECT);
}

+ (AndroidUtilJsonToken *)NAME {
  return JreEnum(AndroidUtilJsonToken, NAME);
}

+ (AndroidUtilJsonToken *)STRING {
  return JreEnum(AndroidUtilJsonToken, STRING);
}

+ (AndroidUtilJsonToken *)NUMBER {
  return JreEnum(AndroidUtilJsonToken, NUMBER);
}

+ (AndroidUtilJsonToken *)BOOLEAN {
  return JreEnum(AndroidUtilJsonToken, BOOLEAN);
}

+ (AndroidUtilJsonToken *)NULL_ {
  return JreEnum(AndroidUtilJsonToken, NULL);
}

+ (AndroidUtilJsonToken *)END_DOCUMENT {
  return JreEnum(AndroidUtilJsonToken, END_DOCUMENT);
}

+ (IOSObjectArray *)values {
  return AndroidUtilJsonToken_values();
}

+ (AndroidUtilJsonToken *)valueOfWithNSString:(NSString *)name {
  return AndroidUtilJsonToken_valueOfWithNSString_(name);
}

- (AndroidUtilJsonToken_Enum)toNSEnum {
  return (AndroidUtilJsonToken_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidUtilJsonToken;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonToken;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BEGIN_ARRAY", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "END_ARRAY", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "BEGIN_OBJECT", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "END_OBJECT", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "NAME", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "STRING", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "NUMBER", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "BOOLEAN", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "NULL", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "END_DOCUMENT", "LAndroidUtilJsonToken;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidUtilJsonToken, BEGIN_ARRAY), &JreEnum(AndroidUtilJsonToken, END_ARRAY), &JreEnum(AndroidUtilJsonToken, BEGIN_OBJECT), &JreEnum(AndroidUtilJsonToken, END_OBJECT), &JreEnum(AndroidUtilJsonToken, NAME), &JreEnum(AndroidUtilJsonToken, STRING), &JreEnum(AndroidUtilJsonToken, NUMBER), &JreEnum(AndroidUtilJsonToken, BOOLEAN), &JreEnum(AndroidUtilJsonToken, NULL), &JreEnum(AndroidUtilJsonToken, END_DOCUMENT), "Ljava/lang/Enum<Landroid/util/JsonToken;>;" };
  static const J2ObjcClassInfo _AndroidUtilJsonToken = { "JsonToken", "android.util", ptrTable, methods, fields, 7, 0x4011, 2, 10, -1, -1, -1, 12, -1 };
  return &_AndroidUtilJsonToken;
}

+ (void)initialize {
  if (self == [AndroidUtilJsonToken class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 10 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 10; i++) {
      ((void)(AndroidUtilJsonToken_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      AndroidUtilJsonToken_initWithNSString_withInt_(e, JreEnumConstantName(AndroidUtilJsonToken_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(AndroidUtilJsonToken)
  }
}

@end

void AndroidUtilJsonToken_initWithNSString_withInt_(AndroidUtilJsonToken *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *AndroidUtilJsonToken_values() {
  AndroidUtilJsonToken_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidUtilJsonToken_values_ count:10 type:AndroidUtilJsonToken_class_()];
}

AndroidUtilJsonToken *AndroidUtilJsonToken_valueOfWithNSString_(NSString *name) {
  AndroidUtilJsonToken_initialize();
  for (int i = 0; i < 10; i++) {
    AndroidUtilJsonToken *e = AndroidUtilJsonToken_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidUtilJsonToken *AndroidUtilJsonToken_fromOrdinal(NSUInteger ordinal) {
  AndroidUtilJsonToken_initialize();
  if (ordinal >= 10) {
    return nil;
  }
  return AndroidUtilJsonToken_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilJsonToken)

@implementation AndroidUtilJsonWriter

- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)outArg {
  AndroidUtilJsonWriter_initWithJavaIoWriter_(self, outArg);
  return self;
}

- (void)setIndentWithNSString:(NSString *)indent {
  if ([((NSString *) nil_chk(indent)) java_isEmpty]) {
    JreStrongAssign(&self->indent_, nil);
    JreStrongAssign(&self->separator_, @":");
  }
  else {
    JreStrongAssign(&self->indent_, indent);
    JreStrongAssign(&self->separator_, @": ");
  }
}

- (void)setLenientWithBoolean:(jboolean)lenient {
  self->lenient_ = lenient;
}

- (jboolean)isLenient {
  return lenient_;
}

- (AndroidUtilJsonWriter *)beginArray {
  return AndroidUtilJsonWriter_openWithAndroidUtilJsonScope_withNSString_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_ARRAY), @"[");
}

- (AndroidUtilJsonWriter *)endArray {
  return AndroidUtilJsonWriter_closeWithAndroidUtilJsonScope_withAndroidUtilJsonScope_withNSString_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_ARRAY), JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_ARRAY), @"]");
}

- (AndroidUtilJsonWriter *)beginObject {
  return AndroidUtilJsonWriter_openWithAndroidUtilJsonScope_withNSString_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_OBJECT), @"{");
}

- (AndroidUtilJsonWriter *)endObject {
  return AndroidUtilJsonWriter_closeWithAndroidUtilJsonScope_withAndroidUtilJsonScope_withNSString_(self, JreLoadEnum(AndroidUtilJsonScope, EMPTY_OBJECT), JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_OBJECT), @"}");
}

- (AndroidUtilJsonWriter *)openWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)empty
                                           withNSString:(NSString *)openBracket {
  return AndroidUtilJsonWriter_openWithAndroidUtilJsonScope_withNSString_(self, empty, openBracket);
}

- (AndroidUtilJsonWriter *)closeWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)empty
                                withAndroidUtilJsonScope:(AndroidUtilJsonScope *)nonempty
                                            withNSString:(NSString *)closeBracket {
  return AndroidUtilJsonWriter_closeWithAndroidUtilJsonScope_withAndroidUtilJsonScope_withNSString_(self, empty, nonempty, closeBracket);
}

- (AndroidUtilJsonScope *)peek {
  return AndroidUtilJsonWriter_peek(self);
}

- (void)replaceTopWithAndroidUtilJsonScope:(AndroidUtilJsonScope *)topOfStack {
  AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(self, topOfStack);
}

- (AndroidUtilJsonWriter *)nameWithNSString:(NSString *)name {
  if (name == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"name == null");
  }
  AndroidUtilJsonWriter_beforeName(self);
  AndroidUtilJsonWriter_stringWithNSString_(self, name);
  return self;
}

- (AndroidUtilJsonWriter *)valueWithNSString:(NSString *)value {
  if (value == nil) {
    return [self nullValue];
  }
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, false);
  AndroidUtilJsonWriter_stringWithNSString_(self, value);
  return self;
}

- (AndroidUtilJsonWriter *)nullValue {
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, false);
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:@"null"];
  return self;
}

- (AndroidUtilJsonWriter *)valueWithBoolean:(jboolean)value {
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, false);
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:value ? @"true" : @"false"];
  return self;
}

- (AndroidUtilJsonWriter *)valueWithDouble:(jdouble)value {
  if (!lenient_ && (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value))) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D", @"Numeric values must be finite, but was ", value));
  }
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, false);
  [((JavaIoWriter *) nil_chk(out_)) appendWithJavaLangCharSequence:JavaLangDouble_toStringWithDouble_(value)];
  return self;
}

- (AndroidUtilJsonWriter *)valueWithLong:(jlong)value {
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, false);
  [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:JavaLangLong_toStringWithLong_(value)];
  return self;
}

- (AndroidUtilJsonWriter *)valueWithNSNumber:(NSNumber *)value {
  if (value == nil) {
    return [self nullValue];
  }
  NSString *string = [value description];
  if (!lenient_ && ([((NSString *) nil_chk(string)) isEqual:@"-Infinity"] || [string isEqual:@"Infinity"] || [string isEqual:@"NaN"])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Numeric values must be finite, but was ", value));
  }
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, false);
  [((JavaIoWriter *) nil_chk(out_)) appendWithJavaLangCharSequence:string];
  return self;
}

- (void)flush {
  [((JavaIoWriter *) nil_chk(out_)) flush];
}

- (void)close {
  [((JavaIoWriter *) nil_chk(out_)) close];
  if (AndroidUtilJsonWriter_peek(self) != JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_DOCUMENT)) {
    @throw create_JavaIoIOException_initWithNSString_(@"Incomplete document");
  }
}

- (void)stringWithNSString:(NSString *)value {
  AndroidUtilJsonWriter_stringWithNSString_(self, value);
}

- (void)newline {
  AndroidUtilJsonWriter_newline(self);
}

- (void)beforeName {
  AndroidUtilJsonWriter_beforeName(self);
}

- (void)beforeValueWithBoolean:(jboolean)root {
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, root);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(stack_);
  RELEASE_(indent_);
  RELEASE_(separator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x2, 6, 7, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x2, 8, 9, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonScope;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, 12, 2, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, 13, 2, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, 13, 4, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, 13, 14, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, 13, 15, 5, -1, -1, -1 },
    { NULL, "LAndroidUtilJsonWriter;", 0x1, 13, 16, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 2, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoWriter:);
  methods[1].selector = @selector(setIndentWithNSString:);
  methods[2].selector = @selector(setLenientWithBoolean:);
  methods[3].selector = @selector(isLenient);
  methods[4].selector = @selector(beginArray);
  methods[5].selector = @selector(endArray);
  methods[6].selector = @selector(beginObject);
  methods[7].selector = @selector(endObject);
  methods[8].selector = @selector(openWithAndroidUtilJsonScope:withNSString:);
  methods[9].selector = @selector(closeWithAndroidUtilJsonScope:withAndroidUtilJsonScope:withNSString:);
  methods[10].selector = @selector(peek);
  methods[11].selector = @selector(replaceTopWithAndroidUtilJsonScope:);
  methods[12].selector = @selector(nameWithNSString:);
  methods[13].selector = @selector(valueWithNSString:);
  methods[14].selector = @selector(nullValue);
  methods[15].selector = @selector(valueWithBoolean:);
  methods[16].selector = @selector(valueWithDouble:);
  methods[17].selector = @selector(valueWithLong:);
  methods[18].selector = @selector(valueWithNSNumber:);
  methods[19].selector = @selector(flush);
  methods[20].selector = @selector(close);
  methods[21].selector = @selector(stringWithNSString:);
  methods[22].selector = @selector(newline);
  methods[23].selector = @selector(beforeName);
  methods[24].selector = @selector(beforeValueWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stack_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "indent_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "separator_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lenient_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoWriter;", "setIndent", "LNSString;", "setLenient", "Z", "LJavaIoIOException;", "open", "LAndroidUtilJsonScope;LNSString;", "close", "LAndroidUtilJsonScope;LAndroidUtilJsonScope;LNSString;", "replaceTop", "LAndroidUtilJsonScope;", "name", "value", "D", "J", "LNSNumber;", "string", "beforeValue", "Ljava/util/List<Landroid/util/JsonScope;>;" };
  static const J2ObjcClassInfo _AndroidUtilJsonWriter = { "JsonWriter", "android.util", ptrTable, methods, fields, 7, 0x11, 25, 5, -1, -1, -1, -1, -1 };
  return &_AndroidUtilJsonWriter;
}

@end

void AndroidUtilJsonWriter_initWithJavaIoWriter_(AndroidUtilJsonWriter *self, JavaIoWriter *outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stack_, new_JavaUtilArrayList_init());
  {
    [self->stack_ addWithId:JreLoadEnum(AndroidUtilJsonScope, EMPTY_DOCUMENT)];
  }
  JreStrongAssign(&self->separator_, @":");
  if (outArg == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"out == null");
  }
  JreStrongAssign(&self->out_, outArg);
}

AndroidUtilJsonWriter *new_AndroidUtilJsonWriter_initWithJavaIoWriter_(JavaIoWriter *outArg) {
  J2OBJC_NEW_IMPL(AndroidUtilJsonWriter, initWithJavaIoWriter_, outArg)
}

AndroidUtilJsonWriter *create_AndroidUtilJsonWriter_initWithJavaIoWriter_(JavaIoWriter *outArg) {
  J2OBJC_CREATE_IMPL(AndroidUtilJsonWriter, initWithJavaIoWriter_, outArg)
}

AndroidUtilJsonWriter *AndroidUtilJsonWriter_openWithAndroidUtilJsonScope_withNSString_(AndroidUtilJsonWriter *self, AndroidUtilJsonScope *empty, NSString *openBracket) {
  AndroidUtilJsonWriter_beforeValueWithBoolean_(self, true);
  [((id<JavaUtilList>) nil_chk(self->stack_)) addWithId:empty];
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:openBracket];
  return self;
}

AndroidUtilJsonWriter *AndroidUtilJsonWriter_closeWithAndroidUtilJsonScope_withAndroidUtilJsonScope_withNSString_(AndroidUtilJsonWriter *self, AndroidUtilJsonScope *empty, AndroidUtilJsonScope *nonempty, NSString *closeBracket) {
  AndroidUtilJsonScope *context = AndroidUtilJsonWriter_peek(self);
  if (context != nonempty && context != empty) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Nesting problem: ", self->stack_));
  }
  [((id<JavaUtilList>) nil_chk(self->stack_)) removeWithInt:[self->stack_ size] - 1];
  if (context == nonempty) {
    AndroidUtilJsonWriter_newline(self);
  }
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:closeBracket];
  return self;
}

AndroidUtilJsonScope *AndroidUtilJsonWriter_peek(AndroidUtilJsonWriter *self) {
  return [((id<JavaUtilList>) nil_chk(self->stack_)) getWithInt:[self->stack_ size] - 1];
}

void AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(AndroidUtilJsonWriter *self, AndroidUtilJsonScope *topOfStack) {
  [((id<JavaUtilList>) nil_chk(self->stack_)) setWithInt:[self->stack_ size] - 1 withId:topOfStack];
}

void AndroidUtilJsonWriter_stringWithNSString_(AndroidUtilJsonWriter *self, NSString *value) {
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:@"\""];
  for (jint i = 0, length = [((NSString *) nil_chk(value)) java_length]; i < length; i++) {
    jchar c = [value charAtWithInt:i];
    switch (c) {
      case '"':
      case '\\':
      [self->out_ writeWithInt:'\\'];
      [self->out_ writeWithInt:c];
      break;
      case 0x0009:
      [self->out_ writeWithNSString:@"\\t"];
      break;
      case 0x0008:
      [self->out_ writeWithNSString:@"\\b"];
      break;
      case 0x000a:
      [self->out_ writeWithNSString:@"\\n"];
      break;
      case 0x000d:
      [self->out_ writeWithNSString:@"\\r"];
      break;
      case 0x000c:
      [self->out_ writeWithNSString:@"\\f"];
      break;
      case 0x2028:
      case 0x2029:
      [self->out_ writeWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"\\u%04x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((jint) c) } count:1 type:NSObject_class_()])];
      break;
      default:
      if (c <= (jint) 0x1F) {
        [self->out_ writeWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"\\u%04x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((jint) c) } count:1 type:NSObject_class_()])];
      }
      else {
        [self->out_ writeWithInt:c];
      }
      break;
    }
  }
  [self->out_ writeWithNSString:@"\""];
}

void AndroidUtilJsonWriter_newline(AndroidUtilJsonWriter *self) {
  if (self->indent_ == nil) {
    return;
  }
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithNSString:@"\n"];
  for (jint i = 1; i < [((id<JavaUtilList>) nil_chk(self->stack_)) size]; i++) {
    [self->out_ writeWithNSString:self->indent_];
  }
}

void AndroidUtilJsonWriter_beforeName(AndroidUtilJsonWriter *self) {
  AndroidUtilJsonScope *context = AndroidUtilJsonWriter_peek(self);
  if (context == JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_OBJECT)) {
    [((JavaIoWriter *) nil_chk(self->out_)) writeWithInt:','];
  }
  else if (context != JreLoadEnum(AndroidUtilJsonScope, EMPTY_OBJECT)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Nesting problem: ", self->stack_));
  }
  AndroidUtilJsonWriter_newline(self);
  AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, DANGLING_NAME));
}

void AndroidUtilJsonWriter_beforeValueWithBoolean_(AndroidUtilJsonWriter *self, jboolean root) {
  switch ([AndroidUtilJsonWriter_peek(self) ordinal]) {
    case AndroidUtilJsonScope_Enum_EMPTY_DOCUMENT:
    if (!self->lenient_ && !root) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"JSON must start with an array or an object.");
    }
    AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_DOCUMENT));
    break;
    case AndroidUtilJsonScope_Enum_EMPTY_ARRAY:
    AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_ARRAY));
    AndroidUtilJsonWriter_newline(self);
    break;
    case AndroidUtilJsonScope_Enum_NONEMPTY_ARRAY:
    [((JavaIoWriter *) nil_chk(self->out_)) appendWithChar:','];
    AndroidUtilJsonWriter_newline(self);
    break;
    case AndroidUtilJsonScope_Enum_DANGLING_NAME:
    [((JavaIoWriter *) nil_chk(self->out_)) appendWithJavaLangCharSequence:self->separator_];
    AndroidUtilJsonWriter_replaceTopWithAndroidUtilJsonScope_(self, JreLoadEnum(AndroidUtilJsonScope, NONEMPTY_OBJECT));
    break;
    case AndroidUtilJsonScope_Enum_NONEMPTY_DOCUMENT:
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"JSON must have only one top-level value.");
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Nesting problem: ", self->stack_));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilJsonWriter)

J2OBJC_INITIALIZED_DEFN(AndroidUtilLongSparseArray)

@implementation AndroidUtilLongSparseArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilLongSparseArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype __nonnull)initWithInt:(jint)initialCapacity {
  AndroidUtilLongSparseArray_initWithInt_(self, initialCapacity);
  return self;
}

- (AndroidUtilLongSparseArray *)java_clone {
  AndroidUtilLongSparseArray *clone = nil;
  @try {
    clone = (AndroidUtilLongSparseArray *) cast_chk([super java_clone], [AndroidUtilLongSparseArray class]);
    JreStrongAssign(&((AndroidUtilLongSparseArray *) nil_chk(clone))->mKeys_, [((IOSLongArray *) nil_chk(mKeys_)) java_clone]);
    JreStrongAssign(&clone->mValues_, [((IOSObjectArray *) nil_chk(mValues_)) java_clone]);
  }
  @catch (JavaLangCloneNotSupportedException *cnse) {
  }
  return clone;
}

- (id)getWithLong:(jlong)key {
  return [self getWithLong:key withId:nil];
}

- (id)getWithLong:(jlong)key
           withId:(id)valueIfKeyNotFound {
  jint i = AndroidUtilContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
  if (i < 0 || IOSObjectArray_Get(nil_chk(mValues_), i) == AndroidUtilLongSparseArray_DELETED) {
    return valueIfKeyNotFound;
  }
  else {
    return IOSObjectArray_Get(nil_chk(mValues_), i);
  }
}

- (void)delete__WithLong:(jlong)key {
  jint i = AndroidUtilContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
  if (i >= 0) {
    if (IOSObjectArray_Get(nil_chk(mValues_), i) != AndroidUtilLongSparseArray_DELETED) {
      IOSObjectArray_Set(mValues_, i, AndroidUtilLongSparseArray_DELETED);
      mGarbage_ = true;
    }
  }
}

- (void)removeWithLong:(jlong)key {
  [self delete__WithLong:key];
}

- (void)removeAtWithInt:(jint)index {
  if (IOSObjectArray_Get(nil_chk(mValues_), index) != AndroidUtilLongSparseArray_DELETED) {
    IOSObjectArray_Set(mValues_, index, AndroidUtilLongSparseArray_DELETED);
    mGarbage_ = true;
  }
}

- (void)gc {
  AndroidUtilLongSparseArray_gc(self);
}

- (void)putWithLong:(jlong)key
             withId:(id)value {
  jint i = AndroidUtilContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
  if (i >= 0) {
    IOSObjectArray_Set(nil_chk(mValues_), i, value);
  }
  else {
    i = ~i;
    if (i < mSize_ && IOSObjectArray_Get(nil_chk(mValues_), i) == AndroidUtilLongSparseArray_DELETED) {
      *IOSLongArray_GetRef(nil_chk(mKeys_), i) = key;
      IOSObjectArray_Set(nil_chk(mValues_), i, value);
      return;
    }
    if (mGarbage_ && mSize_ >= ((IOSLongArray *) nil_chk(mKeys_))->size_) {
      AndroidUtilLongSparseArray_gc(self);
      i = ~AndroidUtilContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
    }
    JreStrongAssign(&mKeys_, ComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(mKeys_, mSize_, i, key));
    JreStrongAssign(&mValues_, ComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(mValues_, mSize_, i, value));
    mSize_++;
  }
}

- (jint)size {
  if (mGarbage_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  return mSize_;
}

- (jlong)keyAtWithInt:(jint)index {
  if (mGarbage_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  return IOSLongArray_Get(nil_chk(mKeys_), index);
}

- (id)valueAtWithInt:(jint)index {
  if (mGarbage_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  return IOSObjectArray_Get(nil_chk(mValues_), index);
}

- (void)setValueAtWithInt:(jint)index
                   withId:(id)value {
  if (mGarbage_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  IOSObjectArray_Set(nil_chk(mValues_), index, value);
}

- (jint)indexOfKeyWithLong:(jlong)key {
  if (mGarbage_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  return AndroidUtilContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
}

- (jint)indexOfValueWithId:(id)value {
  if (mGarbage_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  for (jint i = 0; i < mSize_; i++) if (IOSObjectArray_Get(nil_chk(mValues_), i) == value) return i;
  return -1;
}

- (void)clear {
  jint n = mSize_;
  IOSObjectArray *values = mValues_;
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_Set(nil_chk(values), i, nil);
  }
  mSize_ = 0;
  mGarbage_ = false;
}

- (void)appendWithLong:(jlong)key
                withId:(id)value {
  if (mSize_ != 0 && key <= IOSLongArray_Get(nil_chk(mKeys_), mSize_ - 1)) {
    [self putWithLong:key withId:value];
    return;
  }
  if (mGarbage_ && mSize_ >= ((IOSLongArray *) nil_chk(mKeys_))->size_) {
    AndroidUtilLongSparseArray_gc(self);
  }
  JreStrongAssign(&mKeys_, ComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(mKeys_, mSize_, key));
  JreStrongAssign(&mValues_, ComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(mValues_, mSize_, value));
  mSize_++;
}

- (NSString *)description {
  if ([self size] <= 0) {
    return @"{}";
  }
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_initWithInt_(mSize_ * 28);
  [buffer appendWithChar:'{'];
  for (jint i = 0; i < mSize_; i++) {
    if (i > 0) {
      [buffer appendWithNSString:@", "];
    }
    jlong key = [self keyAtWithInt:i];
    [buffer appendWithLong:key];
    [buffer appendWithChar:'='];
    id value = [self valueAtWithInt:i];
    if (value != self) {
      [buffer appendWithId:value];
    }
    else {
      [buffer appendWithNSString:@"(this Map)"];
    }
  }
  [buffer appendWithChar:'}'];
  return [buffer description];
}

- (void)dealloc {
  RELEASE_(mKeys_);
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilLongSparseArray;", 0x1, 1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 6, -1, 12, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 0, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "I", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 6, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getWithLong:);
  methods[4].selector = @selector(getWithLong:withId:);
  methods[5].selector = @selector(delete__WithLong:);
  methods[6].selector = @selector(removeWithLong:);
  methods[7].selector = @selector(removeAtWithInt:);
  methods[8].selector = @selector(gc);
  methods[9].selector = @selector(putWithLong:withId:);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(keyAtWithInt:);
  methods[12].selector = @selector(valueAtWithInt:);
  methods[13].selector = @selector(setValueAtWithInt:withId:);
  methods[14].selector = @selector(indexOfKeyWithLong:);
  methods[15].selector = @selector(indexOfValueWithId:);
  methods[16].selector = @selector(clear);
  methods[17].selector = @selector(appendWithLong:withId:);
  methods[18].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DELETED", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "mGarbage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mKeys_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mValues_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "clone", "()Landroid/util/LongSparseArray<TE;>;", "get", "J", "(J)TE;", "JLNSObject;", "(JTE;)TE;", "delete", "remove", "removeAt", "put", "(JTE;)V", "keyAt", "valueAt", "(I)TE;", "setValueAt", "ILNSObject;", "(ITE;)V", "indexOfKey", "indexOfValue", "LNSObject;", "(TE;)I", "append", "toString", &AndroidUtilLongSparseArray_DELETED, "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _AndroidUtilLongSparseArray = { "LongSparseArray", "android.util", ptrTable, methods, fields, 7, 0x1, 19, 5, -1, -1, -1, 26, -1 };
  return &_AndroidUtilLongSparseArray;
}

- (id)copyWithZone:(NSZone * __nullable)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [AndroidUtilLongSparseArray class]) {
    JreStrongAssignAndConsume(&AndroidUtilLongSparseArray_DELETED, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(AndroidUtilLongSparseArray)
  }
}

@end

void AndroidUtilLongSparseArray_init(AndroidUtilLongSparseArray *self) {
  AndroidUtilLongSparseArray_initWithInt_(self, 10);
}

AndroidUtilLongSparseArray *new_AndroidUtilLongSparseArray_init() {
  J2OBJC_NEW_IMPL(AndroidUtilLongSparseArray, init)
}

AndroidUtilLongSparseArray *create_AndroidUtilLongSparseArray_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilLongSparseArray, init)
}

void AndroidUtilLongSparseArray_initWithInt_(AndroidUtilLongSparseArray *self, jint initialCapacity) {
  NSObject_init(self);
  self->mGarbage_ = false;
  if (initialCapacity == 0) {
    JreStrongAssign(&self->mKeys_, JreLoadStatic(AndroidUtilEmptyArray, LONG));
    JreStrongAssign(&self->mValues_, JreLoadStatic(AndroidUtilEmptyArray, OBJECT));
  }
  else {
    JreStrongAssign(&self->mKeys_, CoDopplAltUtilsArrayUtils_newUnpaddedLongArrayWithInt_(initialCapacity));
    JreStrongAssign(&self->mValues_, CoDopplAltUtilsArrayUtils_newUnpaddedObjectArrayWithInt_(initialCapacity));
  }
  self->mSize_ = 0;
}

AndroidUtilLongSparseArray *new_AndroidUtilLongSparseArray_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(AndroidUtilLongSparseArray, initWithInt_, initialCapacity)
}

AndroidUtilLongSparseArray *create_AndroidUtilLongSparseArray_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(AndroidUtilLongSparseArray, initWithInt_, initialCapacity)
}

void AndroidUtilLongSparseArray_gc(AndroidUtilLongSparseArray *self) {
  jint n = self->mSize_;
  jint o = 0;
  IOSLongArray *keys = self->mKeys_;
  IOSObjectArray *values = self->mValues_;
  for (jint i = 0; i < n; i++) {
    id val = IOSObjectArray_Get(nil_chk(values), i);
    if (val != AndroidUtilLongSparseArray_DELETED) {
      if (i != o) {
        *IOSLongArray_GetRef(nil_chk(keys), o) = IOSLongArray_Get(keys, i);
        IOSObjectArray_Set(values, o, val);
        IOSObjectArray_Set(values, i, nil);
      }
      o++;
    }
  }
  self->mGarbage_ = false;
  self->mSize_ = o;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilLongSparseArray)

@implementation AndroidUtilMalformedJsonException

- (instancetype __nonnull)initWithNSString:(NSString *)message {
  AndroidUtilMalformedJsonException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = AndroidUtilMalformedJsonException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _AndroidUtilMalformedJsonException = { "MalformedJsonException", "android.util", ptrTable, methods, fields, 7, 0x11, 1, 1, -1, -1, -1, -1, -1 };
  return &_AndroidUtilMalformedJsonException;
}

@end

void AndroidUtilMalformedJsonException_initWithNSString_(AndroidUtilMalformedJsonException *self, NSString *message) {
  JavaIoIOException_initWithNSString_(self, message);
}

AndroidUtilMalformedJsonException *new_AndroidUtilMalformedJsonException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(AndroidUtilMalformedJsonException, initWithNSString_, message)
}

AndroidUtilMalformedJsonException *create_AndroidUtilMalformedJsonException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(AndroidUtilMalformedJsonException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilMalformedJsonException)

J2OBJC_INITIALIZED_DEFN(AndroidUtilPatterns)

NSString *AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR = @"((aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(biz|b[abdefghijmnorstvwyz])|(cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(edu|e[cegrstu])|f[ijkmor]|(gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(info|int|i[delmnoqrst])|(jobs|j[emop])|k[eghimnprwyz]|l[abcikrstuvy]|(mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])|(name|net|n[acefgilopruz])|(org|om)|(pro|p[aefghklmnrstwy])|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|(tel|travel|t[cdfghjklmnoprtvwz])|u[agksyz]|v[aceginu]|w[fs]|(xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)|y[etu]|z[amw])";
JavaUtilRegexPattern *AndroidUtilPatterns_TOP_LEVEL_DOMAIN;
NSString *AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL = @"(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnprwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agksyz]|v[aceginu]|w[fs]|(?:xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)|y[etu]|z[amw]))";
NSString *AndroidUtilPatterns_GOOD_IRI_CHAR = @"a-zA-Z0-9\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef";
JavaUtilRegexPattern *AndroidUtilPatterns_WEB_URL;
JavaUtilRegexPattern *AndroidUtilPatterns_IP_ADDRESS;
JavaUtilRegexPattern *AndroidUtilPatterns_DOMAIN_NAME;
JavaUtilRegexPattern *AndroidUtilPatterns_EMAIL_ADDRESS;
JavaUtilRegexPattern *AndroidUtilPatterns_PHONE;

@implementation AndroidUtilPatterns

+ (NSString *)TOP_LEVEL_DOMAIN_STR {
  return AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR;
}

+ (JavaUtilRegexPattern *)TOP_LEVEL_DOMAIN {
  return AndroidUtilPatterns_TOP_LEVEL_DOMAIN;
}

+ (NSString *)TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL {
  return AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL;
}

+ (NSString *)GOOD_IRI_CHAR {
  return AndroidUtilPatterns_GOOD_IRI_CHAR;
}

+ (JavaUtilRegexPattern *)WEB_URL {
  return AndroidUtilPatterns_WEB_URL;
}

+ (JavaUtilRegexPattern *)IP_ADDRESS {
  return AndroidUtilPatterns_IP_ADDRESS;
}

+ (JavaUtilRegexPattern *)DOMAIN_NAME {
  return AndroidUtilPatterns_DOMAIN_NAME;
}

+ (JavaUtilRegexPattern *)EMAIL_ADDRESS {
  return AndroidUtilPatterns_EMAIL_ADDRESS;
}

+ (JavaUtilRegexPattern *)PHONE {
  return AndroidUtilPatterns_PHONE;
}

+ (NSString *)concatGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher {
  return AndroidUtilPatterns_concatGroupsWithJavaUtilRegexMatcher_(matcher);
}

+ (NSString *)digitsAndPlusOnlyWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher {
  return AndroidUtilPatterns_digitsAndPlusOnlyWithJavaUtilRegexMatcher_(matcher);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilPatterns_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(concatGroupsWithJavaUtilRegexMatcher:);
  methods[1].selector = @selector(digitsAndPlusOnlyWithJavaUtilRegexMatcher:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TOP_LEVEL_DOMAIN_STR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "TOP_LEVEL_DOMAIN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "GOOD_IRI_CHAR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "WEB_URL", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "IP_ADDRESS", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "DOMAIN_NAME", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "EMAIL_ADDRESS", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "PHONE", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "concatGroups", "LJavaUtilRegexMatcher;", "digitsAndPlusOnly", &AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR, &AndroidUtilPatterns_TOP_LEVEL_DOMAIN, &AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL, &AndroidUtilPatterns_GOOD_IRI_CHAR, &AndroidUtilPatterns_WEB_URL, &AndroidUtilPatterns_IP_ADDRESS, &AndroidUtilPatterns_DOMAIN_NAME, &AndroidUtilPatterns_EMAIL_ADDRESS, &AndroidUtilPatterns_PHONE };
  static const J2ObjcClassInfo _AndroidUtilPatterns = { "Patterns", "android.util", ptrTable, methods, fields, 7, 0x1, 3, 9, -1, -1, -1, -1, -1 };
  return &_AndroidUtilPatterns;
}

+ (void)initialize {
  if (self == [AndroidUtilPatterns class]) {
    JreStrongAssign(&AndroidUtilPatterns_TOP_LEVEL_DOMAIN, JavaUtilRegexPattern_compileWithNSString_(AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR));
    JreStrongAssign(&AndroidUtilPatterns_WEB_URL, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$$$$$$", @"((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?((?:(?:[", AndroidUtilPatterns_GOOD_IRI_CHAR, @"][", AndroidUtilPatterns_GOOD_IRI_CHAR, @"\\-]{0,64}\\.)+", AndroidUtilPatterns_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL, @"|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\\:\\d{1,5})?)(\\/(?:(?:[", AndroidUtilPatterns_GOOD_IRI_CHAR, @"\\;\\/\\?\\:\\@\\&\\=\\#\\~\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?(?:\\b|$)")));
    JreStrongAssign(&AndroidUtilPatterns_IP_ADDRESS, JavaUtilRegexPattern_compileWithNSString_(@"((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9]))"));
    JreStrongAssign(&AndroidUtilPatterns_DOMAIN_NAME, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$$$$@$@C", @"(((([", AndroidUtilPatterns_GOOD_IRI_CHAR, @"][", AndroidUtilPatterns_GOOD_IRI_CHAR, @"\\-]*)*[", AndroidUtilPatterns_GOOD_IRI_CHAR, @"]\\.)+", AndroidUtilPatterns_TOP_LEVEL_DOMAIN, @")|", AndroidUtilPatterns_IP_ADDRESS, ')')));
    JreStrongAssign(&AndroidUtilPatterns_EMAIL_ADDRESS, JavaUtilRegexPattern_compileWithNSString_(@"[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}\\@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+"));
    JreStrongAssign(&AndroidUtilPatterns_PHONE, JavaUtilRegexPattern_compileWithNSString_(@"(\\+[0-9]+[\\- \\.]*)?(\\([0-9]+\\)[\\- \\.]*)?([0-9][0-9\\- \\.][0-9\\- \\.]+[0-9])"));
    J2OBJC_SET_INITIALIZED(AndroidUtilPatterns)
  }
}

@end

NSString *AndroidUtilPatterns_concatGroupsWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher) {
  AndroidUtilPatterns_initialize();
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  jint numGroups = [((JavaUtilRegexMatcher *) nil_chk(matcher)) groupCount];
  for (jint i = 1; i <= numGroups; i++) {
    NSString *s = [matcher groupWithInt:i];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$", @"Group(", i, @") : ", s)];
    if (s != nil) {
      [b appendWithNSString:s];
    }
  }
  return [b description];
}

NSString *AndroidUtilPatterns_digitsAndPlusOnlyWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher) {
  AndroidUtilPatterns_initialize();
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  NSString *matchingRegion = [((JavaUtilRegexMatcher *) nil_chk(matcher)) group];
  for (jint i = 0, size = [((NSString *) nil_chk(matchingRegion)) java_length]; i < size; i++) {
    jchar character = [matchingRegion charAtWithInt:i];
    if (character == '+' || JavaLangCharacter_isDigitWithChar_(character)) {
      [buffer appendWithChar:character];
    }
  }
  return [buffer description];
}

void AndroidUtilPatterns_init(AndroidUtilPatterns *self) {
  NSObject_init(self);
}

AndroidUtilPatterns *new_AndroidUtilPatterns_init() {
  J2OBJC_NEW_IMPL(AndroidUtilPatterns, init)
}

AndroidUtilPatterns *create_AndroidUtilPatterns_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilPatterns, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilPatterns)

@implementation AndroidUtilPrefixPrinter

+ (id<AndroidUtilPrinter>)createWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                                          withNSString:(NSString *)prefix {
  return AndroidUtilPrefixPrinter_createWithAndroidUtilPrinter_withNSString_(printer, prefix);
}

- (instancetype __nonnull)initWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                                        withNSString:(NSString *)prefix {
  AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(self, printer, prefix);
  return self;
}

- (void)printlnWithNSString:(NSString *)str {
  [((id<AndroidUtilPrinter>) nil_chk(mPrinter_)) printlnWithNSString:JreStrcat("$$", mPrefix_, str)];
}

- (void)dealloc {
  RELEASE_(mPrinter_);
  RELEASE_(mPrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LAndroidUtilPrinter;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createWithAndroidUtilPrinter:withNSString:);
  methods[1].selector = @selector(initWithAndroidUtilPrinter:withNSString:);
  methods[2].selector = @selector(printlnWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPrinter_", "LAndroidUtilPrinter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPrefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LAndroidUtilPrinter;LNSString;", "println", "LNSString;" };
  static const J2ObjcClassInfo _AndroidUtilPrefixPrinter = { "PrefixPrinter", "android.util", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_AndroidUtilPrefixPrinter;
}

@end

id<AndroidUtilPrinter> AndroidUtilPrefixPrinter_createWithAndroidUtilPrinter_withNSString_(id<AndroidUtilPrinter> printer, NSString *prefix) {
  AndroidUtilPrefixPrinter_initialize();
  if (prefix == nil || [prefix isEqual:@""]) {
    return printer;
  }
  return create_AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(printer, prefix);
}

void AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(AndroidUtilPrefixPrinter *self, id<AndroidUtilPrinter> printer, NSString *prefix) {
  NSObject_init(self);
  JreStrongAssign(&self->mPrinter_, printer);
  JreStrongAssign(&self->mPrefix_, prefix);
}

AndroidUtilPrefixPrinter *new_AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(id<AndroidUtilPrinter> printer, NSString *prefix) {
  J2OBJC_NEW_IMPL(AndroidUtilPrefixPrinter, initWithAndroidUtilPrinter_withNSString_, printer, prefix)
}

AndroidUtilPrefixPrinter *create_AndroidUtilPrefixPrinter_initWithAndroidUtilPrinter_withNSString_(id<AndroidUtilPrinter> printer, NSString *prefix) {
  J2OBJC_CREATE_IMPL(AndroidUtilPrefixPrinter, initWithAndroidUtilPrinter_withNSString_, printer, prefix)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilPrefixPrinter)

@implementation AndroidUtilSize

- (instancetype __nonnull)initWithInt:(jint)width
                              withInt:(jint)height {
  AndroidUtilSize_initWithInt_withInt_(self, width, height);
  return self;
}

- (jint)getWidth {
  return mWidth_;
}

- (jint)getHeight {
  return mHeight_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) {
    return false;
  }
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[AndroidUtilSize class]]) {
    AndroidUtilSize *other = (AndroidUtilSize *) cast_chk(obj, [AndroidUtilSize class]);
    return mWidth_ == other->mWidth_ && mHeight_ == other->mHeight_;
  }
  return false;
}

- (NSString *)description {
  return JreStrcat("ICI", mWidth_, 'x', mHeight_);
}

+ (JavaLangNumberFormatException *)invalidSizeWithNSString:(NSString *)s {
  return AndroidUtilSize_invalidSizeWithNSString_(s);
}

+ (AndroidUtilSize *)parseSizeWithNSString:(NSString *)string {
  return AndroidUtilSize_parseSizeWithNSString_(string);
}

- (NSUInteger)hash {
  return mHeight_ ^ ((JreLShift32(mWidth_, (JavaLangInteger_SIZE / 2))) | (JreURShift32(mWidth_, (JavaLangInteger_SIZE / 2))));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangNumberFormatException;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilSize;", 0x9, 6, 5, 7, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(getWidth);
  methods[2].selector = @selector(getHeight);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(invalidSizeWithNSString:);
  methods[6].selector = @selector(parseSizeWithNSString:);
  methods[7].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mHeight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "equals", "LNSObject;", "toString", "invalidSize", "LNSString;", "parseSize", "LJavaLangNumberFormatException;", "hashCode" };
  static const J2ObjcClassInfo _AndroidUtilSize = { "Size", "android.util", ptrTable, methods, fields, 7, 0x11, 8, 2, -1, -1, -1, -1, -1 };
  return &_AndroidUtilSize;
}

@end

void AndroidUtilSize_initWithInt_withInt_(AndroidUtilSize *self, jint width, jint height) {
  NSObject_init(self);
  self->mWidth_ = width;
  self->mHeight_ = height;
}

AndroidUtilSize *new_AndroidUtilSize_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(AndroidUtilSize, initWithInt_withInt_, width, height)
}

AndroidUtilSize *create_AndroidUtilSize_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(AndroidUtilSize, initWithInt_withInt_, width, height)
}

JavaLangNumberFormatException *AndroidUtilSize_invalidSizeWithNSString_(NSString *s) {
  AndroidUtilSize_initialize();
  @throw create_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$C", @"Invalid Size: \"", s, '"'));
}

AndroidUtilSize *AndroidUtilSize_parseSizeWithNSString_(NSString *string) {
  AndroidUtilSize_initialize();
  jint sep_ix = [((NSString *) nil_chk(string)) java_indexOf:'*'];
  if (sep_ix < 0) {
    sep_ix = [string java_indexOf:'x'];
  }
  if (sep_ix < 0) {
    @throw nil_chk(AndroidUtilSize_invalidSizeWithNSString_(string));
  }
  @try {
    return create_AndroidUtilSize_initWithInt_withInt_(JavaLangInteger_parseIntWithNSString_([string java_substring:0 endIndex:sep_ix]), JavaLangInteger_parseIntWithNSString_([string java_substring:sep_ix + 1]));
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw nil_chk(AndroidUtilSize_invalidSizeWithNSString_(string));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilSize)

@implementation AndroidUtilSizeF

- (instancetype __nonnull)initWithFloat:(jfloat)width
                              withFloat:(jfloat)height {
  AndroidUtilSizeF_initWithFloat_withFloat_(self, width, height);
  return self;
}

+ (jfloat)checkArgumentFiniteWithFloat:(jfloat)value
                          withNSString:(NSString *)valueName {
  return AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(value, valueName);
}

- (jfloat)getWidth {
  return mWidth_;
}

- (jfloat)getHeight {
  return mHeight_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) {
    return false;
  }
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[AndroidUtilSizeF class]]) {
    AndroidUtilSizeF *other = (AndroidUtilSizeF *) cast_chk(obj, [AndroidUtilSizeF class]);
    return mWidth_ == other->mWidth_ && mHeight_ == other->mHeight_;
  }
  return false;
}

- (NSString *)description {
  return JreStrcat("FCF", mWidth_, 'x', mHeight_);
}

+ (JavaLangNumberFormatException *)invalidSizeFWithNSString:(NSString *)s {
  return AndroidUtilSizeF_invalidSizeFWithNSString_(s);
}

+ (AndroidUtilSizeF *)parseSizeFWithNSString:(NSString *)string {
  return AndroidUtilSizeF_parseSizeFWithNSString_(string);
}

- (NSUInteger)hash {
  return JavaLangFloat_floatToIntBitsWithFloat_(mWidth_) ^ JavaLangFloat_floatToIntBitsWithFloat_(mHeight_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangNumberFormatException;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilSizeF;", 0x9, 8, 7, 9, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withFloat:);
  methods[1].selector = @selector(checkArgumentFiniteWithFloat:withNSString:);
  methods[2].selector = @selector(getWidth);
  methods[3].selector = @selector(getHeight);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(invalidSizeFWithNSString:);
  methods[7].selector = @selector(parseSizeFWithNSString:);
  methods[8].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWidth_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mHeight_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FF", "checkArgumentFinite", "FLNSString;", "equals", "LNSObject;", "toString", "invalidSizeF", "LNSString;", "parseSizeF", "LJavaLangNumberFormatException;", "hashCode" };
  static const J2ObjcClassInfo _AndroidUtilSizeF = { "SizeF", "android.util", ptrTable, methods, fields, 7, 0x11, 9, 2, -1, -1, -1, -1, -1 };
  return &_AndroidUtilSizeF;
}

@end

void AndroidUtilSizeF_initWithFloat_withFloat_(AndroidUtilSizeF *self, jfloat width, jfloat height) {
  NSObject_init(self);
  self->mWidth_ = AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(width, @"width");
  self->mHeight_ = AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(height, @"height");
}

AndroidUtilSizeF *new_AndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) {
  J2OBJC_NEW_IMPL(AndroidUtilSizeF, initWithFloat_withFloat_, width, height)
}

AndroidUtilSizeF *create_AndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) {
  J2OBJC_CREATE_IMPL(AndroidUtilSizeF, initWithFloat_withFloat_, width, height)
}

jfloat AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(jfloat value, NSString *valueName) {
  AndroidUtilSizeF_initialize();
  if (JavaLangFloat_isNaNWithFloat_(value)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be NaN"));
  }
  else if (JavaLangFloat_isInfiniteWithFloat_(value)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be infinite"));
  }
  return value;
}

JavaLangNumberFormatException *AndroidUtilSizeF_invalidSizeFWithNSString_(NSString *s) {
  AndroidUtilSizeF_initialize();
  @throw create_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$C", @"Invalid SizeF: \"", s, '"'));
}

AndroidUtilSizeF *AndroidUtilSizeF_parseSizeFWithNSString_(NSString *string) {
  AndroidUtilSizeF_initialize();
  if (string == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"string must not be null");
  jint sep_ix = [string java_indexOf:'*'];
  if (sep_ix < 0) {
    sep_ix = [string java_indexOf:'x'];
  }
  if (sep_ix < 0) {
    @throw nil_chk(AndroidUtilSizeF_invalidSizeFWithNSString_(string));
  }
  @try {
    return create_AndroidUtilSizeF_initWithFloat_withFloat_(JavaLangFloat_parseFloatWithNSString_([string java_substring:0 endIndex:sep_ix]), JavaLangFloat_parseFloatWithNSString_([string java_substring:sep_ix + 1]));
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw nil_chk(AndroidUtilSizeF_invalidSizeFWithNSString_(string));
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw nil_chk(AndroidUtilSizeF_invalidSizeFWithNSString_(string));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilSizeF)

J2OBJC_INITIALIZED_DEFN(AndroidUtilTimeUtils)

@implementation AndroidUtilTimeUtils

+ (jint)HUNDRED_DAY_FIELD_LEN {
  return AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN;
}

+ (jlong)NANOS_PER_MS {
  return AndroidUtilTimeUtils_NANOS_PER_MS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilTimeUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)accumFieldWithInt:(jint)amt
                  withInt:(jint)suffix
              withBoolean:(jboolean)always
                  withInt:(jint)zeropad {
  return AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(amt, suffix, always, zeropad);
}

+ (jint)printFieldLockedWithCharArray:(IOSCharArray *)formatStr
                              withInt:(jint)amt
                             withChar:(jchar)suffix
                              withInt:(jint)pos
                          withBoolean:(jboolean)always
                              withInt:(jint)zeropad {
  return AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, amt, suffix, pos, always, zeropad);
}

+ (jint)formatDurationLockedWithLong:(jlong)duration
                             withInt:(jint)fieldLen {
  return AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(duration, fieldLen);
}

+ (void)formatDurationWithLong:(jlong)duration
     withJavaLangStringBuilder:(JavaLangStringBuilder *)builder {
  AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(duration, builder);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(accumFieldWithInt:withInt:withBoolean:withInt:);
  methods[2].selector = @selector(printFieldLockedWithCharArray:withInt:withChar:withInt:withBoolean:withInt:);
  methods[3].selector = @selector(formatDurationLockedWithLong:withInt:);
  methods[4].selector = @selector(formatDurationWithLong:withJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HUNDRED_DAY_FIELD_LEN", "I", .constantValue.asInt = AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN, 0x19, -1, -1, -1, -1 },
    { "SECONDS_PER_MINUTE", "I", .constantValue.asInt = AndroidUtilTimeUtils_SECONDS_PER_MINUTE, 0x1a, -1, -1, -1, -1 },
    { "SECONDS_PER_HOUR", "I", .constantValue.asInt = AndroidUtilTimeUtils_SECONDS_PER_HOUR, 0x1a, -1, -1, -1, -1 },
    { "SECONDS_PER_DAY", "I", .constantValue.asInt = AndroidUtilTimeUtils_SECONDS_PER_DAY, 0x1a, -1, -1, -1, -1 },
    { "NANOS_PER_MS", "J", .constantValue.asLong = AndroidUtilTimeUtils_NANOS_PER_MS, 0x19, -1, -1, -1, -1 },
    { "sFormatSync", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "sFormatStr", "[C", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "sTmpFormatStr", "[C", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "accumField", "IIZI", "printFieldLocked", "[CICIZI", "formatDurationLocked", "JI", "formatDuration", "JLJavaLangStringBuilder;", &AndroidUtilTimeUtils_sFormatSync, &AndroidUtilTimeUtils_sFormatStr, &AndroidUtilTimeUtils_sTmpFormatStr };
  static const J2ObjcClassInfo _AndroidUtilTimeUtils = { "TimeUtils", "android.util", ptrTable, methods, fields, 7, 0x1, 5, 8, -1, -1, -1, -1, -1 };
  return &_AndroidUtilTimeUtils;
}

+ (void)initialize {
  if (self == [AndroidUtilTimeUtils class]) {
    JreStrongAssignAndConsume(&AndroidUtilTimeUtils_sFormatSync, new_NSObject_init());
    JreStrongAssignAndConsume(&AndroidUtilTimeUtils_sFormatStr, [IOSCharArray newArrayWithLength:AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN + 10]);
    JreStrongAssignAndConsume(&AndroidUtilTimeUtils_sTmpFormatStr, [IOSCharArray newArrayWithLength:AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN + 10]);
    J2OBJC_SET_INITIALIZED(AndroidUtilTimeUtils)
  }
}

@end

void AndroidUtilTimeUtils_init(AndroidUtilTimeUtils *self) {
  NSObject_init(self);
}

AndroidUtilTimeUtils *new_AndroidUtilTimeUtils_init() {
  J2OBJC_NEW_IMPL(AndroidUtilTimeUtils, init)
}

AndroidUtilTimeUtils *create_AndroidUtilTimeUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilTimeUtils, init)
}

jint AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(jint amt, jint suffix, jboolean always, jint zeropad) {
  AndroidUtilTimeUtils_initialize();
  if (amt > 999) {
    jint num = 0;
    while (amt != 0) {
      num++;
      amt /= 10;
    }
    return num + suffix;
  }
  else {
    if (amt > 99 || (always && zeropad >= 3)) {
      return 3 + suffix;
    }
    if (amt > 9 || (always && zeropad >= 2)) {
      return 2 + suffix;
    }
    if (always || amt > 0) {
      return 1 + suffix;
    }
  }
  return 0;
}

jint AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(IOSCharArray *formatStr, jint amt, jchar suffix, jint pos, jboolean always, jint zeropad) {
  AndroidUtilTimeUtils_initialize();
  if (always || amt > 0) {
    jint startPos = pos;
    if (amt > 999) {
      jint tmp = 0;
      while (amt != 0 && tmp < ((IOSCharArray *) nil_chk(AndroidUtilTimeUtils_sTmpFormatStr))->size_) {
        jint dig = amt % 10;
        *IOSCharArray_GetRef(nil_chk(AndroidUtilTimeUtils_sTmpFormatStr), tmp) = (jchar) (dig + '0');
        tmp++;
        amt /= 10;
      }
      tmp--;
      while (tmp >= 0) {
        *IOSCharArray_GetRef(nil_chk(formatStr), pos) = IOSCharArray_Get(nil_chk(AndroidUtilTimeUtils_sTmpFormatStr), tmp);
        pos++;
        tmp--;
      }
    }
    else {
      if ((always && zeropad >= 3) || amt > 99) {
        jint dig = amt / 100;
        *IOSCharArray_GetRef(nil_chk(formatStr), pos) = (jchar) (dig + '0');
        pos++;
        amt -= (dig * 100);
      }
      if ((always && zeropad >= 2) || amt > 9 || startPos != pos) {
        jint dig = amt / 10;
        *IOSCharArray_GetRef(nil_chk(formatStr), pos) = (jchar) (dig + '0');
        pos++;
        amt -= (dig * 10);
      }
      *IOSCharArray_GetRef(nil_chk(formatStr), pos) = (jchar) (amt + '0');
      pos++;
    }
    *IOSCharArray_GetRef(nil_chk(formatStr), pos) = suffix;
    pos++;
  }
  return pos;
}

jint AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(jlong duration, jint fieldLen) {
  AndroidUtilTimeUtils_initialize();
  if (((IOSCharArray *) nil_chk(AndroidUtilTimeUtils_sFormatStr))->size_ < fieldLen) {
    JreStrongAssignAndConsume(&AndroidUtilTimeUtils_sFormatStr, [IOSCharArray newArrayWithLength:fieldLen]);
  }
  IOSCharArray *formatStr = AndroidUtilTimeUtils_sFormatStr;
  if (duration == 0) {
    jint pos = 0;
    fieldLen -= 1;
    while (pos < fieldLen) {
      *IOSCharArray_GetRef(formatStr, pos++) = ' ';
    }
    *IOSCharArray_GetRef(formatStr, pos) = '0';
    return pos + 1;
  }
  jchar prefix;
  if (duration > 0) {
    prefix = '+';
  }
  else {
    prefix = '-';
    duration = -duration;
  }
  jint millis = (jint) (duration % 1000);
  jint seconds = JreFpToInt(JavaLangMath_floorWithDouble_(duration / 1000));
  jint days = 0;
  jint hours = 0;
  jint minutes = 0;
  if (seconds > AndroidUtilTimeUtils_SECONDS_PER_DAY) {
    days = seconds / AndroidUtilTimeUtils_SECONDS_PER_DAY;
    seconds -= days * AndroidUtilTimeUtils_SECONDS_PER_DAY;
  }
  if (seconds > AndroidUtilTimeUtils_SECONDS_PER_HOUR) {
    hours = seconds / AndroidUtilTimeUtils_SECONDS_PER_HOUR;
    seconds -= hours * AndroidUtilTimeUtils_SECONDS_PER_HOUR;
  }
  if (seconds > AndroidUtilTimeUtils_SECONDS_PER_MINUTE) {
    minutes = seconds / AndroidUtilTimeUtils_SECONDS_PER_MINUTE;
    seconds -= minutes * AndroidUtilTimeUtils_SECONDS_PER_MINUTE;
  }
  jint pos = 0;
  if (fieldLen != 0) {
    jint myLen = AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(days, 1, false, 0);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(hours, 1, myLen > 0, 2);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(minutes, 1, myLen > 0, 2);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(seconds, 1, myLen > 0, 2);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(millis, 2, true, myLen > 0 ? 3 : 0) + 1;
    while (myLen < fieldLen) {
      *IOSCharArray_GetRef(formatStr, pos) = ' ';
      pos++;
      myLen++;
    }
  }
  *IOSCharArray_GetRef(formatStr, pos) = prefix;
  pos++;
  jint start = pos;
  jboolean zeropad = fieldLen != 0;
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, days, 'd', pos, false, 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, hours, 'h', pos, pos != start, zeropad ? 2 : 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, minutes, 'm', pos, pos != start, zeropad ? 2 : 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, seconds, 's', pos, pos != start, zeropad ? 2 : 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, millis, 'm', pos, true, (zeropad && pos != start) ? 3 : 0);
  *IOSCharArray_GetRef(formatStr, pos) = 's';
  return pos + 1;
}

void AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(jlong duration, JavaLangStringBuilder *builder) {
  AndroidUtilTimeUtils_initialize();
  @synchronized(AndroidUtilTimeUtils_sFormatSync) {
    jint len = AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(duration, 0);
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithCharArray:AndroidUtilTimeUtils_sFormatStr withInt:0 withInt:len];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilTimeUtils)

@implementation AndroidUtilXml

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilXml_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<OrgXmlpullV1XmlPullParser>)newPullParser {
  return AndroidUtilXml_newPullParser();
}

+ (id<OrgXmlpullV1XmlSerializer>)newSerializer {
  return AndroidUtilXml_newSerializer();
}

+ (AndroidUtilXml_Encoding *)findEncodingByNameWithNSString:(NSString *)encodingName {
  return AndroidUtilXml_findEncodingByNameWithNSString_(encodingName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlPullParser;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilXml_Encoding;", 0x9, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newPullParser);
  methods[2].selector = @selector(newSerializer);
  methods[3].selector = @selector(findEncodingByNameWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "findEncodingByName", "LNSString;", "LJavaIoUnsupportedEncodingException;", "LAndroidUtilXml_XmlSerializerFactory;LAndroidUtilXml_Encoding;" };
  static const J2ObjcClassInfo _AndroidUtilXml = { "Xml", "android.util", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, 3, -1, -1, -1 };
  return &_AndroidUtilXml;
}

@end

void AndroidUtilXml_init(AndroidUtilXml *self) {
  NSObject_init(self);
}

AndroidUtilXml *new_AndroidUtilXml_init() {
  J2OBJC_NEW_IMPL(AndroidUtilXml, init)
}

AndroidUtilXml *create_AndroidUtilXml_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilXml, init)
}

id<OrgXmlpullV1XmlPullParser> AndroidUtilXml_newPullParser() {
  AndroidUtilXml_initialize();
  @try {
    id<OrgXmlpullV1XmlPullParser> xmlPullParser = [((OrgXmlpullV1XmlPullParserFactory *) nil_chk(OrgXmlpullV1XmlPullParserFactory_newInstance())) newPullParser];
    return xmlPullParser;
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

id<OrgXmlpullV1XmlSerializer> AndroidUtilXml_newSerializer() {
  AndroidUtilXml_initialize();
  @try {
    return [((OrgXmlpullV1XmlPullParserFactory *) nil_chk(JreLoadStatic(AndroidUtilXml_XmlSerializerFactory, instance))) newSerializer];
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
}

AndroidUtilXml_Encoding *AndroidUtilXml_findEncodingByNameWithNSString_(NSString *encodingName) {
  AndroidUtilXml_initialize();
  if (encodingName == nil) {
    return JreLoadEnum(AndroidUtilXml_Encoding, UTF_8);
  }
  {
    IOSObjectArray *a__ = AndroidUtilXml_Encoding_values();
    AndroidUtilXml_Encoding * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AndroidUtilXml_Encoding * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AndroidUtilXml_Encoding *encoding = *b__++;
      if ([((NSString *) nil_chk(((AndroidUtilXml_Encoding *) nil_chk(encoding))->expatName_)) java_equalsIgnoreCase:encodingName]) return encoding;
    }
  }
  @throw create_JavaIoUnsupportedEncodingException_initWithNSString_(encodingName);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilXml)

J2OBJC_INITIALIZED_DEFN(AndroidUtilXml_XmlSerializerFactory)

NSString *AndroidUtilXml_XmlSerializerFactory_TYPE = @"org.kxml2.io.KXmlParser,org.kxml2.io.KXmlSerializer";
OrgXmlpullV1XmlPullParserFactory *AndroidUtilXml_XmlSerializerFactory_instance;

@implementation AndroidUtilXml_XmlSerializerFactory

+ (NSString *)TYPE {
  return AndroidUtilXml_XmlSerializerFactory_TYPE;
}

+ (OrgXmlpullV1XmlPullParserFactory *)instance {
  return AndroidUtilXml_XmlSerializerFactory_instance;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  AndroidUtilXml_XmlSerializerFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
    { "instance", "LOrgXmlpullV1XmlPullParserFactory;", .constantValue.asLong = 0, 0x18, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { &AndroidUtilXml_XmlSerializerFactory_TYPE, &AndroidUtilXml_XmlSerializerFactory_instance, "LAndroidUtilXml;" };
  static const J2ObjcClassInfo _AndroidUtilXml_XmlSerializerFactory = { "XmlSerializerFactory", "android.util", ptrTable, methods, fields, 7, 0x8, 1, 2, 2, -1, -1, -1, -1 };
  return &_AndroidUtilXml_XmlSerializerFactory;
}

+ (void)initialize {
  if (self == [AndroidUtilXml_XmlSerializerFactory class]) {
    {
      @try {
        JreStrongAssign(&AndroidUtilXml_XmlSerializerFactory_instance, OrgXmlpullV1XmlPullParserFactory_newInstanceWithNSString_withIOSClass_(AndroidUtilXml_XmlSerializerFactory_TYPE, nil));
      }
      @catch (OrgXmlpullV1XmlPullParserException *e) {
        @throw create_JavaLangAssertionError_initWithId_(e);
      }
    }
    J2OBJC_SET_INITIALIZED(AndroidUtilXml_XmlSerializerFactory)
  }
}

@end

void AndroidUtilXml_XmlSerializerFactory_init(AndroidUtilXml_XmlSerializerFactory *self) {
  NSObject_init(self);
}

AndroidUtilXml_XmlSerializerFactory *new_AndroidUtilXml_XmlSerializerFactory_init() {
  J2OBJC_NEW_IMPL(AndroidUtilXml_XmlSerializerFactory, init)
}

AndroidUtilXml_XmlSerializerFactory *create_AndroidUtilXml_XmlSerializerFactory_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilXml_XmlSerializerFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilXml_XmlSerializerFactory)

J2OBJC_INITIALIZED_DEFN(AndroidUtilXml_Encoding)

AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_values_[4];

@implementation AndroidUtilXml_Encoding

+ (AndroidUtilXml_Encoding *)US_ASCII {
  return JreEnum(AndroidUtilXml_Encoding, US_ASCII);
}

+ (AndroidUtilXml_Encoding *)UTF_8 {
  return JreEnum(AndroidUtilXml_Encoding, UTF_8);
}

+ (AndroidUtilXml_Encoding *)UTF_16 {
  return JreEnum(AndroidUtilXml_Encoding, UTF_16);
}

+ (AndroidUtilXml_Encoding *)ISO_8859_1 {
  return JreEnum(AndroidUtilXml_Encoding, ISO_8859_1);
}

+ (IOSObjectArray *)values {
  return AndroidUtilXml_Encoding_values();
}

+ (AndroidUtilXml_Encoding *)valueOfWithNSString:(NSString *)name {
  return AndroidUtilXml_Encoding_valueOfWithNSString_(name);
}

- (AndroidUtilXml_Encoding_Enum)toNSEnum {
  return (AndroidUtilXml_Encoding_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LAndroidUtilXml_Encoding;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilXml_Encoding;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "US_ASCII", "LAndroidUtilXml_Encoding;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "UTF_8", "LAndroidUtilXml_Encoding;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "UTF_16", "LAndroidUtilXml_Encoding;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ISO_8859_1", "LAndroidUtilXml_Encoding;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "expatName_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(AndroidUtilXml_Encoding, US_ASCII), &JreEnum(AndroidUtilXml_Encoding, UTF_8), &JreEnum(AndroidUtilXml_Encoding, UTF_16), &JreEnum(AndroidUtilXml_Encoding, ISO_8859_1), "LAndroidUtilXml;", "Ljava/lang/Enum<Landroid/util/Xml$Encoding;>;" };
  static const J2ObjcClassInfo _AndroidUtilXml_Encoding = { "Encoding", "android.util", ptrTable, methods, fields, 7, 0x4019, 2, 5, 6, -1, -1, 7, -1 };
  return &_AndroidUtilXml_Encoding;
}

+ (void)initialize {
  if (self == [AndroidUtilXml_Encoding class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(AndroidUtilXml_Encoding, US_ASCII) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    AndroidUtilXml_Encoding_initWithNSString_withNSString_withInt_(e, @"US-ASCII", @"US_ASCII", 0);
    ((void) (JreEnum(AndroidUtilXml_Encoding, UTF_8) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    AndroidUtilXml_Encoding_initWithNSString_withNSString_withInt_(e, @"UTF-8", @"UTF_8", 1);
    ((void) (JreEnum(AndroidUtilXml_Encoding, UTF_16) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    AndroidUtilXml_Encoding_initWithNSString_withNSString_withInt_(e, @"UTF-16", @"UTF_16", 2);
    ((void) (JreEnum(AndroidUtilXml_Encoding, ISO_8859_1) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    AndroidUtilXml_Encoding_initWithNSString_withNSString_withInt_(e, @"ISO-8859-1", @"ISO_8859_1", 3);
    J2OBJC_SET_INITIALIZED(AndroidUtilXml_Encoding)
  }
}

@end

void AndroidUtilXml_Encoding_initWithNSString_withNSString_withInt_(AndroidUtilXml_Encoding *self, NSString *expatName, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->expatName_, expatName);
}

IOSObjectArray *AndroidUtilXml_Encoding_values() {
  AndroidUtilXml_Encoding_initialize();
  return [IOSObjectArray arrayWithObjects:AndroidUtilXml_Encoding_values_ count:4 type:AndroidUtilXml_Encoding_class_()];
}

AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_valueOfWithNSString_(NSString *name) {
  AndroidUtilXml_Encoding_initialize();
  for (int i = 0; i < 4; i++) {
    AndroidUtilXml_Encoding *e = AndroidUtilXml_Encoding_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

AndroidUtilXml_Encoding *AndroidUtilXml_Encoding_fromOrdinal(NSUInteger ordinal) {
  AndroidUtilXml_Encoding_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return AndroidUtilXml_Encoding_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilXml_Encoding)

J2OBJC_INITIALIZED_DEFN(CoDopplAltUtilsArrayUtils)

@implementation CoDopplAltUtilsArrayUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CoDopplAltUtilsArrayUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)newUnpaddedByteArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedByteArrayWithInt_(minLen);
}

+ (IOSCharArray *)newUnpaddedCharArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedCharArrayWithInt_(minLen);
}

+ (IOSIntArray *)newUnpaddedIntArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedIntArrayWithInt_(minLen);
}

+ (IOSBooleanArray *)newUnpaddedBooleanArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedBooleanArrayWithInt_(minLen);
}

+ (IOSLongArray *)newUnpaddedLongArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedLongArrayWithInt_(minLen);
}

+ (IOSFloatArray *)newUnpaddedFloatArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedFloatArrayWithInt_(minLen);
}

+ (IOSObjectArray *)newUnpaddedObjectArrayWithInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedObjectArrayWithInt_(minLen);
}

+ (IOSObjectArray *)newUnpaddedArrayWithIOSClass:(IOSClass *)clazz
                                         withInt:(jint)minLen {
  return CoDopplAltUtilsArrayUtils_newUnpaddedArrayWithIOSClass_withInt_(clazz, minLen);
}

+ (jint)idealByteArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need);
}

+ (jint)idealBooleanArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealBooleanArraySizeWithInt_(need);
}

+ (jint)idealShortArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealShortArraySizeWithInt_(need);
}

+ (jint)idealCharArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealCharArraySizeWithInt_(need);
}

+ (jint)idealIntArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealIntArraySizeWithInt_(need);
}

+ (jint)idealFloatArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealFloatArraySizeWithInt_(need);
}

+ (jint)idealObjectArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealObjectArraySizeWithInt_(need);
}

+ (jint)idealLongArraySizeWithInt:(jint)need {
  return CoDopplAltUtilsArrayUtils_idealLongArraySizeWithInt_(need);
}

+ (jboolean)equalsWithByteArray:(IOSByteArray *)array1
                  withByteArray:(IOSByteArray *)array2
                        withInt:(jint)length {
  return CoDopplAltUtilsArrayUtils_equalsWithByteArray_withByteArray_withInt_(array1, array2, length);
}

+ (IOSObjectArray *)emptyArrayWithIOSClass:(IOSClass *)kind {
  return CoDopplAltUtilsArrayUtils_emptyArrayWithIOSClass_(kind);
}

+ (jboolean)isEmptyWithNSObjectArray:(IOSObjectArray *)array {
  return CoDopplAltUtilsArrayUtils_isEmptyWithNSObjectArray_(array);
}

+ (jboolean)isEmptyWithIntArray:(IOSIntArray *)array {
  return CoDopplAltUtilsArrayUtils_isEmptyWithIntArray_(array);
}

+ (jboolean)isEmptyWithLongArray:(IOSLongArray *)array {
  return CoDopplAltUtilsArrayUtils_isEmptyWithLongArray_(array);
}

+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)value {
  return CoDopplAltUtilsArrayUtils_containsWithNSObjectArray_withId_(array, value);
}

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)value {
  return CoDopplAltUtilsArrayUtils_indexOfWithNSObjectArray_withId_(array, value);
}

+ (jboolean)containsAllWithNSObjectArray:(IOSObjectArray *)array
                       withNSObjectArray:(IOSObjectArray *)check {
  return CoDopplAltUtilsArrayUtils_containsAllWithNSObjectArray_withNSObjectArray_(array, check);
}

+ (jboolean)containsWithIntArray:(IOSIntArray *)array
                         withInt:(jint)value {
  return CoDopplAltUtilsArrayUtils_containsWithIntArray_withInt_(array, value);
}

+ (jboolean)containsWithLongArray:(IOSLongArray *)array
                         withLong:(jlong)value {
  return CoDopplAltUtilsArrayUtils_containsWithLongArray_withLong_(array, value);
}

+ (jlong)totalWithLongArray:(IOSLongArray *)array {
  return CoDopplAltUtilsArrayUtils_totalWithLongArray_(array);
}

+ (IOSObjectArray *)appendElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element {
  return CoDopplAltUtilsArrayUtils_appendElementWithIOSClass_withNSObjectArray_withId_(kind, array, element);
}

+ (IOSObjectArray *)removeElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element {
  return CoDopplAltUtilsArrayUtils_removeElementWithIOSClass_withNSObjectArray_withId_(kind, array, element);
}

+ (IOSIntArray *)appendIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val {
  return CoDopplAltUtilsArrayUtils_appendIntWithIntArray_withInt_(cur, val);
}

+ (IOSIntArray *)removeIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val {
  return CoDopplAltUtilsArrayUtils_removeIntWithIntArray_withInt_(cur, val);
}

+ (IOSLongArray *)appendLongWithLongArray:(IOSLongArray *)cur
                                 withLong:(jlong)val {
  return CoDopplAltUtilsArrayUtils_appendLongWithLongArray_withLong_(cur, val);
}

+ (IOSLongArray *)removeLongWithLongArray:(IOSLongArray *)cur
                                 withLong:(jlong)val {
  return CoDopplAltUtilsArrayUtils_removeLongWithLongArray_withLong_(cur, val);
}

+ (IOSLongArray *)cloneOrNullWithLongArray:(IOSLongArray *)array {
  return CoDopplAltUtilsArrayUtils_cloneOrNullWithLongArray_(array);
}

+ (AndroidUtilArraySet *)addWithAndroidUtilArraySet:(AndroidUtilArraySet *)cur
                                             withId:(id)val {
  return CoDopplAltUtilsArrayUtils_addWithAndroidUtilArraySet_withId_(cur, val);
}

+ (AndroidUtilArraySet *)removeWithAndroidUtilArraySet:(AndroidUtilArraySet *)cur
                                                withId:(id)val {
  return CoDopplAltUtilsArrayUtils_removeWithAndroidUtilArraySet_withId_(cur, val);
}

+ (jboolean)containsWithAndroidUtilArraySet:(AndroidUtilArraySet *)cur
                                     withId:(id)val {
  return CoDopplAltUtilsArrayUtils_containsWithAndroidUtilArraySet_withId_(cur, val);
}

+ (JavaUtilArrayList *)addWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                         withId:(id)val {
  return CoDopplAltUtilsArrayUtils_addWithJavaUtilArrayList_withId_(cur, val);
}

+ (JavaUtilArrayList *)removeWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                            withId:(id)val {
  return CoDopplAltUtilsArrayUtils_removeWithJavaUtilArrayList_withId_(cur, val);
}

+ (jboolean)containsWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                   withId:(id)val {
  return CoDopplAltUtilsArrayUtils_containsWithJavaUtilArrayList_withId_(cur, val);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "I", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 17, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 18, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x9, 24, 25, -1, 26, -1, -1 },
    { NULL, "Z", 0x9, 24, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 24, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 29, 30, -1, 31, -1, -1 },
    { NULL, "I", 0x9, 32, 30, -1, 33, -1, -1 },
    { NULL, "Z", 0x9, 34, 35, -1, 36, -1, -1 },
    { NULL, "Z", 0x9, 29, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 29, 38, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 39, 28, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 40, 41, -1, 42, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 43, 41, -1, 42, -1, -1 },
    { NULL, "[I", 0x9, 44, 37, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 45, 37, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 46, 38, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 47, 38, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 48, 28, -1, -1, -1, -1 },
    { NULL, "LAndroidUtilArraySet;", 0x9, 49, 50, -1, 51, -1, -1 },
    { NULL, "LAndroidUtilArraySet;", 0x9, 52, 50, -1, 51, -1, -1 },
    { NULL, "Z", 0x9, 29, 50, -1, 53, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 49, 54, -1, 55, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 52, 54, -1, 55, -1, -1 },
    { NULL, "Z", 0x9, 29, 54, -1, 56, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newUnpaddedByteArrayWithInt:);
  methods[2].selector = @selector(newUnpaddedCharArrayWithInt:);
  methods[3].selector = @selector(newUnpaddedIntArrayWithInt:);
  methods[4].selector = @selector(newUnpaddedBooleanArrayWithInt:);
  methods[5].selector = @selector(newUnpaddedLongArrayWithInt:);
  methods[6].selector = @selector(newUnpaddedFloatArrayWithInt:);
  methods[7].selector = @selector(newUnpaddedObjectArrayWithInt:);
  methods[8].selector = @selector(newUnpaddedArrayWithIOSClass:withInt:);
  methods[9].selector = @selector(idealByteArraySizeWithInt:);
  methods[10].selector = @selector(idealBooleanArraySizeWithInt:);
  methods[11].selector = @selector(idealShortArraySizeWithInt:);
  methods[12].selector = @selector(idealCharArraySizeWithInt:);
  methods[13].selector = @selector(idealIntArraySizeWithInt:);
  methods[14].selector = @selector(idealFloatArraySizeWithInt:);
  methods[15].selector = @selector(idealObjectArraySizeWithInt:);
  methods[16].selector = @selector(idealLongArraySizeWithInt:);
  methods[17].selector = @selector(equalsWithByteArray:withByteArray:withInt:);
  methods[18].selector = @selector(emptyArrayWithIOSClass:);
  methods[19].selector = @selector(isEmptyWithNSObjectArray:);
  methods[20].selector = @selector(isEmptyWithIntArray:);
  methods[21].selector = @selector(isEmptyWithLongArray:);
  methods[22].selector = @selector(containsWithNSObjectArray:withId:);
  methods[23].selector = @selector(indexOfWithNSObjectArray:withId:);
  methods[24].selector = @selector(containsAllWithNSObjectArray:withNSObjectArray:);
  methods[25].selector = @selector(containsWithIntArray:withInt:);
  methods[26].selector = @selector(containsWithLongArray:withLong:);
  methods[27].selector = @selector(totalWithLongArray:);
  methods[28].selector = @selector(appendElementWithIOSClass:withNSObjectArray:withId:);
  methods[29].selector = @selector(removeElementWithIOSClass:withNSObjectArray:withId:);
  methods[30].selector = @selector(appendIntWithIntArray:withInt:);
  methods[31].selector = @selector(removeIntWithIntArray:withInt:);
  methods[32].selector = @selector(appendLongWithLongArray:withLong:);
  methods[33].selector = @selector(removeLongWithLongArray:withLong:);
  methods[34].selector = @selector(cloneOrNullWithLongArray:);
  methods[35].selector = @selector(addWithAndroidUtilArraySet:withId:);
  methods[36].selector = @selector(removeWithAndroidUtilArraySet:withId:);
  methods[37].selector = @selector(containsWithAndroidUtilArraySet:withId:);
  methods[38].selector = @selector(addWithJavaUtilArrayList:withId:);
  methods[39].selector = @selector(removeWithJavaUtilArrayList:withId:);
  methods[40].selector = @selector(containsWithJavaUtilArrayList:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "[LNSObject;", .constantValue.asLong = 0, 0xa, -1, 57, -1, -1 },
    { "CACHE_SIZE", "I", .constantValue.asInt = CoDopplAltUtilsArrayUtils_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "sCache", "[LNSObject;", .constantValue.asLong = 0, 0xa, -1, 58, -1, -1 },
  };
  static const void *ptrTable[] = { "newUnpaddedByteArray", "I", "newUnpaddedCharArray", "newUnpaddedIntArray", "newUnpaddedBooleanArray", "newUnpaddedLongArray", "newUnpaddedFloatArray", "newUnpaddedObjectArray", "newUnpaddedArray", "LIOSClass;I", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;I)[TT;", "idealByteArraySize", "idealBooleanArraySize", "idealShortArraySize", "idealCharArraySize", "idealIntArraySize", "idealFloatArraySize", "idealObjectArraySize", "idealLongArraySize", "equals", "[B[BI", "emptyArray", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)[TT;", "isEmpty", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Z", "[I", "[J", "contains", "[LNSObject;LNSObject;", "<T:Ljava/lang/Object;>([TT;TT;)Z", "indexOf", "<T:Ljava/lang/Object;>([TT;TT;)I", "containsAll", "[LNSObject;[LNSObject;", "<T:Ljava/lang/Object;>([TT;[TT;)Z", "[II", "[JJ", "total", "appendElement", "LIOSClass;[LNSObject;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;[TT;TT;)[TT;", "removeElement", "appendInt", "removeInt", "appendLong", "removeLong", "cloneOrNull", "add", "LAndroidUtilArraySet;LNSObject;", "<T:Ljava/lang/Object;>(Landroid/util/ArraySet<TT;>;TT;)Landroid/util/ArraySet<TT;>;", "remove", "<T:Ljava/lang/Object;>(Landroid/util/ArraySet<TT;>;TT;)Z", "LJavaUtilArrayList;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;TT;)Ljava/util/ArrayList<TT;>;", "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;TT;)Z", &CoDopplAltUtilsArrayUtils_EMPTY, &CoDopplAltUtilsArrayUtils_sCache };
  static const J2ObjcClassInfo _CoDopplAltUtilsArrayUtils = { "ArrayUtils", "co.doppl.alt.utils", ptrTable, methods, fields, 7, 0x1, 41, 3, -1, -1, -1, -1, -1 };
  return &_CoDopplAltUtilsArrayUtils;
}

+ (void)initialize {
  if (self == [CoDopplAltUtilsArrayUtils class]) {
    JreStrongAssignAndConsume(&CoDopplAltUtilsArrayUtils_EMPTY, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsArrayUtils_sCache, [IOSObjectArray newArrayWithLength:CoDopplAltUtilsArrayUtils_CACHE_SIZE type:NSObject_class_()]);
    J2OBJC_SET_INITIALIZED(CoDopplAltUtilsArrayUtils)
  }
}

@end

void CoDopplAltUtilsArrayUtils_init(CoDopplAltUtilsArrayUtils *self) {
  NSObject_init(self);
}

CoDopplAltUtilsArrayUtils *new_CoDopplAltUtilsArrayUtils_init() {
  J2OBJC_NEW_IMPL(CoDopplAltUtilsArrayUtils, init)
}

CoDopplAltUtilsArrayUtils *create_CoDopplAltUtilsArrayUtils_init() {
  J2OBJC_CREATE_IMPL(CoDopplAltUtilsArrayUtils, init)
}

IOSByteArray *CoDopplAltUtilsArrayUtils_newUnpaddedByteArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSByteArray arrayWithLength:minLen];
}

IOSCharArray *CoDopplAltUtilsArrayUtils_newUnpaddedCharArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSCharArray arrayWithLength:minLen];
}

IOSIntArray *CoDopplAltUtilsArrayUtils_newUnpaddedIntArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSIntArray arrayWithLength:minLen];
}

IOSBooleanArray *CoDopplAltUtilsArrayUtils_newUnpaddedBooleanArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSBooleanArray arrayWithLength:minLen];
}

IOSLongArray *CoDopplAltUtilsArrayUtils_newUnpaddedLongArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSLongArray arrayWithLength:minLen];
}

IOSFloatArray *CoDopplAltUtilsArrayUtils_newUnpaddedFloatArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSFloatArray arrayWithLength:minLen];
}

IOSObjectArray *CoDopplAltUtilsArrayUtils_newUnpaddedObjectArrayWithInt_(jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return [IOSObjectArray arrayWithLength:minLen type:NSObject_class_()];
}

IOSObjectArray *CoDopplAltUtilsArrayUtils_newUnpaddedArrayWithIOSClass_withInt_(IOSClass *clazz, jint minLen) {
  CoDopplAltUtilsArrayUtils_initialize();
  return (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(clazz, minLen), IOSClass_arrayType(NSObject_class_(), 1));
}

jint CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  for (jint i = 4; i < 32; i++) if (need <= (JreLShift32(1, i)) - 12) return (JreLShift32(1, i)) - 12;
  return need;
}

jint CoDopplAltUtilsArrayUtils_idealBooleanArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need);
}

jint CoDopplAltUtilsArrayUtils_idealShortArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need * 2) / 2;
}

jint CoDopplAltUtilsArrayUtils_idealCharArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need * 2) / 2;
}

jint CoDopplAltUtilsArrayUtils_idealIntArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need * 4) / 4;
}

jint CoDopplAltUtilsArrayUtils_idealFloatArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need * 4) / 4;
}

jint CoDopplAltUtilsArrayUtils_idealObjectArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need * 4) / 4;
}

jint CoDopplAltUtilsArrayUtils_idealLongArraySizeWithInt_(jint need) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_idealByteArraySizeWithInt_(need * 8) / 8;
}

jboolean CoDopplAltUtilsArrayUtils_equalsWithByteArray_withByteArray_withInt_(IOSByteArray *array1, IOSByteArray *array2, jint length) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (length < 0) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  if (array1 == array2) {
    return true;
  }
  if (array1 == nil || array2 == nil || array1->size_ < length || array2->size_ < length) {
    return false;
  }
  for (jint i = 0; i < length; i++) {
    if (IOSByteArray_Get(array1, i) != IOSByteArray_Get(array2, i)) {
      return false;
    }
  }
  return true;
}

IOSObjectArray *CoDopplAltUtilsArrayUtils_emptyArrayWithIOSClass_(IOSClass *kind) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (kind == NSObject_class_()) {
    return CoDopplAltUtilsArrayUtils_EMPTY;
  }
  jint bucket = ((JavaLangSystem_identityHashCodeWithId_(kind) / 8) & (jint) 0x7FFFFFFF) % CoDopplAltUtilsArrayUtils_CACHE_SIZE;
  id cache = IOSObjectArray_Get(nil_chk(CoDopplAltUtilsArrayUtils_sCache), bucket);
  if (cache == nil || [[cache java_getClass] getComponentType] != kind) {
    cache = JavaLangReflectArray_newInstanceWithIOSClass_withInt_(kind, 0);
    IOSObjectArray_Set(nil_chk(CoDopplAltUtilsArrayUtils_sCache), bucket, cache);
  }
  return (IOSObjectArray *) cast_check(cache, IOSClass_arrayType(NSObject_class_(), 1));
}

jboolean CoDopplAltUtilsArrayUtils_isEmptyWithNSObjectArray_(IOSObjectArray *array) {
  CoDopplAltUtilsArrayUtils_initialize();
  return array == nil || array->size_ == 0;
}

jboolean CoDopplAltUtilsArrayUtils_isEmptyWithIntArray_(IOSIntArray *array) {
  CoDopplAltUtilsArrayUtils_initialize();
  return array == nil || array->size_ == 0;
}

jboolean CoDopplAltUtilsArrayUtils_isEmptyWithLongArray_(IOSLongArray *array) {
  CoDopplAltUtilsArrayUtils_initialize();
  return array == nil || array->size_ == 0;
}

jboolean CoDopplAltUtilsArrayUtils_containsWithNSObjectArray_withId_(IOSObjectArray *array, id value) {
  CoDopplAltUtilsArrayUtils_initialize();
  return CoDopplAltUtilsArrayUtils_indexOfWithNSObjectArray_withId_(array, value) != -1;
}

jint CoDopplAltUtilsArrayUtils_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id value) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (array == nil) return -1;
  for (jint i = 0; i < array->size_; i++) {
    if (IOSObjectArray_Get(array, i) == nil) {
      if (value == nil) return i;
    }
    else {
      if (value != nil && [nil_chk(IOSObjectArray_Get(array, i)) isEqual:value]) return i;
    }
  }
  return -1;
}

jboolean CoDopplAltUtilsArrayUtils_containsAllWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array, IOSObjectArray *check) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (check == nil) return true;
  {
    IOSObjectArray *a__ = check;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id checkItem = *b__++;
      if (!CoDopplAltUtilsArrayUtils_containsWithNSObjectArray_withId_(array, checkItem)) {
        return false;
      }
    }
  }
  return true;
}

jboolean CoDopplAltUtilsArrayUtils_containsWithIntArray_withInt_(IOSIntArray *array, jint value) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (array == nil) return false;
  {
    IOSIntArray *a__ = array;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      if (element == value) {
        return true;
      }
    }
  }
  return false;
}

jboolean CoDopplAltUtilsArrayUtils_containsWithLongArray_withLong_(IOSLongArray *array, jlong value) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (array == nil) return false;
  {
    IOSLongArray *a__ = array;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong element = *b__++;
      if (element == value) {
        return true;
      }
    }
  }
  return false;
}

jlong CoDopplAltUtilsArrayUtils_totalWithLongArray_(IOSLongArray *array) {
  CoDopplAltUtilsArrayUtils_initialize();
  jlong total = 0;
  {
    IOSLongArray *a__ = array;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong value = *b__++;
      total += value;
    }
  }
  return total;
}

IOSObjectArray *CoDopplAltUtilsArrayUtils_appendElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element) {
  CoDopplAltUtilsArrayUtils_initialize();
  IOSObjectArray *result;
  jint end;
  if (array != nil) {
    end = array->size_;
    result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(kind, end + 1), IOSClass_arrayType(NSObject_class_(), 1));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, result, 0, end);
  }
  else {
    end = 0;
    result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(kind, 1), IOSClass_arrayType(NSObject_class_(), 1));
  }
  IOSObjectArray_Set(nil_chk(result), end, element);
  return result;
}

IOSObjectArray *CoDopplAltUtilsArrayUtils_removeElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (array != nil) {
    jint length = array->size_;
    for (jint i = 0; i < length; i++) {
      if (IOSObjectArray_Get(array, i) == element) {
        if (length == 1) {
          return nil;
        }
        IOSObjectArray *result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(kind, length - 1), IOSClass_arrayType(NSObject_class_(), 1));
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, result, 0, i);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, i + 1, result, i, length - i - 1);
        return result;
      }
    }
  }
  return array;
}

IOSIntArray *CoDopplAltUtilsArrayUtils_appendIntWithIntArray_withInt_(IOSIntArray *cur, jint val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    return [IOSIntArray arrayWithInts:(jint[]){ val } count:1];
  }
  jint N = cur->size_;
  for (jint i = 0; i < N; i++) {
    if (IOSIntArray_Get(cur, i) == val) {
      return cur;
    }
  }
  IOSIntArray *ret = [IOSIntArray arrayWithLength:N + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cur, 0, ret, 0, N);
  *IOSIntArray_GetRef(ret, N) = val;
  return ret;
}

IOSIntArray *CoDopplAltUtilsArrayUtils_removeIntWithIntArray_withInt_(IOSIntArray *cur, jint val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    return nil;
  }
  jint N = cur->size_;
  for (jint i = 0; i < N; i++) {
    if (IOSIntArray_Get(cur, i) == val) {
      IOSIntArray *ret = [IOSIntArray arrayWithLength:N - 1];
      if (i > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cur, 0, ret, 0, i);
      }
      if (i < (N - 1)) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cur, i + 1, ret, i, N - i - 1);
      }
      return ret;
    }
  }
  return cur;
}

IOSLongArray *CoDopplAltUtilsArrayUtils_appendLongWithLongArray_withLong_(IOSLongArray *cur, jlong val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    return [IOSLongArray arrayWithLongs:(jlong[]){ val } count:1];
  }
  jint N = cur->size_;
  for (jint i = 0; i < N; i++) {
    if (IOSLongArray_Get(cur, i) == val) {
      return cur;
    }
  }
  IOSLongArray *ret = [IOSLongArray arrayWithLength:N + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cur, 0, ret, 0, N);
  *IOSLongArray_GetRef(ret, N) = val;
  return ret;
}

IOSLongArray *CoDopplAltUtilsArrayUtils_removeLongWithLongArray_withLong_(IOSLongArray *cur, jlong val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    return nil;
  }
  jint N = cur->size_;
  for (jint i = 0; i < N; i++) {
    if (IOSLongArray_Get(cur, i) == val) {
      IOSLongArray *ret = [IOSLongArray arrayWithLength:N - 1];
      if (i > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cur, 0, ret, 0, i);
      }
      if (i < (N - 1)) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cur, i + 1, ret, i, N - i - 1);
      }
      return ret;
    }
  }
  return cur;
}

IOSLongArray *CoDopplAltUtilsArrayUtils_cloneOrNullWithLongArray_(IOSLongArray *array) {
  CoDopplAltUtilsArrayUtils_initialize();
  return (array != nil) ? [((IOSLongArray *) nil_chk(array)) java_clone] : nil;
}

AndroidUtilArraySet *CoDopplAltUtilsArrayUtils_addWithAndroidUtilArraySet_withId_(AndroidUtilArraySet *cur, id val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    cur = create_AndroidUtilArraySet_init();
  }
  [cur addWithId:val];
  return cur;
}

AndroidUtilArraySet *CoDopplAltUtilsArrayUtils_removeWithAndroidUtilArraySet_withId_(AndroidUtilArraySet *cur, id val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    return nil;
  }
  [cur removeWithId:val];
  if ([cur isEmpty]) {
    return nil;
  }
  else {
    return cur;
  }
}

jboolean CoDopplAltUtilsArrayUtils_containsWithAndroidUtilArraySet_withId_(AndroidUtilArraySet *cur, id val) {
  CoDopplAltUtilsArrayUtils_initialize();
  return (cur != nil) ? [((AndroidUtilArraySet *) nil_chk(cur)) containsWithId:val] : false;
}

JavaUtilArrayList *CoDopplAltUtilsArrayUtils_addWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    cur = create_JavaUtilArrayList_init();
  }
  [cur addWithId:val];
  return cur;
}

JavaUtilArrayList *CoDopplAltUtilsArrayUtils_removeWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val) {
  CoDopplAltUtilsArrayUtils_initialize();
  if (cur == nil) {
    return nil;
  }
  [cur removeWithId:val];
  if ([cur isEmpty]) {
    return nil;
  }
  else {
    return cur;
  }
}

jboolean CoDopplAltUtilsArrayUtils_containsWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val) {
  CoDopplAltUtilsArrayUtils_initialize();
  return (cur != nil) ? [((JavaUtilArrayList *) nil_chk(cur)) containsWithId:val] : false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoDopplAltUtilsArrayUtils)

J2OBJC_INITIALIZED_DEFN(CoDopplAltUtilsEmptyArray)

IOSBooleanArray *CoDopplAltUtilsEmptyArray_BOOLEAN;
IOSByteArray *CoDopplAltUtilsEmptyArray_BYTE;
IOSCharArray *CoDopplAltUtilsEmptyArray_CHAR;
IOSDoubleArray *CoDopplAltUtilsEmptyArray_DOUBLE;
IOSIntArray *CoDopplAltUtilsEmptyArray_INT;
IOSLongArray *CoDopplAltUtilsEmptyArray_LONG;
IOSObjectArray *CoDopplAltUtilsEmptyArray_CLASS;
IOSObjectArray *CoDopplAltUtilsEmptyArray_OBJECT;
IOSObjectArray *CoDopplAltUtilsEmptyArray_STRING;
IOSObjectArray *CoDopplAltUtilsEmptyArray_THROWABLE;
IOSObjectArray *CoDopplAltUtilsEmptyArray_STACK_TRACE_ELEMENT;
IOSObjectArray *CoDopplAltUtilsEmptyArray_TYPE;
IOSObjectArray *CoDopplAltUtilsEmptyArray_TYPE_VARIABLE;

@implementation CoDopplAltUtilsEmptyArray

+ (IOSBooleanArray *)BOOLEAN {
  return CoDopplAltUtilsEmptyArray_BOOLEAN;
}

+ (IOSByteArray *)BYTE {
  return CoDopplAltUtilsEmptyArray_BYTE;
}

+ (IOSCharArray *)CHAR {
  return CoDopplAltUtilsEmptyArray_CHAR;
}

+ (IOSDoubleArray *)DOUBLE {
  return CoDopplAltUtilsEmptyArray_DOUBLE;
}

+ (IOSIntArray *)INT {
  return CoDopplAltUtilsEmptyArray_INT;
}

+ (IOSLongArray *)LONG {
  return CoDopplAltUtilsEmptyArray_LONG;
}

+ (IOSObjectArray *)CLASS {
  return CoDopplAltUtilsEmptyArray_CLASS;
}

+ (IOSObjectArray *)OBJECT {
  return CoDopplAltUtilsEmptyArray_OBJECT;
}

+ (IOSObjectArray *)STRING {
  return CoDopplAltUtilsEmptyArray_STRING;
}

+ (IOSObjectArray *)THROWABLE {
  return CoDopplAltUtilsEmptyArray_THROWABLE;
}

+ (IOSObjectArray *)STACK_TRACE_ELEMENT {
  return CoDopplAltUtilsEmptyArray_STACK_TRACE_ELEMENT;
}

+ (IOSObjectArray *)TYPE {
  return CoDopplAltUtilsEmptyArray_TYPE;
}

+ (IOSObjectArray *)TYPE_VARIABLE {
  return CoDopplAltUtilsEmptyArray_TYPE_VARIABLE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  CoDopplAltUtilsEmptyArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BOOLEAN", "[Z", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "BYTE", "[B", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "CHAR", "[C", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "DOUBLE", "[D", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "INT", "[I", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "LONG", "[J", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "CLASS", "[LIOSClass;", .constantValue.asLong = 0, 0x19, -1, 6, 7, -1 },
    { "OBJECT", "[LNSObject;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "STRING", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "THROWABLE", "[LJavaLangThrowable;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "STACK_TRACE_ELEMENT", "[LJavaLangStackTraceElement;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "TYPE", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "TYPE_VARIABLE", "[LJavaLangReflectTypeVariable;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { &CoDopplAltUtilsEmptyArray_BOOLEAN, &CoDopplAltUtilsEmptyArray_BYTE, &CoDopplAltUtilsEmptyArray_CHAR, &CoDopplAltUtilsEmptyArray_DOUBLE, &CoDopplAltUtilsEmptyArray_INT, &CoDopplAltUtilsEmptyArray_LONG, &CoDopplAltUtilsEmptyArray_CLASS, "[Ljava/lang/Class<*>;", &CoDopplAltUtilsEmptyArray_OBJECT, &CoDopplAltUtilsEmptyArray_STRING, &CoDopplAltUtilsEmptyArray_THROWABLE, &CoDopplAltUtilsEmptyArray_STACK_TRACE_ELEMENT, &CoDopplAltUtilsEmptyArray_TYPE, &CoDopplAltUtilsEmptyArray_TYPE_VARIABLE };
  static const J2ObjcClassInfo _CoDopplAltUtilsEmptyArray = { "EmptyArray", "co.doppl.alt.utils", ptrTable, methods, fields, 7, 0x11, 1, 13, -1, -1, -1, -1, -1 };
  return &_CoDopplAltUtilsEmptyArray;
}

+ (void)initialize {
  if (self == [CoDopplAltUtilsEmptyArray class]) {
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_BOOLEAN, [IOSBooleanArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_BYTE, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_CHAR, [IOSCharArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_DOUBLE, [IOSDoubleArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_INT, [IOSIntArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_LONG, [IOSLongArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_CLASS, [IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_OBJECT, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_STRING, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_THROWABLE, [IOSObjectArray newArrayWithLength:0 type:JavaLangThrowable_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_STACK_TRACE_ELEMENT, [IOSObjectArray newArrayWithLength:0 type:JavaLangStackTraceElement_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_TYPE, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectType_class_()]);
    JreStrongAssignAndConsume(&CoDopplAltUtilsEmptyArray_TYPE_VARIABLE, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectTypeVariable_class_()]);
    J2OBJC_SET_INITIALIZED(CoDopplAltUtilsEmptyArray)
  }
}

@end

void CoDopplAltUtilsEmptyArray_init(CoDopplAltUtilsEmptyArray *self) {
  NSObject_init(self);
}

CoDopplAltUtilsEmptyArray *new_CoDopplAltUtilsEmptyArray_init() {
  J2OBJC_NEW_IMPL(CoDopplAltUtilsEmptyArray, init)
}

CoDopplAltUtilsEmptyArray *create_CoDopplAltUtilsEmptyArray_init() {
  J2OBJC_CREATE_IMPL(CoDopplAltUtilsEmptyArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoDopplAltUtilsEmptyArray)

@implementation ComAndroidInternalUtilGrowingArrayUtils

+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                     withId:(id)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(array, currentSize, element);
}

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(array, currentSize, element);
}

+ (IOSLongArray *)appendWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                             withLong:(jlong)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(array, currentSize, element);
}

+ (IOSBooleanArray *)appendWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                withBoolean:(jboolean)element {
  return ComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(array, currentSize, element);
}

+ (IOSObjectArray *)insertWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                     withId:(id)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(array, currentSize, index, element);
}

+ (IOSIntArray *)insertWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)index
                            withInt:(jint)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(array, currentSize, index, element);
}

+ (IOSLongArray *)insertWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                              withInt:(jint)index
                             withLong:(jlong)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(array, currentSize, index, element);
}

+ (IOSBooleanArray *)insertWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                withBoolean:(jboolean)element {
  return ComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(array, currentSize, index, element);
}

+ (jint)growSizeWithInt:(jint)currentSize {
  return ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  ComAndroidInternalUtilGrowingArrayUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "[I", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "[I", 0x9, 6, 9, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 6, 10, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 6, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(appendWithNSObjectArray:withInt:withId:);
  methods[1].selector = @selector(appendWithIntArray:withInt:withInt:);
  methods[2].selector = @selector(appendWithLongArray:withInt:withLong:);
  methods[3].selector = @selector(appendWithBooleanArray:withInt:withBoolean:);
  methods[4].selector = @selector(insertWithNSObjectArray:withInt:withInt:withId:);
  methods[5].selector = @selector(insertWithIntArray:withInt:withInt:withInt:);
  methods[6].selector = @selector(insertWithLongArray:withInt:withInt:withLong:);
  methods[7].selector = @selector(insertWithBooleanArray:withInt:withInt:withBoolean:);
  methods[8].selector = @selector(growSizeWithInt:);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "append", "[LNSObject;ILNSObject;", "<T:Ljava/lang/Object;>([TT;ITT;)[TT;", "[III", "[JIJ", "[ZIZ", "insert", "[LNSObject;IILNSObject;", "<T:Ljava/lang/Object;>([TT;IITT;)[TT;", "[IIII", "[JIIJ", "[ZIIZ", "growSize", "I" };
  static const J2ObjcClassInfo _ComAndroidInternalUtilGrowingArrayUtils = { "GrowingArrayUtils", "com.android.internal.util", ptrTable, methods, NULL, 7, 0x11, 10, 0, -1, -1, -1, -1, -1 };
  return &_ComAndroidInternalUtilGrowingArrayUtils;
}

@end

IOSObjectArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(IOSObjectArray *array, jint currentSize, id element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:41 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSObjectArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedArrayWithIOSClass_withInt_([[array java_getClass] getComponentType], ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  IOSObjectArray_Set(nil_chk(array), currentSize, element);
  return array;
}

IOSIntArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(IOSIntArray *array, jint currentSize, jint element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:58 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSIntArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedIntArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSIntArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}

IOSLongArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(IOSLongArray *array, jint currentSize, jlong element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:73 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSLongArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedLongArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSLongArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}

IOSBooleanArray *ComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jboolean element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:88 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSBooleanArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedBooleanArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSBooleanArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}

IOSObjectArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint currentSize, jint index, id element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:111 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    IOSObjectArray_Set(array, index, element);
    return array;
  }
  IOSObjectArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedArrayWithIOSClass_withInt_([[array java_getClass] getComponentType], ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  IOSObjectArray_Set(nil_chk(newArray), index, element);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSIntArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint currentSize, jint index, jint element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:132 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSIntArray_GetRef(array, index) = element;
    return array;
  }
  IOSIntArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedIntArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSIntArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSLongArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint currentSize, jint index, jlong element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:151 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSLongArray_GetRef(array, index) = element;
    return array;
  }
  IOSLongArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedLongArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSLongArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSBooleanArray *ComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jint index, jboolean element) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"com/android/internal/util/GrowingArrayUtils.java:170 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSBooleanArray_GetRef(array, index) = element;
    return array;
  }
  IOSBooleanArray *newArray = CoDopplAltUtilsArrayUtils_newUnpaddedBooleanArrayWithInt_(ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSBooleanArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

jint ComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(jint currentSize) {
  ComAndroidInternalUtilGrowingArrayUtils_initialize();
  return currentSize <= 4 ? 8 : currentSize * 2;
}

void ComAndroidInternalUtilGrowingArrayUtils_init(ComAndroidInternalUtilGrowingArrayUtils *self) {
  NSObject_init(self);
}

ComAndroidInternalUtilGrowingArrayUtils *new_ComAndroidInternalUtilGrowingArrayUtils_init() {
  J2OBJC_NEW_IMPL(ComAndroidInternalUtilGrowingArrayUtils, init)
}

ComAndroidInternalUtilGrowingArrayUtils *create_ComAndroidInternalUtilGrowingArrayUtils_init() {
  J2OBJC_CREATE_IMPL(ComAndroidInternalUtilGrowingArrayUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAndroidInternalUtilGrowingArrayUtils)

@implementation JavaxAnnotationCheckForNull

- (IOSClass *)annotationType {
  return JavaxAnnotationCheckForNull_class_();
}

- (NSString *)description {
  return @"@javax.annotation.CheckForNull()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationCheckForNull__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationCheckForNull = { "CheckForNull", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationCheckForNull;
}

@end

id<JavaxAnnotationCheckForNull> create_JavaxAnnotationCheckForNull() {
  JavaxAnnotationCheckForNull *self = AUTORELEASE([[JavaxAnnotationCheckForNull alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationCheckForNull__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, MAYBE)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationCheckForNull)

@implementation JavaxAnnotationCheckForSigned

- (IOSClass *)annotationType {
  return JavaxAnnotationCheckForSigned_class_();
}

- (NSString *)description {
  return @"@javax.annotation.CheckForSigned()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationCheckForSigned__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationCheckForSigned = { "CheckForSigned", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationCheckForSigned;
}

@end

id<JavaxAnnotationCheckForSigned> create_JavaxAnnotationCheckForSigned() {
  JavaxAnnotationCheckForSigned *self = AUTORELEASE([[JavaxAnnotationCheckForSigned alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationCheckForSigned__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationNonnegative(JreLoadEnum(JavaxAnnotationMetaWhen, MAYBE)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationCheckForSigned)

@implementation JavaxAnnotationCheckReturnValue

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationCheckReturnValue_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.CheckReturnValue(when=%@)", when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&JavaxAnnotationCheckReturnValue__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationCheckReturnValue = { "CheckReturnValue", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationCheckReturnValue;
}

@end

id<JavaxAnnotationCheckReturnValue> create_JavaxAnnotationCheckReturnValue(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationCheckReturnValue *self = AUTORELEASE([[JavaxAnnotationCheckReturnValue alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationCheckReturnValue__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, TYPE), JreLoadEnum(JavaLangAnnotationElementType, PACKAGE) } count:4 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationCheckReturnValue)

@implementation JavaxAnnotationDetainted

- (IOSClass *)annotationType {
  return JavaxAnnotationDetainted_class_();
}

- (NSString *)description {
  return @"@javax.annotation.Detainted()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationDetainted__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationDetainted = { "Detainted", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationDetainted;
}

@end

id<JavaxAnnotationDetainted> create_JavaxAnnotationDetainted() {
  JavaxAnnotationDetainted *self = AUTORELEASE([[JavaxAnnotationDetainted alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationDetainted__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationUntainted(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationDetainted)

@implementation JavaxAnnotationMatchesPattern

@synthesize value = value_;
@synthesize flags = flags_;

+ (jint)flagsDefault {
  return 0;
}

- (IOSClass *)annotationType {
  return JavaxAnnotationMatchesPattern_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.MatchesPattern(value=%@, flags=%d)", value_, flags_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(flags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationMatchesPattern_Checker;", (void *)&JavaxAnnotationMatchesPattern__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMatchesPattern = { "MatchesPattern", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 2, 2, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationMatchesPattern;
}

@end

id<JavaxAnnotationMatchesPattern> create_JavaxAnnotationMatchesPattern(jint flags, NSString *value) {
  JavaxAnnotationMatchesPattern *self = AUTORELEASE([[JavaxAnnotationMatchesPattern alloc] init]);
  self->flags_ = flags;
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *JavaxAnnotationMatchesPattern__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSString_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMatchesPattern)

@implementation JavaxAnnotationMetaTypeQualifierValidator

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, 0, 1, -1, 2, 3, 4 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaLangAnnotationAnnotation;LNSObject;", "(TA;Ljava/lang/Object;)Ljavax/annotation/meta/When;", (void *)&JavaxAnnotationMetaTypeQualifierValidator__Annotations$0, (void *)&JavaxAnnotationMetaTypeQualifierValidator__Annotations$1, "<A::Ljava/lang/annotation/Annotation;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _JavaxAnnotationMetaTypeQualifierValidator = { "TypeQualifierValidator", "javax.annotation.meta", ptrTable, methods, NULL, 7, 0x609, 1, 0, -1, -1, -1, 5, -1 };
  return &_JavaxAnnotationMetaTypeQualifierValidator;
}

@end

IOSObjectArray *JavaxAnnotationMetaTypeQualifierValidator__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxAnnotationMetaTypeQualifierValidator__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaTypeQualifierValidator)

@implementation JavaxAnnotationMatchesPattern_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  JavaxAnnotationMatchesPattern_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationMatchesPattern>)annotation
                                                                       withId:(id)value {
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_withInt_([((id<JavaxAnnotationMatchesPattern>) nil_chk(annotation)) value], [annotation flags]);
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:((NSString *) cast_chk(value, [NSString class]))])) matches]) return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
  return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationMatchesPattern;LNSObject;", "LJavaxAnnotationMatchesPattern;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/MatchesPattern;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationMatchesPattern_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationMatchesPattern_Checker;
}

@end

void JavaxAnnotationMatchesPattern_Checker_init(JavaxAnnotationMatchesPattern_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationMatchesPattern_Checker *new_JavaxAnnotationMatchesPattern_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationMatchesPattern_Checker, init)
}

JavaxAnnotationMatchesPattern_Checker *create_JavaxAnnotationMatchesPattern_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationMatchesPattern_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationMatchesPattern_Checker)

@implementation JavaxAnnotationNonnegative

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationNonnegative_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.Nonnegative(when=%@)", when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationNonnegative_Checker;", (void *)&JavaxAnnotationNonnegative__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationNonnegative = { "Nonnegative", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationNonnegative;
}

@end

id<JavaxAnnotationNonnegative> create_JavaxAnnotationNonnegative(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationNonnegative *self = AUTORELEASE([[JavaxAnnotationNonnegative alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationNonnegative__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSNumber_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnegative)

@implementation JavaxAnnotationNonnegative_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  JavaxAnnotationNonnegative_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationNonnegative>)annotation
                                                                       withId:(id)v {
  if (!([v isKindOfClass:[NSNumber class]])) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  jboolean isNegative;
  NSNumber *value = (NSNumber *) cast_chk(v, [NSNumber class]);
  if ([value isKindOfClass:[JavaLangLong class]]) isNegative = ([((NSNumber *) nil_chk(value)) longLongValue] < 0);
  else if ([value isKindOfClass:[JavaLangDouble class]]) isNegative = ([((NSNumber *) nil_chk(value)) doubleValue] < 0);
  else if ([value isKindOfClass:[JavaLangFloat class]]) isNegative = ([((NSNumber *) nil_chk(value)) floatValue] < 0);
  else isNegative = ([((NSNumber *) nil_chk(value)) intValue] < 0);
  if (isNegative) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  else return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationNonnegative;LNSObject;", "LJavaxAnnotationNonnegative;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/Nonnegative;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationNonnegative_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationNonnegative_Checker;
}

@end

void JavaxAnnotationNonnegative_Checker_init(JavaxAnnotationNonnegative_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationNonnegative_Checker *new_JavaxAnnotationNonnegative_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationNonnegative_Checker, init)
}

JavaxAnnotationNonnegative_Checker *create_JavaxAnnotationNonnegative_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationNonnegative_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnegative_Checker)

@implementation JavaxAnnotationNonnull

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationNonnull_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.Nonnull(when=%@)", when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationNonnull_Checker;", (void *)&JavaxAnnotationNonnull__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationNonnull = { "Nonnull", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationNonnull;
}

@end

id<JavaxAnnotationNonnull> create_JavaxAnnotationNonnull(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationNonnull *self = AUTORELEASE([[JavaxAnnotationNonnull alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationNonnull__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSObject_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnull)

@implementation JavaxAnnotationNonnull_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  JavaxAnnotationNonnull_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationNonnull>)qualifierArgument
                                                                       withId:(id)value {
  if (value == nil) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationNonnull;LNSObject;", "LJavaxAnnotationNonnull;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/Nonnull;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationNonnull_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationNonnull_Checker;
}

@end

void JavaxAnnotationNonnull_Checker_init(JavaxAnnotationNonnull_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationNonnull_Checker *new_JavaxAnnotationNonnull_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationNonnull_Checker, init)
}

JavaxAnnotationNonnull_Checker *create_JavaxAnnotationNonnull_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationNonnull_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnull_Checker)

@implementation JavaxAnnotationNullable

- (IOSClass *)annotationType {
  return JavaxAnnotationNullable_class_();
}

- (NSString *)description {
  return @"@javax.annotation.Nullable()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationNullable__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationNullable = { "Nullable", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationNullable;
}

@end

id<JavaxAnnotationNullable> create_JavaxAnnotationNullable() {
  JavaxAnnotationNullable *self = AUTORELEASE([[JavaxAnnotationNullable alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationNullable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, UNKNOWN)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationNullable)

@implementation JavaxAnnotationOverridingMethodsMustInvokeSuper

- (IOSClass *)annotationType {
  return JavaxAnnotationOverridingMethodsMustInvokeSuper_class_();
}

- (NSString *)description {
  return @"@javax.annotation.OverridingMethodsMustInvokeSuper()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationOverridingMethodsMustInvokeSuper__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationOverridingMethodsMustInvokeSuper = { "OverridingMethodsMustInvokeSuper", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationOverridingMethodsMustInvokeSuper;
}

@end

id<JavaxAnnotationOverridingMethodsMustInvokeSuper> create_JavaxAnnotationOverridingMethodsMustInvokeSuper() {
  JavaxAnnotationOverridingMethodsMustInvokeSuper *self = AUTORELEASE([[JavaxAnnotationOverridingMethodsMustInvokeSuper alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationOverridingMethodsMustInvokeSuper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationOverridingMethodsMustInvokeSuper)

@implementation JavaxAnnotationParametersAreNonnullByDefault

- (IOSClass *)annotationType {
  return JavaxAnnotationParametersAreNonnullByDefault_class_();
}

- (NSString *)description {
  return @"@javax.annotation.ParametersAreNonnullByDefault()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationParametersAreNonnullByDefault__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationParametersAreNonnullByDefault = { "ParametersAreNonnullByDefault", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationParametersAreNonnullByDefault;
}

@end

id<JavaxAnnotationParametersAreNonnullByDefault> create_JavaxAnnotationParametersAreNonnullByDefault() {
  JavaxAnnotationParametersAreNonnullByDefault *self = AUTORELEASE([[JavaxAnnotationParametersAreNonnullByDefault alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationParametersAreNonnullByDefault__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)), create_JavaxAnnotationMetaTypeQualifierDefault([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, PARAMETER) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:4 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationParametersAreNonnullByDefault)

@implementation JavaxAnnotationParametersAreNullableByDefault

- (IOSClass *)annotationType {
  return JavaxAnnotationParametersAreNullableByDefault_class_();
}

- (NSString *)description {
  return @"@javax.annotation.ParametersAreNullableByDefault()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationParametersAreNullableByDefault__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationParametersAreNullableByDefault = { "ParametersAreNullableByDefault", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationParametersAreNullableByDefault;
}

@end

id<JavaxAnnotationParametersAreNullableByDefault> create_JavaxAnnotationParametersAreNullableByDefault() {
  JavaxAnnotationParametersAreNullableByDefault *self = AUTORELEASE([[JavaxAnnotationParametersAreNullableByDefault alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationParametersAreNullableByDefault__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationNullable(), create_JavaxAnnotationMetaTypeQualifierDefault([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, PARAMETER) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:4 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationParametersAreNullableByDefault)

@implementation JavaxAnnotationPropertyKey

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationPropertyKey_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.PropertyKey(when=%@)", when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&JavaxAnnotationPropertyKey__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationPropertyKey = { "PropertyKey", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationPropertyKey;
}

@end

id<JavaxAnnotationPropertyKey> create_JavaxAnnotationPropertyKey(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationPropertyKey *self = AUTORELEASE([[JavaxAnnotationPropertyKey alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationPropertyKey__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSObject_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationPropertyKey)

@implementation JavaxAnnotationRegEx

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationRegEx_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.RegEx(when=%@)", when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationRegEx_Checker;", (void *)&JavaxAnnotationRegEx__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationRegEx = { "RegEx", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationRegEx;
}

@end

id<JavaxAnnotationRegEx> create_JavaxAnnotationRegEx(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationRegEx *self = AUTORELEASE([[JavaxAnnotationRegEx alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationRegEx__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationSyntax(@"RegEx", JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationRegEx)

@implementation JavaxAnnotationRegEx_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  JavaxAnnotationRegEx_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationRegEx>)annotation
                                                                       withId:(id)value {
  if (!([value isKindOfClass:[NSString class]])) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  @try {
    JavaUtilRegexPattern_compileWithNSString_((NSString *) cast_chk(value, [NSString class]));
  }
  @catch (JavaUtilRegexPatternSyntaxException *e) {
    return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  }
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationRegEx;LNSObject;", "LJavaxAnnotationRegEx;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/RegEx;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationRegEx_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationRegEx_Checker;
}

@end

void JavaxAnnotationRegEx_Checker_init(JavaxAnnotationRegEx_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationRegEx_Checker *new_JavaxAnnotationRegEx_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationRegEx_Checker, init)
}

JavaxAnnotationRegEx_Checker *create_JavaxAnnotationRegEx_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationRegEx_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationRegEx_Checker)

@implementation JavaxAnnotationSigned

- (IOSClass *)annotationType {
  return JavaxAnnotationSigned_class_();
}

- (NSString *)description {
  return @"@javax.annotation.Signed()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationSigned__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationSigned = { "Signed", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationSigned;
}

@end

id<JavaxAnnotationSigned> create_JavaxAnnotationSigned() {
  JavaxAnnotationSigned *self = AUTORELEASE([[JavaxAnnotationSigned alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationSigned__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationNonnegative(JreLoadEnum(JavaxAnnotationMetaWhen, UNKNOWN)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationSigned)

@implementation JavaxAnnotationSyntax

@synthesize value = value_;
@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationSyntax_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.Syntax(value=%@, when=%@)", value_, when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&JavaxAnnotationSyntax__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationSyntax = { "Syntax", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 2, 2, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationSyntax;
}

@end

id<JavaxAnnotationSyntax> create_JavaxAnnotationSyntax(NSString *value, JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationSyntax *self = AUTORELEASE([[JavaxAnnotationSyntax alloc] init]);
  self->value_ = RETAIN_(value);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationSyntax__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(JavaLangCharSequence_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationSyntax)

@implementation JavaxAnnotationTainted

- (IOSClass *)annotationType {
  return JavaxAnnotationTainted_class_();
}

- (NSString *)description {
  return @"@javax.annotation.Tainted()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationTainted__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationTainted = { "Tainted", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationTainted;
}

@end

id<JavaxAnnotationTainted> create_JavaxAnnotationTainted() {
  JavaxAnnotationTainted *self = AUTORELEASE([[JavaxAnnotationTainted alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationTainted__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationUntainted(JreLoadEnum(JavaxAnnotationMetaWhen, MAYBE)), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationTainted)

@implementation JavaxAnnotationUntainted

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationUntainted_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.Untainted(when=%@)", when_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(when_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&JavaxAnnotationUntainted__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationUntainted = { "Untainted", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationUntainted;
}

@end

id<JavaxAnnotationUntainted> create_JavaxAnnotationUntainted(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationUntainted *self = AUTORELEASE([[JavaxAnnotationUntainted alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationUntainted__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSObject_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationUntainted)

@implementation JavaxAnnotationWillClose

- (IOSClass *)annotationType {
  return JavaxAnnotationWillClose_class_();
}

- (NSString *)description {
  return @"@javax.annotation.WillClose()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationWillClose__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationWillClose = { "WillClose", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationWillClose;
}

@end

id<JavaxAnnotationWillClose> create_JavaxAnnotationWillClose() {
  JavaxAnnotationWillClose *self = AUTORELEASE([[JavaxAnnotationWillClose alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationWillClose__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationWillClose)

@implementation JavaxAnnotationWillCloseWhenClosed

- (IOSClass *)annotationType {
  return JavaxAnnotationWillCloseWhenClosed_class_();
}

- (NSString *)description {
  return @"@javax.annotation.WillCloseWhenClosed()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationWillCloseWhenClosed__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationWillCloseWhenClosed = { "WillCloseWhenClosed", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationWillCloseWhenClosed;
}

@end

id<JavaxAnnotationWillCloseWhenClosed> create_JavaxAnnotationWillCloseWhenClosed() {
  JavaxAnnotationWillCloseWhenClosed *self = AUTORELEASE([[JavaxAnnotationWillCloseWhenClosed alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationWillCloseWhenClosed__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationWillCloseWhenClosed)

@implementation JavaxAnnotationWillNotClose

- (IOSClass *)annotationType {
  return JavaxAnnotationWillNotClose_class_();
}

- (NSString *)description {
  return @"@javax.annotation.WillNotClose()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationWillNotClose__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationWillNotClose = { "WillNotClose", "javax.annotation", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationWillNotClose;
}

@end

id<JavaxAnnotationWillNotClose> create_JavaxAnnotationWillNotClose() {
  JavaxAnnotationWillNotClose *self = AUTORELEASE([[JavaxAnnotationWillNotClose alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationWillNotClose__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationWillNotClose)

@implementation JavaxAnnotationConcurrentGuardedBy

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&JavaxAnnotationConcurrentGuardedBy__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationConcurrentGuardedBy = { "GuardedBy", "javax.annotation.concurrent", ptrTable, methods, NULL, 7, 0x2609, 1, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationConcurrentGuardedBy;
}

@end

IOSObjectArray *JavaxAnnotationConcurrentGuardedBy__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, FIELD), JreLoadEnum(JavaLangAnnotationElementType, METHOD) } count:2 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationConcurrentGuardedBy)

@implementation JavaxAnnotationConcurrentImmutable

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationConcurrentImmutable__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationConcurrentImmutable = { "Immutable", "javax.annotation.concurrent", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationConcurrentImmutable;
}

@end

IOSObjectArray *JavaxAnnotationConcurrentImmutable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationConcurrentImmutable)

@implementation JavaxAnnotationConcurrentNotThreadSafe

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationConcurrentNotThreadSafe__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationConcurrentNotThreadSafe = { "NotThreadSafe", "javax.annotation.concurrent", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationConcurrentNotThreadSafe;
}

@end

IOSObjectArray *JavaxAnnotationConcurrentNotThreadSafe__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationConcurrentNotThreadSafe)

@implementation JavaxAnnotationConcurrentThreadSafe

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationConcurrentThreadSafe__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationConcurrentThreadSafe = { "ThreadSafe", "javax.annotation.concurrent", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationConcurrentThreadSafe;
}

@end

IOSObjectArray *JavaxAnnotationConcurrentThreadSafe__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, CLASS)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationConcurrentThreadSafe)

@implementation JavaxAnnotationMetaExclusive

- (IOSClass *)annotationType {
  return JavaxAnnotationMetaExclusive_class_();
}

- (NSString *)description {
  return @"@javax.annotation.meta.Exclusive()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationMetaExclusive__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMetaExclusive = { "Exclusive", "javax.annotation.meta", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationMetaExclusive;
}

@end

id<JavaxAnnotationMetaExclusive> create_JavaxAnnotationMetaExclusive() {
  JavaxAnnotationMetaExclusive *self = AUTORELEASE([[JavaxAnnotationMetaExclusive alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationMetaExclusive__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaExclusive)

@implementation JavaxAnnotationMetaExhaustive

- (IOSClass *)annotationType {
  return JavaxAnnotationMetaExhaustive_class_();
}

- (NSString *)description {
  return @"@javax.annotation.meta.Exhaustive()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationMetaExhaustive__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMetaExhaustive = { "Exhaustive", "javax.annotation.meta", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationMetaExhaustive;
}

@end

id<JavaxAnnotationMetaExhaustive> create_JavaxAnnotationMetaExhaustive() {
  JavaxAnnotationMetaExhaustive *self = AUTORELEASE([[JavaxAnnotationMetaExhaustive alloc] init]);
  return self;
}

IOSObjectArray *JavaxAnnotationMetaExhaustive__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaExhaustive)

@implementation JavaxAnnotationMetaTypeQualifier

@synthesize applicableTo = applicableTo_;

+ (IOSClass *)applicableToDefault {
  return NSObject_class_();
}

- (IOSClass *)annotationType {
  return JavaxAnnotationMetaTypeQualifier_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.meta.TypeQualifier(applicableTo=%@)", applicableTo_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(applicableTo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(applicableTo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "applicableTo_", "LIOSClass;", .constantValue.asLong = 0, 0x1000, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/lang/Class<*>;", (void *)&JavaxAnnotationMetaTypeQualifier__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMetaTypeQualifier = { "TypeQualifier", "javax.annotation.meta", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, -1, -1, -1, 1 };
  return &_JavaxAnnotationMetaTypeQualifier;
}

@end

id<JavaxAnnotationMetaTypeQualifier> create_JavaxAnnotationMetaTypeQualifier(IOSClass *applicableTo) {
  JavaxAnnotationMetaTypeQualifier *self = AUTORELEASE([[JavaxAnnotationMetaTypeQualifier alloc] init]);
  self->applicableTo_ = RETAIN_(applicableTo);
  return self;
}

IOSObjectArray *JavaxAnnotationMetaTypeQualifier__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaTypeQualifier)

@implementation JavaxAnnotationMetaTypeQualifierDefault

@synthesize value = value_;

+ (IOSObjectArray *)valueDefault {
  return [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationElementType_class_()];
}

- (IOSClass *)annotationType {
  return JavaxAnnotationMetaTypeQualifierDefault_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.meta.TypeQualifierDefault(value=%@)", value_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaLangAnnotationElementType;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "[LJavaLangAnnotationElementType;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&JavaxAnnotationMetaTypeQualifierDefault__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMetaTypeQualifierDefault = { "TypeQualifierDefault", "javax.annotation.meta", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationMetaTypeQualifierDefault;
}

@end

id<JavaxAnnotationMetaTypeQualifierDefault> create_JavaxAnnotationMetaTypeQualifierDefault(IOSObjectArray *value) {
  JavaxAnnotationMetaTypeQualifierDefault *self = AUTORELEASE([[JavaxAnnotationMetaTypeQualifierDefault alloc] init]);
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *JavaxAnnotationMetaTypeQualifierDefault__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaTypeQualifierDefault)

@implementation JavaxAnnotationMetaTypeQualifierNickname

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxAnnotationMetaTypeQualifierNickname__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMetaTypeQualifierNickname = { "TypeQualifierNickname", "javax.annotation.meta", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxAnnotationMetaTypeQualifierNickname;
}

@end

IOSObjectArray *JavaxAnnotationMetaTypeQualifierNickname__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaTypeQualifierNickname)

J2OBJC_INITIALIZED_DEFN(JavaxAnnotationMetaWhen)

JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_values_[4];

@implementation JavaxAnnotationMetaWhen

+ (JavaxAnnotationMetaWhen *)ALWAYS {
  return JreEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

+ (JavaxAnnotationMetaWhen *)UNKNOWN {
  return JreEnum(JavaxAnnotationMetaWhen, UNKNOWN);
}

+ (JavaxAnnotationMetaWhen *)MAYBE {
  return JreEnum(JavaxAnnotationMetaWhen, MAYBE);
}

+ (JavaxAnnotationMetaWhen *)NEVER {
  return JreEnum(JavaxAnnotationMetaWhen, NEVER);
}

+ (IOSObjectArray *)values {
  return JavaxAnnotationMetaWhen_values();
}

+ (JavaxAnnotationMetaWhen *)valueOfWithNSString:(NSString *)name {
  return JavaxAnnotationMetaWhen_valueOfWithNSString_(name);
}

- (JavaxAnnotationMetaWhen_Enum)toNSEnum {
  return (JavaxAnnotationMetaWhen_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaxAnnotationMetaWhen;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALWAYS", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "UNKNOWN", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MAYBE", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NEVER", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(JavaxAnnotationMetaWhen, ALWAYS), &JreEnum(JavaxAnnotationMetaWhen, UNKNOWN), &JreEnum(JavaxAnnotationMetaWhen, MAYBE), &JreEnum(JavaxAnnotationMetaWhen, NEVER), "Ljava/lang/Enum<Ljavax/annotation/meta/When;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationMetaWhen = { "When", "javax.annotation.meta", ptrTable, methods, fields, 7, 0x4011, 2, 4, -1, -1, -1, 6, -1 };
  return &_JavaxAnnotationMetaWhen;
}

+ (void)initialize {
  if (self == [JavaxAnnotationMetaWhen class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(JavaxAnnotationMetaWhen_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      JavaxAnnotationMetaWhen_initWithNSString_withInt_(e, JreEnumConstantName(JavaxAnnotationMetaWhen_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(JavaxAnnotationMetaWhen)
  }
}

@end

void JavaxAnnotationMetaWhen_initWithNSString_withInt_(JavaxAnnotationMetaWhen *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *JavaxAnnotationMetaWhen_values() {
  JavaxAnnotationMetaWhen_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxAnnotationMetaWhen_values_ count:4 type:JavaxAnnotationMetaWhen_class_()];
}

JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_valueOfWithNSString_(NSString *name) {
  JavaxAnnotationMetaWhen_initialize();
  for (int i = 0; i < 4; i++) {
    JavaxAnnotationMetaWhen *e = JavaxAnnotationMetaWhen_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_fromOrdinal(NSUInteger ordinal) {
  JavaxAnnotationMetaWhen_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return JavaxAnnotationMetaWhen_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaWhen)

@implementation JavaxInjectInject

- (IOSClass *)annotationType {
  return JavaxInjectInject_class_();
}

- (NSString *)description {
  return @"@javax.inject.Inject()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxInjectInject__Annotations$0 };
  static const J2ObjcClassInfo _JavaxInjectInject = { "Inject", "javax.inject", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxInjectInject;
}

@end

id<JavaxInjectInject> create_JavaxInjectInject() {
  JavaxInjectInject *self = AUTORELEASE([[JavaxInjectInject alloc] init]);
  return self;
}

IOSObjectArray *JavaxInjectInject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, CONSTRUCTOR), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:3 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationDocumented() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxInjectInject)

@implementation JavaxInjectNamed

@synthesize value = value_;

+ (NSString *)valueDefault {
  return @"";
}

- (IOSClass *)annotationType {
  return JavaxInjectNamed_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.inject.Named(value=%@)", value_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&JavaxInjectNamed__Annotations$0 };
  static const J2ObjcClassInfo _JavaxInjectNamed = { "Named", "javax.inject", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, -1, -1, -1, 0 };
  return &_JavaxInjectNamed;
}

@end

id<JavaxInjectNamed> create_JavaxInjectNamed(NSString *value) {
  JavaxInjectNamed *self = AUTORELEASE([[JavaxInjectNamed alloc] init]);
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *JavaxInjectNamed__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectQualifier(), create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxInjectNamed)

@implementation JavaxInjectProvider

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(get);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _JavaxInjectProvider = { "Provider", "javax.inject", ptrTable, methods, NULL, 7, 0x609, 1, 0, -1, -1, -1, 1, -1 };
  return &_JavaxInjectProvider;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxInjectProvider)

@implementation JavaxInjectQualifier

- (IOSClass *)annotationType {
  return JavaxInjectQualifier_class_();
}

- (NSString *)description {
  return @"@javax.inject.Qualifier()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxInjectQualifier__Annotations$0 };
  static const J2ObjcClassInfo _JavaxInjectQualifier = { "Qualifier", "javax.inject", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxInjectQualifier;
}

@end

id<JavaxInjectQualifier> create_JavaxInjectQualifier() {
  JavaxInjectQualifier *self = AUTORELEASE([[JavaxInjectQualifier alloc] init]);
  return self;
}

IOSObjectArray *JavaxInjectQualifier__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationDocumented() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxInjectQualifier)

@implementation JavaxInjectScope

- (IOSClass *)annotationType {
  return JavaxInjectScope_class_();
}

- (NSString *)description {
  return @"@javax.inject.Scope()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxInjectScope__Annotations$0 };
  static const J2ObjcClassInfo _JavaxInjectScope = { "Scope", "javax.inject", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxInjectScope;
}

@end

id<JavaxInjectScope> create_JavaxInjectScope() {
  JavaxInjectScope *self = AUTORELEASE([[JavaxInjectScope alloc] init]);
  return self;
}

IOSObjectArray *JavaxInjectScope__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationDocumented() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxInjectScope)

@implementation JavaxInjectSingleton

- (IOSClass *)annotationType {
  return JavaxInjectSingleton_class_();
}

- (NSString *)description {
  return @"@javax.inject.Singleton()";
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { (void *)&JavaxInjectSingleton__Annotations$0 };
  static const J2ObjcClassInfo _JavaxInjectSingleton = { "Singleton", "javax.inject", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, -1, -1, -1, -1, 0 };
  return &_JavaxInjectSingleton;
}

@end

id<JavaxInjectSingleton> create_JavaxInjectSingleton() {
  JavaxInjectSingleton *self = AUTORELEASE([[JavaxInjectSingleton alloc] init]);
  return self;
}

IOSObjectArray *JavaxInjectSingleton__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxInjectScope(), create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxInjectSingleton)
